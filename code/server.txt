response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Keppinger']
response in server.py code:
 [(29, 9, 'Jeff_Keppinger')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(9, 11, 'Mathematics')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Angelina']
response in server.py code:
 [(0, 8, 'Angelina_Jolie'), (42, 4, 'Brad_Pitt')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(135, 5, 'Italy'), (38, 11, 'Los_Angeles'), (61, 24, 'Getty_Center'), (525, 9, 'Excavation_(archaeology)'), (214, 10, 'Collection_(artwork)'), (592, 7, 'Mithraic_mysteries'), (116, 12, 'Work_of_art'), (778, 5, 'Greece'), (190, 9, 'Sculpture'), (344, 11, 'Antiquities'), (750, 5, 'Ancient_Rome'), (572, 5, 'Trunk_(anatomy)'), (1176, 6, 'Theft'), (1228, 7, 'Looting'), (546, 19, 'Archaeological_site'), (612, 11, '2nd_century'), (1322, 9, 'Brentwood,_Essex')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Pat Riley', 'Shaquille O ’ Neal', 'Stan Van Gundy', 'Pat Riley', "Shaquille O'Neal"]
response in server.py code:
 [(486, 5, 'Pat_Riley'), (685, 5, 'Pat_Riley'), (136, 9, 'Pat_Riley'), (826, 5, 'Pat_Riley'), (1360, 5, 'Pat_Riley'), (1311, 5, 'Pat_Riley'), (620, 16, "Shaquille_O'Neal"), (1030, 9, 'Pat_Riley'), (1387, 16, "Shaquille_O'Neal"), (1013, 10, 'Miami_Heat'), (741, 14, 'Stan_Van_Gundy'), (119, 10, 'Miami_Heat'), (442, 20, 'Los_Angeles_Clippers'), (541, 9, 'NBA_Finals'), (523, 4, 'Miami_Heat'), (1375, 4, 'Miami_Heat'), (0, 5, 'Pat_Riley'), (1552, 4, 'Miami_Heat'), (420, 4, 'Miami_Heat'), (1237, 15, 'Chicago_Tribune'), (111, 5, 'Miami'), (1519, 18, 'Western_Conference_(NBA)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Minsky', 'Papert']
response in server.py code:
 [(71, 6, 'Seymour_Papert'), (60, 6, 'Marvin_Minsky'), (27, 31, 'MIT_Computer_Science_and_Artificial_Intelligence_Laboratory')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Phil Simmons', 'Andy Caddick', 'Nasser Hussain', 'Peter Such', 'Chris Lewis', 'Mark Butcher', 'Tom Moody', 'Chris Adams', "Tim O'Gorman", 'Paul Johnson', 'Martin McCague']
response in server.py code:
 [(653, 12, 'Andrew_Caddick'), (107, 12, 'Phil_Simmons'), (1599, 12, 'Mark_Butcher'), (762, 7, 'Phil_Simmons'), (65, 6, 'London'), (869, 14, 'Nasser_Hussain'), (1880, 9, 'Tom_Moody'), (969, 7, 'Nasser_Hussain'), (1380, 11, 'Chris_Lewis_(cricketer)'), (1910, 11, 'Chris_Adams_(cricketer)'), (533, 10, 'Grace_Road'), (10, 14, 'Leicestershire_County_Cricket_Club'), (150, 14, 'Leicestershire_County_Cricket_Club'), (1760, 14, 'Worcestershire_County_Cricket_Club'), (1093, 5, 'Essex_County_Cricket_Club'), (545, 14, 'Leicestershire_County_Cricket_Club'), (809, 5, 'Essex_County_Cricket_Club'), (2238, 14, 'Martin_McCague'), (888, 10, 'Peter_Such'), (170, 8, 'Somerset_County_Cricket_Club'), (704, 8, 'Somerset_County_Cricket_Club'), (456, 15, 'Nottinghamshire_County_Cricket_Club'), (1547, 12, 'Warwickshire_County_Cricket_Club'), (2101, 4, 'Kent_County_Cricket_Club'), (392, 4, 'Kent_County_Cricket_Club'), (83, 11, 'West_Indies_cricket_team'), (1227, 4, 'Peter_Such'), (332, 5, 'Essex_County_Cricket_Club'), (1627, 6, 'Surrey_County_Cricket_Club'), (637, 7, 'England_cricket_team'), (1365, 6, 'Surrey_County_Cricket_Club'), (2135, 15, 'Nottinghamshire_County_Cricket_Club'), (1956, 10, 'Derbyshire_County_Cricket_Club'), (1674, 10, 'Derbyshire_County_Cricket_Club'), (1161, 9, 'Yorkshire_County_Cricket_Club'), (944, 9, 'Yorkshire_County_Cricket_Club'), (487, 8, 'Somerset_County_Cricket_Club'), (354, 6, 'Surrey_County_Cricket_Club'), (957, 10, 'Headingley_Stadium'), (339, 10, 'Derbyshire_County_Cricket_Club'), (1932, 12, "Tim_O'Gorman"), (2281, 4, 'Kent_County_Cricket_Club'), (2215, 10, 'England_national_rugby_union_team'), (1583, 7, 'England_cricket_team'), (1359, 4, 'The_Oval'), (1000, 7, 'England_cricket_team'), (1415, 7, 'England_cricket_team'), (1869, 10, 'Australia_national_cricket_team'), (2198, 12, 'Paul_Johnson_(cricketer)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Igor Shkvyrin', 'Takuya Takagi', 'Hiroshige Yanagimoto', 'Hassan Abbas', 'Shu Kamo']
response in server.py code:
 [(1919, 5, 'Japan'), (1069, 13, 'Takuya_Takagi'), (1611, 6, 'Syria'), (68, 6, 'Al_Ain_FC'), (76, 20, 'United_Arab_Emirates'), (1177, 6, 'Syria'), (1676, 6, 'Syria'), (1518, 5, 'Syria'), (1816, 7, 'Syria'), (2056, 6, 'Kuwait'), (737, 6, 'Soviet_Union'), (1318, 5, 'Syria'), (1350, 12, 'Hassan_Abbas'), (1739, 5, 'Japan'), (1751, 8, 'Shu_Kamo'), (2067, 11, 'South_Korea'), (1775, 6, 'Syria'), (2047, 3, 'United_Arab_Emirates'), (771, 9, 'AFC_Asian_Cup'), (570, 7, 'China'), (1992, 4, 'FIFA'), (865, 10, 'Uzbekistan_national_football_team'), (472, 13, 'Igor_Shkvyrin'), (141, 9, 'AFC_Asian_Cup'), (2087, 9, 'Indonesia'), (458, 5, 'Uzbekistan'), (1582, 5, 'Japan'), (353, 10, 'Uzbekistan'), (1062, 5, 'Syria'), (1942, 9, 'FIFA_World_Cup'), (108, 5, 'Japan'), (365, 5, 'China'), (186, 5, 'Syria_national_football_team'), (972, 5, 'Japan'), (1479, 5, 'Betar'), (832, 11, 'Asian_Games'), (1138, 20, 'Hiroshige_Yanagimoto'), (9, 5, 'Japan'), (239, 5, 'China'), (1692, 5, 'Betar'), (30, 5, 'China')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(125, 6, 'Zürich'), (84, 37, 'ETH_Zurich')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['CUTTITTA', 'Marcello Cuttitta', 'Coste', 'Coste', 'Coste', 'Paolo Vaccari', 'Marcello Cuttitta', 'Ivan Francescato', 'Diego Dominguez', 'Francesco Mazzariol', 'Alessandro Troncon', 'Orazio Arancio', 'Massimo Giovanelli', 'Carlo Checchinato', 'Walter Cristofoletto', 'Carlo Orlandi', 'Massimo Cuttitta', 'Nicola Mazzucato', 'Alessandro Moscardi', 'Andrea Castellani']
response in server.py code:
 [(1161, 19, 'Francesco_Mazzariol'), (1182, 18, 'Alessandro_Troncon'), (1254, 17, 'Carlo_Checchinato'), (52, 4, 'Rome'), (1075, 13, 'Paolo_Vaccari'), (1386, 16, 'Nicola_Mazzucato'), (270, 8, 'Massimo_Cuttitta'), (1090, 17, 'Marcello_Cuttitta'), (632, 8, 'Massimo_Cuttitta'), (1144, 15, 'Diego_Domínguez'), (14, 8, 'Massimo_Cuttitta'), (1109, 16, 'Ivan_Francescato'), (1333, 16, 'Massimo_Cuttitta'), (676, 14, '1995_Rugby_World_Cup'), (1273, 20, 'Walter_Cristofoletto'), (83, 17, 'Marcello_Cuttitta'), (1404, 19, 'Alessandro_Moscardi'), (1234, 18, 'Massimo_Giovanelli'), (0, 11, 'Rugby_union'), (432, 10, 'Twickenham_Stadium'), (740, 5, 'Italy'), (1202, 14, 'Orazio_Arancio'), (1425, 17, 'Andrea_Castellani'), (1318, 13, 'Carlo_Orlandi'), (150, 11, 'Murrayfield_Stadium'), (138, 8, 'Scotland_national_football_team'), (68, 5, 'Italy'), (421, 7, 'England_cricket_team'), (907, 5, 'Georges_Coste'), (877, 9, 'FIFA_World_Cup'), (576, 7, 'England_national_football_team'), (497, 5, 'Georges_Coste'), (32, 5, 'Italy'), (762, 7, 'England_cricket_team'), (790, 5, 'Georges_Coste')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(16, 7, 'Arizona')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['elton john']
response in server.py code:
 [(6, 3, 'MP3'), (19, 10, 'Elton_John')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(19, 3, 'Agence_France-Presse'), (2, 9, 'Jerusalem'), (1607, 9, 'West_Bank')]
given spans fix. original text:  Al-Maliki adviser says official who supervised execution is target of probe 
 
BAGHDAD, Iraq - Iraq’s national security adviser told NBC News on Wednesday that three individuals have been arrested in connection with a video of Saddam Hussein’s execution that was leaked. 
 
“I can officially now confirm the arrest of three individuals in the case of the execution of Saddam Hussein,” said Iraqi national security adviser Mowaffak al-Rubaie. 
 
The arrests came after the announcement that officials were interrogating the person suspected of recording Saddam’s hanging via a mobile phone. 
 
“The person who filmed the execution process has been arrested. ... Now he is under interrogation about the goals of his filming,” said an adviser to the prime minister, speaking on condition of anonymity because he was not authorized to talk to the media. “He was arrested by Iraqi forces.” 
 
The video contained audio of witnesses telling Saddam to “Go to hell” and of the former leader responding to taunts that his tormentors were being unmanly. It surfaced on Al-Jazeera television and the Internet late Saturday, the day Saddam was hanged.  
 
The Associated Press quoted an unidentified adviser to Prime Minister Nouri al-Maliki as saying the man arrested was “an official who supervised the execution.”  
 
Al-Maliki announced Tuesday that he had ordered an investigation into the conduct of the execution team, who could be heard taunting Saddam in the moments before his hanging. 
 
A U.S. military spokesman, meanwhile, said the United States would have handled the execution differently had it been in charge.  
 
‘I did not see him taking pictures’ 
On Wednesday, an Iraqi prosecutor who was also present at the execution denied a report that he had accused national security adviser al-Rubaie of possible responsibility for the leaked video. 
 
“I am not accusing Mowaffak al-Rubaie, and I did not see him taking pictures,” Munqith al-Faroon, a prosecutor in the case that sent Saddam to the gallows, told The Associated Press. 
 
“But I saw two of the government officials who were ... present during the execution taking all the video of the execution, using the lights that were there for the official taping of the execution. They used mobile phone cameras. I do not know their names, but I would remember their faces,” al-Faroon said in a telephone interview. 
 
The prosecutor said the two officials were openly taking video pictures, which are believed to be those which appeared on Al-Jazeera satellite and a Web site within hours of Saddam’s execution. 
 
The New York Times on Wednesday reported that al-Faroon told the newspaper “one of two men he had seen holding a cell phone camera aloft to make a video of Mr. Hussein’s last moments up to and past the point where he fell through the trapdoor was Mowaffak al-Rubaie, Mr. Maliki’s national security adviser.” 
 
The Times said it had been unable to reach al-Rubaie for comment. AP also could not reach him Wednesday. His secretary said the security adviser, a close aide to al-Maliki, was in Najaf and would not return until later. 
 
Chants of ‘Muqtada’ 
Al-Faroon said there were 14 Iraqi officials, including himself and another prosecutor, as well as three hangmen present for the execution. All the officials, he said, were flown by U.S. helicopter to the former military intelligence facility where Saddam was put to death in an execution chamber used by his own security men for years. 
 
The prosecutor said he believed all mobile phones had been confiscated before the flight and that some of the officials’ bodyguards, who arrived by car, had smuggled the camera phones to the two officials he had seen taking the video pictures. 
 
Al-Arabiya television reported that the person under arrest is one of the guards who was a member of the execution team, according to an MSNBC translator. There was no further information about whether the person under arrest was a guard or other official. 
 
Some of the last words Saddam heard, according to the leaked cell phone video, were a chant of “Muqtada, Muqtada, Muqtada,” a reference to Muqtada al-Sadr, the radical anti-American Shiite cleric, whose Mahdi Army militia is believed responsible for many killings that have targeted Sunnis and driven many from their homes. 
 
Al-Sadr’s father was killed by Saddam. The militant cleric is a key al-Maliki backer. 
 
U.S. response 
Maj. Gen. William Caldwell, a U.S. military spokesman, told reporters Wednesday that the execution would have been handled differently had U.S. forces been in charge.  
 
“If you are asking me: ‘Would we have done things differently?’ Yes, we would have. But that’s not our decision. That’s the government of Iraq’s decision,” he .  
 
He added that Saddam was “dignified” and “courteous” as he was transferred from US military control to Iraqi custody before he was executed.  
 
“He spoke very well to our military police, as he always had, and when getting off at the prison site he said farewell to his interpreter; he thanked the military police squad,” Caldwell said. 



original word:  forces. forces.
new split:  forces  and  .
[(0, 9), (10, 17), (18, 22), (23, 31), (32, 35), (36, 46), (47, 56), (57, 59), (60, 66), (67, 69), (70, 75), (79, 86), (86, 87), (88, 92), (93, 94), (95, 99), (99, 100), (100, 101), (102, 110), (111, 119), (120, 127), (128, 132), (133, 136), (137, 141), (142, 144), (145, 154), (155, 159), (160, 165), (166, 177), (178, 182), (183, 187), (188, 196), (197, 199), (200, 210), (211, 215), (216, 217), (218, 223), (224, 226), (227, 233), (234, 241), (241, 242), (242, 243), (244, 253), (254, 258), (259, 262), (263, 269), (269, 270), (274, 275), (275, 276), (277, 280), (281, 291), (292, 295), (296, 303), (304, 307), (308, 314), (315, 317), (318, 323), (324, 335), (336, 338), (339, 342), (343, 347), (348, 350), (351, 354), (355, 364), (365, 367), (368, 374), (375, 382), (382, 383), (383, 384), (385, 389), (390, 395), (396, 404), (405, 413), (414, 421), (422, 430), (431, 440), (440, 441), (445, 448), (449, 456), (457, 461), (462, 467), (468, 471), (472, 484), (485, 489), (490, 499), (500, 504), (505, 518), (519, 522), (523, 529), (530, 539), (540, 542), (543, 552), (553, 559), (559, 560), (560, 561), (562, 569), (570, 573), (574, 575), (576, 582), (583, 588), (588, 589), (593, 594), (594, 597), (598, 604), (605, 608), (609, 615), (616, 619), (620, 629), (630, 637), (638, 641), (642, 646), (647, 655), (655, 656), (657, 660), (661, 664), (665, 667), (668, 670), (671, 676), (677, 690), (691, 696), (697, 700), (701, 706), (707, 709), (710, 713), (714, 721), (721, 722), (722, 723), (724, 728), (729, 731), (732, 739), (740, 742), (743, 746), (747, 752), (753, 761), (761, 762), (763, 771), (772, 774), (775, 784), (785, 787), (788, 797), (798, 805), (806, 808), (809, 812), (813, 816), (817, 827), (828, 830), (831, 835), (836, 838), (839, 842), (843, 848), (848, 849), (850, 851), (851, 853), (854, 857), (858, 866), (867, 869), (870, 875), (876, 882), (882, 883)]
{0: 0, 259: 44, 772: 136, 598: 103, 263: 45, 10: 1, 523: 88, 269: 46, 813: 143, 216: 35, 18: 2, 275: 48, 788: 139, 277: 49, 23: 3, 836: 147, 281: 50, 854: 153, 559: 93, 540: 90, 798: 140, 543: 91, 32: 4, 560: 94, 36: 5, 806: 141, 296: 52, 553: 92, 274: 47, 519: 87, 562: 95, 47: 6, 304: 53, 817: 144, 351: 62, 308: 54, 57: 7, 570: 96, 315: 55, 60: 8, 318: 56, 831: 146, 576: 98, 701: 121, 67: 9, 324: 57, 70: 10, 583: 99, 843: 149, 588: 100, 79: 11, 336: 58, 593: 101, 594: 102, 99: 16, 876: 157, 86: 12, 343: 60, 88: 13, 858: 154, 348: 61, 93: 14, 95: 15, 609: 105, 355: 63, 100: 17, 870: 156, 102: 18, 657: 113, 616: 106, 828: 145, 620: 107, 365: 64, 111: 19, 368: 65, 882: 158, 574: 97, 630: 108, 375: 66, 120: 20, 490: 84, 382: 67, 383: 68, 128: 21, 385: 69, 642: 110, 747: 132, 133: 22, 390: 70, 647: 111, 137: 23, 729: 128, 396: 71, 785: 138, 142: 24, 655: 112, 661: 114, 145: 25, 405: 72, 665: 115, 155: 26, 668: 116, 414: 73, 671: 117, 160: 27, 763: 135, 677: 118, 166: 28, 753: 133, 839: 148, 850: 151, 431: 75, 178: 29, 691: 119, 183: 30, 440: 76, 500: 85, 867: 155, 188: 31, 445: 77, 449: 78, 707: 122, 197: 32, 710: 123, 200: 33, 457: 79, 714: 124, 462: 80, 721: 125, 722: 126, 211: 34, 468: 81, 724: 127, 761: 134, 472: 82, 292: 51, 218: 36, 732: 129, 224: 37, 848: 150, 227: 38, 740: 130, 422: 74, 743: 131, 234: 39, 485: 83, 851: 152, 809: 142, 697: 120, 775: 137, 241: 40, 242: 41, 339: 59, 244: 42, 638: 109, 605: 104, 505: 86, 530: 89, 254: 43}
{258: 43, 771: 135, 86: 11, 262: 44, 883: 158, 9: 0, 522: 87, 471: 81, 269: 45, 270: 46, 784: 137, 17: 1, 866: 154, 275: 47, 276: 48, 22: 2, 849: 150, 280: 49, 539: 89, 797: 139, 542: 90, 31: 3, 816: 143, 35: 4, 518: 86, 295: 51, 552: 91, 291: 50, 812: 142, 46: 5, 303: 52, 560: 93, 561: 94, 573: 96, 307: 53, 94: 14, 56: 6, 569: 95, 314: 54, 59: 7, 317: 55, 830: 145, 575: 97, 66: 8, 323: 56, 69: 9, 582: 98, 805: 140, 75: 10, 588: 99, 589: 100, 335: 57, 848: 149, 696: 119, 338: 58, 851: 151, 838: 147, 597: 102, 342: 59, 87: 12, 857: 153, 347: 60, 92: 13, 350: 61, 869: 155, 608: 104, 656: 112, 354: 62, 99: 15, 100: 16, 101: 17, 529: 88, 615: 105, 364: 63, 110: 18, 367: 64, 882: 157, 787: 138, 629: 107, 374: 65, 489: 83, 660: 113, 637: 108, 382: 66, 383: 67, 384: 68, 641: 109, 619: 106, 132: 21, 389: 69, 646: 110, 136: 22, 395: 70, 141: 23, 655: 111, 144: 24, 835: 146, 404: 71, 827: 144, 664: 114, 559: 92, 154: 25, 667: 115, 413: 72, 670: 116, 159: 26, 676: 117, 165: 27, 774: 136, 875: 156, 430: 74, 177: 28, 690: 118, 243: 41, 182: 29, 440: 75, 441: 76, 187: 30, 700: 120, 842: 148, 448: 77, 706: 121, 196: 31, 709: 122, 199: 32, 456: 78, 713: 123, 119: 19, 461: 79, 808: 141, 721: 124, 210: 33, 467: 80, 723: 126, 215: 34, 728: 127, 217: 35, 731: 128, 421: 73, 604: 103, 226: 37, 739: 129, 484: 82, 742: 130, 223: 36, 233: 38, 746: 131, 594: 101, 752: 132, 241: 39, 242: 40, 499: 84, 504: 85, 761: 133, 762: 134, 127: 20, 253: 42, 722: 125, 853: 152}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Al-Maliki', 'Saddam Hussein', 'Saddam Hussein', 'Mowaffak al-Rubaie', 'Nouri al-Maliki', 'Al-Maliki', 'Mowaffak al-Rubaie', 'Mowaffak al-Rubaie', 'Muqtada', 'Muqtada', 'Muqtada', 'Muqtada al-Sadr', 'Al-Sadr', 'William Caldwell']
response in server.py code:
 [(1214, 15, 'Nouri_al-Maliki'), (422, 18, 'Mowaffak_al-Rubaie'), (227, 14, 'Saddam_Hussein'), (4302, 7, 'Muqtada_al-Sadr'), (553, 6, 'Saddam_Hussein'), (1442, 6, 'Saddam_Hussein'), (368, 14, 'Saddam_Hussein'), (935, 6, 'Saddam_Hussein'), (4391, 4, 'United_States'), (4114, 15, 'Muqtada_al-Sadr'), (3046, 9, 'Nouri_al-Maliki'), (3715, 10, 'Al_Arabiya'), (1791, 9, 'Mowaffak_al-Rubaie'), (1534, 13, 'United_States'), (4333, 6, 'Saddam_Hussein'), (4370, 9, 'Nouri_al-Maliki'), (1309, 9, 'Nouri_al-Maliki'), (1121, 6, 'Saddam_Hussein'), (88, 4, 'Iraq'), (4089, 7, 'Muqtada_al-Sadr'), (4071, 7, 'Muqtada_al-Sadr'), (2733, 7, 'Saddam_Hussein'), (4080, 7, 'Muqtada_al-Sadr'), (95, 4, 'Iraq'), (2498, 10, 'Al_Jazeera'), (2577, 14, 'The_New_York_Times'), (0, 9, 'Nouri_al-Maliki'), (4715, 4, 'Iraq'), (3998, 6, 'Saddam_Hussein'), (4756, 6, 'Saddam_Hussein'), (1059, 10, 'Al_Jazeera'), (2927, 9, 'Mowaffak_al-Rubaie'), (4822, 11, 'United_States_Armed_Forces'), (2888, 5, 'The_Times'), (1986, 6, 'Saddam_Hussein'), (133, 8, 'NBC_News'), (1872, 18, 'Mowaffak_al-Rubaie'), (2820, 18, 'Mowaffak_al-Rubaie'), (3377, 6, 'Saddam_Hussein'), (2014, 20, 'Associated_Press'), (3852, 5, 'MSNBC'), (79, 7, 'Baghdad'), (2550, 6, 'Saddam_Hussein'), (1148, 16, 'Associated_Press'), (4545, 11, 'United_States_Armed_Forces'), (4178, 10, 'Mahdi_Army'), (4436, 13, 'United_States_Armed_Forces'), (1089, 8, 'Internet'), (2950, 2, 'Associated_Press'), (4416, 16, 'William_B._Caldwell'), (2525, 8, 'Website'), (870, 12, 'Iraqi_Army'), (2844, 6, 'Nouri_al-Maliki'), (5065, 8, 'William_B._Caldwell'), (4258, 6, 'Sunni_Islam'), (1489, 13, 'United_States_Armed_Forces'), (3064, 5, 'Najaf')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(102, 3, 'United_States'), (54, 10, 'Research'), (68, 32, 'Rensselaer_Polytechnic_Institute')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Robert Wu']
response in server.py code:
 [(149, 9, 'Robert_Wu'), (134, 6, 'Eslite_Bookstore')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['C. Lewis', 'J. Ratcliffe', 'J. Adams', 'J. Russell', 'A. Smith']
response in server.py code:
 [(46, 6, 'London'), (882, 14, 'Worcestershire_County_Cricket_Club'), (545, 12, 'Warwickshire_County_Cricket_Club'), (10, 27, 'County_Championship'), (668, 6, 'Sussex_County_Cricket_Club'), (215, 8, 'Somerset_County_Cricket_Club'), (1007, 15, 'Gloucestershire_County_Cricket_Club'), (842, 9, 'Hampshire_County_Cricket_Club'), (159, 14, 'Leicestershire_County_Cricket_Club'), (332, 9, 'Glamorgan_County_Cricket_Club'), (254, 14, 'Leicestershire_County_Cricket_Club'), (533, 8, 'The_Oval'), (179, 8, 'Somerset_County_Cricket_Club'), (274, 14, 'Leicestershire_County_Cricket_Club'), (99, 7, 'England'), (402, 6, 'Durham_County_Cricket_Club'), (513, 4, 'Kent_County_Cricket_Club'), (300, 8, 'Somerset_County_Cricket_Club'), (458, 15, 'Nottinghamshire_County_Cricket_Club'), (563, 6, 'Surrey_County_Cricket_Club'), (912, 10, 'Derbyshire_County_Cricket_Club'), (726, 10, 'Lancashire_County_Cricket_Club'), (769, 9, 'Middlesex_County_Cricket_Club'), (312, 17, 'Riverside_Ground'), (1062, 16, 'Northamptonshire_County_Cricket_Club'), (997, 7, 'County_Cricket_Ground,_Bristol'), (1038, 10, 'J._Russell_(Essex_cricketer)'), (661, 4, 'County_Cricket_Ground,_Hove'), (867, 12, "Queen's_Park,_Chesterfield"), (147, 9, 'Leicester'), (440, 15, 'Nevill_Ground'), (756, 10, 'Portsmouth'), (236, 10, 'The_Doobie_Brothers'), (525, 6, 'London'), (928, 8, 'John_Adams'), (1099, 8, 'Alan_Smith_(footballer_born_1962)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Hollande']
response in server.py code:
 [(23, 8, 'François_Hollande')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(563, 6, 'London'), (33, 6, 'London'), (15, 5, 'The_Ashes'), (798, 8, 'The_Oval'), (77, 5, 'The_Ashes'), (863, 6, 'London'), (1631, 6, 'London'), (808, 6, 'London'), (1173, 20, 'British_Universities_cricket_team'), (1534, 12, 'Trent_Bridge'), (496, 14, 'Minor_counties_of_English_and_Welsh_cricket'), (435, 20, 'British_Universities_cricket_team'), (1097, 14, 'Leicestershire_County_Cricket_Club'), (902, 6, 'Sussex_County_Cricket_Club'), (883, 15, 'Gloucestershire_County_Cricket_Club'), (1368, 9, 'Glamorgan_County_Cricket_Club'), (51, 9, 'Australia_national_cricket_team'), (1621, 8, 'The_Oval'), (112, 7, 'England_cricket_team'), (669, 14, 'Worcestershire_County_Cricket_Club'), (1486, 8, 'Somerset_County_Cricket_Club'), (912, 6, 'Surrey_County_Cricket_Club'), (1231, 9, 'Hampshire_County_Cricket_Club'), (1297, 10, 'Manchester'), (1404, 9, 'Middlesex_County_Cricket_Club'), (394, 7, 'England'), (1548, 10, 'Nottingham'), (1009, 9, 'Edgbaston_Cricket_Ground'), (225, 9, 'Australia_national_cricket_team'), (1454, 10, 'Headingley_Stadium'), (693, 6, 'Durham_County_Cricket_Club'), (739, 10, 'Headingley_Stadium'), (1575, 4, 'Kent_County_Cricket_Club'), (950, 10, 'Derbyshire_County_Cricket_Club'), (1020, 10, 'Birmingham'), (179, 29, 'Test_and_County_Cricket_Board'), (1283, 12, 'Old_Trafford_Cricket_Ground'), (630, 7, 'Arundel'), (605, 20, "Duke_of_Norfolk's_XI"), (515, 8, 'Scotland'), (1198, 6, 'Oxford'), (751, 5, 'Leeds'), (648, 11, 'Northampton_Town_F.C.'), (1346, 8, 'Scotland_national_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Robert_Bosch_GmbH'), (10, 5, 'Sharp_Corporation')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Dylan', 'Carter']
response in server.py code:
 [(50, 6, 'Jimmy_Carter'), (0, 5, 'Bob_Dylan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Takuya Takagi', 'Hassan Abbas', 'Kenichi Shimokawa', 'Kazuyoshi Miura', 'Naoki Soma', 'Kenichi Shimokawa', 'Hiroshige Yanagimoto', 'Naoki Soma', 'Masami Ihara', 'Norio Omura', 'Motohiro Yamaguchi', 'Masakiyo Maezono', 'Yasuto Honda', 'Takuya Takagi', 'Hiroshi Nanami', 'Kazuyoshi Miura', 'Hiroaki Morishima', 'Masayuki Okano', 'Hassan Abbas', 'Tarek Jabban', 'Khaled Zaher']
response in server.py code:
 [(1376, 18, 'Motohiro_Yamaguchi'), (1341, 12, 'Masami_Ihara'), (1531, 14, 'Masayuki_Okano'), (1359, 11, 'Norio_Omura'), (1507, 17, 'Hiroaki_Morishima'), (1485, 15, 'Kazuyoshi_Miura'), (1263, 5, 'Japan'), (1444, 13, 'Takuya_Takagi'), (47, 6, 'Al_Ain_FC'), (950, 15, 'Kazuyoshi_Miura'), (1464, 14, 'Hiroshi_Nanami'), (1045, 5, 'Kazuyoshi_Miura'), (1422, 12, 'Yasuto_Honda'), (1276, 17, 'Kenichi_Shimokawa'), (1220, 10, 'Naoki_Soma'), (1600, 12, 'Hassan_Abbas'), (55, 20, 'United_Arab_Emirates'), (1778, 12, 'Khaled_Al_Zaher'), (781, 5, 'Japan'), (1325, 10, 'Naoki_Soma'), (199, 13, 'Takuya_Takagi'), (994, 6, 'Takuya_Takagi'), (444, 12, 'Hassan_Abbas'), (1618, 12, 'Tarek_Jabban'), (159, 9, 'AFC_Asian_Cup'), (755, 17, 'Kenichi_Shimokawa'), (810, 6, 'Syria'), (1299, 20, 'Hiroshige_Yanagimoto'), (1111, 5, 'Japan'), (393, 6, 'Syria'), (1551, 5, 'Syria'), (182, 5, 'Syria'), (40, 5, 'Syria'), (587, 5, 'Syria'), (1400, 16, 'Masakiyo_Maezono'), (573, 5, 'Betar'), (1154, 5, 'Betar'), (904, 5, 'Betar'), (134, 5, 'Japan_national_football_team'), (1017, 5, 'Betar'), (25, 5, 'Japan_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(27, 7, 'Fantasy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Joy Bauer', 'Joy Bauer', 'Joy Bauer']
response in server.py code:
 [(2270, 11, 'Whole_grain'), (2250, 11, 'Whole_grain'), (203, 9, 'Joy_Bauer'), (55, 9, 'Joy_Bauer'), (3297, 9, 'Joy_Bauer'), (1276, 38, 'The_American_Journal_of_Clinical_Nutrition'), (505, 8, 'New_Year'), (120, 21, "New_Year's_resolution")]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Andrei Ivanov', 'Ryan Johnson', 'Jean-Luc Brassard', 'Jim Moran', 'Troy Benson', 'Tatjana Mittermayer', 'Tae Satoya', 'Donna Weinbrecht', 'Liz McIntyre']
response in server.py code:
 [(271, 6, 'Canada'), (407, 6, 'Canada'), (165, 6, 'Sweden'), (235, 6, 'Canada'), (50, 6, 'France'), (576, 7, 'Finland'), (546, 6, 'France'), (767, 6, 'Russia'), (304, 6, 'Norway'), (730, 6, 'Russia'), (441, 6, 'France'), (514, 7, 'Germany'), (345, 6, 'France'), (685, 12, 'Elizabeth_McIntyre'), (670, 4, 'United_States'), (472, 4, 'United_States'), (204, 6, 'Russia'), (637, 4, 'United_States'), (373, 4, 'United_States'), (493, 19, 'Tatjana_Mittermayer'), (699, 4, 'United_States'), (801, 6, 'France'), (606, 5, 'Japan'), (652, 16, 'Donna_Weinbrecht'), (252, 17, 'Jean-Luc_Brassard'), (42, 6, 'Tignes'), (594, 10, 'Tae_Satoya'), (362, 9, 'Jim_Moran'), (221, 12, 'Ryan_Johnson_(soccer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Robert Cullen', 'Henry Cullen']
response in server.py code:
 [(52, 9, 'Physician'), (21, 5, 'Judge'), (121, 5, 'Judge'), (7, 6, 'Father'), (96, 6, 'Robert_Cullen_(footballer)'), (76, 6, 'Henry_Cullen'), (62, 12, 'Henry_Cullen'), (27, 13, 'Robert_Cullen_(footballer)'), (92, 3, 'Son')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Hassan Abbas', 'Takuya Takagi']
response in server.py code:
 [(207, 13, 'Takuya_Takagi'), (9, 9, 'AFC_Asian_Cup'), (279, 10, 'Uzbekistan_national_football_team'), (36, 6, 'Al_Ain_FC'), (460, 10, 'Uzbekistan_national_football_team'), (44, 20, 'United_Arab_Emirates'), (181, 12, 'Hassan_Abbas'), (140, 5, 'Syria_national_football_team'), (87, 9, 'AFC_Asian_Cup'), (225, 5, 'Syria'), (132, 5, 'Japan_national_football_team'), (505, 5, 'Syria_national_football_team'), (173, 5, 'Japan'), (485, 5, 'Japan_national_football_team'), (271, 5, 'China_national_football_team'), (525, 5, 'China_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(22, 11, 'Gainesville,_Florida')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['James Tobin', 'James Tobin']
response in server.py code:
 [(29, 15, 'Yale_University'), (149, 4, 'Yale_University'), (115, 17, 'Cowles_Foundation'), (8, 11, 'James_Tobin'), (92, 11, 'James_Tobin'), (183, 9, 'President'), (80, 3, 'Bon_Jovi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Keith Johnson']
response in server.py code:
 [(217, 13, 'Keith_Johnson_(cricket_administrator)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['SHEARER', 'Alan Shearer', 'Tony Adams', 'David Platt', 'Glenn Hoddle', 'Teddy Sheringham', 'Les Ferdinand']
response in server.py code:
 [(371, 5, 'David_Platt_(footballer)'), (94, 12, 'Alan_Shearer'), (1227, 7, 'Alan_Shearer'), (43, 6, 'London'), (473, 7, 'Alan_Shearer'), (697, 4, 'Alan_Shearer'), (361, 5, 'Tony_Adams_(footballer)'), (348, 11, 'David_Platt_(footballer)'), (1093, 7, 'Alan_Shearer'), (533, 12, 'Glenn_Hoddle'), (258, 10, 'Tony_Adams_(footballer)'), (816, 4, 'Alan_Shearer'), (9, 7, 'Alan_Shearer'), (1128, 16, 'Teddy_Sheringham'), (727, 6, 'Glenn_Hoddle'), (1103, 7, 'UEFA_Euro_1996'), (1257, 13, 'Les_Ferdinand'), (298, 8, 'Europe'), (597, 11, 'Southampton_F.C.'), (583, 9, 'Blackburn_Rovers_F.C.'), (183, 9, 'Newcastle_United_F.C.'), (454, 7, 'Moldova_national_football_team'), (1237, 9, 'Newcastle_United_F.C.'), (408, 7, 'England_national_football_team'), (128, 7, 'England_national_football_team'), (426, 9, 'FIFA_World_Cup'), (26, 7, 'England_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Rain']
response in server.py code:
 [(728, 12, 'Pennsylvania'), (1152, 7, 'Midwestern_United_States'), (1228, 19, 'Mid-Atlantic_states'), (81, 10, 'Gulf_Coast_of_the_United_States'), (1053, 6, 'Oregon'), (101, 9, 'Louisiana'), (117, 7, 'Georgia_(U.S._state)'), (411, 8, 'Oklahoma'), (749, 5, 'Maine'), (235, 4, 'Hail'), (183, 13, 'The_Carolinas'), (145, 9, 'Tennessee'), (583, 9, 'Northeastern_United_States'), (667, 15, 'Green_Mountains'), (27, 20, 'Thunderstorm'), (898, 7, 'Rocky_Mountains'), (1035, 10, 'Washington,_D.C.'), (244, 4, 'Wind'), (793, 10, 'Wind_chill'), (1164, 11, 'Great_Lakes'), (498, 39, 'Dallas/Fort_Worth_International_Airport'), (885, 8, 'Western_United_States'), (910, 9, 'Southeastern_United_States'), (1477, 7, 'Cotulla,_Texas'), (215, 9, 'Lightning'), (649, 10, 'Adirondack_Mountains'), (1365, 11, 'Temperature'), (345, 11, 'Ohio_River'), (827, 8, 'Freezing'), (159, 4, 'Rain'), (1214, 9, 'Pacific_Northwest'), (938, 6, 'Great_Plains')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(162, 6, 'Russia'), (46, 8, 'Belgrade'), (137, 10, 'Yugoslavia'), (127, 8, 'Red_Star_Belgrade')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Bill']
response in server.py code:
 [(41, 9, 'Microsoft'), (0, 5, 'Cairo'), (180, 4, 'Bill_Gates')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(16, 3, 'Agence_France-Presse'), (164, 6, 'Riyadh'), (123, 7, 'Baghdad'), (2, 6, 'London')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(6, 6, 'Hotel'), (16, 15, 'Downtown_Disney_(Disneyland_Resort)')]
given spans fix. original text:  Mourners in Michigan welcome body of Ford  
Ex-president 'who meant so much' scheduled to be buried Wednesday 
 
GRAND RAPIDS, Mich. - Moving quietly and solemnly through the moonlight, mourners waited for a chance to file past the casket of Gerald R. Ford, welcoming home the 38th president for a final time and celebrating a man they said embodied Midwest values. 
 
“This is a once-in-lifetime opportunity to pay tribute,” said Karin Lewis, 44, who brought her five boys, ages 6 to 15, to Ford’s presidential museum to pay respects Tuesday night. “He meant so much to this community.” 
 
Ford’s state funeral was to end Wednesday afternoon after a service at Grace Episcopal Church in East Grand Rapids. His body was to be interred during a private burial overlooking the Grand River north of the museum on the museum grounds. 
 
Donald Rumsfeld, who served in Ford’s cabinet as his chief of staff and as his defense secretary, was to deliver a eulogy. Former President Jimmy Carter, who defeated Ford in 1976 but later became a close friend of his former opponent, and Richard Norton Smith, who used to be the director of the Ford museum and presidential library, also were scheduled to speak. 
 
Final salute 
On Tuesday, members of the public jammed streets and waved as Ford’s casket was carried from the Grand Rapids airport, where it arrived following services at Washington National Cathedral. 
 
“You were a paradoxical gift of remarkable intellect and achievement wrapped in a plain brown wrapper,” Michigan Gov. Jennifer Granholm said of Ford. “Welcome home to the people that you reflected so well when you were in Washington.” 
 
Later, members of the public walked from the DeVos Place convention center across a bridge over the Grand River to the Gerald R. Ford Presidential Library and Museum for a final salute. 
 
Some wore formal suits and dresses. Others wore sweat shirts from University of Michigan, where Ford played center on the Wolverines’ undefeated national championship football teams of 1932 and 1933. 
 
“I grew up in Grand Rapids, and President Ford was our legacy,” said Bobbe Taber, 43, who now lives in the Kalamazoo area but came to Grand Rapids to see Ford’s casket. 
 
Michigan National Guard spokeswoman Lynn Chapp said 60,000 people were expected to walk by the casket from the time repose began around 6 p.m. Tuesday until it was scheduled to end at 11 a.m. Wednesday. Lines snaked along several blocks in the city’s downtown as people waited their turn Tuesday night. 
 
'The best of America' 
The service Wednesday at his hometown church, which seats about 350, was to be much smaller than Tuesday’s elaborate national funeral service in Washington, which drew 3,000 people. President Bush and his father spoke Tuesday, as did NBC newsman Tom Brokaw and Ford’s secretary of state, Henry Kissinger, among others. 
 
“In President Ford, the world saw the best of America, and America found a man whose character and leadership would bring calm and healing to one of the most divisive moments in our nation’s history,” President Bush said in his eulogy. 
 
Bush’s father, the first President Bush, called Ford a “Norman Rockwell painting come to life” and pierced the solemnity of the occasion by cracking gentle jokes about Ford’s reputation as an errant golfer. He said Ford knew his golf game was getting better when he began hitting fewer spectators. 
 
Under towering arches of the cathedral, Kissinger paid tribute to Ford’s leadership in achieving nuclear arms control with the Soviets, pushing for the first political agreement between Israel and Egypt and helping to bring majority rule to southern Africa. 
 
“In his understated way he did his duty as a leader, not as a performer playing to the gallery,” Kissinger said. “Gerald Ford had the virtues of small town America.” 
 
Brokaw said in his eulogy that Ford brought to office “no demons, no hidden agenda, no hit list or acts of vengeance,” an oblique reference to the air of subterfuge that surrounded Nixon in his final days. 
 
Ford’s athletic interest was honored, too, in the capital and in Michigan. At the Grand Rapids airport that bears Ford’s name, the University of Michigan band played the school’s famous fight song, “The Victors,” as Ford’s flag-draped casket was transferred to a hearse. 
 
Ford died at 93 on Dec. 26 at his home in Rancho Mirage, Calif. 



original word:  Washington. Washington.
new split:  Washington  and  .
[(0, 8), (9, 11), (12, 20), (21, 28), (29, 33), (34, 36), (37, 41), (44, 56), (57, 61), (62, 67), (68, 70), (71, 75), (75, 76), (77, 86), (87, 89), (90, 92), (93, 99), (100, 109), (113, 118), (119, 125), (125, 126), (127, 132), (133, 134), (135, 141), (142, 149), (150, 153), (154, 162), (163, 170), (171, 174), (175, 184), (184, 185), (186, 194), (195, 201), (202, 205), (206, 207), (208, 214), (215, 217), (218, 222), (223, 227), (228, 231), (232, 238), (239, 241), (242, 248), (249, 251), (252, 256), (256, 257), (258, 267), (268, 272), (273, 276), (277, 281), (282, 291), (292, 295), (296, 297), (298, 303), (304, 308), (309, 312), (313, 324), (325, 326), (327, 330), (331, 335), (336, 340), (341, 349), (350, 357), (358, 364), (364, 365), (369, 370), (370, 374), (375, 377), (378, 379), (380, 396), (397, 408), (409, 411), (412, 415), (416, 423), (423, 424), (424, 425), (426, 430), (431, 436), (437, 442), (442, 443), (444, 446), (446, 447), (448, 451), (452, 459), (460, 463), (464, 468), (469, 473), (473, 474), (475, 479), (480, 481), (482, 484), (485, 487), (487, 488), (489, 491), (492, 496), (496, 497), (497, 498), (499, 511), (512, 518), (519, 521), (522, 525), (526, 534), (535, 542), (543, 548), (548, 549), (550, 551), (551, 553), (554, 559), (560, 562), (563, 567), (568, 570), (571, 575), (576, 586), (586, 587), (591, 595), (595, 596), (596, 597), (598, 603), (604, 611), (612, 615), (616, 618), (619, 622), (623, 632), (633, 642), (643, 648), (649, 650), (651, 658), (659, 661), (662, 667), (668, 677), (678, 684), (685, 687), (688, 692), (693, 698), (699, 705), (705, 706), (707, 710), (711, 715), (716, 719), (720, 722), (723, 725), (726, 734), (735, 741), (742, 743), (744, 751), (752, 758), (759, 770), (771, 774), (775, 780), (781, 786), (787, 792), (793, 795), (796, 799), (800, 806), (807, 809), (810, 813), (814, 820), (821, 828), (828, 829), (833, 839), (840, 848), (848, 849), (850, 853), (854, 860), (861, 863), (864, 868), (868, 869), (869, 870), (871, 878), (879, 881), (882, 885), (886, 891), (892, 894), (895, 900), (901, 904), (905, 907), (908, 911), (912, 919), (920, 929), (929, 930), (931, 934), (935, 937), (938, 945), (946, 947), (948, 954), (954, 955), (956, 962), (963, 972), (973, 978), (979, 985), (985, 986), (987, 990), (991, 999), (1000, 1004), (1005, 1007), (1008, 1012), (1013, 1016), (1017, 1022), (1023, 1029), (1030, 1031), (1032, 1037), (1038, 1044), (1045, 1047), (1048, 1051), (1052, 1058), (1059, 1067), (1067, 1068), (1069, 1072), (1073, 1080), (1081, 1087), (1088, 1093), (1093, 1094), (1095, 1098), (1099, 1103), (1104, 1106), (1107, 1109), (1110, 1113), (1114, 1122), (1123, 1125), (1126, 1129), (1130, 1134), (1135, 1141), (1142, 1145), (1146, 1158), (1159, 1166), (1166, 1167), (1168, 1172), (1173, 1177), (1178, 1187), (1188, 1190), (1191, 1196), (1196, 1197), (1201, 1206), (1207, 1213), (1215, 1217), (1218, 1225), (1225, 1226), (1227, 1234), (1235, 1237), (1238, 1241), (1242, 1248), (1249, 1255), (1256, 1263), (1264, 1267), (1268, 1273), (1274, 1276), (1277, 1281), (1281, 1282), (1282, 1283), (1284, 1290), (1291, 1294), (1295, 1302), (1303, 1307), (1308, 1311), (1312, 1317), (1318, 1324), (1325, 1332), (1332, 1333), (1334, 1339), (1340, 1342), (1343, 1350), (1351, 1360), (1361, 1369), (1370, 1372), (1373, 1383), (1384, 1392), (1393, 1402), (1402, 1403), (1407, 1408), (1408, 1411), (1412, 1416), (1417, 1418), (1419, 1430), (1431, 1435), (1436, 1438), (1439, 1449), (1450, 1459), (1460, 1463), (1464, 1475), (1476, 1483), (1484, 1486), (1487, 1488), (1489, 1494), (1495, 1500), (1501, 1508), (1508, 1509), (1509, 1510), (1511, 1519), (1520, 1523), (1523, 1524), (1525, 1533), (1534, 1542), (1543, 1547), (1548, 1550), (1551, 1555), (1555, 1556), (1557, 1558), (1558, 1565), (1566, 1570), (1571, 1573), (1574, 1577), (1578, 1584), (1585, 1589), (1590, 1593), (1594, 1603), (1604, 1606), (1607, 1611), (1612, 1616), (1617, 1620), (1621, 1625), (1626, 1628), (1629, 1639), (1639, 1640)]
{0: 0, 512: 98, 1110: 216, 1030: 199, 519: 99, 1032: 200, 9: 1, 522: 100, 12: 2, 1282: 248, 526: 101, 1551: 294, 1555: 295, 21: 3, 1558: 297, 535: 102, 1048: 203, 1052: 204, 29: 4, 1566: 298, 543: 103, 1256: 242, 34: 5, 1059: 205, 548: 104, 37: 6, 550: 105, 551: 106, 1166: 225, 554: 107, 1067: 206, 44: 7, 1069: 207, 1621: 309, 1373: 264, 560: 108, 1073: 208, 563: 109, 1557: 296, 1590: 303, 568: 110, 57: 8, 1594: 304, 571: 111, 62: 9, 576: 112, 68: 10, 1008: 195, 71: 11, 1548: 293, 586: 113, 75: 12, 1612: 307, 77: 13, 591: 114, 1104: 214, 1464: 278, 595: 115, 596: 116, 1038: 201, 598: 117, 87: 14, 1520: 288, 100: 17, 90: 15, 604: 118, 93: 16, 1460: 277, 1123: 218, 612: 119, 1511: 287, 1126: 219, 1639: 312, 616: 120, 956: 186, 1130: 220, 619: 121, 623: 122, 113: 18, 1142: 222, 119: 19, 633: 123, 1146: 223, 125: 20, 127: 21, 1351: 261, 643: 124, 133: 22, 135: 23, 649: 125, 1607: 306, 651: 126, 142: 24, 1168: 226, 659: 127, 1173: 227, 150: 25, 1476: 279, 154: 26, 1135: 221, 668: 129, 1450: 276, 163: 27, 1188: 229, 678: 130, 1191: 230, 1308: 253, 171: 28, 1196: 231, 685: 131, 175: 29, 688: 132, 1201: 232, 1114: 217, 693: 133, 1207: 233, 184: 30, 1249: 241, 186: 31, 699: 134, 1099: 213, 1215: 234, 705: 135, 1218: 235, 195: 32, 1626: 310, 711: 137, 1225: 236, 202: 33, 1227: 237, 716: 138, 206: 34, 720: 139, 723: 140, 726: 141, 215: 36, 218: 37, 1402: 267, 735: 142, 1303: 252, 208: 35, 228: 39, 1574: 300, 742: 143, 744: 144, 892: 172, 239: 41, 752: 145, 242: 42, 1235: 238, 1268: 244, 707: 136, 759: 146, 249: 43, 1274: 245, 1407: 268, 252: 44, 298: 53, 256: 45, 1281: 247, 258: 46, 771: 147, 1284: 249, 1238: 239, 775: 148, 1543: 292, 1291: 250, 268: 47, 781: 149, 1045: 202, 1295: 251, 273: 48, 787: 150, 277: 49, 985: 190, 793: 151, 282: 50, 796: 152, 1107: 215, 1629: 311, 901: 174, 800: 153, 1277: 246, 987: 191, 292: 51, 1318: 255, 807: 154, 296: 52, 810: 155, 1159: 224, 1325: 256, 814: 156, 304: 54, 1332: 257, 309: 55, 1334: 258, 1417: 271, 313: 56, 223: 38, 828: 158, 232: 40, 821: 157, 833: 159, 325: 57, 327: 58, 840: 160, 331: 59, 336: 60, 1361: 262, 850: 162, 341: 61, 854: 163, 1081: 209, 1508: 285, 1370: 263, 861: 164, 350: 62, 1509: 286, 864: 165, 868: 166, 869: 167, 358: 63, 871: 168, 1384: 265, 1340: 259, 1393: 266, 364: 64, 1604: 305, 879: 169, 369: 65, 370: 66, 886: 171, 375: 67, 378: 68, 1343: 260, 380: 69, 882: 170, 895: 173, 1408: 269, 1088: 210, 1264: 243, 1412: 270, 662: 128, 905: 175, 1419: 272, 908: 176, 397: 70, 912: 177, 1431: 273, 920: 178, 409: 71, 412: 72, 1178: 228, 1093: 211, 416: 73, 929: 179, 931: 180, 423: 74, 424: 75, 1436: 274, 426: 76, 1095: 212, 1312: 254, 431: 77, 1578: 301, 946: 183, 1523: 289, 948: 184, 437: 78, 1617: 308, 1242: 240, 442: 79, 1439: 275, 444: 80, 446: 81, 1525: 290, 448: 82, 963: 187, 452: 83, 1585: 302, 460: 84, 973: 188, 1487: 281, 464: 85, 1489: 282, 979: 189, 469: 86, 1495: 283, 473: 87, 475: 88, 1501: 284, 991: 192, 480: 89, 848: 161, 482: 90, 1484: 280, 485: 91, 487: 92, 1000: 193, 489: 93, 935: 181, 492: 94, 1005: 194, 954: 185, 496: 95, 497: 96, 499: 97, 1571: 299, 1013: 196, 1017: 197, 938: 182, 1534: 291, 1023: 198}
{1449: 275, 1029: 198, 518: 98, 1031: 199, 8: 0, 521: 99, 11: 1, 525: 100, 1550: 293, 1555: 294, 20: 2, 534: 101, 1047: 202, 1177: 227, 1628: 310, 1051: 203, 28: 3, 1565: 297, 542: 102, 33: 4, 1058: 204, 36: 5, 549: 104, 1196: 230, 551: 105, 41: 6, 1067: 205, 1068: 206, 559: 107, 1072: 207, 562: 108, 1459: 276, 1589: 302, 567: 109, 56: 7, 1593: 303, 570: 110, 61: 8, 575: 111, 955: 185, 67: 9, 1093: 210, 70: 10, 1332: 256, 586: 112, 75: 11, 76: 12, 1037: 200, 1616: 307, 1106: 214, 611: 118, 596: 115, 597: 116, 86: 13, 89: 14, 603: 117, 92: 15, 954: 184, 357: 62, 1122: 217, 99: 16, 1350: 260, 1125: 218, 615: 119, 1640: 312, 1129: 219, 618: 120, 1639: 311, 1606: 305, 109: 17, 622: 121, 1141: 221, 118: 18, 632: 122, 1044: 201, 125: 19, 126: 20, 642: 123, 132: 21, 1558: 296, 134: 22, 1217: 234, 648: 124, 650: 125, 891: 171, 141: 23, 1166: 224, 1167: 225, 658: 126, 1475: 278, 1172: 226, 661: 127, 1113: 216, 1109: 215, 153: 25, 667: 128, 162: 26, 1187: 228, 1225: 235, 677: 129, 1190: 229, 170: 27, 684: 130, 1197: 231, 174: 28, 687: 131, 692: 132, 1206: 232, 1080: 208, 184: 29, 185: 30, 698: 133, 1311: 253, 1213: 233, 705: 134, 194: 31, 1483: 279, 710: 136, 1556: 295, 201: 32, 1226: 236, 715: 137, 205: 33, 719: 138, 722: 139, 725: 140, 214: 35, 1145: 222, 706: 135, 548: 103, 1372: 263, 207: 34, 297: 52, 734: 141, 1317: 254, 1248: 240, 587: 113, 227: 38, 741: 142, 231: 39, 1611: 306, 1542: 291, 1234: 237, 238: 40, 751: 144, 241: 41, 1267: 243, 758: 145, 553: 106, 248: 42, 1273: 244, 251: 43, 1276: 245, 1237: 238, 256: 44, 257: 45, 770: 146, 1283: 248, 1577: 300, 774: 147, 1403: 267, 1290: 249, 267: 46, 780: 148, 1134: 220, 1294: 250, 272: 47, 1573: 299, 786: 149, 276: 48, 1519: 287, 1302: 251, 217: 36, 792: 150, 281: 49, 795: 151, 986: 190, 799: 152, 1584: 301, 1523: 288, 291: 50, 1158: 223, 806: 153, 295: 51, 809: 154, 1263: 242, 1324: 255, 813: 155, 303: 53, 1508: 284, 1416: 270, 308: 54, 222: 37, 999: 192, 312: 55, 820: 156, 1339: 258, 828: 157, 829: 158, 1342: 259, 1255: 241, 1625: 309, 324: 56, 326: 57, 839: 159, 330: 58, 335: 59, 848: 160, 849: 161, 340: 60, 853: 162, 1307: 252, 1369: 262, 860: 163, 349: 61, 863: 164, 868: 165, 869: 166, 870: 167, 1383: 264, 743: 143, 364: 63, 365: 64, 878: 168, 1392: 265, 881: 169, 370: 65, 885: 170, 374: 66, 1281: 246, 377: 67, 1402: 266, 379: 68, 894: 172, 149: 24, 1408: 268, 1547: 292, 1411: 269, 900: 173, 904: 174, 1087: 209, 1418: 271, 907: 175, 396: 69, 911: 176, 1360: 261, 985: 189, 1603: 304, 1430: 272, 919: 177, 408: 70, 1241: 239, 411: 71, 1570: 298, 1438: 274, 415: 72, 929: 178, 930: 179, 1435: 273, 1094: 211, 934: 180, 423: 73, 424: 74, 425: 75, 430: 76, 945: 182, 947: 183, 436: 77, 1463: 277, 1524: 289, 442: 78, 443: 79, 1098: 212, 446: 80, 447: 81, 962: 186, 451: 82, 459: 83, 972: 187, 1486: 280, 463: 84, 1488: 281, 978: 188, 468: 85, 1494: 282, 473: 86, 474: 87, 1103: 213, 1500: 283, 990: 191, 479: 88, 481: 89, 484: 90, 1509: 285, 1510: 286, 487: 91, 488: 92, 491: 93, 1004: 193, 1007: 194, 496: 94, 497: 95, 498: 96, 595: 114, 1012: 195, 937: 181, 1016: 196, 1620: 308, 1282: 247, 1333: 257, 1533: 290, 1022: 197, 511: 97}
given spans fix. original text:  Mourners in Michigan welcome body of Ford  
Ex-president 'who meant so much' scheduled to be buried Wednesday 
 
GRAND RAPIDS, Mich. - Moving quietly and solemnly through the moonlight, mourners waited for a chance to file past the casket of Gerald R. Ford, welcoming home the 38th president for a final time and celebrating a man they said embodied Midwest values. 
 
“This is a once-in-lifetime opportunity to pay tribute,” said Karin Lewis, 44, who brought her five boys, ages 6 to 15, to Ford’s presidential museum to pay respects Tuesday night. “He meant so much to this community.” 
 
Ford’s state funeral was to end Wednesday afternoon after a service at Grace Episcopal Church in East Grand Rapids. His body was to be interred during a private burial overlooking the Grand River north of the museum on the museum grounds. 
 
Donald Rumsfeld, who served in Ford’s cabinet as his chief of staff and as his defense secretary, was to deliver a eulogy. Former President Jimmy Carter, who defeated Ford in 1976 but later became a close friend of his former opponent, and Richard Norton Smith, who used to be the director of the Ford museum and presidential library, also were scheduled to speak. 
 
Final salute 
On Tuesday, members of the public jammed streets and waved as Ford’s casket was carried from the Grand Rapids airport, where it arrived following services at Washington National Cathedral. 
 
“You were a paradoxical gift of remarkable intellect and achievement wrapped in a plain brown wrapper,” Michigan Gov. Jennifer Granholm said of Ford. “Welcome home to the people that you reflected so well when you were in Washington.” 
 
Later, members of the public walked from the DeVos Place convention center across a bridge over the Grand River to the Gerald R. Ford Presidential Library and Museum for a final salute. 
 
Some wore formal suits and dresses. Others wore sweat shirts from University of Michigan, where Ford played center on the Wolverines’ undefeated national championship football teams of 1932 and 1933. 
 
“I grew up in Grand Rapids, and President Ford was our legacy,” said Bobbe Taber, 43, who now lives in the Kalamazoo area but came to Grand Rapids to see Ford’s casket. 
 
Michigan National Guard spokeswoman Lynn Chapp said 60,000 people were expected to walk by the casket from the time repose began around 6 p.m. Tuesday until it was scheduled to end at 11 a.m. Wednesday. Lines snaked along several blocks in the city’s downtown as people waited their turn Tuesday night. 
 
'The best of America' 
The service Wednesday at his hometown church, which seats about 350, was to be much smaller than Tuesday’s elaborate national funeral service in Washington, which drew 3,000 people. President Bush and his father spoke Tuesday, as did NBC newsman Tom Brokaw and Ford’s secretary of state, Henry Kissinger, among others. 
 
“In President Ford, the world saw the best of America, and America found a man whose character and leadership would bring calm and healing to one of the most divisive moments in our nation’s history,” President Bush said in his eulogy. 
 
Bush’s father, the first President Bush, called Ford a “Norman Rockwell painting come to life” and pierced the solemnity of the occasion by cracking gentle jokes about Ford’s reputation as an errant golfer. He said Ford knew his golf game was getting better when he began hitting fewer spectators. 
 
Under towering arches of the cathedral, Kissinger paid tribute to Ford’s leadership in achieving nuclear arms control with the Soviets, pushing for the first political agreement between Israel and Egypt and helping to bring majority rule to southern Africa. 
 
“In his understated way he did his duty as a leader, not as a performer playing to the gallery,” Kissinger said. “Gerald Ford had the virtues of small town America.” 
 
Brokaw said in his eulogy that Ford brought to office “no demons, no hidden agenda, no hit list or acts of vengeance,” an oblique reference to the air of subterfuge that surrounded Nixon in his final days. 
 
Ford’s athletic interest was honored, too, in the capital and in Michigan. At the Grand Rapids airport that bears Ford’s name, the University of Michigan band played the school’s famous fight song, “The Victors,” as Ford’s flag-draped casket was transferred to a hearse. 
 
Ford died at 93 on Dec. 26 at his home in Rancho Mirage, Calif. 



original word:  America. America.
new split:  America  and  .
[(0, 8), (9, 11), (12, 20), (21, 28), (29, 33), (34, 36), (37, 41), (44, 56), (57, 61), (62, 67), (68, 70), (71, 75), (75, 76), (77, 86), (87, 89), (90, 92), (93, 99), (100, 109), (113, 118), (119, 125), (125, 126), (127, 132), (133, 134), (135, 141), (142, 149), (150, 153), (154, 162), (163, 170), (171, 174), (175, 184), (184, 185), (186, 194), (195, 201), (202, 205), (206, 207), (208, 214), (215, 217), (218, 222), (223, 227), (228, 231), (232, 238), (239, 241), (242, 248), (249, 251), (252, 256), (256, 257), (258, 267), (268, 272), (273, 276), (277, 281), (282, 291), (292, 295), (296, 297), (298, 303), (304, 308), (309, 312), (313, 324), (325, 326), (327, 330), (331, 335), (336, 340), (341, 349), (350, 357), (358, 364), (364, 365), (369, 370), (370, 374), (375, 377), (378, 379), (380, 396), (397, 408), (409, 411), (412, 415), (416, 423), (423, 424), (424, 425), (426, 430), (431, 436), (437, 442), (442, 443), (444, 446), (446, 447), (448, 451), (452, 459), (460, 463), (464, 468), (469, 473), (473, 474), (475, 479), (480, 481), (482, 484), (485, 487), (487, 488), (489, 491), (492, 496), (496, 497), (497, 498), (499, 511), (512, 518), (519, 521), (522, 525), (526, 534), (535, 542), (543, 548), (548, 549), (550, 551), (551, 553), (554, 559), (560, 562), (563, 567), (568, 570), (571, 575), (576, 586), (586, 587), (591, 595), (595, 596), (596, 597), (598, 603), (604, 611), (612, 615), (616, 618), (619, 622), (623, 632), (633, 642), (643, 648), (649, 650), (651, 658), (659, 661), (662, 667), (668, 677), (678, 684), (685, 687), (688, 692), (693, 698), (699, 705), (705, 706), (707, 710), (711, 715), (716, 719), (720, 722), (723, 725), (726, 734), (735, 741), (742, 743), (744, 751), (752, 758), (759, 770), (771, 774), (775, 780), (781, 786), (787, 792), (793, 795), (796, 799), (800, 806), (807, 809), (810, 813), (814, 820), (821, 828), (828, 829), (833, 839), (840, 848), (848, 849), (850, 853), (854, 860), (861, 863), (864, 868), (868, 869), (869, 870), (871, 878), (879, 881), (882, 885), (886, 891), (892, 894), (895, 900), (901, 904), (905, 907), (908, 911), (912, 919), (920, 929), (929, 930), (931, 934), (935, 937), (938, 945), (946, 947), (948, 954), (954, 955), (956, 962), (963, 972), (973, 978), (979, 985), (985, 986), (987, 990), (991, 999), (1000, 1004), (1005, 1007), (1008, 1012), (1013, 1016), (1017, 1022), (1023, 1029), (1030, 1031), (1032, 1037), (1038, 1044), (1045, 1047), (1048, 1051), (1052, 1058), (1059, 1067), (1067, 1068), (1069, 1072), (1073, 1080), (1081, 1087), (1088, 1093), (1093, 1094), (1095, 1098), (1099, 1103), (1104, 1106), (1107, 1109), (1110, 1113), (1114, 1122), (1123, 1125), (1126, 1129), (1130, 1134), (1135, 1141), (1142, 1145), (1146, 1158), (1159, 1166), (1166, 1167), (1168, 1172), (1173, 1177), (1178, 1187), (1188, 1190), (1191, 1196), (1196, 1197), (1201, 1206), (1207, 1213), (1215, 1217), (1218, 1225), (1225, 1226), (1227, 1234), (1235, 1237), (1238, 1241), (1242, 1248), (1249, 1255), (1256, 1263), (1264, 1267), (1268, 1273), (1274, 1276), (1277, 1281), (1281, 1282), (1282, 1283), (1284, 1290), (1291, 1294), (1295, 1302), (1303, 1307), (1308, 1311), (1312, 1317), (1318, 1324), (1325, 1332), (1332, 1333), (1334, 1339), (1340, 1342), (1343, 1350), (1351, 1360), (1361, 1369), (1370, 1372), (1373, 1383), (1384, 1392), (1393, 1402), (1402, 1403), (1407, 1408), (1408, 1411), (1412, 1416), (1417, 1418), (1419, 1430), (1431, 1435), (1436, 1438), (1439, 1449), (1450, 1459), (1460, 1463), (1464, 1475), (1476, 1483), (1484, 1486), (1487, 1488), (1489, 1494), (1495, 1500), (1501, 1508), (1508, 1509), (1509, 1510), (1511, 1519), (1520, 1523), (1523, 1524), (1525, 1533), (1534, 1542), (1543, 1547), (1548, 1550), (1551, 1555), (1555, 1556), (1557, 1558), (1558, 1565), (1566, 1570), (1571, 1573), (1574, 1577), (1578, 1584), (1585, 1589), (1590, 1593), (1594, 1603), (1604, 1606), (1607, 1611), (1612, 1616), (1617, 1620), (1621, 1625), (1626, 1628), (1629, 1639), (1639, 1640), (1640, 1641), (1645, 1650), (1650, 1651), (1652, 1659), (1660, 1662), (1663, 1666), (1667, 1673), (1674, 1680), (1681, 1685), (1686, 1689), (1690, 1695), (1696, 1701), (1702, 1712), (1713, 1719), (1720, 1726), (1727, 1728), (1729, 1735), (1736, 1740), (1741, 1744), (1745, 1750), (1751, 1756), (1757, 1759), (1760, 1763), (1764, 1770), (1771, 1773), (1774, 1778), (1779, 1791), (1792, 1799), (1800, 1803), (1804, 1810), (1811, 1814), (1815, 1816), (1817, 1822), (1823, 1829), (1829, 1830), (1834, 1838), (1839, 1843), (1844, 1850), (1851, 1856), (1857, 1860), (1861, 1868), (1868, 1869), (1870, 1876), (1877, 1881), (1882, 1887), (1888, 1894), (1895, 1899), (1900, 1910), (1911, 1913), (1914, 1922), (1922, 1923), (1924, 1929), (1930, 1934), (1935, 1941), (1942, 1948), (1949, 1951), (1952, 1955), (1956, 1966), (1966, 1967), (1968, 1978), (1979, 1987), (1988, 2000), (2001, 2009), (2010, 2015), (2016, 2018), (2019, 2023), (2024, 2027), (2028, 2032), (2032, 2033), (2037, 2038), (2038, 2039), (2040, 2044), (2045, 2047), (2048, 2050), (2051, 2056), (2057, 2063), (2063, 2064), (2065, 2068), (2069, 2078), (2079, 2083), (2084, 2087), (2088, 2091), (2092, 2098), (2098, 2099), (2099, 2100), (2101, 2105), (2106, 2111), (2112, 2117), (2117, 2118), (2119, 2121), (2121, 2122), (2123, 2126), (2127, 2130), (2131, 2136), (2137, 2139), (2140, 2143), (2144, 2153), (2154, 2158), (2159, 2162), (2163, 2167), (2168, 2170), (2171, 2176), (2177, 2183), (2184, 2186), (2187, 2190), (2191, 2195), (2195, 2196), (2196, 2197), (2198, 2204), (2204, 2205), (2209, 2217), (2218, 2226), (2227, 2232), (2233, 2244), (2245, 2249), (2250, 2255), (2256, 2260), (2261, 2267), (2268, 2274), (2275, 2279), (2280, 2288), (2289, 2291), (2292, 2296), (2297, 2299), (2300, 2303), (2304, 2310), (2311, 2315), (2316, 2319), (2320, 2324), (2325, 2331), (2332, 2337), (2338, 2344), (2345, 2346), (2347, 2351), (2352, 2359), (2360, 2365), (2366, 2368), (2369, 2372), (2373, 2382), (2383, 2385), (2386, 2389), (2390, 2392), (2393, 2395), (2396, 2400), (2401, 2410), (2410, 2411), (2412, 2417), (2418, 2424), (2425, 2430), (2431, 2438), (2439, 2445), (2446, 2448), (2449, 2452), (2453, 2457), (2457, 2458), (2458, 2459), (2460, 2468), (2469, 2471), (2472, 2478), (2479, 2485), (2486, 2491), (2492, 2496), (2497, 2504), (2505, 2510), (2510, 2511), (2515, 2519), (2520, 2524), (2525, 2527), (2528, 2535), (2535, 2536), (2538, 2541), (2542, 2549), (2550, 2559), (2560, 2562), (2563, 2566), (2567, 2575), (2576, 2582), (2582, 2583), (2584, 2589), (2590, 2595), (2596, 2601), (2602, 2605), (2605, 2606), (2607, 2610), (2611, 2613), (2614, 2616), (2617, 2621), (2622, 2629), (2630, 2634), (2635, 2642), (2642, 2643), (2643, 2644), (2645, 2654), (2655, 2663), (2664, 2671), (2672, 2679), (2680, 2682), (2683, 2693), (2693, 2694), (2695, 2700), (2701, 2705), (2706, 2711), (2712, 2718), (2718, 2719), (2720, 2729), (2730, 2734), (2735, 2738), (2739, 2742), (2743, 2749), (2750, 2755), (2756, 2763), (2763, 2764), (2765, 2767), (2768, 2771), (2772, 2775), (2776, 2783), (2784, 2787), (2788, 2794), (2795, 2798), (2799, 2803), (2803, 2804), (2804, 2805), (2806, 2815), (2816, 2818), (2819, 2824), (2824, 2825), (2826, 2831), (2832, 2841), (2841, 2842), (2843, 2848), (2849, 2855), (2855, 2856), (2860, 2861), (2861, 2863), (2864, 2873), (2874, 2878), (2878, 2879), (2880, 2883), (2884, 2889), (2890, 2893), (2894, 2897), (2898, 2902), (2903, 2905), (2906, 2913), (2913, 2914), (2915, 2918), (2919, 2926), (2927, 2932), (2933, 2934), (2935, 2938), (2939, 2944), (2945, 2954), (2955, 2958), (2959, 2969), (2970, 2975), (2976, 2981), (2982, 2986), (2987, 2990), (2991, 2998), (2999, 3001), (3002, 3005), (3006, 3008), (3009, 3012), (3013, 3017), (3018, 3026), (3027, 3034), (3035, 3037), (3038, 3041), (3042, 3048), (3048, 3049), (3049, 3050), (3051, 3058), (3058, 3059), (3059, 3060), (3061, 3070), (3071, 3075), (3076, 3080), (3081, 3083), (3084, 3087), (3088, 3094), (3094, 3095), (3099, 3103), (3103, 3104), (3104, 3105), (3106, 3112), (3112, 3113), (3114, 3117), (3118, 3123), (3124, 3133), (3134, 3138), (3138, 3139), (3140, 3146), (3147, 3151), (3152, 3153), (3154, 3155), (3155, 3161), (3162, 3170), (3171, 3179), (3180, 3184), (3185, 3187), (3188, 3192), (3192, 3193), (3194, 3197), (3198, 3205), (3206, 3209), (3210, 3219), (3220, 3222), (3223, 3226), (3227, 3235), (3236, 3238), (3239, 3247), (3248, 3254), (3255, 3260), (3261, 3266), (3267, 3271), (3271, 3272), (3272, 3273), (3274, 3284), (3285, 3287), (3288, 3290), (3291, 3297), (3298, 3304), (3304, 3305), (3306, 3308), (3309, 3313), (3314, 3318), (3319, 3323), (3324, 3327), (3328, 3332), (3333, 3337), (3338, 3341), (3342, 3349), (3350, 3356), (3357, 3361), (3362, 3364), (3365, 3370), (3371, 3378), (3379, 3384), (3385, 3395), (3395, 3396), (3400, 3405), (3406, 3414), (3415, 3421), (3422, 3424), (3425, 3428), (3429, 3438), (3438, 3439), (3440, 3449), (3450, 3454), (3455, 3462), (3463, 3465), (3466, 3470), (3470, 3471), (3471, 3472), (3473, 3483), (3484, 3486), (3487, 3496), (3497, 3504), (3505, 3509), (3510, 3517), (3518, 3522), (3523, 3526), (3527, 3534), (3534, 3535), (3536, 3543), (3544, 3547), (3548, 3551), (3552, 3557), (3558, 3567), (3568, 3577), (3578, 3585), (3586, 3592), (3593, 3596), (3597, 3602), (3603, 3606), (3607, 3614), (3615, 3617), (3618, 3623), (3624, 3632), (3633, 3637), (3638, 3640), (3641, 3649), (3650, 3656), (3656, 3657), (3661, 3662), (3662, 3664), (3665, 3668), (3669, 3680), (3681, 3684), (3685, 3687), (3688, 3691), (3692, 3695), (3696, 3700), (3701, 3703), (3704, 3705), (3706, 3712), (3712, 3713), (3714, 3717), (3718, 3720), (3721, 3722), (3723, 3732), (3733, 3740), (3741, 3743), (3744, 3747), (3748, 3755), (3755, 3756), (3756, 3757), (3758, 3767), (3768, 3772), (3772, 3773), (3774, 3775), (3775, 3781), (3782, 3786), (3787, 3790), (3791, 3794), (3795, 3802), (3803, 3805), (3806, 3811), (3812, 3816), (3817, 3824), (3824, 3825)]
{0: 0, 2048: 386, 2051: 387, 9: 1, 12: 2, 2063: 389, 2065: 390, 21: 3, 29: 4, 2079: 392, 34: 5, 2084: 393, 37: 6, 2088: 394, 44: 7, 2098: 396, 2099: 397, 2101: 398, 2057: 388, 57: 8, 2106: 399, 62: 9, 2112: 400, 68: 10, 2117: 401, 71: 11, 2121: 403, 75: 12, 77: 13, 2127: 405, 3768: 721, 2131: 406, 87: 14, 2137: 407, 90: 15, 2140: 408, 93: 16, 2144: 409, 100: 17, 2154: 410, 2159: 411, 113: 18, 2163: 412, 119: 19, 2168: 413, 2171: 414, 125: 20, 127: 21, 2177: 415, 133: 22, 135: 23, 2184: 416, 364: 64, 2187: 417, 142: 24, 2191: 418, 2195: 419, 2196: 420, 150: 25, 154: 26, 2204: 422, 2209: 423, 163: 27, 1393: 266, 3688: 703, 2218: 424, 171: 28, 370: 66, 175: 29, 2227: 425, 184: 30, 2233: 426, 186: 31, 195: 32, 2245: 427, 2250: 428, 206: 34, 208: 35, 2261: 430, 215: 36, 218: 37, 2268: 431, 3450: 661, 223: 38, 720: 139, 2275: 432, 228: 39, 232: 40, 239: 41, 2289: 434, 242: 42, 2292: 435, 249: 43, 3455: 662, 252: 44, 256: 45, 258: 46, 929: 179, 2311: 439, 2092: 395, 268: 47, 2320: 441, 273: 48, 2325: 442, 282: 50, 2332: 443, 2338: 444, 292: 51, 296: 52, 2345: 445, 298: 53, 2347: 446, 304: 54, 309: 55, 2360: 448, 313: 56, 2366: 449, 2369: 450, 2602: 494, 325: 57, 327: 58, 331: 59, 2383: 452, 336: 60, 2386: 453, 341: 61, 2390: 454, 2393: 455, 2396: 456, 350: 62, 2401: 457, 358: 63, 2410: 458, 2412: 459, 369: 65, 2418: 460, 807: 154, 375: 67, 2425: 461, 378: 68, 380: 69, 2431: 462, 2439: 463, 397: 70, 2446: 464, 2449: 465, 2453: 466, 409: 71, 2457: 467, 2458: 468, 412: 72, 416: 73, 2469: 470, 423: 74, 424: 75, 3484: 668, 426: 76, 2119: 402, 431: 77, 437: 78, 2486: 473, 442: 79, 3487: 669, 444: 80, 446: 81, 448: 82, 2497: 475, 2123: 404, 452: 83, 2505: 476, 460: 84, 2510: 477, 464: 85, 2515: 478, 469: 86, 2520: 479, 473: 87, 475: 88, 2525: 480, 480: 89, 3152: 606, 482: 90, 485: 91, 2535: 482, 489: 93, 2538: 483, 492: 94, 2542: 484, 496: 95, 497: 96, 3155: 608, 2550: 485, 2560: 486, 2563: 487, 2567: 488, 522: 100, 526: 101, 2576: 489, 2472: 471, 771: 147, 2582: 490, 535: 102, 2584: 491, 2479: 472, 3162: 609, 2590: 492, 543: 103, 2596: 493, 550: 105, 551: 106, 554: 107, 2605: 495, 2607: 496, 560: 108, 2611: 497, 2614: 498, 568: 110, 2617: 499, 571: 111, 2622: 500, 576: 112, 2630: 501, 586: 113, 2635: 502, 591: 114, 2642: 503, 2643: 504, 596: 116, 2645: 505, 598: 117, 604: 118, 2655: 506, 612: 119, 616: 120, 2492: 474, 619: 121, 623: 122, 2672: 508, 2680: 509, 633: 123, 2683: 510, 643: 124, 2693: 511, 2695: 512, 649: 125, 651: 126, 2701: 513, 2706: 514, 659: 127, 662: 128, 793: 151, 2712: 515, 668: 129, 2718: 516, 2720: 517, 678: 130, 2730: 518, 685: 131, 519: 99, 2735: 519, 688: 132, 2739: 520, 693: 133, 2743: 521, 699: 134, 2069: 391, 2750: 522, 705: 135, 707: 136, 2756: 523, 711: 137, 2763: 524, 716: 138, 2765: 525, 2768: 526, 723: 140, 2772: 527, 726: 141, 2776: 528, 3194: 615, 979: 189, 735: 142, 2784: 529, 2788: 530, 742: 143, 744: 144, 2795: 531, 2799: 532, 752: 145, 2803: 533, 2804: 534, 2806: 535, 759: 146, 2816: 536, 2819: 537, 2460: 469, 775: 148, 2824: 538, 2826: 539, 1495: 283, 781: 149, 2832: 540, 787: 150, 2841: 541, 2843: 542, 796: 152, 800: 153, 2849: 543, 2855: 544, 810: 155, 2860: 545, 2861: 546, 814: 156, 1501: 284, 2864: 547, 821: 157, 2874: 548, 828: 158, 2878: 549, 2880: 550, 2528: 481, 2884: 551, 840: 160, 2890: 552, 2894: 553, 848: 161, 850: 162, 854: 163, 2903: 555, 2906: 556, 861: 164, 864: 165, 2913: 557, 2915: 558, 868: 166, 869: 167, 2919: 559, 487: 92, 879: 169, 882: 170, 2933: 561, 886: 171, 2935: 562, 2939: 563, 892: 172, 2280: 433, 895: 173, 2945: 564, 2198: 421, 833: 159, 905: 175, 2955: 565, 908: 176, 2959: 566, 912: 177, 985: 190, 920: 178, 2970: 567, 2976: 568, 3568: 682, 3227: 621, 2982: 569, 935: 181, 938: 182, 2987: 570, 2991: 571, 946: 183, 499: 97, 948: 184, 2999: 572, 3002: 573, 956: 186, 3006: 574, 3009: 575, 963: 187, 3013: 576, 3018: 577, 973: 188, 3027: 578, 3236: 622, 3035: 579, 3038: 580, 991: 192, 3042: 581, 3048: 582, 3049: 583, 3239: 623, 1005: 194, 1008: 195, 3058: 585, 3059: 586, 3061: 587, 1017: 197, 2898: 554, 3071: 588, 512: 98, 3171: 610, 3076: 589, 1030: 199, 1032: 200, 3081: 590, 3084: 591, 1038: 201, 3088: 592, 1045: 202, 3094: 593, 1048: 203, 3099: 594, 1052: 204, 3103: 595, 3104: 596, 3106: 597, 1059: 205, 3112: 598, 3114: 599, 1067: 206, 1069: 207, 3118: 600, 1073: 208, 3124: 601, 1081: 209, 3134: 602, 1088: 210, 3138: 603, 3140: 604, 1093: 211, 1095: 212, 3147: 605, 1104: 214, 3154: 607, 1107: 215, 1110: 216, 1114: 217, 1123: 218, 1126: 219, 1130: 220, 871: 168, 3180: 611, 1135: 221, 3185: 612, 3603: 687, 3188: 613, 1142: 222, 3192: 614, 1146: 223, 3198: 616, 3206: 617, 1159: 224, 3210: 618, 1166: 225, 1168: 226, 3220: 619, 1173: 227, 3223: 620, 1178: 228, 2927: 560, 1188: 229, 1191: 230, 1196: 231, 3248: 624, 1201: 232, 1207: 233, 1099: 213, 202: 33, 1215: 234, 1218: 235, 3267: 627, 3271: 628, 3272: 629, 1225: 236, 3274: 630, 1227: 237, 1235: 238, 3285: 631, 1238: 239, 3288: 632, 548: 104, 1242: 240, 3291: 633, 2256: 429, 3298: 634, 1256: 242, 3306: 636, 3309: 637, 1264: 243, 3314: 638, 1268: 244, 3319: 639, 1274: 245, 3324: 640, 1277: 246, 3328: 641, 1281: 247, 1282: 248, 1284: 249, 3333: 642, 3338: 643, 1291: 250, 3342: 644, 1295: 251, 3350: 645, 1303: 252, 1308: 253, 3357: 646, 901: 174, 1312: 254, 3362: 647, 3365: 648, 1318: 255, 3633: 692, 3371: 649, 1325: 256, 563: 109, 1332: 257, 1334: 258, 1681: 321, 3385: 651, 1340: 259, 1343: 260, 3395: 652, 3638: 693, 1249: 241, 3400: 653, 3406: 654, 1361: 262, 3415: 655, 1370: 263, 1373: 264, 3422: 656, 3425: 657, 3429: 658, 1384: 265, 3438: 659, 3440: 660, 3304: 635, 1402: 267, 1407: 268, 1408: 269, 1412: 270, 3463: 663, 1417: 271, 3466: 664, 1419: 272, 3470: 665, 3471: 666, 3473: 667, 1431: 273, 1436: 274, 1439: 275, 3497: 670, 1450: 276, 3505: 671, 1460: 277, 3510: 672, 1464: 278, 3518: 673, 3523: 674, 1476: 279, 3527: 675, 1484: 280, 3534: 676, 1487: 281, 3536: 677, 1489: 282, 595: 115, 931: 180, 2297: 436, 3544: 678, 3548: 679, 3255: 625, 3552: 680, 1508: 285, 1509: 286, 3558: 681, 1511: 287, 2300: 437, 1520: 288, 1523: 289, 1525: 290, 3665: 699, 3578: 683, 1534: 291, 3669: 700, 2304: 438, 3586: 684, 1543: 292, 3593: 685, 1548: 293, 3597: 686, 1551: 294, 1555: 295, 1557: 296, 1558: 297, 3607: 688, 1566: 298, 3615: 689, 3618: 690, 1571: 299, 1574: 300, 3624: 691, 1578: 301, 1585: 302, 1590: 303, 3641: 694, 1594: 304, 3650: 695, 1604: 305, 1607: 306, 3656: 696, 2316: 440, 1612: 307, 3661: 697, 3662: 698, 1617: 308, 1621: 309, 1626: 310, 1629: 311, 3681: 701, 3685: 702, 1639: 312, 1640: 313, 3692: 704, 1645: 314, 3696: 705, 2664: 507, 1650: 315, 1652: 316, 3701: 706, 3704: 707, 3706: 708, 1660: 317, 277: 49, 3712: 709, 3714: 710, 1667: 319, 3718: 711, 3721: 712, 1674: 320, 3723: 713, 3261: 626, 3733: 714, 1686: 322, 1690: 323, 3741: 715, 1696: 324, 3748: 717, 1702: 325, 3755: 718, 3756: 719, 3758: 720, 1713: 326, 1720: 327, 3772: 722, 3774: 723, 1727: 328, 1729: 329, 3782: 725, 1736: 330, 3787: 726, 1741: 331, 3791: 727, 1745: 332, 3795: 728, 1751: 333, 3803: 729, 1757: 334, 3806: 730, 1760: 335, 1764: 336, 3817: 732, 1771: 337, 1774: 338, 3824: 733, 1779: 339, 1663: 318, 1792: 340, 1800: 341, 1804: 342, 1811: 343, 1815: 344, 1817: 345, 1823: 346, 2352: 447, 987: 191, 1829: 347, 1834: 348, 1839: 349, 3379: 650, 1844: 350, 3812: 731, 1851: 351, 1857: 352, 1861: 353, 1868: 354, 1870: 355, 1877: 356, 1882: 357, 1888: 358, 1895: 359, 1900: 360, 1000: 193, 1911: 361, 1914: 362, 1922: 363, 3051: 584, 1924: 364, 1930: 365, 1935: 366, 1942: 367, 1949: 368, 2373: 451, 1952: 369, 1956: 370, 3775: 724, 1351: 261, 1966: 371, 1968: 372, 1979: 373, 1013: 196, 3744: 716, 1988: 374, 2001: 375, 2010: 376, 2016: 377, 2019: 378, 2024: 379, 2028: 380, 954: 185, 2032: 381, 2037: 382, 2038: 383, 2040: 384, 1023: 198, 2045: 385}
{2050: 386, 8: 0, 11: 1, 2063: 388, 2064: 389, 20: 2, 28: 3, 2078: 391, 33: 4, 2083: 392, 36: 5, 2087: 393, 41: 6, 2091: 394, 2056: 387, 2098: 395, 2099: 396, 2100: 397, 56: 7, 2105: 398, 3767: 720, 61: 8, 2111: 399, 67: 9, 2117: 400, 70: 10, 2121: 402, 2122: 403, 75: 11, 76: 12, 2126: 404, 2130: 405, 86: 13, 2136: 406, 89: 14, 2139: 407, 92: 15, 2143: 408, 99: 16, 2153: 409, 109: 17, 2158: 410, 2162: 411, 118: 18, 2167: 412, 2068: 390, 2170: 413, 125: 19, 126: 20, 2176: 414, 132: 21, 134: 22, 2183: 415, 2186: 416, 3095: 593, 141: 23, 2190: 417, 2195: 418, 2196: 419, 149: 24, 153: 25, 2204: 421, 2205: 422, 162: 26, 2217: 423, 170: 27, 174: 28, 2226: 424, 2232: 425, 185: 30, 194: 31, 715: 137, 2244: 426, 201: 32, 205: 33, 207: 34, 2260: 429, 214: 35, 217: 36, 2267: 430, 222: 37, 2274: 431, 227: 38, 2279: 432, 238: 40, 2288: 433, 241: 41, 2291: 434, 248: 42, 251: 43, 2303: 437, 256: 44, 257: 45, 2310: 438, 267: 46, 2319: 440, 272: 47, 276: 48, 281: 49, 2331: 442, 2337: 443, 291: 50, 295: 51, 2344: 444, 297: 52, 2346: 445, 303: 53, 308: 54, 2359: 447, 312: 55, 2365: 448, 2368: 449, 324: 56, 326: 57, 330: 58, 2382: 451, 335: 59, 2385: 452, 3811: 730, 340: 60, 2389: 453, 2392: 454, 2395: 455, 349: 61, 2400: 456, 357: 62, 2535: 481, 2410: 457, 2411: 458, 364: 63, 365: 64, 2417: 459, 370: 65, 374: 66, 2424: 460, 377: 67, 379: 68, 2430: 461, 2438: 462, 396: 69, 2445: 463, 2448: 464, 2452: 465, 408: 70, 2457: 466, 2458: 467, 411: 71, 415: 72, 2459: 468, 2468: 469, 2118: 401, 2471: 470, 424: 74, 425: 75, 430: 76, 436: 77, 1438: 274, 442: 78, 443: 79, 3146: 604, 446: 80, 447: 81, 2496: 474, 451: 82, 2504: 475, 459: 83, 2510: 476, 463: 84, 468: 85, 2519: 478, 473: 86, 474: 87, 3151: 605, 2524: 479, 479: 88, 481: 89, 484: 90, 3153: 606, 2536: 482, 423: 73, 2541: 483, 496: 94, 497: 95, 498: 96, 2549: 484, 511: 97, 2562: 486, 518: 98, 521: 99, 525: 100, 2575: 488, 2478: 471, 2582: 489, 2583: 490, 2589: 491, 542: 102, 2595: 492, 548: 103, 549: 104, 551: 105, 2601: 493, 2605: 494, 2606: 495, 559: 107, 562: 108, 2613: 497, 567: 109, 2616: 498, 570: 110, 2621: 499, 2485: 472, 2629: 500, 2634: 501, 587: 113, 3170: 609, 2642: 502, 2643: 503, 596: 115, 597: 116, 770: 146, 603: 117, 2654: 505, 2491: 473, 2663: 506, 618: 120, 622: 121, 2671: 507, 2679: 508, 632: 122, 2682: 509, 642: 123, 2693: 510, 2694: 511, 648: 124, 650: 125, 2700: 512, 2705: 513, 658: 126, 661: 127, 2711: 514, 667: 128, 2718: 515, 2719: 516, 677: 129, 2729: 517, 684: 130, 2734: 518, 687: 131, 2738: 519, 692: 132, 2742: 520, 698: 133, 3687: 702, 2749: 521, 978: 188, 705: 134, 706: 135, 2755: 522, 710: 136, 2763: 523, 2764: 524, 2767: 525, 722: 139, 2771: 526, 725: 140, 3161: 608, 2775: 527, 2511: 477, 734: 141, 2783: 528, 2787: 529, 741: 142, 743: 143, 2794: 530, 2798: 531, 751: 144, 2803: 532, 2804: 533, 2805: 534, 758: 145, 2815: 535, 2818: 536, 774: 147, 2824: 537, 2825: 538, 780: 148, 2831: 539, 3483: 667, 786: 149, 792: 150, 2841: 540, 2842: 541, 795: 151, 799: 152, 2848: 542, 806: 153, 2855: 543, 2856: 544, 809: 154, 2861: 545, 2863: 546, 820: 156, 2873: 547, 2527: 480, 828: 157, 829: 158, 2878: 548, 2879: 549, 2883: 550, 839: 159, 2889: 551, 2893: 552, 848: 160, 2897: 553, 853: 162, 2902: 554, 2905: 555, 860: 163, 1509: 285, 2913: 556, 2914: 557, 868: 165, 869: 166, 870: 167, 487: 91, 2926: 559, 488: 92, 2932: 560, 885: 170, 2934: 561, 575: 111, 2938: 562, 891: 171, 894: 172, 2197: 420, 2944: 563, 491: 93, 900: 173, 904: 174, 2954: 564, 907: 175, 2958: 565, 911: 176, 919: 177, 2969: 566, 3567: 681, 2975: 567, 929: 178, 930: 179, 2981: 568, 934: 180, 937: 181, 2986: 569, 2990: 570, 945: 182, 947: 183, 2998: 571, 3001: 572, 954: 184, 955: 185, 3005: 573, 3008: 574, 962: 186, 3012: 575, 3017: 576, 972: 187, 3026: 577, 3235: 621, 985: 189, 3034: 578, 3037: 579, 990: 191, 3041: 580, 3238: 622, 849: 161, 3048: 581, 3049: 582, 3050: 583, 1004: 193, 1007: 194, 3058: 584, 3059: 585, 3060: 586, 1016: 196, 2559: 485, 3070: 587, 3075: 588, 1029: 198, 1031: 199, 3080: 589, 3083: 590, 1037: 200, 3087: 591, 1044: 201, 3094: 592, 1047: 202, 1051: 203, 3103: 594, 3104: 595, 3105: 596, 1058: 204, 2566: 487, 3112: 597, 3113: 598, 1067: 205, 1068: 206, 3117: 599, 1072: 207, 3123: 600, 1080: 208, 863: 164, 3133: 601, 1087: 209, 3138: 602, 3139: 603, 1093: 210, 1094: 211, 1098: 212, 1103: 213, 184: 29, 1106: 214, 3155: 607, 3632: 691, 1109: 215, 1113: 216, 719: 138, 1122: 217, 1125: 218, 1129: 219, 3179: 610, 1134: 220, 3184: 611, 3187: 612, 1141: 221, 3192: 613, 3193: 614, 3197: 615, 3205: 616, 1158: 223, 3209: 617, 1166: 224, 1167: 225, 3219: 618, 1172: 226, 878: 168, 3222: 619, 1177: 227, 3226: 620, 1187: 228, 1190: 229, 881: 169, 1196: 230, 1197: 231, 3247: 623, 1206: 232, 2249: 427, 3260: 625, 1213: 233, 1217: 234, 3266: 626, 3271: 627, 3272: 628, 1225: 235, 1226: 236, 1234: 237, 3284: 630, 1237: 238, 3287: 631, 1241: 239, 3290: 632, 2255: 428, 1248: 240, 3297: 633, 1255: 241, 3304: 634, 3305: 635, 3308: 636, 1263: 242, 3313: 637, 1267: 243, 3318: 638, 553: 106, 1273: 244, 3323: 639, 1276: 245, 3327: 640, 1281: 246, 1282: 247, 1283: 248, 3332: 641, 3337: 642, 1290: 249, 3341: 643, 1294: 250, 3349: 644, 1302: 251, 1307: 252, 3356: 645, 1311: 253, 3361: 646, 3364: 647, 1317: 254, 3370: 648, 1324: 255, 2610: 496, 3378: 649, 1332: 256, 1333: 257, 999: 192, 3384: 650, 1339: 258, 1342: 259, 3637: 692, 3395: 651, 3396: 652, 1350: 260, 3405: 653, 1360: 261, 3414: 654, 1369: 262, 1372: 263, 3421: 655, 3424: 656, 3428: 657, 1383: 264, 231: 39, 3438: 658, 3439: 659, 1392: 265, 3449: 660, 1402: 266, 1403: 267, 3454: 661, 1408: 268, 1411: 269, 3462: 662, 1416: 270, 3465: 663, 1418: 271, 3470: 664, 3471: 665, 3472: 666, 1430: 272, 1435: 273, 3486: 668, 3496: 669, 1449: 275, 3504: 670, 1459: 276, 3509: 671, 1463: 277, 586: 112, 3254: 624, 3522: 673, 1475: 278, 3526: 674, 1483: 279, 1486: 280, 3535: 676, 1488: 281, 2296: 435, 595: 114, 1494: 282, 3543: 677, 3547: 678, 1500: 283, 3551: 679, 3664: 698, 2299: 436, 1508: 284, 3557: 680, 1510: 286, 1519: 287, 1523: 288, 1524: 289, 3577: 682, 1533: 290, 3585: 683, 1542: 291, 3592: 684, 1547: 292, 3596: 685, 1550: 293, 3602: 686, 1555: 294, 1556: 295, 1558: 296, 1565: 297, 3614: 688, 3617: 689, 1570: 298, 1573: 299, 3623: 690, 1577: 300, 1584: 301, 1589: 302, 3640: 693, 1593: 303, 3649: 694, 1603: 304, 1606: 305, 3656: 695, 3657: 696, 1611: 306, 3662: 697, 1616: 307, 611: 118, 1620: 308, 2918: 558, 1145: 222, 1625: 309, 1628: 310, 3680: 700, 3684: 701, 1639: 311, 1640: 312, 1641: 313, 615: 119, 3695: 704, 1650: 314, 1651: 315, 3700: 705, 3703: 706, 2324: 441, 1659: 316, 1662: 317, 3712: 708, 3713: 709, 1666: 318, 3691: 703, 3717: 710, 3720: 711, 1673: 319, 3722: 712, 1680: 320, 3732: 713, 1685: 321, 3534: 675, 1689: 322, 3740: 714, 1695: 323, 3747: 716, 1701: 324, 534: 101, 3755: 717, 3756: 718, 3757: 719, 1712: 325, 1719: 326, 3772: 721, 3773: 722, 1726: 327, 3775: 723, 1728: 328, 3781: 724, 1735: 329, 3786: 725, 1740: 330, 3790: 726, 1744: 331, 3794: 727, 1750: 332, 3705: 707, 3802: 728, 1756: 333, 3805: 729, 1759: 334, 1763: 335, 3816: 731, 1770: 336, 1773: 337, 3824: 732, 3825: 733, 1778: 338, 2644: 504, 1791: 339, 3517: 672, 1799: 340, 3606: 687, 1803: 341, 1810: 342, 1814: 343, 1816: 344, 2351: 446, 986: 190, 1822: 345, 1829: 346, 1830: 347, 1838: 348, 1843: 349, 1850: 350, 1856: 351, 1860: 352, 1868: 353, 1869: 354, 1876: 355, 1881: 356, 1887: 357, 813: 155, 1894: 358, 1899: 359, 1910: 360, 1913: 361, 1922: 362, 1923: 363, 1929: 364, 1934: 365, 3668: 699, 1941: 366, 2315: 439, 2372: 450, 1948: 367, 1951: 368, 1955: 369, 1966: 370, 1967: 371, 1012: 195, 1978: 372, 3743: 715, 1987: 373, 2000: 374, 2009: 375, 2015: 376, 2018: 377, 2023: 378, 2027: 379, 2032: 380, 2033: 381, 1022: 197, 2038: 382, 2039: 383, 3273: 629, 2044: 384, 2047: 385}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Gerald R. Ford', 'Donald Rumsfeld', 'President Jimmy Carter', 'Richard Norton Smith', 'Jennifer Granholm', 'President Ford', 'President Bush', 'Tom Brokaw', 'Henry Kissinger', 'President Ford', 'President Bush', 'President Bush', 'Norman Rockwell', 'Gerald Ford', 'Nixon']
response in server.py code:
 [(3267, 4, 'Gerald_Ford'), (864, 4, 'Gerald_Ford'), (3466, 4, 'Gerald_Ford'), (127, 5, 'Michigan'), (2799, 4, 'Gerald_Ford'), (2826, 15, 'Henry_Kissinger'), (3314, 4, 'Gerald_Ford'), (2906, 7, 'United_States'), (4104, 8, 'Michigan'), (2919, 7, 'United_States'), (12, 8, 'Michigan'), (2144, 9, 'Kalamazoo,_Michigan'), (1130, 4, 'Gerald_Ford'), (4153, 4, 'Gerald_Ford'), (2864, 14, 'Gerald_Ford'), (492, 4, 'Gerald_Ford'), (2191, 4, 'Gerald_Ford'), (2720, 14, 'George_W._Bush'), (1277, 4, 'Gerald_Ford'), (2528, 7, 'United_States'), (3861, 4, 'Gerald_Ford'), (1551, 4, 'Gerald_Ford'), (1511, 8, 'Michigan'), (3440, 9, 'Henry_Kissinger'), (591, 4, 'Gerald_Ford'), (3817, 7, 'United_States'), (4313, 4, 'Gerald_Ford'), (2069, 14, 'Gerald_Ford'), (3061, 14, 'George_W._Bush'), (4255, 4, 'Gerald_Ford'), (1000, 4, 'Gerald_Ford'), (3124, 14, 'George_W._Bush'), (2784, 10, 'Tom_Brokaw'), (4039, 4, 'Gerald_Ford'), (2051, 12, 'Grand_Rapids,_Michigan'), (350, 7, 'Midwestern_United_States'), (3830, 6, 'Tom_Brokaw'), (1373, 29, 'Washington_National_Cathedral'), (1930, 4, 'Gerald_Ford'), (963, 22, 'Jimmy_Carter'), (1900, 22, 'University_of_Michigan'), (2683, 10, 'Washington,_D.C.'), (3758, 9, 'Henry_Kissinger'), (242, 14, 'Gerald_Ford'), (1629, 10, 'Washington,_D.C.'), (2171, 12, 'Grand_Rapids,_Michigan'), (4170, 22, 'University_of_Michigan'), (3597, 5, 'Egypt'), (4355, 13, 'Rancho_Mirage,_California'), (3527, 7, 'Soviet_Union'), (2772, 3, 'NBC'), (4011, 5, 'Richard_Nixon'), (113, 12, 'Grand_Rapids,_Michigan'), (3586, 6, 'Israel'), (3641, 15, 'South_Africa'), (1956, 10, 'Michigan_Wolverines'), (833, 15, 'Donald_Rumsfeld'), (3775, 11, 'Gerald_Ford'), (4238, 11, 'The_Victors'), (3155, 15, 'Norman_Rockwell'), (1073, 20, 'Richard_Norton_Smith'), (37, 4, 'Ford_Motor_Company'), (1764, 46, 'Gerald_R._Ford_Presidential_Library'), (1745, 11, 'Grand_River_(Michigan)'), (775, 11, 'Grand_River_(Michigan)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(266, 4, 'South_Carolina'), (132, 14, 'North_Carolina'), (151, 14, 'South_Carolina'), (453, 16, 'Celanese'), (290, 4, 'North_Carolina'), (804, 14, 'South_Carolina'), (740, 16, 'Celanese'), (853, 7, 'Hoechst_AG'), (276, 12, 'Fayetteville,_North_Carolina'), (247, 17, 'Darlington_County,_South_Carolina'), (926, 8, 'Celanese'), (608, 24, 'Federal_Trade_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['His', 'James D. Watson', 'Francis Crick', 'Luria']
response in server.py code:
 [(224, 13, 'United_States'), (32, 18, 'Indiana_University'), (83, 15, 'James_Watson'), (209, 7, 'Citizenship'), (62, 16, 'Postgraduate_education'), (150, 13, 'Francis_Crick'), (182, 5, 'Alexander_Luria')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Saeed Anwar', 'Zahoor Elahi', 'Germon', 'Astle', 'Wasim Akram', 'Shahid Afridi', 'Moin Khan', 'Astle', 'Waqar Younis', 'Germon', 'Saqlain Mushtaq', 'Salim Malik', 'Doull', 'Kennedy', 'Astle', 'B . Young', 'Moin Khan', 'C. Spearman', 'Moin Khan', 'S. Fleming', 'Salim Malik', 'C. Harris', 'Moin Khan', 'R. Kennedy', 'Wasim Akram', 'Waqar Younis', 'Saqlain Mushtaq', 'Shahid Afridi', 'Salim Malik']
response in server.py code:
 [(213, 11, 'Saeed_Anwar'), (1507, 11, 'Saleem_Malik'), (1137, 9, 'Moin_Khan'), (893, 9, 'Moin_Khan'), (927, 9, 'Moin_Khan'), (1059, 11, 'Saleem_Malik'), (905, 5, 'Waqar_Younis'), (368, 11, 'Wasim_Akram'), (1187, 5, 'Waqar_Younis'), (1360, 11, 'Wasim_Akram'), (416, 9, 'Moin_Khan'), (530, 11, 'Saleem_Malik'), (939, 5, 'Wasim_Akram'), (1090, 5, 'Wasim_Akram'), (1149, 5, 'Wasim_Akram'), (1394, 12, 'Waqar_Younis'), (445, 12, 'Waqar_Younis'), (391, 13, 'Shahid_Afridi'), (1024, 7, 'Saqlain_Mushtaq'), (1483, 13, 'Shahid_Afridi'), (479, 15, 'Saqlain_Mushtaq'), (1427, 15, 'Saqlain_Mushtaq'), (972, 7, 'Saqlain_Mushtaq'), (1561, 8, 'Pakistan_national_cricket_team'), (351, 6, 'Lee_Germon'), (204, 8, 'Pakistan_national_cricket_team'), (255, 12, 'Zahoor_Elahi'), (1002, 6, 'Shahid_Afridi'), (461, 6, 'Lee_Germon'), (428, 5, 'Nathan_Astle'), (167, 8, 'Pakistan_national_cricket_team'), (1115, 6, 'Shahid_Afridi'), (360, 5, 'Nathan_Astle'), (836, 5, 'Nathan_Astle'), (84, 8, 'Pakistan'), (70, 3, 'Greenwich_Mean_Time'), (10, 8, 'Pakistan_national_cricket_team'), (75, 7, 'Sialkot'), (862, 11, 'New_Zealand_national_cricket_team'), (1623, 7, 'Karachi'), (312, 8, 'Craig_Spearman'), (1195, 10, 'Ray_Kennedy'), (1074, 9, 'Clifford_Harris'), (180, 11, 'New_Zealand_national_cricket_team'), (323, 7, 'Michael_Vaughan'), (21, 11, 'New_Zealand_national_cricket_team'), (720, 5, 'Simon_Doull'), (794, 7, 'Michael_Vaughan'), (812, 6, 'Ryan_Harris_(cricketer)'), (497, 6, 'Ryan_Harris_(cricketer)'), (771, 6, 'Chris_Cairns'), (270, 6, 'Chris_Cairns'), (470, 6, 'Ryan_Harris_(cricketer)'), (436, 6, 'Ryan_Harris_(cricketer)'), (382, 6, 'Ryan_Harris_(cricketer)'), (407, 6, 'Ryan_Harris_(cricketer)'), (983, 10, 'Seán_Fleming')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Jesus Christ']
response in server.py code:
 [(59, 12, 'Jesus'), (5, 18, 'Minister_(Christianity)'), (29, 8, 'Activism'), (173, 6, 'Church_(building)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(47, 6, 'London'), (147, 6, 'Exeter_City_F.C.'), (136, 8, 'Plymouth_Argyle_F.C.')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Indira Gandhi']
response in server.py code:
 [(120, 10, 'Journalist'), (959, 10, 'Journalism'), (1178, 13, 'Indira_Gandhi'), (98, 5, 'India'), (788, 19, 'University_of_Calcutta'), (191, 12, 'Brain_tumor'), (529, 14, 'Prasar_Bharati'), (562, 11, 'Corporation'), (1021, 24, 'Communist_Party_of_India'), (261, 8, 'Politics')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Cosmin Contra', 'Mihai Tararache']
response in server.py code:
 [(185, 13, 'Cosmin_Contra'), (51, 9, 'Bucharest'), (123, 8, 'Europe'), (207, 15, 'Mihai_Tararache'), (22, 9, 'Lithuania_national_football_team'), (85, 9, 'Lithuania_national_football_team'), (9, 7, 'Romania_national_football_team'), (175, 7, 'Romania_national_football_team'), (230, 9, 'Lithuania_national_football_team'), (72, 7, 'Romania_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Mayall']
response in server.py code:
 [(40, 4, 'Rock_music'), (59, 6, 'John_Mayall'), (23, 5, 'Blues')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(57, 6, 'Moscow'), (307, 7, 'Russia'), (471, 17, 'Manchester_United_F.C.'), (75, 15, 'FC_Rotor_Volgograd'), (649, 6, 'FC_Alania_Vladikavkaz'), (37, 9, 'Volgograd'), (182, 13, 'FC_Dynamo_Moscow'), (671, 13, 'FC_Dynamo_Moscow'), (508, 8, 'UEFA_Europa_League'), (406, 14, 'FC_Lada-Togliatti_Togliatti'), (690, 9, 'Volgograd'), (389, 5, 'FC_Rotor_Volgograd'), (759, 6, 'Moscow'), (558, 5, 'FC_Rotor_Volgograd'), (9, 5, 'FC_Rotor_Volgograd'), (252, 5, 'FC_Rotor_Volgograd')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 18, 'Emerson_Radio')]
given spans fix. original text:  Muslim with U.S. family is held, turned away 
Authorities detain businessman of Syrian descent for four days in Las Vegas 
 
FRESNO, Calif. - A German businessman of Syrian descent who wanted to surprise his daughter with a holiday visit was detained for four days in a Las Vegas holding cell before being sent back home without explanation. 
 
A civil rights group called the U.S. authorities’ treatment of Majed Shehadeh a case of anti-Muslim discrimination. 
 
Shehadeh, 62, flew from Frankfurt to Las Vegas last Thursday, hoping to meet with his wife and drive to Bakersfield, California, where his American-born daughter had just gotten news she had passed the California bar exam. Instead, he wound up shivering in a holding cell without ever being told why he couldn’t enter the country, he said. 
 
Roxanne Hercules, a spokeswoman for U.S. Customs and Border Protection, confirmed Tuesday that Shehadeh was denied entry, but would not discuss specifics of his case. She said Shehadeh’s visa waiver could have been denied because “he could have a criminal record, or it could be a terrorism issue.” 
 
The detention follows a series of similar incidents involving Muslim passengers, according to the Council on American-Islamic Relations. 
 
In October, an Islamic scholar from South Africa was denied entry at San Francisco International Airport. A month later, six imams were taken off a US Airways flight from Minneapolis to Phoenix after a passenger reported overhearing them criticize the U.S. war in Iraq. 
 
“Overall these cases send a message that Muslims are second-class citizens who can be detained and kept from their families,” said Affad Shaikh, a civil rights coordinator for CAIR. 
 
‘Nobody ever informed me why’ 
Shehadeh touched down Thursday afternoon on a direct Condor Airlines flight to McCarran International Airport, where his American wife was waiting to pick him up. The couple had planned to visit family in the Las Vegas area, before surprising their daughter for the New Year and celebrating her wedding anniversary in Central California. 
 
“I gave them my German passport, and he looked to see which countries I visited. He found I had stamps that looked like Arabic and asked if they were fake,” Shehadeh said Tuesday in a phone interview from his home in Alzenau, a small Bavarian village. 
 
“Nobody ever informed me why I was being questioned,” he said. “All that was ever told to me was this had to do with Washington.” 
 
After being interrogated by Border Protection and FBI agents for more than 12 hours at the airport, Shehadeh said he was handcuffed and transported in the back of police car to a North Las Vegas jail. Officials told family members they had denied Shehadeh’s visa waiver, which grants German citizens the right to enter the U.S. with no additional paperwork, said his wife Joanne Mulligan. 
 
Officials with U.S. Immigration and Customs Enforcement said they could not comment on why he was denied entry. FBI and airport officials in Las Vegas also declined comment. 
 
‘Never even had a speeding ticket’ 
An aide to Sen. Dianne Feinstein later told the family that Shehadeh was on a “look-out list,” Mulligan said. Feinstein’s office confirmed Tuesday that the family contacted her, but wouldn’t comment further. 
 
“I said you’ve got to be joking me, he’s never even had a speeding ticket,” said Mulligan, a retired math teacher for the U.S. military. “I mean, we’re Muslims, and we travel a lot. Maybe the countries we travel to are not the countries they want you to visit.” 
 
Once in the holding facility, Shehadeh said he was stripped of his shoes, jacket and prescribed heart medicine and locked in a cell with about 25 other detainees. There was one toilet in the middle of the room, and access to a telephone was extremely limited, he said. 
 
On Sunday, he was released and sent back to Frankfurt on the same charter airline. 
 
Shehadeh’s daughter Majida Shehadeh said she was glad her father made it home, but feared he wouldn’t be able to return to visit. 
 
“I used to be happy I moved here,” she said. “But now I can’t wait for when I leave here. The mentality is not what it was like beforehand.” 



original word:  Washington. Washington.
new split:  Washington  and  .
[(0, 6), (7, 11), (12, 16), (17, 23), (24, 26), (27, 31), (31, 32), (33, 39), (40, 44), (46, 57), (58, 64), (65, 76), (77, 79), (80, 86), (87, 94), (95, 98), (99, 103), (104, 108), (109, 111), (112, 115), (116, 121), (125, 131), (131, 132), (133, 139), (140, 141), (142, 143), (144, 150), (151, 162), (163, 165), (166, 172), (173, 180), (181, 184), (185, 191), (192, 194), (195, 203), (204, 207), (208, 216), (217, 221), (222, 223), (224, 231), (232, 237), (238, 241), (242, 250), (251, 254), (255, 259), (260, 264), (265, 267), (268, 269), (270, 273), (274, 279), (280, 287), (288, 292), (293, 299), (300, 305), (306, 310), (311, 315), (316, 320), (321, 328), (329, 340), (340, 341), (345, 346), (347, 352), (353, 359), (360, 365), (366, 372), (373, 376), (377, 381), (382, 393), (393, 394), (395, 404), (405, 407), (408, 413), (414, 422), (423, 424), (425, 429), (430, 432), (433, 444), (445, 459), (459, 460), (464, 472), (472, 473), (474, 476), (476, 477), (478, 482), (483, 487), (488, 497), (498, 500), (501, 504), (505, 510), (511, 515), (516, 524), (524, 525), (526, 532), (533, 535), (536, 540), (541, 545), (546, 549), (550, 554), (555, 558), (559, 564), (565, 567), (568, 579), (579, 580), (581, 591), (591, 592), (593, 598), (599, 602), (603, 616), (617, 625), (626, 629), (630, 634), (635, 641), (642, 646), (647, 650), (651, 654), (655, 661), (662, 665), (666, 676), (677, 680), (681, 685), (685, 686), (687, 694), (694, 695), (696, 698), (699, 704), (705, 707), (708, 717), (718, 720), (721, 722), (723, 730), (731, 735), (736, 743), (744, 748), (749, 754), (755, 759), (760, 763), (764, 766), (767, 773), (773, 774), (774, 775), (776, 781), (782, 785), (786, 793), (793, 794), (795, 797), (798, 802), (802, 803), (807, 814), (815, 823), (823, 824), (825, 826), (827, 838), (839, 842), (843, 847), (848, 855), (856, 859), (860, 866), (867, 877), (877, 878), (879, 888), (889, 896), (897, 901), (902, 910), (911, 914), (915, 921), (922, 927), (927, 928), (929, 932), (933, 938), (939, 942), (943, 950), (951, 960), (961, 963), (964, 967), (968, 972), (972, 973), (974, 977), (978, 982), (983, 991), (991, 992), (992, 993), (994, 998), (999, 1005), (1006, 1011), (1012, 1016), (1017, 1021), (1022, 1028), (1029, 1036), (1037, 1038), (1038, 1040), (1041, 1046), (1047, 1051), (1052, 1053), (1054, 1062), (1063, 1069), (1069, 1070), (1071, 1073), (1074, 1076), (1077, 1082), (1083, 1085), (1086, 1087), (1088, 1097), (1098, 1104), (1104, 1105), (1109, 1112), (1113, 1122), (1123, 1130), (1131, 1132), (1133, 1139), (1140, 1142), (1143, 1150), (1151, 1160), (1161, 1170), (1171, 1177), (1178, 1188), (1188, 1189), (1190, 1199), (1200, 1202), (1203, 1206), (1207, 1214), (1215, 1217), (1218, 1234), (1235, 1244), (1244, 1245), (1249, 1251), (1252, 1259), (1259, 1260), (1261, 1263), (1264, 1271), (1272, 1279), (1280, 1284), (1285, 1290), (1291, 1297), (1298, 1301), (1302, 1308), (1309, 1314), (1315, 1317), (1318, 1321), (1322, 1331), (1332, 1345), (1346, 1353), (1353, 1354), (1355, 1356), (1357, 1362), (1363, 1368), (1368, 1369), (1370, 1373), (1374, 1379), (1380, 1384), (1385, 1390), (1391, 1394), (1395, 1396), (1397, 1399), (1400, 1407), (1408, 1414), (1415, 1419), (1420, 1431), (1432, 1434), (1435, 1442), (1443, 1448), (1449, 1450), (1451, 1460), (1461, 1469), (1470, 1481), (1482, 1486), (1487, 1496), (1497, 1500), (1501, 1505), (1506, 1509), (1510, 1512), (1513, 1517), (1517, 1518), (1522, 1523), (1523, 1530), (1531, 1536), (1537, 1542), (1543, 1547), (1548, 1549), (1550, 1557), (1558, 1562), (1563, 1570), (1571, 1574), (1575, 1587), (1588, 1596), (1597, 1600), (1601, 1604), (1605, 1607), (1608, 1616), (1617, 1620), (1621, 1625), (1626, 1630), (1631, 1636), (1637, 1645), (1645, 1646), (1646, 1647), (1648, 1652), (1653, 1658), (1659, 1665), (1665, 1666), (1667, 1668), (1669, 1674), (1675, 1681), (1682, 1693), (1694, 1697), (1698, 1702), (1702, 1703), (1707, 1708), (1708, 1714), (1715, 1719), (1720, 1728), (1729, 1731), (1732, 1735), (1735, 1736), (1738, 1746), (1747, 1754), (1755, 1759), (1760, 1768), (1769, 1778), (1779, 1781), (1782, 1783), (1784, 1790), (1791, 1797), (1798, 1806), (1807, 1813), (1814, 1816), (1817, 1825), (1826, 1839), (1840, 1847), (1847, 1848), (1849, 1854), (1855, 1858), (1859, 1867), (1868, 1872), (1873, 1876), (1877, 1884), (1885, 1887), (1888, 1892), (1893, 1896), (1897, 1899), (1899, 1900), (1901, 1904), (1905, 1911), (1912, 1915), (1916, 1923), (1924, 1926), (1927, 1932), (1933, 1939), (1940, 1942), (1943, 1946), (1947, 1950), (1951, 1956), (1957, 1961), (1961, 1962), (1963, 1969), (1970, 1980), (1981, 1986), (1987, 1995), (1996, 1999), (2000, 2003), (2004, 2007), (2008, 2012), (2013, 2016), (2017, 2028), (2029, 2032), (2033, 2040), (2041, 2052), (2053, 2055), (2056, 2063), (2064, 2074), (2074, 2075), (2079, 2080), (2080, 2081), (2082, 2086), (2087, 2091), (2092, 2094), (2095, 2101), (2102, 2110), (2110, 2111), (2112, 2115), (2116, 2118), (2119, 2125), (2126, 2128), (2129, 2132), (2133, 2138), (2139, 2148), (2149, 2150), (2151, 2158), (2158, 2159), (2160, 2162), (2163, 2168), (2169, 2170), (2171, 2174), (2175, 2181), (2182, 2186), (2187, 2193), (2194, 2198), (2199, 2205), (2206, 2209), (2210, 2215), (2216, 2218), (2219, 2223), (2224, 2228), (2229, 2233), (2233, 2234), (2234, 2235), (2236, 2244), (2245, 2249), (2250, 2257), (2258, 2260), (2261, 2262), (2263, 2268), (2269, 2278), (2279, 2283), (2284, 2287), (2288, 2292), (2293, 2295), (2296, 2303), (2303, 2304), (2305, 2306), (2307, 2312), (2313, 2321), (2322, 2329), (2329, 2330), (2334, 2335), (2335, 2341), (2342, 2346), (2347, 2355), (2356, 2358), (2359, 2362), (2363, 2364), (2365, 2368), (2369, 2374), (2375, 2385), (2385, 2386), (2386, 2387), (2388, 2390), (2391, 2395), (2395, 2396), (2397, 2398), (2398, 2401), (2402, 2406), (2407, 2410), (2411, 2415), (2416, 2420), (2421, 2423), (2424, 2426), (2427, 2430), (2431, 2435), (2436, 2439), (2440, 2442), (2443, 2445), (2446, 2450), (2451, 2461), (2461, 2462)]
{0: 0, 1029: 187, 7: 1, 2056: 367, 12: 2, 1037: 188, 1038: 189, 2064: 368, 17: 3, 1047: 191, 24: 4, 2074: 369, 27: 5, 1052: 192, 1054: 193, 31: 6, 2080: 371, 33: 7, 2082: 372, 2395: 437, 2421: 444, 1063: 194, 40: 8, 2092: 374, 1069: 195, 46: 9, 1071: 196, 1074: 197, 1077: 198, 2102: 376, 58: 10, 1083: 199, 1086: 200, 2229: 402, 1088: 201, 65: 11, 2116: 379, 2119: 380, 1548: 277, 1098: 202, 77: 12, 2126: 381, 2053: 366, 80: 13, 1720: 309, 1109: 204, 87: 14, 1113: 205, 2139: 384, 95: 15, 1123: 206, 2149: 385, 1041: 190, 104: 17, 2322: 421, 1131: 207, 109: 18, 2158: 387, 112: 19, 2163: 389, 116: 20, 1143: 210, 2169: 390, 2171: 391, 125: 21, 1151: 211, 131: 22, 1675: 301, 133: 23, 2182: 393, 1729: 310, 1161: 212, 2187: 394, 140: 24, 142: 25, 877: 158, 144: 26, 2194: 395, 1171: 213, 151: 27, 708: 126, 1178: 214, 2206: 397, 2210: 398, 163: 28, 1188: 215, 166: 29, 2216: 399, 2219: 400, 173: 30, 1200: 217, 1203: 218, 181: 31, 1207: 219, 185: 32, 2234: 404, 2079: 370, 2236: 405, 1215: 220, 192: 33, 2359: 428, 1218: 221, 195: 34, 2245: 406, 2250: 407, 2388: 435, 204: 35, 208: 36, 2424: 445, 2258: 408, 1235: 222, 2261: 409, 2263: 410, 217: 37, 1244: 223, 2269: 411, 222: 38, 224: 39, 1249: 224, 1252: 225, 2279: 412, 232: 40, 1259: 226, 2284: 413, 1261: 227, 238: 41, 1133: 208, 1264: 228, 242: 42, 1747: 314, 2293: 415, 1272: 229, 251: 43, 255: 44, 1280: 230, 2305: 418, 2307: 419, 260: 45, 1285: 231, 265: 46, 1291: 232, 268: 47, 270: 48, 274: 49, 1302: 234, 280: 50, 2329: 422, 2095: 375, 1309: 235, 2334: 423, 2335: 424, 288: 51, 731: 130, 293: 52, 1318: 237, 1322: 238, 1927: 345, 300: 53, 306: 54, 1332: 239, 2397: 438, 311: 55, 2363: 429, 316: 56, 2365: 430, 736: 131, 1346: 240, 2443: 450, 2375: 432, 1353: 241, 1355: 242, 1357: 243, 2385: 433, 2386: 434, 1363: 244, 340: 59, 2391: 436, 1368: 245, 345: 60, 1370: 246, 347: 61, 2296: 416, 1374: 247, 353: 62, 2402: 440, 1380: 248, 2407: 441, 360: 63, 1385: 249, 2411: 442, 366: 64, 1391: 250, 2416: 443, 1395: 251, 1298: 233, 373: 65, 1400: 253, 377: 66, 2427: 446, 382: 67, 2431: 447, 1408: 254, 2112: 378, 2436: 448, 1415: 255, 2440: 449, 393: 68, 395: 69, 1420: 256, 2446: 451, 408: 71, 2451: 452, 405: 70, 1432: 257, 1435: 258, 2461: 453, 414: 72, 1605: 286, 2288: 414, 1443: 259, 423: 73, 425: 74, 1451: 261, 430: 75, 433: 76, 755: 134, 1461: 262, 1951: 350, 445: 77, 1470: 263, 2129: 382, 1482: 264, 459: 78, 1487: 265, 464: 79, 760: 135, 472: 80, 1497: 266, 1550: 278, 476: 82, 1501: 267, 478: 83, 1957: 351, 2233: 403, 1104: 203, 1506: 268, 483: 84, 1510: 269, 1617: 288, 488: 85, 1513: 270, 1517: 271, 2369: 431, 1522: 272, 1523: 273, 501: 87, 1449: 260, 505: 88, 1531: 274, 2199: 396, 767: 137, 1537: 275, 1963: 353, 516: 90, 2356: 427, 1543: 276, 524: 91, 526: 92, 999: 182, 533: 93, 1558: 279, 536: 94, 1563: 280, 541: 95, 546: 96, 1571: 281, 774: 139, 550: 97, 1575: 282, 555: 98, 559: 99, 1588: 283, 565: 100, 2313: 420, 568: 101, 1597: 284, 2133: 383, 1601: 285, 579: 102, 581: 103, 2087: 373, 1608: 287, 1315: 236, 951: 171, 591: 104, 593: 105, 99: 16, 1621: 289, 599: 106, 1626: 290, 603: 107, 1631: 291, 1637: 292, 617: 108, 2151: 386, 1645: 293, 1646: 294, 1648: 295, 626: 109, 1653: 296, 630: 110, 635: 111, 1665: 298, 642: 112, 1667: 299, 1669: 300, 647: 113, 651: 114, 655: 115, 1682: 302, 1987: 356, 662: 116, 1817: 325, 666: 117, 1694: 303, 2160: 388, 1698: 304, 677: 118, 1702: 305, 2398: 439, 681: 119, 1707: 306, 1708: 307, 685: 120, 687: 121, 1715: 308, 694: 122, 696: 123, 1140: 209, 699: 124, 705: 125, 1732: 311, 1735: 312, 1996: 357, 1738: 313, 802: 146, 718: 127, 721: 128, 723: 129, 1755: 315, 1760: 316, 1659: 297, 2342: 425, 744: 132, 1769: 317, 749: 133, 2303: 417, 1779: 318, 1782: 319, 1784: 320, 2175: 392, 764: 136, 1791: 321, 2224: 401, 773: 138, 1798: 322, 776: 140, 782: 141, 1807: 323, 786: 142, 1814: 324, 793: 143, 795: 144, 474: 81, 798: 145, 1826: 326, 807: 147, 815: 148, 1840: 327, 823: 149, 825: 150, 827: 151, 1855: 330, 1859: 331, 839: 152, 1847: 328, 1868: 332, 848: 154, 1873: 333, 1877: 334, 1849: 329, 856: 155, 2347: 426, 860: 156, 1885: 335, 1888: 336, 867: 157, 1893: 337, 1897: 338, 1899: 339, 1901: 340, 879: 159, 1905: 341, 2041: 365, 1912: 342, 889: 160, 1916: 343, 897: 161, 1924: 344, 902: 162, 321: 57, 2110: 377, 1933: 346, 911: 163, 915: 164, 1940: 347, 1943: 348, 922: 165, 1947: 349, 927: 166, 929: 167, 933: 168, 1961: 352, 939: 169, 498: 86, 943: 170, 1970: 354, 329: 58, 1981: 355, 961: 172, 843: 153, 964: 173, 968: 174, 972: 175, 974: 176, 2000: 358, 978: 177, 2004: 359, 983: 178, 2008: 360, 2013: 361, 991: 179, 992: 180, 2017: 362, 994: 181, 1190: 216, 1397: 252, 2029: 363, 1006: 183, 2033: 364, 1012: 184, 1017: 185, 511: 89, 1022: 186}
{1028: 186, 6: 0, 2055: 366, 11: 1, 1036: 187, 1038: 188, 2063: 367, 16: 2, 2268: 410, 1046: 190, 23: 3, 2052: 365, 26: 4, 1051: 191, 1053: 192, 31: 5, 32: 6, 2081: 371, 1062: 193, 39: 7, 2091: 373, 44: 8, 1069: 194, 1070: 195, 1073: 196, 1076: 197, 2101: 375, 57: 9, 1082: 198, 1085: 199, 2110: 376, 1087: 200, 64: 10, 2115: 378, 2118: 379, 1097: 201, 695: 122, 76: 11, 2125: 380, 1549: 277, 1104: 202, 1105: 203, 2132: 382, 86: 13, 2233: 402, 1112: 204, 2138: 383, 94: 14, 1040: 189, 1122: 205, 2148: 384, 2150: 385, 103: 16, 1130: 206, 108: 17, 2158: 386, 111: 18, 2162: 388, 115: 19, 1142: 209, 2168: 389, 121: 20, 2170: 390, 1150: 210, 704: 124, 131: 21, 132: 22, 2181: 392, 1160: 211, 2186: 393, 139: 23, 141: 24, 143: 25, 2193: 394, 1170: 212, 1731: 310, 150: 26, 1177: 213, 2074: 368, 2209: 397, 162: 27, 2075: 369, 1188: 214, 165: 28, 2215: 398, 2218: 399, 172: 29, 1199: 216, 1847: 327, 1202: 217, 180: 30, 1206: 218, 184: 31, 372: 64, 2234: 403, 2235: 404, 1214: 219, 191: 32, 1217: 220, 194: 33, 2244: 405, 2249: 406, 203: 34, 2223: 400, 207: 35, 2257: 407, 1234: 221, 2260: 408, 2262: 409, 216: 36, 1244: 222, 221: 37, 223: 38, 1251: 224, 2086: 372, 2278: 411, 231: 39, 1259: 225, 1260: 226, 722: 128, 1263: 227, 241: 41, 2292: 414, 472: 79, 1271: 228, 250: 42, 254: 43, 1279: 229, 2304: 417, 2306: 418, 259: 44, 1284: 230, 2423: 444, 264: 45, 1290: 231, 267: 46, 269: 47, 1297: 232, 2435: 447, 1301: 233, 279: 49, 2329: 421, 2330: 422, 1308: 234, 1754: 314, 287: 50, 1314: 235, 292: 51, 1317: 236, 1321: 237, 2346: 425, 299: 52, 1245: 223, 305: 53, 1331: 238, 310: 54, 2362: 428, 735: 130, 2364: 429, 2442: 449, 2295: 415, 320: 56, 1345: 239, 2374: 431, 328: 57, 1353: 240, 1354: 241, 1356: 242, 2385: 432, 1362: 243, 2387: 434, 340: 58, 341: 59, 2390: 435, 1368: 244, 1369: 245, 346: 60, 2395: 436, 2396: 437, 1373: 246, 2398: 438, 352: 61, 2401: 439, 2080: 370, 1379: 247, 2406: 440, 359: 62, 1384: 248, 2410: 441, 365: 63, 1390: 249, 2415: 442, 1394: 250, 1396: 251, 1399: 252, 376: 65, 2426: 445, 1956: 350, 381: 66, 2430: 446, 1407: 253, 2283: 412, 1414: 254, 2439: 448, 393: 67, 394: 68, 1419: 255, 2445: 450, 237: 40, 2450: 451, 404: 69, 407: 70, 1616: 287, 580: 102, 1434: 257, 2287: 413, 413: 71, 2462: 453, 1442: 258, 422: 72, 424: 73, 1450: 260, 2094: 374, 1778: 317, 2461: 452, 432: 75, 1460: 261, 444: 76, 1469: 262, 1481: 263, 1783: 319, 460: 78, 1486: 264, 1496: 265, 473: 80, 79: 12, 476: 81, 477: 82, 459: 77, 1505: 267, 482: 83, 1509: 268, 487: 84, 1512: 269, 1517: 270, 1518: 271, 2335: 423, 1448: 259, 1523: 272, 500: 86, 766: 136, 504: 87, 1530: 273, 2303: 416, 1962: 352, 510: 88, 1536: 274, 515: 89, 1542: 275, 1547: 276, 524: 90, 525: 91, 429: 74, 532: 92, 1557: 278, 535: 93, 1562: 279, 540: 94, 773: 137, 545: 95, 1570: 280, 549: 96, 1574: 281, 554: 97, 558: 98, 2312: 419, 1587: 282, 564: 99, 567: 100, 1596: 283, 1600: 284, 579: 101, 1604: 285, 1607: 286, 98: 15, 591: 103, 592: 104, 1620: 288, 598: 105, 1625: 289, 602: 106, 1630: 290, 1636: 291, 273: 48, 616: 107, 1645: 292, 1646: 293, 1647: 294, 625: 108, 1652: 295, 629: 109, 634: 110, 641: 111, 1666: 298, 1668: 299, 646: 112, 1132: 207, 650: 113, 2386: 433, 654: 114, 1681: 301, 661: 115, 665: 116, 2159: 387, 1693: 302, 1697: 303, 676: 117, 2341: 424, 1702: 304, 1703: 305, 680: 118, 1708: 306, 685: 119, 686: 120, 1714: 307, 1139: 208, 694: 121, 1719: 308, 698: 123, 2228: 401, 2198: 395, 1728: 309, 707: 125, 1735: 311, 1736: 312, 717: 126, 720: 127, 1746: 313, 730: 129, 1658: 296, 1759: 315, 743: 131, 1768: 316, 748: 132, 754: 133, 1781: 318, 759: 134, 763: 135, 1790: 320, 1797: 321, 774: 138, 775: 139, 781: 140, 1806: 322, 785: 141, 1813: 323, 1816: 324, 793: 142, 794: 143, 797: 144, 1825: 325, 802: 145, 803: 146, 1500: 266, 814: 147, 1839: 326, 2355: 426, 823: 148, 824: 149, 826: 150, 991: 178, 1674: 300, 1854: 329, 2016: 361, 1858: 330, 2174: 391, 2358: 427, 838: 151, 842: 152, 1867: 331, 847: 153, 1872: 332, 1848: 328, 1876: 333, 2040: 364, 855: 154, 1665: 297, 2128: 381, 859: 155, 1884: 334, 1887: 335, 866: 156, 315: 55, 1892: 336, 1896: 337, 1899: 338, 1900: 339, 877: 157, 878: 158, 1904: 340, 1911: 341, 888: 159, 1915: 342, 2321: 420, 896: 160, 2368: 430, 1923: 343, 901: 161, 1926: 344, 1932: 345, 910: 162, 2111: 377, 914: 163, 1939: 346, 1942: 347, 921: 164, 1946: 348, 1950: 349, 927: 165, 928: 166, 932: 167, 497: 85, 1961: 351, 938: 168, 942: 169, 2205: 396, 1969: 353, 950: 170, 1980: 354, 960: 171, 1986: 355, 963: 172, 967: 173, 1995: 356, 972: 174, 973: 175, 1999: 357, 977: 176, 2003: 358, 982: 177, 2007: 359, 2012: 360, 1189: 215, 992: 179, 993: 180, 1431: 256, 998: 181, 2420: 443, 2028: 362, 1005: 182, 2032: 363, 1011: 183, 1016: 184, 1021: 185}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Shehadeh', 'Shehadeh', 'Shehadeh', 'Shehadeh', 'Shehadeh', 'Shehadeh', 'Dianne Feinstein', 'Shehadeh', 'Mulligan', 'Mulligan', 'Shehadeh', 'Shehadeh']
response in server.py code:
 [(133, 6, 'California'), (581, 10, 'California'), (377, 4, 'United_States'), (666, 10, 'California'), (270, 9, 'Las_Vegas'), (1420, 11, 'Minneapolis'), (1698, 4, 'Council_on_American–Islamic_Relations'), (12, 4, 'United_States'), (2790, 4, 'United_States'), (112, 9, 'Las_Vegas'), (1947, 9, 'Las_Vegas'), (501, 9, 'Las_Vegas'), (2517, 3, 'Federal_Bureau_of_Investigation'), (2971, 3, 'Federal_Bureau_of_Investigation'), (568, 11, 'Bakersfield,_California'), (3000, 9, 'Las_Vegas'), (1791, 15, 'Condor_Flugdienst'), (125, 6, 'Fresno,_California'), (2056, 18, 'Central_California'), (1285, 12, 'South_Africa'), (1435, 7, 'Phoenix,_Arizona'), (1318, 35, 'San_Francisco_International_Airport'), (1817, 30, 'McCarran_International_Airport'), (3088, 16, 'Dianne_Feinstein'), (488, 9, 'Frankfurt'), (3182, 9, 'Dianne_Feinstein'), (1397, 10, 'US_Airways'), (2874, 40, 'U.S._Immigration_and_Customs_Enforcement'), (3864, 9, 'Frankfurt'), (2495, 17, 'U.S._Customs_and_Border_Protection'), (1513, 4, 'Iraq'), (2646, 15, 'North_Las_Vegas,_Nevada'), (2296, 7, 'Alzenau'), (1264, 15, 'Ulama'), (2451, 10, 'Washington,_D.C.'), (3405, 13, 'United_States_Armed_Forces'), (843, 34, 'U.S._Customs_and_Border_Protection'), (2004, 8, 'New_Year'), (2236, 8, 'Michel_Shehadeh'), (2714, 8, 'Michel_Shehadeh'), (902, 8, 'Raja_Shehadeh'), (983, 8, 'Michel_Shehadeh'), (2567, 8, 'Michel_Shehadeh'), (3906, 8, 'Raja_Shehadeh'), (3132, 8, 'Michel_Shehadeh'), (3578, 8, 'Raja_Shehadeh'), (1738, 8, 'Michel_Shehadeh'), (3167, 8, 'Martin_Mulligan'), (3364, 8, 'Martin_Mulligan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Marvin Minsky']
response in server.py code:
 [(81, 3, 'Massachusetts_Institute_of_Technology'), (65, 3, 'Massachusetts_Institute_of_Technology'), (189, 3, 'Massachusetts_Institute_of_Technology'), (99, 13, 'Marvin_Minsky')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Bobby Valentine']
response in server.py code:
 [(15, 15, 'Bobby_Valentine'), (0, 6, 'Boston')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Carlo Azeglio Ciampi']
response in server.py code:
 [(41, 5, 'Italy'), (21, 16, 'Senator_for_life'), (64, 20, 'Carlo_Azeglio_Ciampi'), (54, 9, 'President_of_the_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['BLINKER', 'Blinker', 'Blinker']
response in server.py code:
 [(29, 6, 'London'), (687, 7, 'Regi_Blinker'), (9, 7, 'Regi_Blinker'), (215, 7, 'Regi_Blinker'), (805, 7, 'Udinese_Calcio'), (635, 9, 'Feyenoord'), (386, 9, 'Feyenoord'), (353, 7, 'Udinese_Calcio'), (262, 4, 'FIFA'), (480, 7, 'Udinese_Calcio'), (397, 4, 'FIFA'), (116, 4, 'FIFA'), (576, 7, 'Italy'), (192, 9, 'Liverpool_F.C.'), (712, 5, 'Switzerland'), (47, 5, 'Netherlands'), (443, 9, 'FC_Barcelona'), (155, 19, 'Sheffield_Wednesday_F.C.'), (339, 9, 'Sheffield_Wednesday_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 11, 'Fundraising')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(1043, 11, 'Fortune_500'), (59, 11, 'First_Union'), (1324, 17, 'Sexual_harassment'), (528, 22, 'The_Charlotte_Observer'), (147, 12, 'Pornography'), (1226, 12, 'SCO–Linux_controversies'), (819, 6, 'Server_(computing)'), (485, 19, 'Islamophobia'), (892, 11, 'Home_equity'), (187, 6, 'Email_archiving')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Yasser Arafat', 'Corey Flintoff']
response in server.py code:
 [(35, 13, 'Yasser_Arafat'), (332, 14, 'Corey_Flintoff'), (358, 10, 'Washington,_D.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Sinatra', 'Dylan']
response in server.py code:
 [(82, 7, 'Frank_Sinatra'), (91, 5, 'Bob_Dylan'), (120, 8, 'Columbia_Records'), (108, 7, 'Santana_(band)'), (144, 4, 'Sony')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['ROBERTO DURAN', 'Camacho']
response in server.py code:
 [(588, 7, 'Reuters'), (262, 7, 'Mexico'), (328, 11, 'Panama_City'), (18, 13, 'Roberto_Durán'), (81, 10, 'Panama'), (58, 11, 'Panama_City'), (9, 6, 'Panama'), (973, 10, 'Panama'), (1257, 13, 'Atlantic_City,_New_Jersey'), (1243, 10, 'Panama'), (1148, 11, 'Puerto_Rico'), (352, 5, 'Duran,_Gers'), (577, 5, 'Duran,_Gers'), (1036, 5, 'Duran,_Gers'), (229, 5, 'Duran,_Gers'), (448, 5, 'Duran,_Gers'), (1186, 7, 'Héctor_Camacho')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(13, 9, 'Software_developer'), (28, 3, 'Portable_Document_Format'), (0, 12, 'Power_Mac_G5')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Jansher Khan', 'Mark Cairns', 'Anthony Hill', 'Dan Jenson', 'Peter Nicol', 'Chris Walker', 'Rodney Eyles', 'Derek Ryan']
response in server.py code:
 [(306, 11, 'Peter_Nicol'), (269, 9, 'Australia'), (387, 12, 'Rodney_Eyles'), (241, 9, 'Australia'), (401, 9, 'Australia'), (257, 10, 'Dan_Jenson'), (189, 11, 'Mark_Cairns_(squash_player)'), (202, 7, 'England'), (417, 10, 'Derek_Ryan_(squash_player)'), (352, 7, 'England'), (47, 9, 'Hong_Kong'), (338, 12, 'Chris_Walker_(squash_player)'), (319, 8, 'Scotland'), (160, 12, 'Jansher_Khan'), (429, 7, 'Republic_of_Ireland'), (174, 8, 'Pakistan'), (9, 14, 'Hong_Kong_Open_(tennis)'), (97, 14, 'Hong_Kong_Open_(badminton)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Callas']
response in server.py code:
 [(135, 11, 'Mars_rover'), (557, 25, 'Jet_Propulsion_Laboratory'), (20, 11, 'Mars_rover'), (588, 4, 'NASA'), (2125, 11, 'Opportunity_(rover)'), (1660, 11, 'Opportunity_(rover)'), (2040, 4, 'Mars'), (1322, 11, 'Opportunity_(rover)'), (420, 10, 'Mars'), (1293, 4, 'Mars'), (112, 11, 'Los_Angeles'), (1143, 5, 'Earth'), (2046, 6, 'Spirit_(rover)'), (1616, 6, 'Spirit_(rover)'), (715, 5, 'Earth'), (1311, 6, 'Spirit_(rover)'), (1533, 6, 'Maria_Callas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Laura Capon', 'Enrico Fermi']
response in server.py code:
 [(24, 4, 'Rome'), (111, 18, 'Sapienza_University_of_Rome'), (48, 12, 'Enrico_Fermi'), (38, 5, 'Laura_Fermi'), (0, 11, 'Laura_Fermi'), (77, 7, 'Student')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(62, 8, 'Kick-Ass_(film)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Nicolaas Bloembergen', 'Cor Gorter', 'Nicolaas Bloembergen', 'Edward Mills Purcell']
response in server.py code:
 [(125, 7, 'Harvard_University'), (52, 20, 'Leiden_University'), (191, 18, 'Research_assistant'), (79, 10, 'Cornelis_Jacobus_Gorter'), (0, 20, 'Nicolaas_Bloembergen'), (242, 24, 'Radiation_Laboratory'), (214, 20, 'Edward_Mills_Purcell'), (134, 20, 'Nicolaas_Bloembergen')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Lee Bowyer']
response in server.py code:
 [(60, 6, 'London'), (373, 6, 'London'), (111, 10, 'Lee_Bowyer'), (546, 6, 'Lee_Bowyer'), (17, 6, 'Lee_Bowyer'), (492, 6, 'London'), (664, 6, 'Lee_Bowyer'), (263, 6, 'Lee_Bowyer'), (783, 13, 'Middlesbrough_F.C.'), (86, 7, 'England'), (522, 5, 'Leeds'), (78, 5, 'Leeds'), (9, 5, 'Leeds_United_A.F.C.'), (689, 9, 'Yorkshire')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(17, 3, 'Agence_France-Presse'), (128, 4, 'Iraq'), (2, 7, 'Baghdad')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(48, 4, 'Iraq'), (60, 4, 'Iran'), (981, 40, 'International_Committee_of_the_Red_Cross'), (1174, 13, 'Iran–Iraq_War'), (226, 7, 'Baghdad'), (147, 16, 'Prisoner_of_war'), (612, 6, 'Tehran'), (379, 17, 'National_Iraqi_News_Agency'), (882, 9, 'Guantanamo_Bay_detention_camp'), (918, 12, 'Repatriation'), (291, 10, 'Delegation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Pixar'), (15, 4, 'Cars_(film)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(259, 8, 'Freeport,_Illinois')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Suwan']
response in server.py code:
 [(79, 12, 'South_Korea'), (51, 5, 'Seoul'), (129, 6, 'Pohang_Steelers'), (369, 6, 'Pohang_Steelers'), (408, 5, 'Ulsan_Hyundai_FC'), (138, 5, 'Ulsan_Hyundai_FC'), (20, 12, 'South_Korea'), (426, 6, 'FC_Seoul'), (390, 5, 'Hatthaporn_Suwan'), (170, 7, 'North_Jeolla_Province'), (161, 6, 'Bucheon'), (328, 6, 'Bucheon'), (348, 6, 'Battle_of_Chonan')]
given spans fix. original text:  Hindus throng to Ganges for bathing festival 
Pilgrims believe dip in river during six week celebration will cleanse sin 
 
ALLAHABAD, India - Nearly half a million Hindus braved near-freezing temperatures to wash away their sins in the icy waters of the Ganges river in northern India on Wednesday, the first day of a six-week festival. 
 
As many as 70 million people from India and abroad are expected over the whole “Ardh Kumbh Mela” or Half Pitcher Festival, billed as one of the largest gatherings on earth. 
 
Men, women, children, holy men in saffron and the infirm gathered at the confluence of the Ganges, the Yamuna and a mythical third river in Allahabad city well before dawn, waiting for the sun to rise for the auspicious bath on the first day of the 42-day event. 
 
They chanted verses from Hindu scriptures and sang holy songs as they walked towards the bathing areas, some lying prostrate after every few steps to salute the gods. 
 
The festival falls midway between the “Maha Kumbh Mela” or the Great Pitcher Festival, celebrated once every 12 years. 
 
Hindus believe that bathing in the Ganges during the festivals cleanses them of sin, speeding the way to the attainment of nirvana or the afterlife. 
 
'Like being with God' 
 
After dipping in the polluted but sacred waters, many filled cans, bottles and steel containers for relatives and friends who could not make it. Others sprinkled it on their dry clothes.  
 
“It was a long-cherished desire to take a dip here during the Kumbh Mela,” said Naba Kumar Ghosh, a young school teacher from the eastern Indian state of West Bengal. “The experience has been one of fulfillment, a complete cleansing of the inner self.” 
 
Shakuntala, a 70-year-old woman who gave only one name, said she traveled all night from the central Indian state of Madhya Pradesh to bathe in the Ganges, just as she has done at every Kumbh Mela over the last 25 years. 
 
“It was a divine experience, a dip in the holy waters is like being with God,” she said. “God willing, I will be here for the next 'Kumbh' too”. 
 
Rama Devi, an old woman from Allahabad who could not remember her age, has not missed a single Kumbh and was determined to make it this time despite her inability to walk. 
 
With roads closed to traffic, her 35-year-old son, a soldier in the Indian army, carried her on his back for the 6-mile walk from their house to the waters. 
 
Tight security 
Allahabad, in the Hindi heartland state of Uttar Pradesh, is one of four spots where Garuda, the winged steed of Hindu god Vishnu, is said to have rested during a titanic battle with demons over a pitcher of divine nectar of immortality. 
 
Garuda’s flight lasted 12 divine days, or 12 years of mortal time, hence the celebration of “Maha Kumbh Mela” every 12 years. 
 
The midway point between two such celebrations is also considered highly favorable because the position of the sun and the moon are the same as during the “Maha Kumbh”. 
 
The “Maha Kumbh Mela” in 1989 attracted 15 million pilgrims and the Guinness Book of Records dubbed it the largest gathering of human beings for a single purpose. The festival in 2001 drew between 50 and 70 million. 
 
Thousands of tents and camps have been built to house pilgrims across the 4,000 acre  festival area and more than 10,000 policemen, including specially-trained “terrorist spotters”, have been deployed, authorities said. 
 



original word:  'Kumbh 'Kumbh
new split:  '  and  Kumbh
[(0, 6), (7, 13), (14, 16), (17, 23), (24, 27), (28, 35), (36, 44), (46, 54), (55, 62), (63, 66), (67, 69), (70, 75), (76, 82), (83, 86), (87, 91), (92, 103), (104, 108), (109, 116), (117, 120), (124, 133), (133, 134), (135, 140), (141, 142), (143, 149), (150, 154), (155, 156), (157, 164), (165, 171), (172, 178), (179, 192), (193, 205), (206, 208), (209, 213), (214, 218), (219, 224), (225, 229), (230, 232), (233, 236), (237, 240), (241, 247), (248, 250), (251, 254), (255, 261), (262, 267), (268, 270), (271, 279), (280, 285), (286, 288), (289, 298), (298, 299), (300, 303), (304, 309), (310, 313), (314, 316), (317, 318), (319, 327), (328, 336), (336, 337), (341, 343), (344, 348), (349, 351), (352, 354), (355, 362), (363, 369), (370, 374), (375, 380), (381, 384), (385, 391), (392, 395), (396, 404), (405, 409), (410, 413), (414, 419), (420, 421), (421, 425), (426, 431), (432, 436), (436, 437), (438, 440), (441, 445), (446, 453), (454, 462), (462, 463), (464, 470), (471, 473), (474, 477), (478, 480), (481, 484), (485, 492), (493, 503), (504, 506), (507, 512), (512, 513), (517, 520), (520, 521), (522, 527), (527, 528), (529, 537), (537, 538), (539, 543), (544, 547), (548, 550), (551, 558), (559, 562), (563, 566), (567, 573), (574, 582), (583, 585), (586, 589), (590, 600), (601, 603), (604, 607), (608, 614), (614, 615), (616, 619), (620, 626), (627, 630), (631, 632), (633, 641), (642, 647), (648, 653), (654, 656), (657, 666), (667, 671), (672, 676), (677, 683), (684, 688), (688, 689), (690, 697), (698, 701), (702, 705), (706, 709), (710, 712), (713, 717), (718, 721), (722, 725), (726, 736), (737, 741), (742, 744), (745, 748), (749, 754), (755, 758), (759, 761), (762, 765), (766, 772), (773, 778), (778, 779), (783, 787), (788, 795), (796, 802), (803, 807), (808, 813), (814, 824), (825, 828), (829, 833), (834, 838), (839, 844), (845, 847), (848, 852), (853, 859), (860, 867), (868, 871), (872, 879), (880, 885), (885, 886), (887, 891), (892, 897), (898, 907), (908, 913), (914, 919), (920, 923), (924, 929), (930, 932), (933, 939), (940, 943), (944, 948), (948, 949), (953, 956), (957, 965), (966, 971), (972, 978), (979, 986), (987, 990), (991, 992), (992, 996), (997, 1002), (1003, 1007), (1007, 1008), (1009, 1011), (1012, 1015), (1016, 1021), (1022, 1029), (1030, 1038), (1038, 1039), (1040, 1050), (1051, 1055), (1056, 1061), (1062, 1064), (1065, 1070), (1070, 1071), (1075, 1081), (1082, 1089), (1090, 1094), (1095, 1102), (1103, 1105), (1106, 1109), (1110, 1116), (1117, 1123), (1124, 1127), (1128, 1137), (1138, 1146), (1147, 1151), (1152, 1154), (1155, 1158), (1158, 1159), (1160, 1168), (1169, 1172), (1173, 1176), (1177, 1179), (1180, 1183), (1184, 1194), (1195, 1197), (1198, 1205), (1206, 1208), (1209, 1212), (1213, 1222), (1222, 1223), (1227, 1232), (1233, 1238), (1239, 1243), (1244, 1247), (1247, 1248), (1252, 1257), (1258, 1265), (1266, 1268), (1269, 1272), (1273, 1281), (1282, 1285), (1286, 1292), (1293, 1299), (1299, 1300), (1301, 1305), (1306, 1312), (1313, 1317), (1317, 1318), (1319, 1326), (1327, 1330), (1331, 1336), (1337, 1347), (1348, 1351), (1352, 1361), (1362, 1365), (1366, 1373), (1374, 1377), (1378, 1383), (1384, 1387), (1388, 1392), (1393, 1395), (1395, 1396), (1397, 1403), (1404, 1413), (1414, 1416), (1417, 1419), (1420, 1425), (1426, 1429), (1430, 1437), (1437, 1438), (1443, 1444), (1444, 1446), (1447, 1450), (1451, 1452), (1453, 1467), (1468, 1474), (1475, 1477), (1478, 1482), (1483, 1484), (1485, 1488), (1489, 1493), (1494, 1500), (1501, 1504), (1505, 1510), (1511, 1515), (1515, 1516), (1516, 1517), (1518, 1522), (1523, 1527), (1528, 1533), (1534, 1539), (1539, 1540), (1541, 1542), (1543, 1548), (1549, 1555), (1556, 1563), (1564, 1568), (1569, 1572), (1573, 1580), (1581, 1587), (1588, 1593), (1594, 1596), (1597, 1601), (1602, 1608), (1608, 1609), (1610, 1611), (1611, 1614), (1615, 1625), (1626, 1629), (1630, 1634), (1635, 1638), (1639, 1641), (1642, 1653), (1653, 1654), (1655, 1656), (1657, 1665), (1666, 1675), (1676, 1678), (1679, 1682), (1683, 1688), (1689, 1694), (1694, 1695), (1699, 1709), (1709, 1710), (1711, 1712), (1713, 1724), (1725, 1730), (1731, 1734), (1735, 1739), (1740, 1744), (1745, 1748), (1749, 1753), (1753, 1754), (1755, 1759), (1760, 1763), (1764, 1772), (1773, 1776), (1777, 1782), (1783, 1787), (1788, 1791), (1792, 1799), (1800, 1806), (1807, 1812), (1813, 1815), (1816, 1822), (1823, 1830), (1831, 1833), (1834, 1839), (1840, 1842), (1843, 1846), (1847, 1853), (1853, 1854), (1855, 1859), (1860, 1862), (1863, 1866), (1867, 1870), (1871, 1875), (1876, 1878), (1879, 1884), (1885, 1890), (1891, 1895), (1896, 1900), (1901, 1904), (1905, 1909), (1910, 1912), (1913, 1918), (1918, 1919), (1923, 1924), (1924, 1926), (1927, 1930), (1931, 1932), (1933, 1939), (1940, 1950), (1950, 1951), (1952, 1953), (1954, 1957), (1958, 1960), (1961, 1964), (1965, 1969), (1970, 1976), (1977, 1979), (1980, 1984), (1985, 1990), (1991, 1995), (1996, 1999), (1999, 2000), (2000, 2001), (2002, 2005), (2006, 2010), (2010, 2011), (2012, 2013), (2013, 2016), (2017, 2024), (2024, 2025), (2026, 2027), (2028, 2032), (2033, 2035), (2036, 2040), (2041, 2044), (2045, 2048), (2049, 2053), (2054, 2055), (2055, 2060)]
{0: 0, 2049: 397, 1030: 192, 7: 1, 14: 2, 1040: 194, 17: 3, 24: 4, 1051: 195, 28: 5, 1541: 289, 1056: 196, 36: 6, 2054: 398, 1062: 197, 1065: 198, 2055: 399, 46: 7, 1075: 200, 55: 8, 1082: 201, 63: 9, 1090: 202, 67: 10, 70: 11, 1095: 203, 76: 12, 1103: 204, 1106: 205, 83: 13, 1038: 193, 1110: 206, 87: 14, 92: 15, 1117: 207, 1124: 208, 104: 16, 109: 17, 1896: 358, 1138: 210, 481: 87, 117: 18, 1147: 211, 124: 19, 1152: 212, 1155: 213, 133: 20, 1158: 214, 135: 21, 1160: 215, 141: 22, 143: 23, 1169: 216, 1731: 324, 1173: 217, 150: 24, 1177: 218, 155: 25, 1180: 219, 157: 26, 1184: 220, 165: 27, 1195: 221, 172: 28, 1198: 222, 179: 29, 1206: 223, 1209: 224, 1213: 225, 193: 30, 1222: 226, 1227: 227, 206: 31, 209: 32, 214: 33, 1239: 229, 219: 34, 1244: 230, 1247: 231, 225: 35, 1252: 232, 230: 36, 1233: 228, 233: 37, 1258: 233, 237: 38, 241: 39, 1266: 234, 1269: 235, 248: 40, 1273: 236, 251: 41, 255: 42, 1282: 237, 1286: 238, 268: 44, 1293: 239, 271: 45, 1299: 240, 1301: 241, 280: 46, 1306: 242, 286: 47, 1313: 243, 1317: 244, 1319: 245, 298: 49, 300: 50, 1327: 246, 304: 51, 1331: 247, 310: 52, 1337: 248, 314: 53, 317: 54, 319: 55, 1348: 249, 328: 56, 396: 69, 336: 57, 1362: 251, 341: 58, 1366: 252, 344: 59, 349: 60, 1374: 253, 352: 61, 1378: 254, 355: 62, 1384: 255, 363: 63, 1388: 256, 1393: 257, 370: 64, 1395: 258, 1397: 259, 375: 65, 1404: 260, 381: 66, 385: 67, 1414: 261, 392: 68, 1417: 262, 1070: 199, 1420: 263, 1773: 333, 1426: 264, 405: 70, 1430: 265, 410: 71, 1437: 266, 414: 72, 1443: 267, 1444: 268, 421: 74, 1447: 269, 426: 75, 1451: 270, 1453: 271, 432: 76, 436: 77, 438: 78, 441: 79, 1468: 272, 1610: 302, 446: 80, 1475: 273, 1478: 274, 759: 142, 1485: 276, 462: 82, 464: 83, 1489: 277, 1494: 278, 471: 84, 420: 73, 474: 85, 1501: 279, 478: 86, 1505: 280, 485: 88, 1511: 281, 1515: 282, 1516: 283, 493: 89, 1518: 284, 1523: 285, 1528: 286, 507: 91, 1483: 275, 512: 92, 1539: 288, 517: 93, 1543: 290, 520: 94, 522: 95, 1549: 291, 527: 96, 529: 97, 1556: 292, 537: 98, 539: 99, 1564: 293, 544: 100, 1569: 294, 548: 101, 262: 43, 551: 102, 1996: 381, 1581: 296, 559: 103, 563: 104, 1588: 297, 567: 105, 1594: 298, 1597: 299, 574: 106, 1602: 300, 583: 107, 1608: 301, 586: 108, 1611: 303, 590: 109, 1615: 304, 1977: 377, 601: 110, 1626: 305, 783: 147, 604: 111, 1630: 306, 608: 112, 1635: 307, 614: 113, 1639: 308, 616: 114, 454: 81, 1642: 309, 620: 115, 1128: 209, 627: 116, 1653: 310, 631: 117, 1657: 312, 642: 119, 648: 120, 1676: 314, 654: 121, 1679: 315, 657: 122, 1683: 316, 1689: 317, 667: 123, 1694: 318, 672: 124, 1699: 319, 677: 125, 684: 126, 1709: 320, 1711: 321, 688: 127, 1713: 322, 690: 128, 698: 129, 1725: 323, 702: 130, 706: 131, 1573: 295, 710: 132, 289: 48, 713: 133, 1655: 311, 1740: 326, 718: 134, 1745: 327, 722: 135, 1749: 328, 726: 136, 633: 118, 1753: 329, 1755: 330, 2036: 394, 1760: 331, 737: 137, 1764: 332, 742: 138, 745: 139, 749: 140, 1777: 334, 755: 141, 1783: 335, 762: 143, 1788: 336, 766: 144, 1792: 337, 773: 145, 1800: 338, 778: 146, 1666: 313, 1807: 339, 788: 148, 1813: 340, 1816: 341, 796: 149, 1823: 342, 803: 150, 1831: 343, 808: 151, 1834: 344, 814: 152, 1840: 345, 1954: 372, 1843: 346, 1847: 347, 825: 153, 829: 154, 1855: 349, 834: 155, 1860: 350, 839: 156, 1867: 352, 845: 157, 1871: 353, 848: 158, 1876: 354, 853: 159, 1879: 355, 860: 160, 1885: 356, 1891: 357, 868: 161, 872: 162, 1901: 359, 1853: 348, 880: 163, 1905: 360, 885: 164, 1910: 361, 887: 165, 1913: 362, 892: 166, 1918: 363, 898: 167, 1923: 364, 1924: 365, 1927: 366, 1931: 367, 908: 168, 1933: 368, 1735: 325, 914: 169, 1940: 369, 920: 170, 924: 171, 1950: 370, 1952: 371, 930: 172, 933: 173, 1958: 373, 2033: 393, 1961: 374, 1863: 351, 940: 174, 1965: 375, 944: 175, 1352: 250, 1970: 376, 948: 176, 953: 177, 1980: 378, 957: 178, 1985: 379, 966: 179, 1991: 380, 972: 180, 1999: 382, 2000: 383, 504: 90, 2002: 384, 979: 181, 2006: 385, 2010: 386, 987: 182, 2012: 387, 2013: 388, 991: 183, 992: 184, 2017: 389, 997: 185, 2024: 390, 2026: 391, 1003: 186, 2028: 392, 1007: 187, 1009: 188, 1012: 189, 1534: 287, 1016: 190, 2041: 395, 2045: 396, 1022: 191}
{2048: 396, 1029: 191, 6: 0, 2055: 398, 2060: 399, 13: 1, 1038: 192, 1039: 193, 16: 2, 23: 3, 1050: 194, 27: 4, 1055: 195, 688: 126, 35: 5, 1061: 196, 1064: 197, 44: 6, 1070: 198, 1071: 199, 54: 7, 1081: 200, 62: 8, 1089: 201, 66: 9, 69: 10, 1094: 202, 75: 11, 1102: 203, 1105: 204, 82: 12, 480: 86, 1109: 205, 86: 13, 91: 14, 1116: 206, 1123: 207, 1127: 208, 1895: 357, 108: 16, 1137: 209, 116: 17, 120: 18, 1146: 210, 1151: 211, 1154: 212, 133: 19, 134: 20, 1159: 214, 140: 21, 142: 22, 1168: 215, 1172: 216, 149: 23, 1176: 217, 154: 24, 1179: 218, 156: 25, 709: 131, 164: 26, 1194: 220, 171: 27, 1197: 221, 178: 28, 1205: 222, 1208: 223, 1212: 224, 1909: 360, 192: 29, 1222: 225, 1223: 226, 205: 30, 208: 31, 213: 32, 1238: 228, 218: 33, 1243: 229, 2053: 397, 1247: 230, 1248: 231, 1232: 227, 229: 35, 232: 36, 1257: 232, 236: 37, 240: 38, 1265: 233, 1268: 234, 247: 39, 1272: 235, 250: 40, 254: 41, 1281: 236, 1285: 237, 267: 43, 1292: 238, 270: 44, 1299: 239, 1300: 240, 279: 45, 1305: 241, 285: 46, 288: 47, 1317: 243, 1318: 244, 298: 48, 299: 49, 1326: 245, 303: 50, 1330: 246, 261: 42, 1336: 247, 313: 52, 316: 53, 318: 54, 224: 34, 395: 68, 327: 55, 1477: 273, 336: 56, 337: 57, 1365: 251, 343: 58, 348: 59, 1373: 252, 351: 60, 1377: 253, 354: 61, 1383: 254, 362: 62, 1387: 255, 1392: 256, 369: 63, 1395: 257, 1396: 258, 374: 64, 1403: 259, 380: 65, 384: 66, 1413: 260, 391: 67, 1416: 261, 1772: 332, 1419: 262, 1425: 263, 404: 69, 1429: 264, 409: 70, 1437: 265, 1438: 266, 419: 72, 1444: 267, 421: 73, 1446: 268, 425: 74, 1450: 269, 1452: 270, 413: 71, 436: 76, 437: 77, 1609: 301, 440: 78, 1467: 271, 445: 79, 1474: 272, 1782: 334, 1953: 371, 1482: 274, 1484: 275, 462: 81, 463: 82, 1488: 276, 453: 80, 1493: 277, 470: 83, 473: 84, 1500: 278, 477: 85, 1957: 372, 1504: 279, 484: 87, 1510: 280, 1515: 281, 1516: 282, 1517: 283, 1312: 242, 1522: 284, 1527: 285, 506: 90, 1533: 286, 512: 91, 513: 92, 1539: 287, 1540: 288, 1542: 289, 520: 93, 521: 94, 1548: 290, 527: 95, 528: 96, 1555: 291, 537: 97, 538: 98, 1563: 292, 543: 99, 1568: 293, 547: 100, 1572: 294, 550: 101, 1799: 337, 1580: 295, 558: 102, 562: 103, 1587: 296, 566: 104, 1593: 297, 1596: 298, 573: 105, 1601: 299, 582: 106, 1608: 300, 585: 107, 1611: 302, 589: 108, 1614: 303, 600: 109, 1625: 304, 603: 110, 1629: 305, 607: 111, 1634: 306, 1979: 377, 614: 112, 1638: 307, 615: 113, 1641: 308, 103: 15, 626: 115, 1653: 309, 630: 116, 632: 117, 641: 118, 1351: 249, 619: 114, 647: 119, 1675: 313, 653: 120, 1678: 314, 656: 121, 1682: 315, 431: 75, 1688: 316, 666: 122, 2016: 388, 1694: 317, 671: 123, 676: 124, 683: 125, 1709: 319, 1710: 320, 1712: 321, 689: 127, 697: 128, 1724: 322, 701: 129, 705: 130, 1730: 323, 1995: 380, 1654: 310, 1734: 324, 712: 132, 1739: 325, 1183: 219, 717: 133, 1744: 326, 721: 134, 1748: 327, 725: 135, 1753: 328, 1754: 329, 1759: 330, 736: 136, 1763: 331, 741: 137, 744: 138, 748: 139, 1776: 333, 754: 140, 758: 141, 761: 142, 1787: 335, 765: 143, 1791: 336, 772: 144, 1665: 312, 778: 145, 779: 146, 1806: 338, 787: 147, 1812: 339, 1815: 340, 795: 148, 2010: 385, 1822: 341, 802: 149, 879: 162, 503: 89, 1158: 213, 1830: 342, 807: 150, 1833: 343, 813: 151, 1839: 344, 1842: 345, 1846: 346, 824: 152, 828: 153, 1853: 347, 1854: 348, 309: 51, 833: 154, 1859: 349, 838: 155, 1866: 351, 844: 156, 1870: 352, 847: 157, 1875: 353, 852: 158, 1878: 354, 859: 159, 1884: 355, 1890: 356, 867: 160, 871: 161, 1900: 358, 1656: 311, 1904: 359, 885: 163, 886: 164, 1912: 361, 891: 165, 1939: 368, 1918: 362, 1919: 363, 897: 166, 1924: 364, 1926: 365, 492: 88, 1930: 366, 907: 167, 1932: 367, 913: 168, 1347: 248, 919: 169, 923: 170, 1950: 369, 1951: 370, 929: 171, 932: 172, 1862: 350, 1960: 373, 939: 173, 1964: 374, 943: 174, 1969: 375, 2035: 393, 948: 175, 949: 176, 1976: 376, 1695: 318, 956: 177, 1984: 378, 965: 178, 1990: 379, 971: 179, 1999: 381, 2000: 382, 2001: 383, 978: 180, 2005: 384, 986: 181, 2011: 386, 2013: 387, 990: 182, 992: 183, 996: 184, 1361: 250, 2024: 389, 2025: 390, 1002: 185, 2027: 391, 1007: 186, 1008: 187, 1011: 188, 1015: 189, 2040: 394, 2032: 392, 2044: 395, 1021: 190}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Rama Devi']
response in server.py code:
 [(255, 12, 'Ganges'), (280, 5, 'India'), (608, 6, 'Ganges'), (657, 9, 'Allahabad'), (2100, 9, 'Allahabad'), (1110, 6, 'Ganges'), (992, 15, 'Kumbh_Mela'), (2756, 15, 'Kumbh_Mela'), (2969, 15, 'Kumbh_Mela'), (1885, 10, 'Kumbh_Mela'), (1505, 10, 'Kumbh_Mela'), (2422, 9, 'Allahabad'), (135, 5, 'India'), (17, 6, 'Ganges'), (2948, 10, 'Kumbh_Mela'), (421, 15, 'Kumbh_Mela'), (124, 9, 'Allahabad'), (2166, 5, 'Kumbh_Mela'), (2055, 5, 'Kumbh_Mela'), (2465, 13, 'Uttar_Pradesh'), (1847, 6, 'Ganges'), (620, 6, 'Yamuna'), (1816, 14, 'Madhya_Pradesh'), (1597, 11, 'West_Bengal'), (808, 16, 'Hindu_texts'), (2071, 9, 'V._S._Ramadevi'), (2663, 6, 'Garuda'), (3032, 24, 'Guinness_World_Records'), (2535, 9, 'Hindu_deities'), (2507, 6, 'Garuda'), (2440, 5, 'Hindi'), (2545, 6, 'Vishnu'), (1699, 10, 'Shakuntala'), (2314, 11, 'Indian_Army')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(55, 19, 'University_of_Turin'), (18, 11, 'High_school')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(24, 3, 'John_F._Kennedy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 11, 'Mayo_Clinic')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Nelson Mandela']
response in server.py code:
 [(0, 14, 'Nelson_Mandela'), (33, 17, 'Umkhonto_we_Sizwe')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(35, 6, 'London'), (351, 6, 'Greece'), (424, 6, 'Greece'), (592, 6, 'Greece'), (681, 5, 'Spain'), (474, 11, 'Alba_Berlin'), (525, 5, 'Spain'), (376, 18, 'Fortitudo_Pallacanestro_Bologna'), (234, 5, 'Italy'), (396, 5, 'Italy'), (864, 14, 'Virtus_Pallacanestro_Bologna'), (722, 16, 'Bayer_04_Leverkusen'), (905, 5, 'Spain'), (880, 5, 'Italy'), (936, 6, 'Russia'), (653, 6, 'France'), (807, 6, 'France'), (577, 13, 'Panathinaikos_F.C.'), (795, 10, 'Élan_Béarnais_Pau-Orthez'), (340, 9, 'Panionios_G.S.S.'), (487, 7, 'Germany'), (704, 7, 'Croatia'), (297, 6, 'Turkey'), (778, 6, 'Turkey'), (620, 8, 'Slovenia'), (13, 10, 'Euroleague_Basketball'), (250, 16, 'Maccabi_Tel_Aviv_F.C.'), (456, 7, 'Croatia'), (412, 10, 'Olympiacos_F.C.'), (740, 7, 'Germany'), (552, 7, 'Belgium'), (323, 6, 'France'), (541, 9, 'R._Charleroi_S.C.'), (76, 10, 'Euroleague_Basketball'), (765, 11, 'Anadolu_Efes_S.K.'), (670, 9, 'FC_Barcelona'), (202, 6, 'Russia'), (843, 10, 'Yugoslavia'), (441, 13, 'KK_Cibona'), (639, 12, 'ASVEL_Basket'), (896, 7, 'Sevilla_FC'), (921, 13, 'FC_Dynamo_Moscow'), (268, 6, 'Israel'), (189, 11, 'PFC_CSKA_Moscow'), (824, 17, 'FK_Partizan'), (314, 7, 'Limoges_CSP'), (609, 9, 'Ljubljana'), (505, 18, 'CB_Estudiantes'), (697, 5, 'Split,_Croatia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Chuan Leekpai']
response in server.py code:
 [(1329, 9, "Christie's"), (166, 8, 'Thailand'), (1040, 12, 'Bangkok_Post'), (1247, 13, 'Chuan_Leekpai'), (697, 27, 'International_Monetary_Fund'), (795, 12, 'Economy_of_Thailand'), (184, 7, 'Auction'), (218, 15, 'Financial_institution'), (406, 4, 'Thai_baht'), (580, 9, 'Liquidation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Saddam Hussein', 'Ayatollah Ruhollah Khomeini']
response in server.py code:
 [(81, 14, 'Saddam_Hussein'), (312, 13, 'Iran–Iraq_War'), (117, 13, 'United_States'), (961, 6, 'Kuwait'), (214, 4, 'Iraq'), (464, 4, 'United_Nations'), (670, 27, 'Ruhollah_Khomeini'), (818, 7, 'Embargo'), (633, 18, 'Politics_of_Iran'), (1276, 7, 'Baghdad'), (891, 9, 'International_sanctions'), (1346, 9, 'Patriotism'), (1232, 9, 'Artillery'), (527, 6, 'Allies_of_World_War_II')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(80, 12, 'South_Korea'), (22, 9, 'South_Korea'), (501, 6, 'Hanwha_Eagles'), (226, 6, 'Hanwha_Eagles'), (596, 2, 'LG_Corp'), (52, 5, 'Seoul'), (548, 7, 'Samsung'), (206, 7, 'Samsung'), (196, 7, 'Samsung'), (146, 2, 'Odense_Boldklub'), (141, 2, 'LG_Corp'), (288, 7, 'Samsung'), (614, 2, 'Odense_Boldklub'), (571, 5, 'Lotte_(conglomerate)'), (268, 7, 'Hyundai'), (448, 6, 'Haitai'), (522, 7, 'Hyundai'), (258, 5, 'Lotte_(conglomerate)'), (217, 6, 'Haitai'), (169, 7, 'Hyundai'), (151, 5, 'Lotte_(conglomerate)'), (159, 7, 'Hyundai'), (277, 6, 'Haitai'), (187, 6, 'Haitai'), (179, 5, 'Lotte_(conglomerate)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(526, 5, 'China'), (22, 5, 'China'), (189, 5, 'China'), (1018, 5, 'China'), (829, 21, 'Chengdu_Research_Base_of_Giant_Panda_Breeding'), (572, 5, 'China'), (1035, 7, 'Sichuan'), (917, 9, 'Chongqing'), (452, 18, 'Xinhua_News_Agency'), (721, 7, 'Sichuan'), (1071, 7, 'Shaanxi'), (96, 7, 'Beijing'), (393, 29, "State_Forestry_Administration_of_the_People's_Republic_of_China")]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(27, 13, 'United_States'), (0, 4, 'Fiat'), (98, 7, 'Country_music'), (112, 5, 'Heavy_equipment')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Anna Wintor']
response in server.py code:
 [(102, 11, 'Anna_Wintour')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Tony Romo']
response in server.py code:
 [(88, 9, 'Tony_Romo'), (68, 7, 'Dallas_Cowboys')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(31, 7, 'Scholarly_method'), (42, 8, 'Berkeley,_California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(18, 6, 'London'), (6, 8, 'BBC_News'), (107, 11, 'Los_Angeles'), (97, 6, 'Taiwan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['LITTLE', 'CAMPESE', 'Jason Little', 'Daniel Herbert', 'Owen Finegan', 'David Campese', 'Rob Andrew', 'Tim Stimpson', 'Tony Underwood', 'Ian Jones', 'Norm Hewitt', 'Tim Stimpson', 'Nigel Walker', 'Allan Bateman', 'Gregor Townsend', 'Tony Underwood', 'Rob Andrew', 'Rob Howley', 'Scott Quinnell', 'Neil Back', 'Dale McIntosh', 'Ian Jones', 'Craig Quinnell', 'Darren Garforth', 'Norm Hewitt', 'Nick Popplewell', 'Matthew Burke', 'Joe Roff', 'Daniel Herbert', 'Tim Horan', 'David Campese', 'Pat Howard', 'David Wilson', 'Owen Finegan', 'David Giffin', 'Tim Gavin', 'Andrew Blades', 'Dan Crowley']
response in server.py code:
 [(61, 6, 'London'), (2198, 13, 'Matt_Burke'), (1865, 14, 'Tony_Underwood'), (1923, 10, 'Rob_Howley'), (1747, 12, 'Tim_Stimpson'), (1832, 15, 'Gregor_Townsend'), (352, 12, 'Owen_Finegan'), (1897, 10, 'Rob_Andrew'), (1948, 14, 'Scott_Quinnell'), (1277, 6, 'Rob_Andrew'), (2255, 9, 'Tim_Horan'), (665, 13, 'David_Campese'), (1027, 10, 'Rob_Andrew'), (1804, 13, 'Allan_Bateman'), (2371, 12, 'Owen_Finegan'), (2154, 15, 'Nick_Popplewell'), (1654, 14, 'Tony_Underwood'), (1623, 12, 'Tim_Stimpson'), (950, 7, 'David_Campese'), (2281, 13, 'David_Campese'), (1976, 9, 'Neil_Back'), (1761, 7, 'England'), (504, 9, 'Australia_national_rugby_union_team'), (336, 14, 'Daniel_Herbert'), (1819, 5, 'Wales'), (1675, 9, 'New_Zealand_national_rugby_union_team'), (2219, 8, 'Joe_Roff'), (1987, 7, 'England'), (749, 9, 'Australia_national_rugby_union_team'), (86, 12, 'Jason_Little_(rugby_union)'), (1791, 5, 'Wales'), (1909, 7, 'England'), (191, 6, 'Jason_Little_(rugby_union)'), (29, 7, 'David_Campese'), (1729, 10, 'Barbarian_F.C.'), (2234, 14, 'Daniel_Herbert'), (1881, 7, 'England'), (1777, 12, 'Nigel_Walker'), (1523, 10, 'Barbarian_F.C.'), (1008, 10, 'Barbarian_F.C.'), (2033, 9, 'Ian_Jones_(rugby_union)'), (2078, 5, 'Wales'), (1964, 5, 'Wales'), (2302, 10, 'Pat_Howard'), (1935, 5, 'Wales'), (2062, 14, 'Craig_Quinnell'), (2136, 11, 'New_Zealand'), (2407, 9, 'Tim_Gavin'), (2001, 13, 'Dale_McIntosh'), (1849, 8, 'Scotland'), (2090, 15, 'Darren_Garforth'), (2459, 11, 'Dan_Crowley'), (1320, 10, 'Twickenham_Stadium'), (1694, 9, 'Ian_Jones_(rugby_union)'), (2044, 11, 'New_Zealand'), (0, 11, 'Rugby_union'), (153, 10, 'Barbarian_F.C.'), (1140, 9, 'Cape_Town'), (725, 10, 'Australia'), (2422, 13, 'Andrew_Blades'), (1605, 7, 'England'), (2389, 12, 'David_Giffin'), (578, 8, 'Europe'), (167, 10, 'Twickenham_Stadium'), (1708, 11, 'Norm_Hewitt'), (2123, 11, 'Norm_Hewitt'), (2107, 9, 'Leicester'), (323, 12, 'Queensland_cricket_team'), (2171, 7, 'Republic_of_Ireland'), (2353, 12, 'David_Wilson_(rugby_union)'), (2016, 10, 'Pontypridd_RFC'), (1352, 9, 'Australia'), (1423, 5, 'Wales'), (1401, 8, 'Scotland'), (2181, 9, 'Australia_national_cricket_team'), (434, 5, 'Wales_national_rugby_union_team'), (1058, 9, 'Australia_national_rugby_union_team'), (1113, 9, 'FIFA_World_Cup'), (1394, 5, 'Italy'), (109, 9, 'Australia_national_cricket_team'), (14, 6, 'Brian_Little_(footballer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(224, 13, 'Bristol-Myers_Squibb'), (344, 13, 'Bristol-Myers_Squibb')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Nixon']
response in server.py code:
 [(0, 5, 'Richard_Nixon'), (21, 9, 'Watergate_scandal'), (83, 5, 'China'), (58, 19, 'Ping-pong_diplomacy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(239, 5, 'Lagos'), (248, 18, 'The_Guardian'), (75, 6, 'Boeing'), (1367, 7, 'Nigeria'), (60, 11, 'Air_Afrique'), (1132, 17, 'Cameroon_Airlines'), (1230, 6, 'Tarmac'), (707, 13, 'Distress_signal'), (1442, 13, 'Violent_crime'), (767, 8, 'Security')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Diet_(nutrition)'), (10, 11, 'Cholesterol')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Sandrine Testud', 'Ines Gorrochategui', 'Goran Ivanisevic', 'Scott Draper', 'Tim Henman', 'Doug Flach', 'Mark Philippoussis', 'Andrei Olhovskiy', 'Sjeng Schalken', 'David Rikl', 'Guy Forget', 'Felix Mantilla', 'Alexander Volkov', 'Mikael Tillstrom', 'Jonas Bjorkman', 'David Nainkin', 'Lindsay Davenport', 'Anne-Gaelle Sidot', 'Conchita Martinez', 'Helena Sukova', 'Amanda Coetzer', 'Irina Spirlea', 'Cedric Pioline', 'Roberto Carretero', 'Alex Corretja', 'Filippo Veglio', 'Linda Wild', 'Barbara Rittner', 'Asa Carlsson', 'Gabriela Sabatini', 'Pete Sampras', 'Jiri Novak', 'Paul Haarhuis', 'Michael Tebbutt', 'Lisa Raymond', 'Kimberly Po', 'Hendrik Dreekmann', 'Thomas Johansson', 'Andrei Medvedev', 'Jan Kroslak', 'Petr Korda', 'Bohdan Ulihrach', 'Monica Seles', 'Dally Randriantefy', 'Todd Martin', 'Andrea Gaudenzi', 'Stefan Edberg', 'Bernd Karbacher']
response in server.py code:
 [(960, 17, 'Conchita_Martínez'), (457, 18, 'Mark_Philippoussis'), (1847, 15, 'Andriy_Medvedev'), (2137, 11, 'Todd_Martin'), (1386, 12, 'Åsa_Svensson'), (1213, 13, 'Àlex_Corretja'), (2161, 15, 'Andrea_Gaudenzi'), (401, 10, 'Tim_Henman'), (1030, 14, 'Amanda_Coetzer'), (733, 16, 'Mikael_Tillström'), (2197, 13, 'Stefan_Edberg'), (1365, 7, 'Germany'), (787, 14, 'Jonas_Björkman'), (247, 18, 'Inés_Gorrochategui'), (891, 17, 'Lindsay_Davenport'), (1785, 7, 'Germany'), (1817, 6, 'Sweden'), (1418, 17, 'Gabriela_Sabatini'), (354, 12, 'Scott_Draper'), (1602, 15, 'Michael_Tebbutt'), (1913, 10, 'Petr_Korda'), (1521, 10, 'Jiří_Novák'), (1569, 13, 'Paul_Haarhuis'), (816, 13, 'David_Nainkin'), (1348, 15, 'Barbara_Rittner'), (427, 10, 'Doug_Flach'), (1799, 16, 'Thomas_Johansson'), (609, 10, 'Guy_Forget'), (1228, 5, 'Spain'), (368, 9, 'Australia'), (493, 16, 'Andrei_Olhovskiy'), (639, 14, 'Félix_Mantilla_Botella'), (567, 10, 'David_Rikl'), (1140, 14, 'Cédric_Pioline'), (1680, 12, 'Lisa_Raymond'), (1188, 5, 'Spain'), (720, 6, 'Russia'), (1400, 6, 'Sweden'), (2225, 15, 'Bernd_Karbacher'), (2178, 5, 'Italy'), (921, 17, 'Anne-Gaëlle_Sidot'), (751, 6, 'Sweden'), (655, 5, 'Spain'), (1705, 11, 'Kimberly_Po'), (1878, 11, 'Ján_Krošlák'), (1169, 17, 'Roberto_Carretero'), (979, 5, 'Spain'), (1065, 13, 'Irina_Spîrlea'), (1080, 7, 'Romania'), (1496, 12, 'Pete_Sampras'), (803, 6, 'Sweden'), (1962, 14, 'Czech_Republic'), (991, 13, 'Helena_Suková'), (511, 6, 'Russia'), (1156, 6, 'France'), (1533, 14, 'Czech_Republic'), (621, 6, 'France'), (477, 9, 'Australia'), (1891, 8, 'Slovakia'), (940, 6, 'France'), (217, 15, 'Sandrine_Testud'), (2033, 12, 'Monica_Seles'), (2212, 6, 'Sweden'), (1925, 14, 'Czech_Republic'), (234, 6, 'France'), (1694, 4, 'United_States'), (1945, 15, 'Bohdan_Ulihrach'), (2047, 4, 'United_States'), (322, 16, 'Goran_Ivanišević'), (1718, 4, 'United_States'), (1510, 4, 'United_States'), (1619, 9, 'Australia'), (831, 12, 'South_Africa'), (1337, 4, 'United_States'), (1437, 9, 'Argentina'), (2150, 4, 'United_States'), (2242, 7, 'Germany'), (1584, 11, 'Netherlands'), (910, 4, 'United_States'), (1256, 11, 'Switzerland'), (83, 30, 'US_Open_(tennis)'), (2058, 18, 'Dally_Randriantefy'), (35, 9, 'US_Open_(tennis)'), (1046, 12, 'South_Africa'), (1864, 7, 'Ukraine'), (439, 4, 'United_States'), (1766, 17, 'Hendrik_Dreekmann'), (267, 9, 'Argentina'), (549, 11, 'Netherlands'), (340, 7, 'Croatia'), (1240, 14, 'Filippo_Veglio'), (413, 7, 'United_Kingdom'), (533, 14, 'Sjeng_Schalken'), (702, 16, 'Alexander_Vladimirovich_Volkov'), (2078, 10, 'Madagascar'), (1325, 10, 'Linda_Wild'), (579, 14, 'Czech_Republic'), (1006, 14, 'Czech_Republic'), (121, 22, 'National_Tennis_Centre_(United_Kingdom)'), (46, 8, 'New_York_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Charles Schumer', 'Michael Chertoff']
response in server.py code:
 [(154, 4, 'United_States'), (13, 4, 'United_States'), (2410, 8, 'New_York_City'), (4637, 7, 'Chicago'), (509, 20, 'Minneapolis–Saint_Paul'), (541, 4, 'Ohio'), (2287, 18, 'World_Trade_Center'), (2638, 17, 'Hurricane_Katrina'), (620, 7, 'Chicago'), (2106, 8, 'New_York_City'), (3736, 13, 'San_Francisco'), (4660, 11, 'Baton_Rouge,_Louisiana'), (372, 20, 'Associated_Press'), (3585, 11, 'Los_Angeles'), (4299, 28, 'United_States_Department_of_Homeland_Security'), (1981, 16, 'Michael_Chertoff'), (1193, 28, 'United_States_Department_of_Homeland_Security'), (1720, 15, 'Chuck_Schumer'), (547, 11, 'Sioux_Falls,_South_Dakota'), (498, 9, 'San_Diego'), (2603, 8, 'New_York_City'), (765, 16, 'Territories_of_the_United_States'), (531, 8, 'Columbus,_Ohio'), (666, 4, 'North_Dakota'), (1833, 17, 'Homeland_security'), (640, 11, 'Baton_Rouge,_Louisiana'), (1275, 8, 'United_States_Congress'), (5051, 4, 'North_Dakota'), (1953, 17, 'Homeland_security'), (492, 4, 'Washington,_D.C.'), (4798, 14, 'American_Samoa'), (629, 9, 'Cleveland'), (4771, 4, 'North_Dakota'), (676, 14, 'American_Samoa'), (4646, 9, 'Cleveland'), (4092, 8, 'United_States_Congress'), (126, 10, 'Washington,_D.C.'), (5036, 13, 'Morton_County,_North_Dakota'), (570, 14, 'Laramie_County,_Wyoming'), (5025, 6, 'Mandan,_North_Dakota'), (658, 6, 'Mandan'), (4763, 6, 'Mandan'), (480, 10, 'Washington,_D.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['William Cullen']
response in server.py code:
 [(157, 23, 'University_of_Edinburgh'), (114, 9, 'Professor'), (60, 7, 'Teacher'), (71, 7, 'Glasgow'), (96, 14, 'William_Cullen'), (42, 6, 'Friendship'), (38, 3, 'Bon_Jovi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['John Legend']
response in server.py code:
 [(51, 6, 'Grammy_Award'), (65, 11, 'John_Legend')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(51, 6, 'Coolum_Beach,_Queensland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(36, 21, 'University_of_Bologna')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 17, 'Girl_Scout_Cookies'), (18, 5, 'Sales'), (24, 5, 'Date_palm')]
given spans fix. original text:   WORLD' &LR; &QL; &UR; By STUART ELLIOTT &LR; &QC; &QL; &UR; c.2000 N.Y. Times News Service &LR; &QC; &QL;    It's time again to ask 20 questions about advertising, marketing and the media.   _ Will Americans ever refer to the day before Thanksgiving as ``Thanksgiving Wednesday,'' as ABC did repeatedly this week in commercials promoting its Wednesday sitcoms ``The Drew Carey Show'' and ``Spin City''?   _ If a Hollywood studio makes a movie about the Florida election standoff, would the title be ``It's a Chad, Chad, Chad, Chad World''?   _ How many readers of The Wall Street Journal noticed that an article on Wednesday carrying the headline ``Genetically Altered Protein Is Found in Still More Corn'' ran adjacent to an advertisement for a golf tournament on Fox Sports sponsored by Sun Microsystems that featured a fanciful photograph of a gigantic ear of corn as big as a Buick?   _ Doesn't a new television commercial for Fidelity Investments, centered on a telephone conversation between a female employee and a male customer, resemble a Citibank campaign from the late 1980s that was so brilliantly parodied as the ``First Citiwide Change Bank'' commercials on ``Saturday Night Live''?   _ Did shoppers at the New York supermarket chain Gristede's rush to take advantage of a recent sale on the ``BIG 150-count box'' of Scotties facial tissues, or did they recall that Scotties has usually come in a 175-count box?   _ Can Ocean Spray Cranberries get a refund on a full-page ad that ran in newspapers on Nov. 8 and carried the headline ``Now That the Election Is Over, You Can Focus on Some Real News''?   _ Was it a coincidence that an ad for the Carnation Coffee-mate line of coffee creamers in the recent issue of In Style Entertaining 2000 magazine ran opposite an article about ``great trends'' in party-giving that began by describing carnations as ``the chic flower of the moment''?   _ Should an English teacher have been consulted before the Tropicana division of PepsiCo produced posters that described its Pure Premium orange juice as being ``as packed with Vitamin C as a bus on a rainy day''?   _ Will Jack Nicholson, Helen Hunt, Greg Kinnear and James L. Brooks complain about an ad from Campbell Soup Co. for Campbell's Cream of Mushroom soup that carried the slogan ``As m'm! m'm! good! as it gets''?   _ Now that the Roundabout Theater Company is calling its new facility in Times Square the American Airlines Theater, will the ushers give out peanuts instead of Playbills?   _ Why did the Reader's Digest Association go to the trouble of airbrushing the identifying information from a label on a pair of jeans worn by a man in a photograph featured in an ad for Reader's Digest magazine, but leave the red tab on the back pocket that tells everyone the pants are Levi's?   _ Do television commercials for prescription drugs disclose that side effects in tests were no worse ``than a sugar pill'' because research found that consumers weren't familiar with the word ``placebo''?   _ What was in the zeitgeist that led two disparate advertisers _ Empire Blue Cross Blue Shield and the MSN network of Microsoft _ to introduce about the same time campaigns centered on butterflies?   _ And what was in the zeitgeist that led two automotive marketers _ Land Rover and Volvo _ to introduce about the same time commercials centered on drivers rescuing animals on rainy roads?   _ Are folks old enough to remember the heyday of the radio and television personality Arthur Godfrey reminded of his longtime greeting, ``How are ya?,'' every time they hear the name of the new Lucent Technologies spinoff company, Avaya Communication?   _ How appealing was a recent offer made by Sprint Communications Co. to give buyers of a Sprint PCS telephone and a calling plan a free ``pre-owned phone''?   _ Was it an inside joke that the name of the character played by John Corbett on ``Sex and the City,'' Aidan Shaw, was almost identical to the name of a longtime star of gay sex films, Aiden Shaw?   _ How many tickets did the Houston Grand Opera sell after mailing out a promotional brochure featuring photographs of cattle with headlines like ``It's udderly fantastic entertainment!'' and ``Great opera. No bull.''?   _ If CBS shows the first episode of ``Survivor II'' after its broadcast of Super Bowl XXXV, will the network someday show the first episode of ``Survivor XXXV'' after its broadcast of Super Bowl LXVIII?   _ Will cheerful chorus members dressed in V-neck sweaters interrupt their serenades to online shopping long enough to tell an advertising columnist, ``You ask a lot of questions for someone from Brooklyn''?  

original word:  Co. Co.
new split:  Co  and  .
[(1, 6), (6, 7), (8, 9), (9, 11), (11, 12), (13, 14), (14, 16), (16, 17), (18, 19), (19, 21), (21, 22), (23, 25), (26, 32), (33, 40), (41, 42), (42, 44), (44, 45), (46, 47), (47, 49), (49, 50), (51, 52), (52, 54), (54, 55), (56, 57), (57, 59), (59, 60), (61, 67), (68, 72), (73, 78), (79, 83), (84, 91), (92, 93), (93, 95), (95, 96), (97, 98), (98, 100), (100, 101), (102, 103), (103, 105), (105, 106), (110, 112), (112, 114), (115, 119), (120, 125), (126, 128), (129, 132), (133, 135), (136, 145), (146, 151), (152, 163), (163, 164), (165, 174), (175, 178), (179, 182), (183, 188), (188, 189), (192, 193), (194, 198), (199, 208), (209, 213), (214, 219), (220, 222), (223, 226), (227, 230), (231, 237), (238, 250), (251, 253), (254, 256), (256, 268), (269, 278), (278, 279), (279, 281), (282, 284), (285, 288), (289, 292), (293, 303), (304, 308), (309, 313), (314, 316), (317, 328), (329, 338), (339, 342), (343, 352), (353, 360), (361, 363), (363, 366), (367, 371), (372, 377), (378, 382), (382, 384), (385, 388), (389, 391), (391, 395), (396, 400), (400, 402), (402, 403), (406, 407), (408, 410), (411, 412), (413, 422), (423, 429), (430, 435), (436, 437), (438, 443), (444, 449), (450, 453), (454, 461), (462, 470), (471, 479), (479, 480), (481, 486), (487, 490), (491, 496), (497, 499), (500, 502), (502, 504), (504, 506), (507, 508), (509, 513), (513, 514), (515, 519), (519, 520), (521, 525), (525, 526), (527, 531), (532, 537), (537, 539), (539, 540), (543, 544), (545, 548), (549, 553), (554, 561), (562, 564), (565, 568), (569, 573), (574, 580), (581, 588), (589, 596), (597, 601), (602, 604), (605, 612), (613, 615), (616, 625), (626, 634), (635, 638), (639, 647), (648, 650), (650, 661), (662, 669), (670, 677), (678, 680), (681, 686), (687, 689), (690, 695), (696, 700), (701, 705), (705, 707), (708, 711), (712, 720), (721, 723), (724, 726), (727, 740), (741, 744), (745, 746), (747, 751), (752, 762), (763, 765), (766, 769), (770, 776), (777, 786), (787, 789), (790, 793), (794, 806), (807, 811), (812, 820), (821, 822), (823, 831), (832, 842), (843, 845), (846, 847), (848, 856), (857, 860), (861, 863), (864, 868), (869, 871), (872, 875), (876, 878), (879, 880), (881, 886), (886, 887), (890, 891), (892, 896), (896, 899), (900, 901), (902, 905), (906, 916), (917, 927), (928, 931), (932, 940), (941, 952), (952, 953), (954, 962), (963, 965), (966, 967), (968, 977), (978, 990), (991, 998), (999, 1000), (1001, 1007), (1008, 1016), (1017, 1020), (1021, 1022), (1023, 1027), (1028, 1036), (1036, 1037), (1038, 1046), (1047, 1048), (1049, 1057), (1058, 1066), (1067, 1071), (1072, 1075), (1076, 1080), (1081, 1086), (1087, 1091), (1092, 1095), (1096, 1098), (1099, 1110), (1111, 1119), (1120, 1122), (1123, 1126), (1127, 1129), (1129, 1134), (1135, 1143), (1144, 1150), (1151, 1155), (1155, 1157), (1158, 1169), (1170, 1172), (1173, 1175), (1175, 1183), (1184, 1189), (1190, 1194), (1194, 1196), (1196, 1197), (1200, 1201), (1202, 1205), (1206, 1214), (1215, 1217), (1218, 1221), (1222, 1225), (1226, 1230), (1231, 1242), (1243, 1248), (1249, 1257), (1257, 1259), (1260, 1264), (1265, 1267), (1268, 1272), (1273, 1282), (1283, 1285), (1286, 1287), (1288, 1294), (1295, 1299), (1300, 1302), (1303, 1306), (1307, 1309), (1309, 1312), (1313, 1322), (1323, 1326), (1326, 1328), (1329, 1331), (1332, 1340), (1341, 1347), (1348, 1355), (1355, 1356), (1357, 1359), (1360, 1363), (1364, 1368), (1369, 1375), (1376, 1380), (1381, 1389), (1390, 1393), (1394, 1401), (1402, 1406), (1407, 1409), (1410, 1411), (1412, 1421), (1422, 1425), (1425, 1426), (1429, 1430), (1431, 1434), (1435, 1440), (1441, 1446), (1447, 1458), (1459, 1462), (1463, 1464), (1465, 1471), (1472, 1474), (1475, 1476), (1477, 1486), (1487, 1489), (1490, 1494), (1495, 1498), (1499, 1501), (1502, 1512), (1513, 1515), (1516, 1520), (1521, 1522), (1523, 1526), (1527, 1534), (1535, 1538), (1539, 1547), (1548, 1550), (1550, 1553), (1554, 1558), (1559, 1562), (1563, 1571), (1572, 1574), (1575, 1579), (1579, 1580), (1581, 1584), (1585, 1588), (1589, 1594), (1595, 1597), (1598, 1602), (1603, 1607), (1608, 1612), (1612, 1614), (1614, 1615), (1618, 1619), (1620, 1623), (1624, 1626), (1627, 1628), (1629, 1640), (1641, 1645), (1646, 1648), (1649, 1651), (1652, 1655), (1656, 1659), (1660, 1669), (1670, 1681), (1682, 1686), (1687, 1689), (1690, 1696), (1697, 1705), (1706, 1708), (1709, 1712), (1713, 1719), (1720, 1725), (1726, 1728), (1729, 1731), (1732, 1737), (1738, 1750), (1751, 1755), (1756, 1764), (1765, 1768), (1769, 1777), (1778, 1780), (1781, 1788), (1789, 1794), (1795, 1797), (1797, 1802), (1803, 1809), (1809, 1811), (1812, 1814), (1815, 1827), (1828, 1832), (1833, 1838), (1839, 1841), (1842, 1852), (1853, 1863), (1864, 1866), (1867, 1869), (1869, 1872), (1873, 1877), (1878, 1884), (1885, 1887), (1888, 1891), (1892, 1898), (1898, 1900), (1900, 1901), (1904, 1905), (1906, 1912), (1913, 1915), (1916, 1923), (1924, 1931), (1932, 1936), (1937, 1941), (1942, 1951), (1952, 1958), (1959, 1962), (1963, 1972), (1973, 1981), (1982, 1984), (1985, 1992), (1993, 2001), (2002, 2009), (2010, 2014), (2015, 2024), (2025, 2028), (2029, 2033), (2034, 2041), (2042, 2048), (2049, 2054), (2055, 2057), (2058, 2063), (2064, 2066), (2066, 2068), (2069, 2075), (2076, 2080), (2081, 2088), (2089, 2090), (2091, 2093), (2094, 2095), (2096, 2099), (2100, 2102), (2103, 2104), (2105, 2110), (2111, 2114), (2114, 2116), (2116, 2117), (2120, 2121), (2122, 2126), (2127, 2131), (2132, 2141), (2141, 2142), (2143, 2148), (2149, 2153), (2153, 2154), (2155, 2159), (2160, 2167), (2168, 2171), (2172, 2177), (2178, 2180), (2181, 2187), (2188, 2196), (2197, 2202), (2203, 2205), (2206, 2208), (2209, 2213), (2214, 2222), (2223, 2227), (2228, 2230), (2230, 2231)]
{1: 0, 1028: 213, 6: 1, 2049: 403, 8: 2, 9: 3, 2058: 405, 11: 4, 1036: 214, 13: 5, 14: 6, 16: 7, 18: 8, 19: 9, 21: 10, 23: 11, 1049: 217, 26: 12, 2223: 441, 2076: 409, 33: 13, 1058: 218, 2081: 410, 41: 14, 42: 15, 1067: 219, 44: 16, 46: 17, 47: 18, 1072: 220, 49: 19, 51: 20, 52: 21, 54: 22, 2103: 416, 56: 23, 57: 24, 59: 25, 61: 26, 1087: 223, 2116: 420, 864: 183, 343: 82, 68: 27, 2230: 443, 1096: 225, 73: 28, 2122: 422, 1099: 226, 79: 29, 1720: 348, 84: 30, 1038: 215, 1111: 227, 92: 31, 93: 32, 95: 33, 1120: 228, 97: 34, 98: 35, 1123: 229, 100: 36, 2149: 427, 102: 37, 103: 38, 105: 39, 2155: 429, 2066: 407, 110: 40, 1135: 232, 112: 41, 115: 42, 120: 43, 2172: 432, 126: 44, 1151: 234, 129: 45, 2178: 433, 1155: 235, 133: 46, 1158: 236, 1729: 350, 136: 47, 1900: 380, 1047: 216, 2188: 435, 194: 57, 1539: 311, 146: 48, 1173: 238, 1175: 239, 152: 49, 1732: 351, 2203: 437, 2206: 438, 1184: 240, 2209: 439, 163: 50, 165: 51, 1190: 241, 1194: 242, 1196: 243, 175: 52, 1200: 244, 1202: 245, 179: 53, 2228: 442, 1206: 246, 183: 54, 188: 55, 1215: 247, 192: 56, 1218: 248, 1222: 249, 199: 58, 1916: 384, 1226: 250, 1231: 251, 209: 59, 214: 60, 1243: 252, 220: 61, 378: 88, 223: 62, 1249: 253, 227: 63, 231: 64, 1257: 254, 1260: 255, 238: 65, 1265: 256, 1268: 257, 2089: 411, 1273: 258, 251: 66, 254: 67, 256: 68, 1283: 259, 1286: 260, 1288: 261, 1751: 353, 269: 69, 1295: 262, 1300: 263, 2094: 413, 278: 70, 1303: 264, 2055: 404, 1924: 385, 282: 72, 1307: 265, 285: 73, 1313: 267, 293: 75, 1885: 376, 1323: 268, 1326: 269, 304: 76, 1329: 270, 1332: 271, 309: 77, 1076: 221, 314: 78, 317: 79, 565: 133, 1348: 273, 329: 80, 1355: 274, 1357: 275, 1360: 276, 2091: 412, 339: 81, 1364: 277, 1341: 272, 1081: 222, 1369: 278, 1765: 355, 1376: 279, 353: 83, 1381: 280, 361: 84, 2143: 426, 363: 85, 1390: 281, 367: 86, 1394: 282, 372: 87, 1598: 324, 1769: 356, 1402: 283, 2111: 418, 382: 89, 1407: 284, 385: 90, 1410: 285, 1412: 286, 389: 91, 2096: 414, 391: 92, 2127: 423, 396: 93, 2114: 419, 1422: 287, 400: 94, 1425: 288, 402: 95, 1309: 266, 1429: 289, 406: 96, 1431: 290, 408: 97, 1092: 224, 411: 98, 413: 99, 1441: 292, 1435: 291, 423: 100, 430: 101, 2120: 421, 1459: 294, 436: 102, 438: 103, 1463: 295, 1465: 296, 444: 104, 1472: 297, 1952: 389, 450: 105, 1475: 298, 1477: 299, 454: 106, 462: 107, 1487: 300, 1490: 301, 1959: 390, 1495: 302, 1499: 303, 1502: 304, 479: 109, 481: 110, 487: 111, 1513: 305, 1447: 293, 1516: 306, 1521: 307, 1523: 308, 500: 114, 502: 115, 1527: 309, 504: 116, 2132: 424, 507: 117, 509: 118, 1535: 310, 513: 119, 515: 120, 519: 121, 521: 122, 1548: 312, 525: 123, 1550: 313, 527: 124, 1554: 314, 532: 125, 1559: 315, 537: 126, 539: 127, 543: 128, 545: 129, 1572: 317, 549: 130, 2064: 406, 1575: 318, 554: 131, 1579: 319, 1581: 320, 1629: 333, 1585: 321, 562: 132, 1589: 322, 569: 134, 1595: 323, 574: 135, 1603: 325, 581: 136, 1608: 326, 1612: 327, 589: 137, 1614: 328, 1618: 329, 1620: 330, 597: 138, 1624: 331, 2168: 431, 602: 139, 1627: 332, 605: 140, 2100: 415, 613: 141, 616: 142, 1641: 334, 1127: 230, 1646: 335, 1649: 336, 626: 143, 1652: 337, 1129: 231, 1656: 338, 635: 144, 1660: 339, 639: 145, 1670: 340, 648: 146, 650: 147, 279: 71, 1682: 341, 662: 148, 1687: 342, 1690: 343, 670: 149, 1697: 344, 678: 150, 681: 151, 1706: 345, 1709: 346, 687: 152, 1713: 347, 690: 153, 696: 154, 2069: 408, 701: 155, 1726: 349, 705: 156, 708: 157, 289: 74, 712: 158, 1738: 352, 2105: 417, 721: 159, 724: 160, 727: 161, 1756: 354, 741: 162, 745: 163, 747: 164, 2002: 396, 752: 165, 1778: 357, 1781: 358, 2153: 428, 763: 166, 1789: 359, 766: 167, 770: 168, 1795: 360, 1797: 361, 777: 169, 1867: 372, 471: 108, 2160: 430, 1809: 363, 787: 170, 1812: 364, 790: 171, 1815: 365, 794: 172, 1144: 233, 1828: 366, 807: 173, 1833: 367, 812: 174, 2141: 425, 1839: 368, 1842: 369, 821: 175, 823: 176, 2015: 398, 1853: 370, 832: 177, 1864: 371, 843: 178, 1869: 373, 846: 179, 848: 180, 1873: 374, 1878: 375, 857: 181, 861: 182, 1563: 316, 1892: 378, 869: 184, 872: 185, 1898: 379, 876: 186, 1170: 237, 879: 187, 1904: 381, 881: 188, 1906: 382, 886: 189, 2025: 399, 1913: 383, 890: 190, 892: 191, 2197: 436, 896: 192, 491: 112, 900: 193, 902: 194, 1888: 377, 1803: 362, 906: 195, 1932: 386, 1937: 387, 917: 196, 1942: 388, 928: 197, 932: 198, 497: 113, 1963: 391, 941: 199, 1973: 392, 952: 200, 954: 201, 1982: 393, 1985: 394, 963: 202, 966: 203, 968: 204, 1993: 395, 978: 205, 2010: 397, 991: 206, 2181: 434, 2214: 440, 999: 207, 1001: 208, 2029: 400, 1008: 209, 2034: 401, 1017: 210, 2042: 402, 1021: 211, 1023: 212}
{2048: 402, 2148: 426, 1027: 212, 6: 0, 7: 1, 9: 2, 11: 3, 12: 4, 1037: 214, 14: 5, 2063: 405, 16: 6, 17: 7, 2066: 406, 19: 8, 2068: 407, 21: 9, 22: 10, 1048: 216, 25: 11, 2075: 408, 32: 12, 1057: 217, 2054: 403, 2080: 409, 40: 13, 1884: 375, 42: 14, 44: 15, 45: 16, 47: 17, 49: 18, 50: 19, 1075: 220, 52: 20, 54: 21, 55: 22, 1080: 221, 57: 23, 59: 24, 60: 25, 1086: 222, 2114: 418, 67: 26, 2116: 419, 2117: 420, 1095: 224, 72: 27, 1036: 213, 1098: 225, 1719: 347, 78: 28, 83: 29, 1550: 312, 1110: 226, 91: 30, 93: 31, 2142: 425, 95: 32, 96: 33, 1122: 228, 100: 35, 101: 36, 1126: 229, 103: 37, 105: 38, 106: 39, 871: 184, 1134: 231, 2159: 429, 112: 40, 114: 41, 119: 42, 2171: 431, 125: 43, 1150: 233, 128: 44, 2177: 432, 1155: 234, 132: 45, 1046: 215, 135: 46, 2187: 434, 1901: 380, 145: 47, 1731: 350, 1172: 237, 151: 48, 2202: 436, 2205: 437, 1183: 239, 2208: 438, 163: 49, 164: 50, 1189: 240, 1194: 241, 1196: 242, 1197: 243, 174: 51, 2222: 440, 1201: 244, 178: 52, 2227: 441, 1205: 245, 182: 53, 2231: 443, 188: 54, 189: 55, 1214: 246, 193: 56, 1221: 248, 198: 57, 1225: 249, 1230: 250, 208: 58, 213: 59, 377: 87, 1242: 251, 219: 60, 222: 61, 1248: 252, 226: 62, 1915: 383, 1951: 388, 230: 63, 1257: 253, 1259: 254, 237: 64, 1264: 255, 2088: 410, 1267: 256, 1406: 283, 1272: 257, 250: 65, 1066: 218, 256: 67, 1282: 258, 1285: 259, 1287: 260, 268: 68, 1294: 261, 2093: 412, 1299: 262, 1302: 263, 279: 70, 281: 71, 1306: 264, 1071: 219, 284: 72, 1309: 265, 288: 73, 292: 74, 1322: 267, 1326: 268, 303: 75, 1328: 269, 1331: 270, 308: 76, 313: 77, 316: 78, 1347: 272, 2102: 415, 328: 79, 1355: 273, 1356: 274, 1359: 275, 1750: 352, 2104: 416, 338: 80, 1363: 276, 2057: 404, 342: 81, 1368: 277, 1764: 354, 1375: 278, 352: 82, 1887: 376, 1380: 279, 360: 83, 363: 84, 1389: 280, 366: 85, 1597: 323, 1393: 281, 371: 86, 2024: 398, 1401: 282, 382: 88, 384: 89, 1409: 284, 1411: 285, 388: 90, 391: 91, 395: 92, 1421: 286, 400: 93, 1425: 287, 1426: 288, 1091: 223, 1430: 289, 407: 96, 410: 97, 412: 98, 1434: 290, 2230: 442, 1440: 291, 422: 99, 429: 100, 1458: 293, 435: 101, 437: 102, 1462: 294, 2121: 421, 1464: 295, 2110: 417, 443: 103, 1471: 296, 449: 104, 1474: 297, 1476: 298, 453: 105, 1612: 326, 461: 106, 1486: 299, 1489: 300, 2126: 422, 1494: 301, 1498: 302, 1615: 328, 1501: 303, 479: 108, 480: 109, 1446: 292, 486: 110, 1512: 304, 490: 111, 1515: 305, 1312: 266, 1520: 306, 1522: 307, 499: 113, 1526: 308, 504: 115, 506: 116, 508: 117, 1534: 309, 513: 118, 514: 119, 519: 120, 520: 121, 1547: 311, 525: 122, 526: 123, 1553: 313, 531: 124, 1558: 314, 537: 125, 1562: 315, 539: 126, 540: 127, 1797: 360, 544: 128, 1571: 316, 548: 129, 1574: 317, 553: 130, 1579: 318, 1580: 319, 2141: 424, 1584: 320, 561: 131, 564: 132, 568: 133, 1594: 322, 1119: 227, 1538: 310, 573: 134, 2099: 414, 1602: 324, 580: 135, 1607: 325, 588: 136, 98: 34, 1614: 327, 1588: 321, 1619: 329, 596: 137, 1129: 230, 1623: 330, 601: 138, 1626: 331, 604: 139, 612: 140, 615: 141, 1640: 333, 1645: 334, 1981: 392, 1648: 335, 625: 142, 1651: 336, 1655: 337, 634: 143, 1659: 338, 2154: 428, 638: 144, 253: 66, 278: 69, 647: 145, 650: 146, 1931: 385, 1681: 340, 661: 147, 1686: 341, 1689: 342, 669: 148, 1696: 343, 677: 149, 680: 150, 1705: 344, 1708: 345, 686: 151, 1712: 346, 689: 152, 695: 153, 700: 154, 1725: 348, 1728: 349, 705: 155, 707: 156, 711: 157, 1737: 351, 1217: 247, 1143: 232, 2180: 433, 2153: 427, 720: 158, 723: 159, 726: 160, 1755: 353, 740: 161, 2001: 395, 744: 162, 502: 114, 746: 163, 751: 164, 1777: 356, 1780: 357, 1923: 384, 1838: 367, 762: 165, 1788: 358, 765: 166, 1628: 332, 769: 167, 1794: 359, 470: 107, 776: 168, 1802: 361, 1809: 362, 786: 169, 1811: 363, 789: 170, 1814: 364, 793: 171, 1157: 235, 1827: 365, 806: 172, 1832: 366, 2167: 430, 811: 173, 402: 94, 1841: 368, 820: 174, 2014: 397, 822: 175, 1852: 369, 831: 176, 1863: 370, 842: 177, 2131: 423, 403: 95, 845: 178, 847: 179, 1872: 373, 1877: 374, 856: 180, 860: 181, 863: 182, 1891: 377, 868: 183, 1169: 236, 1340: 271, 1898: 378, 875: 185, 1900: 379, 1768: 355, 878: 186, 880: 187, 1905: 381, 886: 188, 887: 189, 1912: 382, 2196: 435, 891: 190, 2090: 411, 896: 191, 899: 192, 901: 193, 905: 194, 1175: 238, 1936: 386, 916: 195, 1941: 387, 927: 196, 496: 112, 931: 197, 1958: 389, 1962: 390, 940: 198, 2095: 413, 1972: 391, 952: 199, 953: 200, 1866: 371, 1984: 393, 962: 201, 965: 202, 967: 203, 1992: 394, 1869: 372, 1669: 339, 977: 204, 2009: 396, 990: 205, 2213: 439, 998: 206, 1000: 207, 2028: 399, 1007: 208, 2033: 400, 1016: 209, 2041: 401, 1020: 210, 1022: 211}
given spans fix. original text:   WORLD' &LR; &QL; &UR; By STUART ELLIOTT &LR; &QC; &QL; &UR; c.2000 N.Y. Times News Service &LR; &QC; &QL;    It's time again to ask 20 questions about advertising, marketing and the media.   _ Will Americans ever refer to the day before Thanksgiving as ``Thanksgiving Wednesday,'' as ABC did repeatedly this week in commercials promoting its Wednesday sitcoms ``The Drew Carey Show'' and ``Spin City''?   _ If a Hollywood studio makes a movie about the Florida election standoff, would the title be ``It's a Chad, Chad, Chad, Chad World''?   _ How many readers of The Wall Street Journal noticed that an article on Wednesday carrying the headline ``Genetically Altered Protein Is Found in Still More Corn'' ran adjacent to an advertisement for a golf tournament on Fox Sports sponsored by Sun Microsystems that featured a fanciful photograph of a gigantic ear of corn as big as a Buick?   _ Doesn't a new television commercial for Fidelity Investments, centered on a telephone conversation between a female employee and a male customer, resemble a Citibank campaign from the late 1980s that was so brilliantly parodied as the ``First Citiwide Change Bank'' commercials on ``Saturday Night Live''?   _ Did shoppers at the New York supermarket chain Gristede's rush to take advantage of a recent sale on the ``BIG 150-count box'' of Scotties facial tissues, or did they recall that Scotties has usually come in a 175-count box?   _ Can Ocean Spray Cranberries get a refund on a full-page ad that ran in newspapers on Nov. 8 and carried the headline ``Now That the Election Is Over, You Can Focus on Some Real News''?   _ Was it a coincidence that an ad for the Carnation Coffee-mate line of coffee creamers in the recent issue of In Style Entertaining 2000 magazine ran opposite an article about ``great trends'' in party-giving that began by describing carnations as ``the chic flower of the moment''?   _ Should an English teacher have been consulted before the Tropicana division of PepsiCo produced posters that described its Pure Premium orange juice as being ``as packed with Vitamin C as a bus on a rainy day''?   _ Will Jack Nicholson, Helen Hunt, Greg Kinnear and James L. Brooks complain about an ad from Campbell Soup Co. for Campbell's Cream of Mushroom soup that carried the slogan ``As m'm! m'm! good! as it gets''?   _ Now that the Roundabout Theater Company is calling its new facility in Times Square the American Airlines Theater, will the ushers give out peanuts instead of Playbills?   _ Why did the Reader's Digest Association go to the trouble of airbrushing the identifying information from a label on a pair of jeans worn by a man in a photograph featured in an ad for Reader's Digest magazine, but leave the red tab on the back pocket that tells everyone the pants are Levi's?   _ Do television commercials for prescription drugs disclose that side effects in tests were no worse ``than a sugar pill'' because research found that consumers weren't familiar with the word ``placebo''?   _ What was in the zeitgeist that led two disparate advertisers _ Empire Blue Cross Blue Shield and the MSN network of Microsoft _ to introduce about the same time campaigns centered on butterflies?   _ And what was in the zeitgeist that led two automotive marketers _ Land Rover and Volvo _ to introduce about the same time commercials centered on drivers rescuing animals on rainy roads?   _ Are folks old enough to remember the heyday of the radio and television personality Arthur Godfrey reminded of his longtime greeting, ``How are ya?,'' every time they hear the name of the new Lucent Technologies spinoff company, Avaya Communication?   _ How appealing was a recent offer made by Sprint Communications Co. to give buyers of a Sprint PCS telephone and a calling plan a free ``pre-owned phone''?   _ Was it an inside joke that the name of the character played by John Corbett on ``Sex and the City,'' Aidan Shaw, was almost identical to the name of a longtime star of gay sex films, Aiden Shaw?   _ How many tickets did the Houston Grand Opera sell after mailing out a promotional brochure featuring photographs of cattle with headlines like ``It's udderly fantastic entertainment!'' and ``Great opera. No bull.''?   _ If CBS shows the first episode of ``Survivor II'' after its broadcast of Super Bowl XXXV, will the network someday show the first episode of ``Survivor XXXV'' after its broadcast of Super Bowl LXVIII?   _ Will cheerful chorus members dressed in V-neck sweaters interrupt their serenades to online shopping long enough to tell an advertising columnist, ``You ask a lot of questions for someone from Brooklyn''?  

original word:  Co. Co.
new split:  Co  and  .
[(1, 6), (6, 7), (8, 9), (9, 11), (11, 12), (13, 14), (14, 16), (16, 17), (18, 19), (19, 21), (21, 22), (23, 25), (26, 32), (33, 40), (41, 42), (42, 44), (44, 45), (46, 47), (47, 49), (49, 50), (51, 52), (52, 54), (54, 55), (56, 57), (57, 59), (59, 60), (61, 67), (68, 72), (73, 78), (79, 83), (84, 91), (92, 93), (93, 95), (95, 96), (97, 98), (98, 100), (100, 101), (102, 103), (103, 105), (105, 106), (110, 112), (112, 114), (115, 119), (120, 125), (126, 128), (129, 132), (133, 135), (136, 145), (146, 151), (152, 163), (163, 164), (165, 174), (175, 178), (179, 182), (183, 188), (188, 189), (192, 193), (194, 198), (199, 208), (209, 213), (214, 219), (220, 222), (223, 226), (227, 230), (231, 237), (238, 250), (251, 253), (254, 256), (256, 268), (269, 278), (278, 279), (279, 281), (282, 284), (285, 288), (289, 292), (293, 303), (304, 308), (309, 313), (314, 316), (317, 328), (329, 338), (339, 342), (343, 352), (353, 360), (361, 363), (363, 366), (367, 371), (372, 377), (378, 382), (382, 384), (385, 388), (389, 391), (391, 395), (396, 400), (400, 402), (402, 403), (406, 407), (408, 410), (411, 412), (413, 422), (423, 429), (430, 435), (436, 437), (438, 443), (444, 449), (450, 453), (454, 461), (462, 470), (471, 479), (479, 480), (481, 486), (487, 490), (491, 496), (497, 499), (500, 502), (502, 504), (504, 506), (507, 508), (509, 513), (513, 514), (515, 519), (519, 520), (521, 525), (525, 526), (527, 531), (532, 537), (537, 539), (539, 540), (543, 544), (545, 548), (549, 553), (554, 561), (562, 564), (565, 568), (569, 573), (574, 580), (581, 588), (589, 596), (597, 601), (602, 604), (605, 612), (613, 615), (616, 625), (626, 634), (635, 638), (639, 647), (648, 650), (650, 661), (662, 669), (670, 677), (678, 680), (681, 686), (687, 689), (690, 695), (696, 700), (701, 705), (705, 707), (708, 711), (712, 720), (721, 723), (724, 726), (727, 740), (741, 744), (745, 746), (747, 751), (752, 762), (763, 765), (766, 769), (770, 776), (777, 786), (787, 789), (790, 793), (794, 806), (807, 811), (812, 820), (821, 822), (823, 831), (832, 842), (843, 845), (846, 847), (848, 856), (857, 860), (861, 863), (864, 868), (869, 871), (872, 875), (876, 878), (879, 880), (881, 886), (886, 887), (890, 891), (892, 896), (896, 899), (900, 901), (902, 905), (906, 916), (917, 927), (928, 931), (932, 940), (941, 952), (952, 953), (954, 962), (963, 965), (966, 967), (968, 977), (978, 990), (991, 998), (999, 1000), (1001, 1007), (1008, 1016), (1017, 1020), (1021, 1022), (1023, 1027), (1028, 1036), (1036, 1037), (1038, 1046), (1047, 1048), (1049, 1057), (1058, 1066), (1067, 1071), (1072, 1075), (1076, 1080), (1081, 1086), (1087, 1091), (1092, 1095), (1096, 1098), (1099, 1110), (1111, 1119), (1120, 1122), (1123, 1126), (1127, 1129), (1129, 1134), (1135, 1143), (1144, 1150), (1151, 1155), (1155, 1157), (1158, 1169), (1170, 1172), (1173, 1175), (1175, 1183), (1184, 1189), (1190, 1194), (1194, 1196), (1196, 1197), (1200, 1201), (1202, 1205), (1206, 1214), (1215, 1217), (1218, 1221), (1222, 1225), (1226, 1230), (1231, 1242), (1243, 1248), (1249, 1257), (1257, 1259), (1260, 1264), (1265, 1267), (1268, 1272), (1273, 1282), (1283, 1285), (1286, 1287), (1288, 1294), (1295, 1299), (1300, 1302), (1303, 1306), (1307, 1309), (1309, 1312), (1313, 1322), (1323, 1326), (1326, 1328), (1329, 1331), (1332, 1340), (1341, 1347), (1348, 1355), (1355, 1356), (1357, 1359), (1360, 1363), (1364, 1368), (1369, 1375), (1376, 1380), (1381, 1389), (1390, 1393), (1394, 1401), (1402, 1406), (1407, 1409), (1410, 1411), (1412, 1421), (1422, 1425), (1425, 1426), (1429, 1430), (1431, 1434), (1435, 1440), (1441, 1446), (1447, 1458), (1459, 1462), (1463, 1464), (1465, 1471), (1472, 1474), (1475, 1476), (1477, 1486), (1487, 1489), (1490, 1494), (1495, 1498), (1499, 1501), (1502, 1512), (1513, 1515), (1516, 1520), (1521, 1522), (1523, 1526), (1527, 1534), (1535, 1538), (1539, 1547), (1548, 1550), (1550, 1553), (1554, 1558), (1559, 1562), (1563, 1571), (1572, 1574), (1575, 1579), (1579, 1580), (1581, 1584), (1585, 1588), (1589, 1594), (1595, 1597), (1598, 1602), (1603, 1607), (1608, 1612), (1612, 1614), (1614, 1615), (1618, 1619), (1620, 1623), (1624, 1626), (1627, 1628), (1629, 1640), (1641, 1645), (1646, 1648), (1649, 1651), (1652, 1655), (1656, 1659), (1660, 1669), (1670, 1681), (1682, 1686), (1687, 1689), (1690, 1696), (1697, 1705), (1706, 1708), (1709, 1712), (1713, 1719), (1720, 1725), (1726, 1728), (1729, 1731), (1732, 1737), (1738, 1750), (1751, 1755), (1756, 1764), (1765, 1768), (1769, 1777), (1778, 1780), (1781, 1788), (1789, 1794), (1795, 1797), (1797, 1802), (1803, 1809), (1809, 1811), (1812, 1814), (1815, 1827), (1828, 1832), (1833, 1838), (1839, 1841), (1842, 1852), (1853, 1863), (1864, 1866), (1867, 1869), (1869, 1872), (1873, 1877), (1878, 1884), (1885, 1887), (1888, 1891), (1892, 1898), (1898, 1900), (1900, 1901), (1904, 1905), (1906, 1912), (1913, 1915), (1916, 1923), (1924, 1931), (1932, 1936), (1937, 1941), (1942, 1951), (1952, 1958), (1959, 1962), (1963, 1972), (1973, 1981), (1982, 1984), (1985, 1992), (1993, 2001), (2002, 2009), (2010, 2014), (2015, 2024), (2025, 2028), (2029, 2033), (2034, 2041), (2042, 2048), (2049, 2054), (2055, 2057), (2058, 2063), (2064, 2066), (2066, 2068), (2069, 2075), (2076, 2080), (2081, 2088), (2089, 2090), (2091, 2093), (2094, 2095), (2096, 2099), (2100, 2102), (2103, 2104), (2105, 2110), (2111, 2114), (2114, 2116), (2116, 2117), (2120, 2121), (2122, 2126), (2127, 2131), (2132, 2141), (2141, 2142), (2143, 2148), (2149, 2153), (2153, 2154), (2155, 2159), (2160, 2167), (2168, 2171), (2172, 2177), (2178, 2180), (2181, 2187), (2188, 2196), (2197, 2202), (2203, 2205), (2206, 2208), (2209, 2213), (2214, 2222), (2223, 2227), (2228, 2230), (2230, 2231), (2232, 2235), (2236, 2244), (2244, 2246), (2247, 2252), (2253, 2255), (2256, 2264), (2265, 2269), (2270, 2274), (2275, 2282), (2283, 2286), (2287, 2293), (2294, 2296), (2296, 2298), (2299, 2300), (2300, 2302), (2302, 2303), (2304, 2305), (2305, 2307), (2307, 2308), (2309, 2313), (2313, 2314), (2315, 2317), (2318, 2320), (2321, 2325), (2325, 2327), (2327, 2328), (2331, 2332), (2333, 2336), (2337, 2341), (2342, 2345), (2346, 2356), (2357, 2364), (2365, 2372), (2373, 2375), (2376, 2383), (2384, 2387), (2388, 2391), (2392, 2400), (2401, 2403), (2404, 2409), (2410, 2416), (2417, 2420), (2421, 2429), (2430, 2438), (2439, 2446), (2446, 2447), (2448, 2452), (2453, 2456), (2457, 2463), (2464, 2468), (2469, 2472), (2473, 2480), (2481, 2488), (2489, 2491), (2492, 2501), (2501, 2502), (2505, 2506), (2507, 2510), (2511, 2514), (2515, 2518), (2519, 2525), (2525, 2527), (2528, 2534), (2535, 2546), (2547, 2549), (2550, 2552), (2553, 2556), (2557, 2564), (2565, 2567), (2568, 2579), (2580, 2583), (2584, 2595), (2596, 2607), (2608, 2612), (2613, 2614), (2615, 2620), (2621, 2623), (2624, 2625), (2626, 2630), (2631, 2633), (2634, 2639), (2640, 2644), (2645, 2647), (2648, 2649), (2650, 2653), (2654, 2656), (2657, 2658), (2659, 2669), (2670, 2678), (2679, 2681), (2682, 2684), (2685, 2687), (2688, 2691), (2692, 2698), (2698, 2700), (2701, 2707), (2708, 2716), (2716, 2717), (2718, 2721), (2722, 2727), (2728, 2731), (2732, 2735), (2736, 2739), (2740, 2742), (2743, 2746), (2747, 2751), (2752, 2758), (2759, 2763), (2764, 2769), (2770, 2778), (2779, 2782), (2783, 2788), (2789, 2792), (2793, 2797), (2797, 2799), (2799, 2800), (2803, 2804), (2805, 2807), (2808, 2818), (2819, 2830), (2831, 2834), (2835, 2847), (2848, 2853), (2854, 2862), (2863, 2867), (2868, 2872), (2873, 2880), (2881, 2883), (2884, 2889), (2890, 2894), (2895, 2897), (2898, 2903), (2904, 2906), (2906, 2910), (2911, 2912), (2913, 2918), (2919, 2923), (2923, 2925), (2926, 2933), (2934, 2942), (2943, 2948), (2949, 2953), (2954, 2963), (2964, 2968), (2968, 2971), (2972, 2980), (2981, 2985), (2986, 2989), (2990, 2994), (2995, 2997), (2997, 3004), (3004, 3006), (3006, 3007), (3010, 3011), (3012, 3016), (3017, 3020), (3021, 3023), (3024, 3027), (3028, 3037), (3038, 3042), (3043, 3046), (3047, 3050), (3051, 3060), (3061, 3072), (3073, 3074), (3075, 3081), (3082, 3086), (3087, 3092), (3093, 3097), (3098, 3104), (3105, 3108), (3109, 3112), (3113, 3116), (3117, 3124), (3125, 3127), (3128, 3137), (3138, 3139), (3140, 3142), (3143, 3152), (3153, 3158), (3159, 3162), (3163, 3167), (3168, 3172), (3173, 3182), (3183, 3191), (3192, 3194), (3195, 3206), (3206, 3207), (3210, 3211), (3212, 3215), (3216, 3220), (3221, 3224), (3225, 3227), (3228, 3231), (3232, 3241), (3242, 3246), (3247, 3250), (3251, 3254), (3255, 3265), (3266, 3275), (3276, 3277), (3278, 3282), (3283, 3288), (3289, 3292), (3293, 3298), (3299, 3300), (3301, 3303), (3304, 3313), (3314, 3319), (3320, 3323), (3324, 3328), (3329, 3333), (3334, 3345), (3346, 3354), (3355, 3357), (3358, 3365), (3366, 3374), (3375, 3382), (3383, 3385), (3386, 3391), (3392, 3397), (3397, 3398), (3401, 3402), (3403, 3406), (3407, 3412), (3413, 3416), (3417, 3423), (3424, 3426), (3427, 3435), (3436, 3439), (3440, 3446), (3447, 3449), (3450, 3453), (3454, 3459), (3460, 3463), (3464, 3474), (3475, 3486), (3487, 3493), (3494, 3501), (3502, 3510), (3511, 3513), (3514, 3517), (3518, 3526), (3527, 3535), (3535, 3536), (3537, 3539), (3539, 3542), (3543, 3546), (3547, 3549), (3549, 3550), (3550, 3551), (3551, 3553), (3554, 3559), (3560, 3564), (3565, 3569), (3570, 3574), (3575, 3578), (3579, 3583), (3584, 3586), (3587, 3590), (3591, 3594), (3595, 3601), (3602, 3614), (3615, 3622), (3623, 3630), (3630, 3631), (3632, 3637), (3638, 3651), (3651, 3652), (3655, 3656), (3657, 3660), (3661, 3670), (3671, 3674), (3675, 3676), (3677, 3683), (3684, 3689), (3690, 3694), (3695, 3697), (3698, 3704), (3705, 3719), (3720, 3722), (3722, 3723)]
{1: 0, 6: 1, 2049: 403, 8: 2, 9: 3, 2058: 405, 11: 4, 13: 5, 14: 6, 16: 7, 18: 8, 19: 9, 21: 10, 23: 11, 26: 12, 2076: 409, 33: 13, 41: 14, 42: 15, 2055: 404, 44: 16, 46: 17, 47: 18, 2096: 414, 49: 19, 51: 20, 52: 21, 54: 22, 2103: 416, 56: 23, 57: 24, 59: 25, 61: 26, 2111: 418, 1376: 279, 2114: 419, 2116: 420, 353: 83, 2120: 421, 73: 28, 2122: 422, 79: 29, 84: 30, 92: 31, 93: 32, 95: 33, 3140: 621, 97: 34, 98: 35, 100: 36, 2149: 427, 102: 37, 103: 38, 105: 39, 2155: 429, 2066: 407, 110: 40, 112: 41, 115: 42, 120: 43, 2172: 432, 126: 44, 2069: 408, 129: 45, 2178: 433, 133: 46, 136: 47, 2188: 435, 146: 48, 2197: 436, 152: 49, 2203: 437, 2206: 438, 2209: 439, 163: 50, 165: 51, 2214: 440, 2223: 441, 179: 53, 2228: 442, 2230: 443, 183: 54, 2232: 444, 188: 55, 192: 56, 194: 57, 2244: 446, 2081: 410, 2253: 448, 2256: 449, 209: 59, 214: 60, 2265: 450, 220: 61, 3450: 676, 2270: 451, 223: 62, 227: 63, 231: 64, 2283: 453, 238: 65, 2287: 454, 382: 89, 2294: 455, 2089: 411, 2296: 456, 251: 66, 2300: 458, 254: 67, 256: 68, 2305: 461, 2091: 412, 2309: 463, 2313: 464, 2315: 465, 269: 69, 2318: 466, 2321: 467, 2094: 413, 278: 70, 2327: 469, 3460: 678, 282: 72, 2331: 470, 285: 73, 289: 74, 293: 75, 2342: 473, 2346: 474, 2439: 488, 304: 76, 309: 77, 2100: 415, 314: 78, 317: 79, 2373: 477, 2376: 478, 329: 80, 2384: 479, 339: 81, 2388: 480, 343: 82, 2392: 481, 2789: 556, 2401: 482, 2404: 483, 2535: 507, 361: 84, 2410: 484, 363: 85, 367: 86, 2417: 485, 372: 87, 2421: 486, 745: 163, 378: 88, 2430: 487, 385: 90, 389: 91, 391: 92, 396: 93, 2446: 489, 400: 94, 402: 95, 2453: 491, 406: 96, 2457: 492, 408: 97, 68: 27, 411: 98, 413: 99, 2464: 493, 2469: 494, 423: 100, 2473: 495, 430: 101, 2481: 496, 436: 102, 438: 103, 2489: 497, 2492: 498, 1781: 358, 450: 105, 2501: 499, 454: 106, 2505: 500, 2507: 501, 462: 107, 2511: 502, 2515: 503, 471: 108, 2127: 423, 2525: 505, 479: 109, 2528: 506, 481: 110, 487: 111, 491: 112, 497: 113, 2547: 508, 500: 114, 502: 115, 504: 116, 2132: 424, 507: 117, 509: 118, 513: 119, 515: 120, 2565: 512, 519: 121, 2568: 513, 521: 122, 3159: 624, 525: 123, 527: 124, 2580: 514, 2584: 515, 537: 126, 539: 127, 543: 128, 545: 129, 2596: 516, 549: 130, 2064: 406, 554: 131, 2141: 425, 2608: 517, 562: 132, 565: 133, 2615: 519, 569: 134, 2143: 426, 2621: 520, 574: 135, 2624: 521, 3168: 626, 2626: 522, 581: 136, 2631: 523, 2634: 524, 3511: 684, 589: 137, 906: 195, 2640: 525, 2645: 526, 2648: 527, 2650: 528, 3550: 694, 605: 140, 2654: 529, 2657: 530, 2659: 531, 613: 141, 616: 142, 444: 104, 2670: 532, 626: 143, 787: 170, 1129: 231, 2682: 534, 635: 144, 2685: 535, 639: 145, 2688: 536, 2692: 537, 648: 146, 2698: 538, 2701: 539, 2708: 540, 662: 148, 3183: 628, 2716: 541, 670: 149, 2160: 430, 2722: 543, 678: 150, 2728: 544, 681: 151, 2732: 545, 687: 152, 2736: 546, 690: 153, 2740: 547, 2743: 548, 696: 154, 2747: 549, 701: 155, 2752: 550, 705: 156, 708: 157, 2759: 551, 712: 158, 2764: 552, 2168: 431, 2770: 553, 724: 160, 727: 161, 2779: 554, 2783: 555, 741: 162, 2793: 557, 747: 164, 2797: 558, 2799: 559, 752: 165, 2803: 560, 2805: 561, 2808: 562, 763: 166, 766: 167, 770: 168, 2819: 563, 777: 169, 2519: 504, 2831: 564, 2835: 565, 790: 171, 1369: 278, 794: 172, 2181: 434, 2848: 566, 3547: 692, 3206: 631, 2854: 567, 807: 173, 812: 174, 2863: 568, 2868: 569, 821: 175, 823: 176, 2873: 570, 832: 177, 2881: 571, 2884: 572, 2890: 573, 843: 178, 846: 179, 2895: 574, 848: 180, 2898: 575, 2904: 576, 857: 181, 2906: 577, 861: 182, 2911: 578, 864: 183, 2913: 579, 869: 184, 2919: 580, 872: 185, 2923: 581, 876: 186, 2926: 582, 1853: 370, 881: 188, 2934: 583, 890: 190, 892: 191, 3221: 635, 896: 192, 900: 193, 2949: 585, 902: 194, 2954: 586, 2964: 587, 917: 196, 2968: 588, 2972: 589, 928: 197, 932: 198, 2981: 590, 2986: 591, 941: 199, 2990: 592, 2995: 593, 2997: 594, 952: 200, 954: 201, 3004: 595, 3006: 596, 3232: 638, 3010: 597, 963: 202, 3012: 598, 2550: 509, 966: 203, 968: 204, 3017: 599, 3575: 700, 3021: 600, 3024: 601, 978: 205, 3028: 602, 2553: 510, 3038: 603, 991: 206, 3043: 604, 999: 207, 1001: 208, 3051: 606, 2557: 511, 1008: 209, 2448: 490, 3061: 607, 1017: 210, 1194: 242, 1023: 212, 3073: 608, 3075: 609, 1028: 213, 3082: 610, 1036: 214, 1038: 215, 3087: 611, 3587: 703, 3093: 612, 1047: 216, 1049: 217, 3098: 613, 175: 52, 3105: 614, 1058: 218, 3109: 615, 3113: 616, 1067: 219, 3117: 617, 1072: 220, 1076: 221, 3125: 618, 3128: 619, 1081: 222, 1087: 223, 3138: 620, 1092: 224, 3143: 622, 1096: 225, 1099: 226, 3153: 623, 3651: 712, 1111: 227, 3163: 625, 1120: 228, 1123: 229, 3173: 627, 1127: 230, 2236: 445, 3602: 706, 1135: 232, 3192: 629, 532: 125, 3195: 630, 1151: 234, 1155: 235, 1158: 236, 3210: 632, 3212: 633, 3266: 643, 3216: 634, 1170: 237, 1173: 238, 1175: 239, 3225: 636, 721: 159, 879: 187, 3228: 637, 1184: 240, 1190: 241, 3242: 639, 2247: 447, 1196: 243, 3247: 640, 1200: 244, 1202: 245, 3251: 641, 1206: 246, 3255: 642, 1215: 247, 1218: 248, 886: 189, 1222: 249, 1226: 250, 3276: 644, 3278: 645, 1231: 251, 3283: 646, 3289: 647, 1243: 252, 3293: 648, 1249: 253, 3299: 649, 3301: 650, 3304: 651, 1257: 254, 3623: 708, 1260: 255, 1265: 256, 3314: 652, 1268: 257, 3320: 653, 1273: 258, 2943: 584, 3324: 654, 3329: 655, 1283: 259, 1286: 260, 1288: 261, 1295: 262, 3346: 657, 1300: 263, 1303: 264, 1307: 265, 1309: 266, 3358: 659, 1313: 267, 3366: 660, 1323: 268, 1326: 269, 3375: 661, 1329: 270, 1332: 271, 3383: 662, 3386: 663, 1341: 272, 2613: 518, 3392: 664, 1348: 273, 3397: 665, 3401: 666, 1355: 274, 1357: 275, 3407: 668, 1360: 276, 2275: 452, 1364: 277, 3413: 669, 3417: 670, 3424: 671, 3427: 672, 1381: 280, 3436: 673, 1390: 281, 3440: 674, 1394: 282, 3447: 675, 1402: 283, 3454: 677, 1407: 284, 1410: 285, 1412: 286, 3464: 679, 1422: 287, 1425: 288, 3475: 680, 1429: 289, 1431: 290, 1435: 291, 3487: 681, 1441: 292, 3494: 682, 1447: 293, 3655: 713, 3502: 683, 1459: 294, 1463: 295, 1465: 296, 3514: 685, 3518: 686, 1472: 297, 1475: 298, 1477: 299, 3527: 687, 1487: 300, 3537: 689, 1490: 301, 3539: 690, 1495: 302, 1499: 303, 3549: 693, 1502: 304, 3551: 695, 3554: 696, 2299: 457, 3560: 697, 1513: 305, 1516: 306, 3565: 698, 1521: 307, 3570: 699, 1523: 308, 2302: 459, 1527: 309, 3579: 701, 1535: 310, 3584: 702, 2304: 460, 1539: 311, 3591: 704, 3595: 705, 1548: 312, 1550: 313, 1554: 314, 2307: 462, 1559: 315, 1563: 316, 602: 139, 3615: 707, 3675: 717, 1572: 317, 3334: 656, 1575: 318, 1579: 319, 1581: 320, 3630: 709, 3677: 718, 3632: 710, 1585: 321, 1589: 322, 3638: 711, 1144: 233, 1595: 323, 1598: 324, 1973: 392, 1603: 325, 597: 138, 1608: 326, 3657: 714, 1612: 327, 3661: 715, 1614: 328, 1618: 329, 1620: 330, 3671: 716, 1624: 331, 1627: 332, 1629: 333, 3684: 719, 1641: 334, 3690: 720, 1646: 335, 3695: 721, 1649: 336, 3698: 722, 1652: 337, 1656: 338, 3705: 723, 1660: 339, 2325: 468, 1670: 340, 3720: 724, 3722: 725, 279: 71, 1682: 341, 1687: 342, 1690: 343, 1697: 344, 3355: 658, 1706: 345, 1709: 346, 2333: 471, 1713: 347, 3535: 688, 1720: 348, 1726: 349, 1729: 350, 1732: 351, 2337: 472, 1738: 352, 2679: 533, 1751: 353, 1756: 354, 1765: 355, 1769: 356, 1778: 357, 2105: 417, 2153: 428, 1789: 359, 1795: 360, 1797: 361, 1803: 362, 1809: 363, 1812: 364, 1815: 365, 1828: 366, 1833: 367, 1839: 368, 1842: 369, 650: 147, 2357: 475, 1864: 371, 1867: 372, 1869: 373, 1873: 374, 1878: 375, 1885: 376, 199: 58, 1888: 377, 1892: 378, 1898: 379, 3047: 605, 1900: 380, 2365: 476, 1904: 381, 1906: 382, 1913: 383, 1916: 384, 1924: 385, 1932: 386, 1937: 387, 1942: 388, 1952: 389, 3543: 691, 1959: 390, 1963: 391, 2718: 542, 1982: 393, 1985: 394, 3403: 667, 1993: 395, 2002: 396, 2010: 397, 2015: 398, 2025: 399, 2029: 400, 1021: 211, 2034: 401, 2042: 402}
{2048: 402, 6: 0, 7: 1, 9: 2, 11: 3, 12: 4, 14: 5, 2063: 405, 16: 6, 17: 7, 2066: 406, 19: 8, 2068: 407, 21: 9, 22: 10, 25: 11, 2075: 408, 32: 12, 2054: 403, 40: 13, 42: 14, 44: 15, 45: 16, 47: 17, 49: 18, 50: 19, 2099: 414, 52: 20, 54: 21, 55: 22, 2104: 416, 57: 23, 59: 24, 60: 25, 2110: 417, 352: 82, 2114: 418, 67: 26, 2116: 419, 2117: 420, 72: 27, 2121: 421, 3265: 642, 78: 28, 83: 29, 3549: 692, 91: 30, 93: 31, 2142: 425, 95: 32, 96: 33, 98: 34, 2148: 426, 101: 36, 103: 37, 105: 38, 106: 39, 2159: 429, 112: 40, 3574: 699, 114: 41, 119: 42, 2171: 431, 125: 43, 128: 44, 2177: 432, 132: 45, 135: 46, 2187: 434, 145: 47, 2196: 435, 151: 48, 2202: 436, 2205: 437, 2208: 438, 163: 49, 164: 50, 2213: 439, 174: 51, 178: 52, 2227: 441, 182: 53, 2231: 443, 2235: 444, 188: 54, 189: 55, 2080: 409, 2244: 445, 198: 57, 2252: 447, 2255: 448, 208: 58, 213: 59, 3449: 675, 2264: 449, 219: 60, 2269: 450, 222: 61, 226: 62, 230: 63, 2282: 452, 237: 64, 2286: 453, 2088: 410, 2293: 454, 2296: 455, 250: 65, 2300: 457, 253: 66, 2302: 458, 2303: 459, 256: 67, 2305: 460, 2307: 461, 2308: 462, 2313: 463, 2314: 464, 268: 68, 2317: 465, 2093: 412, 2320: 466, 3459: 677, 2325: 467, 278: 69, 279: 70, 2328: 469, 281: 71, 2095: 413, 284: 72, 288: 73, 292: 74, 2341: 472, 2345: 473, 303: 75, 308: 76, 313: 77, 316: 78, 2372: 476, 2102: 415, 2375: 477, 328: 79, 2383: 478, 338: 80, 2387: 479, 2057: 404, 342: 81, 2391: 480, 2788: 555, 2400: 481, 2403: 482, 360: 83, 2409: 483, 363: 84, 3474: 679, 366: 85, 2416: 484, 2792: 556, 371: 86, 2420: 485, 377: 87, 2429: 486, 382: 88, 384: 89, 388: 90, 2438: 487, 391: 91, 395: 92, 2446: 488, 2447: 489, 400: 93, 402: 94, 1091: 223, 2452: 490, 2332: 470, 407: 96, 2456: 491, 410: 97, 751: 164, 412: 98, 2463: 492, 2468: 493, 422: 99, 2472: 494, 429: 100, 2480: 495, 435: 101, 437: 102, 2488: 496, 443: 103, 449: 104, 453: 105, 2502: 499, 2506: 500, 461: 106, 2510: 501, 2514: 502, 2126: 422, 470: 107, 2525: 504, 479: 108, 480: 109, 486: 110, 490: 111, 496: 112, 2546: 507, 499: 113, 2549: 508, 502: 114, 2552: 509, 506: 116, 508: 117, 513: 118, 514: 119, 2564: 511, 3158: 623, 2567: 512, 520: 121, 2090: 411, 525: 122, 526: 123, 2579: 513, 2583: 514, 537: 125, 539: 126, 540: 127, 544: 128, 2595: 515, 548: 129, 553: 130, 2607: 516, 561: 131, 2612: 517, 2614: 518, 568: 133, 3167: 625, 2620: 519, 573: 134, 2623: 520, 2625: 521, 2131: 423, 580: 135, 3510: 683, 2630: 522, 2633: 523, 588: 136, 2639: 524, 2644: 525, 2647: 526, 100: 35, 604: 139, 2653: 528, 2656: 529, 2658: 530, 2491: 497, 612: 140, 615: 141, 2669: 531, 625: 142, 2678: 532, 2153: 427, 2681: 533, 634: 143, 2684: 534, 2154: 428, 638: 144, 2687: 535, 1368: 277, 2691: 536, 3182: 627, 647: 145, 650: 146, 2700: 538, 2707: 539, 661: 147, 793: 171, 2716: 540, 669: 148, 2501: 498, 2721: 542, 677: 149, 2727: 543, 680: 150, 2731: 544, 686: 151, 2735: 545, 689: 152, 2739: 546, 2742: 547, 695: 153, 2746: 548, 700: 154, 2751: 549, 705: 155, 707: 156, 2758: 550, 711: 157, 2763: 551, 720: 158, 2769: 552, 723: 159, 726: 160, 2778: 553, 2782: 554, 740: 161, 744: 162, 746: 163, 564: 132, 2797: 557, 2799: 558, 2800: 559, 2804: 560, 2807: 561, 762: 165, 765: 166, 769: 167, 2818: 562, 811: 173, 2518: 503, 776: 168, 2830: 563, 2834: 564, 789: 170, 2180: 433, 3546: 691, 2847: 565, 2853: 566, 806: 172, 3207: 631, 2141: 424, 1501: 303, 2867: 568, 820: 174, 822: 175, 2872: 569, 2527: 505, 831: 176, 2880: 570, 2883: 571, 2889: 572, 842: 177, 845: 178, 2894: 573, 847: 179, 2897: 574, 2903: 575, 856: 180, 2906: 576, 860: 181, 2910: 577, 863: 182, 2912: 578, 868: 183, 2534: 506, 2918: 579, 871: 184, 2923: 580, 2925: 581, 878: 186, 880: 187, 2933: 582, 886: 188, 887: 189, 3220: 634, 891: 190, 2942: 583, 896: 191, 899: 192, 2948: 584, 901: 193, 2953: 585, 2963: 586, 916: 195, 2968: 587, 2971: 588, 927: 196, 931: 197, 2980: 589, 2985: 590, 940: 198, 2989: 591, 2994: 592, 2997: 593, 952: 199, 953: 200, 3231: 637, 3004: 594, 3006: 595, 3007: 596, 962: 201, 3011: 597, 965: 202, 967: 203, 3016: 598, 3020: 599, 3023: 600, 504: 115, 3027: 601, 3037: 602, 990: 205, 3042: 603, 3046: 604, 1000: 207, 2556: 510, 3050: 605, 1007: 208, 3060: 606, 1016: 209, 1020: 210, 1022: 211, 3072: 607, 3074: 608, 1027: 212, 3081: 609, 1036: 213, 1037: 214, 3086: 610, 3092: 611, 2222: 440, 1046: 215, 1048: 216, 3097: 612, 3104: 613, 1057: 217, 3108: 614, 3112: 615, 1066: 218, 519: 120, 3116: 616, 1071: 219, 1075: 220, 3124: 617, 3127: 618, 1080: 221, 786: 169, 1086: 222, 3137: 619, 3139: 620, 2230: 442, 3142: 621, 1095: 224, 1098: 225, 3152: 622, 1110: 226, 3162: 624, 1119: 227, 1122: 228, 3172: 626, 1126: 229, 3601: 705, 1129: 230, 1134: 231, 531: 124, 3191: 628, 3194: 629, 1150: 233, 1155: 234, 1157: 235, 3206: 630, 193: 56, 3211: 632, 3215: 633, 1169: 236, 1172: 237, 1175: 238, 3224: 635, 3227: 636, 1183: 239, 1189: 240, 3241: 638, 1194: 241, 1196: 242, 1197: 243, 3246: 639, 1201: 244, 3250: 640, 1205: 245, 3254: 641, 1214: 246, 1217: 247, 1221: 248, 1225: 249, 3275: 643, 3277: 644, 1230: 250, 3282: 645, 3288: 646, 1242: 251, 3292: 647, 1248: 252, 3298: 648, 3300: 649, 3622: 707, 3303: 650, 1257: 253, 1259: 254, 1264: 255, 3313: 651, 1267: 256, 3319: 652, 1272: 257, 3323: 653, 3328: 654, 1282: 258, 1285: 259, 1287: 260, 1294: 261, 3345: 656, 1299: 262, 1302: 263, 1306: 264, 1309: 265, 1312: 266, 3365: 659, 1322: 267, 1326: 268, 1328: 269, 1331: 270, 3382: 661, 905: 194, 3385: 662, 1340: 271, 3391: 663, 1347: 272, 3397: 664, 3398: 665, 3402: 666, 1355: 273, 1356: 274, 2274: 451, 3406: 667, 1359: 275, 1363: 276, 3412: 668, 3416: 669, 3423: 670, 3426: 671, 1380: 279, 3435: 672, 1389: 280, 3439: 673, 1393: 281, 3446: 674, 1401: 282, 3453: 676, 1406: 283, 1409: 284, 1411: 285, 3463: 678, 1421: 286, 1425: 287, 1426: 288, 1430: 289, 1434: 290, 3486: 680, 1440: 291, 3493: 681, 1446: 292, 3501: 682, 1458: 293, 1462: 294, 1464: 295, 3513: 684, 3517: 685, 1471: 296, 1474: 297, 1476: 298, 3526: 686, 3660: 714, 1486: 299, 3535: 687, 3536: 688, 1489: 300, 3539: 689, 1494: 301, 1498: 302, 2298: 456, 3550: 693, 3551: 694, 3553: 695, 3559: 696, 1512: 304, 1515: 305, 3564: 697, 1520: 306, 3569: 698, 1522: 307, 1526: 308, 596: 137, 3578: 700, 1534: 309, 3583: 701, 1538: 310, 3590: 703, 3594: 704, 1547: 311, 1550: 312, 1553: 313, 1558: 314, 601: 138, 1562: 315, 1143: 232, 3674: 716, 3614: 706, 3333: 655, 1571: 316, 1574: 317, 3676: 717, 1579: 318, 1580: 319, 3630: 708, 3631: 709, 1584: 320, 1588: 321, 3637: 710, 1594: 322, 2167: 430, 1597: 323, 1602: 324, 3651: 711, 3652: 712, 1607: 325, 3656: 713, 1612: 326, 1614: 327, 1615: 328, 1619: 329, 3670: 715, 1623: 330, 1626: 331, 1628: 332, 3683: 718, 1640: 333, 3689: 719, 1645: 334, 3694: 720, 1648: 335, 3697: 721, 1651: 336, 1655: 337, 3704: 722, 1659: 338, 1669: 339, 3719: 723, 3722: 724, 2327: 468, 1681: 340, 1686: 341, 1689: 342, 1375: 278, 3354: 657, 1696: 343, 1705: 344, 875: 185, 1708: 345, 3357: 658, 1712: 346, 1719: 347, 1725: 348, 1728: 349, 2336: 471, 1731: 350, 2649: 527, 1737: 351, 1750: 352, 1755: 353, 1764: 354, 977: 204, 1768: 355, 1777: 356, 1780: 357, 1788: 358, 1794: 359, 1797: 360, 1802: 361, 1809: 362, 1811: 363, 3374: 660, 1814: 364, 1827: 365, 1832: 366, 1838: 367, 1841: 368, 2356: 474, 1852: 369, 2698: 537, 3723: 725, 1863: 370, 1866: 371, 403: 95, 1869: 372, 1872: 373, 1877: 374, 1884: 375, 1887: 376, 1891: 377, 998: 206, 2364: 475, 1898: 378, 1900: 379, 1901: 380, 1905: 381, 1912: 382, 1915: 383, 3586: 702, 2246: 446, 1923: 384, 3542: 690, 1931: 385, 1936: 386, 1941: 387, 1951: 388, 1958: 389, 1962: 390, 2717: 541, 1972: 391, 1981: 392, 1984: 393, 2862: 567, 1992: 394, 2001: 395, 2009: 396, 2014: 397, 2024: 398, 2028: 399, 2033: 400, 2041: 401}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Jack Nicholson', 'Helen Hunt', 'Greg Kinnear', 'James L. Brooks', 'John Corbett']
response in server.py code:
 [(1985, 7, 'PepsiCo'), (2692, 24, "Reader's_Digest"), (4238, 3, 'CBS'), (932, 20, 'Fidelity_Investments'), (2346, 26, 'Roundabout_Theatre_Company'), (2519, 27, "Reader's_Digest_Association"), (2404, 12, 'Times_Square'), (285, 3, 'American_Broadcasting_Company'), (4040, 19, 'Houston_Grand_Opera'), (2155, 12, 'Greg_Kinnear'), (2172, 15, 'James_L._Brooks'), (2127, 14, 'Jack_Nicholson'), (2143, 10, 'Helen_Hunt'), (3075, 29, 'Blue_Cross_Blue_Shield_Association'), (766, 10, 'Fox_Sports_(United_States)'), (3879, 12, 'John_Corbett_(actor)'), (3293, 5, 'Volvo'), (4633, 8, 'Brooklyn'), (790, 16, 'Sun_Microsystems'), (3278, 10, 'Land_Rover'), (3128, 9, 'Microsoft'), (2793, 4, 'Levi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Des Terblanche', 'Mark McNulty', 'Steve van Vuuren', 'Nick Price', 'Justin Hobday', 'Andrew Park', 'Schalk van der Merwe', 'Desvonde Botes', 'Greg Reid', 'Clinton Whitelaw', 'Brett Liddle', 'Hugh Baiocchi', 'Adilson da Silva', 'Trevor Dodds', 'Don Robertson']
response in server.py code:
 [(273, 10, 'Nick_Price'), (212, 12, 'Mark_McNulty'), (152, 13, 'South_Africa'), (647, 12, 'Trevor_Dodds'), (302, 13, 'Justin_Hobday'), (285, 8, 'Zimbabwe'), (366, 8, 'Zimbabwe'), (470, 7, 'Namibia'), (661, 7, 'Namibia'), (226, 8, 'Zimbabwe'), (246, 16, 'Steve_van_Vuuren'), (337, 4, 'United_States'), (42, 6, 'Harare'), (695, 4, 'United_States'), (611, 6, 'Brazil'), (593, 16, 'Adilson_da_Silva'), (486, 14, 'Desvonde_Botes'), (448, 20, 'Schalk_van_der_Merwe'), (569, 13, 'Hugh_Baiocchi'), (187, 14, 'Des_Terblanche'), (549, 12, 'Brett_Liddle'), (525, 16, 'Clinton_Whitelaw'), (7, 13, 'Zimbabwe_Open'), (95, 13, 'Zimbabwe_Open'), (508, 9, 'Greg_Reid'), (680, 13, 'Don_Robertson_(television_announcer)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(6, 5, 'Apple_Inc.'), (39, 5, 'Mango_(clothing)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Courtney Walsh', 'Ali Bacher', 'Clive Lloyd', 'Joel Garner', 'David Richardson']
response in server.py code:
 [(76, 14, 'Courtney_Walsh'), (908, 11, 'Joel_Garner'), (877, 11, 'Clive_Lloyd'), (1172, 12, 'Johannesburg'), (716, 10, 'Ali_Bacher'), (1151, 9, 'Marketing'), (739, 21, 'South_Africa_national_cricket_team'), (1044, 11, 'Sponsor_(commercial)'), (307, 25, 'West_Indies_Cricket_Board'), (352, 7, 'Batting_(cricket)'), (1096, 12, 'Wicket-keeper'), (107, 11, 'Caribbean'), (152, 21, 'Caribbean_News_Agency'), (194, 6, 'Carl_Hooper'), (182, 4, 'Brian_Lara'), (652, 10, 'Negotiation')]
response in server.py code:
 []
given spans fix. original text:  U.S. mines still not safe enough, experts say 
One year after Sago Mine accident, safety laws still need improving 
 
BUCKHANNON, W. Va. - One year ago Tuesday, the nation was holding its breath for 13 miners who were trapped deep inside the Sago Mine near Buckhannon, W. Va. 
 
As it turned out, 12 of the 13 miners never made it out alive. 
 
In West Virginia Tuesday, Randal McCloy, the lone survivor of the disaster, joined the families of the 12 men who died — to remember them and the nightmare that began one year ago. 
 
"I'm just sick when I think — every day when I think how those men had to die and it makes me sick," says Debbie Hamner whose husband died in the mine. 
 
Since Sago, both West Virginia and the federal government have passed new mine safety laws. But in the mines themselves, little has changed. 
 
There's still no better way to communicate with miners below ground; 
Wireless communications won't be required until 2009; 
Electronic tracking systems for miners are still on the drawing board; 
Underground emergency safe rooms are still not required by law; and 
Mines have another year to position more rescue teams. 
Davitt McAteer is a mine safety expert who once ran the government's Mine Safety and Health Administration and led West Virginia's Sago Mine investigation. 
 
"We need to have a way to communicate with trapped miners," McAteer says. "We need to protect trapped miners until we can get to them, and we need to have a way that we can provide them with the breathing apparatus and the air system so they can stay alive."   
 
What has changed in mine safety since the Sago tragedy:   
 
Improved emergency procedures and training is now required; 
There are more federal mine inspectors and tougher fines for safety violations; and 
Mines must now notify the federal government within 15 minutes of an accident. 
Still not required, though are underground emergency safe rooms. 
 
The union representing many of the nation's 73,000 coal miners says it's a sign of priorities. 
 
"There's still just an attitude out there that production comes first and safety is a convenient thing and it comes second," says Dennis O'Dell of United Mine Workers of America. 
 
These are boom times for the coal industry, producing a record 1.17 billion tons of coal in 2006, but also the highest death toll in 11 years. 



original word:  Va. Va.
new split:  Va  and  .
[(0, 4), (5, 10), (11, 16), (17, 20), (21, 25), (26, 32), (32, 33), (34, 41), (42, 45), (47, 50), (51, 55), (56, 61), (62, 66), (67, 71), (72, 80), (80, 81), (82, 88), (89, 93), (94, 99), (100, 104), (105, 114), (118, 128), (128, 129), (130, 132), (133, 135), (135, 136)]
{0: 0, 128: 22, 130: 23, 67: 13, 5: 1, 135: 25, 72: 14, 11: 2, 80: 15, 17: 3, 82: 16, 21: 4, 89: 17, 26: 5, 94: 18, 133: 24, 32: 6, 34: 7, 100: 19, 105: 20, 42: 8, 47: 9, 51: 10, 118: 21, 56: 11, 62: 12}
{128: 21, 129: 22, 66: 12, 4: 0, 71: 13, 136: 25, 10: 1, 132: 23, 80: 14, 81: 15, 20: 3, 88: 16, 25: 4, 93: 17, 32: 5, 33: 6, 99: 18, 16: 2, 104: 19, 41: 7, 135: 24, 45: 8, 50: 9, 114: 20, 55: 10, 61: 11}
given spans fix. original text:  U.S. mines still not safe enough, experts say 
One year after Sago Mine accident, safety laws still need improving 
 
BUCKHANNON, W. Va. - One year ago Tuesday, the nation was holding its breath for 13 miners who were trapped deep inside the Sago Mine near Buckhannon, W. Va. 
 
As it turned out, 12 of the 13 miners never made it out alive. 
 
In West Virginia Tuesday, Randal McCloy, the lone survivor of the disaster, joined the families of the 12 men who died — to remember them and the nightmare that began one year ago. 
 
"I'm just sick when I think — every day when I think how those men had to die and it makes me sick," says Debbie Hamner whose husband died in the mine. 
 
Since Sago, both West Virginia and the federal government have passed new mine safety laws. But in the mines themselves, little has changed. 
 
There's still no better way to communicate with miners below ground; 
Wireless communications won't be required until 2009; 
Electronic tracking systems for miners are still on the drawing board; 
Underground emergency safe rooms are still not required by law; and 
Mines have another year to position more rescue teams. 
Davitt McAteer is a mine safety expert who once ran the government's Mine Safety and Health Administration and led West Virginia's Sago Mine investigation. 
 
"We need to have a way to communicate with trapped miners," McAteer says. "We need to protect trapped miners until we can get to them, and we need to have a way that we can provide them with the breathing apparatus and the air system so they can stay alive."   
 
What has changed in mine safety since the Sago tragedy:   
 
Improved emergency procedures and training is now required; 
There are more federal mine inspectors and tougher fines for safety violations; and 
Mines must now notify the federal government within 15 minutes of an accident. 
Still not required, though are underground emergency safe rooms. 
 
The union representing many of the nation's 73,000 coal miners says it's a sign of priorities. 
 
"There's still just an attitude out there that production comes first and safety is a convenient thing and it comes second," says Dennis O'Dell of United Mine Workers of America. 
 
These are boom times for the coal industry, producing a record 1.17 billion tons of coal in 2006, but also the highest death toll in 11 years. 



original word:  Va. Va.
new split:  Va  and  .
[(0, 4), (5, 10), (11, 16), (17, 20), (21, 25), (26, 32), (32, 33), (34, 41), (42, 45), (47, 50), (51, 55), (56, 61), (62, 66), (67, 71), (72, 80), (80, 81), (82, 88), (89, 93), (94, 99), (100, 104), (105, 114), (118, 128), (128, 129), (130, 132), (133, 135), (135, 136), (137, 138), (139, 142), (143, 147), (148, 151), (152, 159), (159, 160), (161, 164), (165, 171), (172, 175), (176, 183), (184, 187), (188, 194), (195, 198), (199, 201), (202, 208), (209, 212), (213, 217), (218, 225), (226, 230), (231, 237), (238, 241), (242, 246), (247, 251), (252, 256), (257, 267), (267, 268), (269, 271), (272, 274), (274, 275)]
{0: 0, 128: 22, 130: 23, 5: 1, 135: 25, 137: 26, 11: 2, 269: 52, 143: 28, 272: 53, 17: 3, 274: 54, 195: 38, 148: 29, 21: 4, 56: 11, 152: 30, 26: 5, 133: 24, 32: 6, 161: 32, 34: 7, 165: 33, 42: 8, 172: 34, 47: 9, 176: 35, 51: 10, 184: 36, 159: 31, 188: 37, 62: 12, 67: 13, 199: 39, 72: 14, 202: 40, 80: 15, 209: 41, 82: 16, 139: 27, 213: 42, 267: 51, 89: 17, 218: 43, 257: 50, 94: 18, 226: 44, 100: 19, 231: 45, 105: 20, 238: 46, 242: 47, 118: 21, 247: 48, 252: 49}
{128: 21, 129: 22, 4: 0, 135: 24, 136: 25, 10: 1, 267: 50, 268: 51, 194: 37, 142: 27, 271: 52, 16: 2, 274: 53, 147: 28, 20: 3, 151: 29, 132: 23, 159: 30, 32: 5, 33: 6, 164: 32, 41: 7, 171: 33, 45: 8, 175: 34, 50: 9, 55: 10, 187: 36, 138: 26, 160: 31, 66: 12, 198: 38, 71: 13, 201: 39, 183: 35, 80: 14, 81: 15, 212: 41, 88: 16, 217: 42, 93: 17, 208: 40, 99: 18, 256: 49, 230: 44, 104: 19, 225: 43, 237: 45, 61: 11, 241: 46, 114: 20, 275: 54, 25: 4, 246: 47, 251: 48}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['McAteer']
response in server.py code:
 [(0, 4, 'United_States'), (2173, 30, 'United_Mine_Workers'), (348, 13, 'West_Virginia'), (371, 13, 'Sago_Mine_disaster'), (242, 9, 'Sago_Mine_disaster'), (257, 10, 'Buckhannon,_West_Virginia'), (1281, 9, 'Sago_Mine_disaster'), (701, 13, 'West_Virginia'), (62, 18, 'Sago_Mine_disaster'), (1265, 13, 'West_Virginia'), (118, 10, 'Buckhannon,_West_Virginia'), (1219, 37, 'Mine_Safety_and_Health_Administration'), (1615, 4, 'Sago_Mine_disaster'), (690, 4, 'Sago_Mine_disaster'), (1369, 7, 'Jason_McAteer')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(1224, 7, 'Miami_Marlins'), (869, 7, 'Miami_Marlins'), (384, 9, 'Cleveland_Indians'), (557, 7, 'Oakland_Athletics'), (702, 9, 'Cleveland_Indians'), (1205, 7, 'Atlanta_Braves'), (519, 5, 'Texas_Rangers_(baseball)'), (1235, 10, 'Cincinnati_Reds'), (955, 7, 'Houston_Astros'), (1084, 9, 'San_Diego_Padres'), (1296, 7, 'Houston_Astros'), (679, 9, 'Minnesota_Twins'), (1246, 9, 'San_Diego_Padres'), (367, 16, 'National_League_Central'), (827, 7, 'Atlanta_Braves'), (294, 6, 'Boston_Red_Sox'), (342, 7, 'Detroit_Tigers'), (427, 9, 'Minnesota_Twins'), (754, 7, 'Oakland_Athletics'), (1307, 10, 'Pittsburgh_Pirates'), (502, 16, 'National_League_West'), (1130, 8, 'Colorado_Rockies'), (912, 12, 'Philadelphia_Phillies'), (762, 9, 'Baltimore_Orioles'), (1000, 10, 'Cincinnati_Reds'), (1318, 13, 'San_Francisco_Giants'), (1283, 12, 'Philadelphia_Phillies'), (1151, 13, 'San_Francisco_Giants'), (272, 9, 'Baltimore_Orioles'), (744, 6, 'Boston_Red_Sox'), (1344, 8, 'Colorado_Rockies'), (783, 32, 'National_League_East'), (652, 7, 'Detroit_Tigers'), (1067, 16, 'National_League_West'), (938, 16, 'National_League_Central'), (207, 32, 'American_League_East'), (78, 21, 'Major_League_Baseball'), (715, 5, 'Texas_Rangers_(baseball)'), (1043, 10, 'Pittsburgh_Pirates'), (11, 12, 'Major_League_Baseball'), (975, 8, 'St._Louis_Cardinals'), (58, 8, 'New_York_City'), (454, 9, 'Milwaukee_Brewers'), (317, 7, 'Toronto_Blue_Jays'), (537, 7, 'Seattle_Mariners'), (637, 11, 'Kansas_City_Royals'), (671, 7, 'Toronto_Blue_Jays'), (692, 9, 'Milwaukee_Brewers'), (477, 11, 'Kansas_City_Royals'), (890, 8, 'New_York_Yankees'), (847, 8, 'Montreal_Expos'), (1356, 8, 'St._Louis'), (1106, 11, 'Los_Angeles_Angels_of_Anaheim'), (721, 8, 'New_York_Yankees'), (775, 7, 'Seattle_Mariners'), (1259, 8, 'Montreal'), (1268, 11, 'Los_Angeles_Angels_of_Anaheim'), (251, 8, 'New_York_Yankees'), (1335, 8, 'New_York_Yankees'), (660, 7, 'Chicago')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Eugenio Canfari']
response in server.py code:
 [(162, 6, 'Author'), (121, 15, 'Eugenio_Canfari'), (68, 8, 'Student'), (146, 7, 'Sibling'), (176, 7, 'Company'), (110, 9, 'President'), (142, 3, 'Bon_Jovi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Wiesel']
response in server.py code:
 [(37, 11, 'Conducting'), (80, 10, 'Journalist'), (0, 6, 'Elie_Wiesel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(16, 7, 'Georgia_(U.S._state)'), (0, 12, 'Lyme_disease')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(317, 6, 'Pan_American_World_Airways'), (180, 6, 'Pan_American_World_Airways')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Anghel Iordanescu', 'Viorel Ion', 'Liviu Ciobotariu', 'Adrian Ilie', 'Bogdan Stelea', 'Florin Prunea', 'Dan Petrescu', 'Daniel Prodan', 'Anton Dobos', 'Liviu Ciobotariu', 'Iulian Filipescu', 'Gheorghe Hagi', 'Gheorghe Popescu', 'Constantin Galca', 'Basarab Panduru', 'Dorinel Munteanu', 'Ovidiu Stinga', 'Gheorghe Craioveanu', 'Ionel Danciulescu', 'Viorel Ion']
response in server.py code:
 [(1184, 15, 'Basarab_Panduru'), (1050, 16, 'Liviu_Ciobotariu'), (1219, 13, 'Ovidiu_Stîngă'), (993, 12, 'Dan_Petrescu'), (1116, 13, 'Gheorghe_Hagi'), (297, 16, 'Liviu_Ciobotariu'), (1022, 11, 'Anton_Doboș'), (966, 13, 'Florin_Prunea'), (1131, 16, 'Gheorghe_Popescu'), (951, 13, 'Bogdan_Stelea'), (1201, 16, 'Dorinel_Munteanu'), (1149, 16, 'Constantin_Gâlcă'), (270, 13, 'FC_Oțelul_Galați'), (1007, 13, 'Daniel_Prodan'), (52, 9, 'Bucharest'), (1084, 16, 'Iulian_Filipescu'), (418, 10, 'Anghel_Iordănescu'), (89, 17, 'Anghel_Iordănescu'), (317, 18, 'FC_Progresul_București'), (557, 13, 'FC_Oțelul_Galați'), (1280, 17, 'Ionel_Dănciulescu'), (1259, 19, 'Gheorghe_Craioveanu'), (811, 11, 'Adrian_Ilie'), (708, 18, 'UEFA_Champions_League'), (848, 6, 'FC_Steaua_București'), (1299, 10, 'Viorel_Ion'), (526, 18, 'FC_Progresul_București'), (661, 16, 'FC_Steaua_București'), (256, 10, 'Viorel_Ion'), (73, 7, 'Romania'), (740, 12, 'UEFA_Champions_League'), (858, 7, 'Turkey'), (362, 8, 'Europe'), (196, 9, 'FIFA_World_Cup'), (871, 11, 'Galatasaray_S.K.'), (171, 9, 'Macedonia_national_football_team'), (1311, 6, 'Stefan_Reuter'), (392, 9, 'Republic_of_Macedonia'), (41, 9, 'Republic_of_Macedonia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'David')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(539, 5, 'Tokyo'), (1169, 12, 'Niigata,_Niigata'), (736, 7, 'Arsenic'), (721, 7, 'Cyanide'), (604, 8, 'Paresthesia'), (1216, 9, 'Nerve_agent'), (170, 5, 'Toxicity'), (590, 6, 'Nausea'), (487, 7, 'Niigata,_Niigata'), (1103, 15, 'Liver'), (33, 3, 'Tea'), (242, 6, 'Police'), (890, 12, 'Sodium_azide'), (1272, 14, 'Aum_Shinrikyo'), (215, 22, 'Central_nervous_system'), (455, 17, 'Wood_preservation'), (962, 7, 'Airbag'), (1202, 10, '1994–95_NBA_season')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Nick Saban', 'Wayne Huizenga', 'Mike Shula', 'Don Shula', 'Jimmy Johnson', 'Rich Rodriguez', 'Ron Rivera', 'Mike Sherman', 'Cam Cameron', 'Jim Caldwell', 'Norm Chow', 'Russ Grimm', 'Joe Bailey', 'Daunte Culpepper', 'Dan Marino', 'Randy Mueller']
response in server.py code:
 [(1257, 4, 'Nick_Saban'), (1084, 4, 'Nick_Saban'), (1235, 4, 'Nick_Saban'), (1160, 4, 'Nick_Saban'), (654, 5, 'Nick_Saban'), (133, 10, 'Nick_Saban'), (2134, 13, 'Jimmy_Johnson_(American_football_coach)'), (585, 5, 'Nick_Saban'), (1404, 5, 'Nick_Saban'), (2755, 11, 'Cam_Cameron'), (1580, 5, 'Nick_Saban'), (4230, 10, 'Dan_Marino'), (1674, 5, 'Nick_Saban'), (1010, 5, 'Nick_Saban'), (2342, 5, 'Nick_Saban'), (1728, 5, 'Nick_Saban'), (2238, 5, 'Nick_Saban'), (511, 5, 'Nick_Saban'), (2365, 5, 'Nick_Saban'), (762, 5, 'Nick_Saban'), (222, 5, 'Nick_Saban'), (2660, 10, 'Ron_Rivera'), (909, 5, 'Nick_Saban'), (2844, 9, 'Norm_Chow'), (2986, 5, 'Nick_Saban'), (2610, 5, 'Nick_Saban'), (2714, 18, 'San_Diego_Chargers'), (2438, 14, 'Rich_Rodriguez'), (4360, 5, 'Nick_Saban'), (4384, 3, 'National_Football_League'), (2805, 16, 'Tennessee_Titans'), (2791, 12, 'Jim_Caldwell_(American_football)'), (2858, 19, 'Pittsburgh_Steelers'), (2276, 3, 'National_Football_League'), (4080, 16, 'Daunte_Culpepper'), (2624, 13, 'Chicago_Bears'), (835, 10, 'Tuscaloosa,_Alabama'), (3574, 17, 'Arizona_Cardinals'), (1550, 12, 'Alabama_Crimson_Tide'), (299, 14, 'Miami_Dolphins'), (126, 4, 'Florida'), (4161, 5, 'Miami'), (3596, 15, 'Atlanta_Falcons'), (4557, 21, 'AFC_Championship_Game'), (4438, 13, 'Randy_Mueller'), (421, 5, 'Miami'), (3979, 8, 'Miami_Dolphins'), (2543, 17, 'AdvoCare_V100_Bowl'), (3649, 8, 'Miami_Dolphins'), (26, 7, 'Alabama'), (0, 5, 'Nick_Saban'), (2679, 9, 'Green_Bay_Packers'), (4528, 8, 'Miami_Dolphins'), (3521, 8, 'Miami_Dolphins'), (2521, 14, 'Oklahoma_State_University–Stillwater'), (2768, 12, 'Indianapolis'), (3018, 3, 'Louisiana_State_University'), (1765, 7, 'Alabama'), (4735, 8, 'Miami_Dolphins'), (119, 5, 'Davie,_Florida'), (1797, 8, 'Miami_Dolphins'), (1471, 8, 'Miami_Dolphins'), (1833, 7, 'Alabama'), (13, 8, 'Miami_Dolphins'), (2387, 4, 'Alabama_Crimson_Tide'), (2411, 7, 'Alabama'), (1971, 5, 'Miami'), (1445, 3, 'LSU_Tigers_football'), (241, 7, 'Alabama'), (3004, 8, 'Miami_Dolphins'), (2480, 13, 'West_Virginia'), (2495, 7, 'Alabama'), (3898, 5, 'Miami')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(347, 10, 'Pittsburgh_Pirates'), (385, 7, 'Miami_Marlins'), (326, 8, 'Colorado_Rockies'), (312, 10, 'Cincinnati_Reds'), (158, 7, 'Detroit_Tigers'), (302, 7, 'Houston_Astros'), (241, 9, 'Baltimore_Orioles'), (337, 7, 'Atlanta_Braves'), (42, 8, 'New_York_City'), (73, 12, 'Major_League_Baseball'), (11, 12, 'Major_League_Baseball'), (142, 15, 'American_League'), (253, 15, 'National_League'), (182, 9, 'Minnesota_Twins'), (269, 9, 'San_Diego_Padres'), (194, 9, 'Milwaukee_Brewers'), (231, 7, 'Seattle_Mariners'), (396, 8, 'St._Louis_Cardinals'), (220, 8, 'New_York_Yankees'), (374, 8, 'Montreal_Expos'), (281, 8, 'New_York_City'), (168, 11, 'Kansas_City_Royals'), (360, 11, 'Los_Angeles_Dodgers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Pope Nicholas V']
response in server.py code:
 [(81, 15, 'Pope_Nicholas_V'), (4, 21, 'University_of_Glasgow')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['TARANGO', 'Larry Fine', 'Andre Agassi', 'MaliVai Washington', 'Marcelo Rios', "Alex O'Brien", 'Jeff Tarango', 'Leander Paes', 'Todd Martin']
response in server.py code:
 [(959, 11, 'Todd_Martin'), (562, 12, 'Jeff_Tarango'), (3039, 4, 'Marcelo_Ríos'), (496, 4, 'Marcelo_Ríos'), (3122, 4, 'Marcelo_Ríos'), (182, 12, 'Marcelo_Ríos'), (2396, 4, 'Marcelo_Ríos'), (2589, 7, 'Jeff_Tarango'), (94, 12, 'Andre_Agassi'), (2852, 7, 'Jeff_Tarango'), (2178, 7, 'Jeff_Tarango'), (1913, 10, 'MaliVai_Washington'), (3618, 7, 'Jeff_Tarango'), (871, 10, 'MaliVai_Washington'), (2114, 10, 'MaliVai_Washington'), (3063, 7, 'Jeff_Tarango'), (1170, 10, 'MaliVai_Washington'), (1609, 10, 'MaliVai_Washington'), (159, 18, 'MaliVai_Washington'), (9, 7, 'Jeff_Tarango'), (714, 6, 'Andre_Agassi'), (1678, 10, 'MaliVai_Washington'), (272, 10, 'MaliVai_Washington'), (1518, 4, 'United_States'), (817, 12, 'Leander_Paes'), (245, 9, 'US_Open_(tennis)'), (2500, 8, 'United_States'), (3475, 7, 'Jeff_Tarango'), (3546, 4, 'Marcelo_Ríos'), (3375, 8, 'United_States'), (531, 9, 'The_Championships,_Wimbledon'), (619, 7, 'Chile'), (2706, 8, 'United_States'), (2303, 16, 'All_England_Lawn_Tennis_and_Croquet_Club'), (311, 9, 'The_Championships,_Wimbledon'), (140, 9, 'The_Championships,_Wimbledon'), (369, 12, "Alex_O'Brien"), (1048, 7, "Alex_O'Brien"), (2472, 7, 'Chile'), (74, 8, 'New_York_City'), (1500, 7, "Alex_O'Brien"), (1347, 7, "Alex_O'Brien"), (978, 9, 'The_Championships,_Wimbledon'), (1783, 7, "Alex_O'Brien"), (1083, 9, 'New_Haven,_Connecticut'), (63, 10, 'Larry_Fine'), (2193, 9, 'The_Championships,_Wimbledon')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Carlo Rubbia']
response in server.py code:
 [(182, 13, 'United_States'), (77, 4, 'Pisa'), (242, 19, 'Columbia_University'), (36, 18, 'University_of_Pisa'), (59, 14, 'Scuola_Normale_Superiore_di_Pisa'), (158, 6, 'Carlo_Rubbia'), (0, 12, 'Carlo_Rubbia'), (83, 6, 'Carlo_Rubbia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Adult')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(14, 3, 'Agence_France-Presse'), (2, 4, 'Gaza')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(275, 6, 'Reuter')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(78, 9, 'Brazil'), (41, 14, 'Rio_de_Janeiro'), (158, 6, 'Grêmio_Foot-Ball_Porto_Alegrense'), (167, 10, 'Associação_Portuguesa_de_Desportos'), (150, 5, 'Goiás_Esporte_Clube'), (180, 16, 'Clube_Atlético_Mineiro'), (9, 9, 'Brazil')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(355, 9, 'Frankfurt'), (128, 7, 'Germany'), (155, 9, 'Lufthansa'), (15, 14, 'Rail_transport_in_Germany'), (500, 7, 'Cologne'), (993, 4, 'Bonn'), (641, 13, 'Deutsche_Bahn'), (1002, 9, 'Würzburg'), (1073, 6, 'United_Airlines'), (554, 13, 'Landing_slot'), (340, 8, 'Airline_hub'), (117, 6, 'Train'), (1087, 3, 'Scandinavian_Airlines'), (104, 6, 'Fixed-wing_aircraft')]
given spans fix. original text:  Barbara Walters stands by Rosie O’Donnell 
‘View’ host denies Trump's claim she wanted comedian off morning show 
 
NEW YORK - Barbara Walters is back from vacation — and she’s standing by Rosie O’Donnell in her bitter battle of words with Donald Trump. 
 
Walters, creator of ABC’s “The View,” said Wednesday on the daytime chat show that she never told Trump she didn’t want O’Donnell on the show, as he has claimed. “Nothing could be further from the truth,” she said. 
 
“She has brought a new vitality to this show and the ratings prove it,” Walters said of O’Donnell, who is on vacation this week. When she returns, Walters said, “We will all welcome her back with open arms.” 
 
Walters also took a moment to smooth things over with The Donald, who got all riled up when O’Donnell said on “The View” that he had been “bankrupt so many times.” 
 
“ABC has asked me to say this just to clarify things, and I will quote: ‘Donald Trump has never filed for personal bankruptcy. Several of his casino companies have filed for business bankruptcies. They are out of bankruptcy now,”’ Walters said. 
 
O’Donnell and Trump have been feuding since he announced last month that Miss USA Tara Conner, whose title had been in jeopardy because of underage drinking, would keep her crown. Trump is the owner of the Miss Universe Organization, which includes Miss USA and Miss Teen USA. 
 
The 44-year-old outspoken moderator of “The View,” who joined the show in September, said Trump’s news conference with Conner had annoyed her “on a multitude of levels” and that the twice-divorced real estate mogul had no right to be “the moral compass for 20-year-olds in America.” 
 
Trump fired back, calling O’Donnell a “loser” and a “bully,” among other insults, in various media interviews. 
 
He is the host of NBC’s “The Apprentice,” which begins its new season Sunday. 



original word:  America. America.
new split:  America  and  .
[(0, 7), (8, 15), (16, 22), (23, 25), (26, 31), (32, 33), (33, 34), (34, 41), (43, 44), (44, 48), (48, 49), (50, 54), (55, 61), (62, 67), (67, 69), (70, 75), (76, 79), (80, 86), (87, 95), (96, 99), (100, 107), (108, 112), (116, 119), (120, 124), (125, 126), (127, 134), (135, 142), (143, 145), (146, 150), (151, 155), (156, 164), (165, 166), (167, 170), (171, 174), (174, 175), (175, 176), (177, 185), (186, 188), (189, 194), (195, 196), (196, 197), (197, 204), (205, 207), (208, 211), (212, 218), (219, 225), (226, 228), (229, 234), (235, 239), (240, 246), (247, 252), (252, 253), (257, 264), (264, 265), (266, 273), (274, 276), (277, 280), (280, 281), (281, 282), (283, 284), (284, 287), (288, 292), (292, 293), (293, 294), (295, 299), (300, 309), (310, 312), (313, 316), (317, 324), (325, 329), (330, 334), (335, 339), (340, 343), (344, 349), (350, 354), (355, 360), (361, 364), (365, 369), (369, 370), (370, 371), (372, 376), (377, 378), (378, 379), (379, 386), (387, 389), (390, 393), (394, 398), (398, 399), (400, 402), (403, 405), (406, 409), (410, 417), (417, 418), (419, 420), (420, 427), (428, 433), (434, 436), (437, 444), (445, 449), (450, 453), (454, 459), (459, 460), (460, 461), (462, 465), (466, 470), (470, 471), (475, 476), (476, 479), (480, 483), (484, 491), (492, 493), (494, 497), (498, 506), (507, 509), (510, 514), (515, 519), (520, 523), (524, 527), (528, 535), (536, 541), (542, 544), (544, 545), (545, 546), (547, 554), (555, 559), (560, 562), (563, 564), (564, 565), (565, 572), (572, 573), (574, 577), (578, 580), (581, 583), (584, 592), (593, 597), (598, 602), (602, 603), (604, 608), (609, 612), (613, 620), (620, 621), (622, 629), (630, 634), (634, 635), (636, 637), (637, 639), (640, 644), (645, 648), (649, 656), (657, 660), (661, 665), (666, 670), (671, 675), (676, 681), (681, 682), (686, 693), (694, 698), (699, 703), (704, 705), (706, 712), (713, 715), (716, 722), (723, 729), (730, 734), (735, 739), (740, 743), (744, 750), (750, 751), (752, 755), (756, 759), (760, 763), (764, 769), (770, 772), (773, 777), (778, 779), (779, 780), (780, 787), (788, 792), (793, 795), (796, 797), (797, 800), (801, 805), (805, 806), (807, 811), (812, 814), (815, 818), (819, 823), (824, 825), (825, 833), (834, 836), (837, 841), (842, 848), (848, 849), (853, 854), (854, 857), (858, 861), (862, 867), (868, 870), (871, 873), (874, 877), (878, 882), (883, 887), (888, 890), (891, 898), (899, 905), (905, 906), (907, 910), (911, 912), (913, 917), (918, 923), (923, 924), (925, 926), (926, 932), (933, 938), (939, 942), (943, 948), (949, 954), (955, 958), (959, 967), (968, 978), (978, 979), (980, 987), (988, 990), (991, 994), (995, 1001), (1002, 1011), (1012, 1016), (1017, 1022), (1023, 1026), (1027, 1035), (1036, 1048), (1048, 1049), (1050, 1054), (1055, 1058), (1059, 1062), (1063, 1065), (1066, 1076), (1077, 1080), (1080, 1081), (1081, 1082), (1082, 1083), (1084, 1091), (1092, 1096), (1096, 1097), (1101, 1102), (1102, 1103), (1103, 1110), (1111, 1114), (1115, 1120), (1121, 1125), (1126, 1130), (1131, 1138), (1139, 1144), (1145, 1147), (1148, 1157), (1158, 1162), (1163, 1168), (1169, 1173), (1174, 1178), (1179, 1182), (1183, 1187), (1188, 1194), (1194, 1195), (1196, 1201), (1202, 1207), (1208, 1211), (1212, 1216), (1217, 1219), (1220, 1228), (1229, 1236), (1237, 1239), (1240, 1248), (1249, 1257), (1257, 1258), (1259, 1264), (1265, 1269), (1270, 1273), (1274, 1279), (1279, 1280), (1281, 1286), (1287, 1289), (1290, 1293), (1294, 1299), (1300, 1302), (1303, 1306), (1307, 1311), (1312, 1320), (1321, 1333), (1333, 1334), (1335, 1340), (1341, 1349), (1350, 1354), (1355, 1358), (1359, 1362), (1363, 1367), (1368, 1372), (1373, 1376), (1376, 1377), (1381, 1384), (1385, 1396), (1397, 1406), (1407, 1416), (1417, 1419), (1420, 1421), (1421, 1424), (1425, 1429), (1429, 1430), (1430, 1431), (1432, 1435), (1436, 1442), (1443, 1446), (1447, 1451), (1452, 1454), (1455, 1464), (1464, 1465), (1466, 1470), (1471, 1476), (1476, 1477), (1477, 1478), (1479, 1483), (1484, 1494), (1495, 1499), (1500, 1506), (1507, 1510), (1511, 1518), (1519, 1522), (1523, 1524), (1524, 1526), (1527, 1528), (1529, 1538), (1539, 1541), (1542, 1548), (1548, 1549), (1550, 1553), (1554, 1558), (1559, 1562), (1563, 1577), (1578, 1582), (1583, 1589), (1590, 1595), (1596, 1599), (1600, 1602), (1603, 1608), (1609, 1611), (1612, 1614), (1615, 1616), (1616, 1619), (1620, 1625), (1626, 1633), (1634, 1637), (1638, 1650), (1651, 1653), (1654, 1661), (1661, 1662)]
{0: 0, 1027: 229, 8: 1, 1036: 230, 16: 2, 344: 73, 1539: 330, 23: 3, 1048: 231, 26: 4, 1055: 233, 32: 5, 33: 6, 34: 7, 1059: 234, 1063: 235, 1066: 236, 43: 8, 44: 9, 48: 10, 50: 11, 1077: 237, 55: 12, 1080: 238, 1081: 239, 1082: 240, 1084: 241, 62: 13, 67: 14, 1092: 242, 70: 15, 1096: 243, 1548: 332, 76: 16, 1101: 244, 1102: 245, 1103: 246, 80: 17, 1111: 247, 1115: 248, 96: 19, 1121: 249, 100: 20, 1126: 250, 1131: 251, 108: 21, 1139: 252, 116: 22, 361: 76, 120: 23, 1145: 253, 1148: 254, 125: 24, 127: 25, 1158: 255, 135: 26, 1163: 256, 143: 27, 1169: 257, 146: 28, 1174: 258, 151: 29, 196: 40, 1179: 259, 156: 30, 1050: 232, 1183: 260, 1188: 261, 165: 31, 167: 32, 1194: 262, 171: 33, 1196: 263, 174: 34, 175: 35, 177: 36, 1202: 264, 1208: 265, 186: 37, 1212: 266, 189: 38, 1217: 267, 195: 39, 1220: 268, 197: 41, 205: 42, 1229: 269, 208: 43, 212: 44, 1237: 270, 1240: 271, 219: 45, 1249: 272, 226: 46, 229: 47, 1257: 273, 235: 48, 240: 49, 1265: 275, 1270: 276, 247: 50, 1274: 277, 252: 51, 1279: 278, 1281: 279, 1287: 280, 264: 53, 266: 54, 1294: 282, 274: 55, 1300: 283, 277: 56, 1303: 284, 280: 57, 281: 58, 1307: 285, 284: 60, 288: 61, 292: 62, 293: 63, 295: 64, 1321: 287, 300: 65, 1333: 288, 310: 66, 1335: 289, 313: 67, 317: 68, 325: 69, 1350: 291, 330: 70, 1355: 292, 1359: 293, 1363: 294, 340: 72, 1368: 295, 1373: 296, 350: 74, 1376: 297, 355: 75, 1381: 298, 1385: 299, 365: 77, 369: 78, 370: 79, 372: 80, 1397: 300, 377: 81, 378: 82, 379: 83, 1407: 301, 387: 84, 406: 90, 390: 85, 1417: 302, 394: 86, 1420: 303, 1421: 304, 398: 87, 400: 88, 1425: 305, 403: 89, 1429: 306, 1430: 307, 1432: 308, 410: 91, 1436: 309, 417: 92, 419: 93, 420: 94, 1447: 311, 1452: 312, 1455: 313, 434: 96, 437: 97, 1464: 314, 1466: 315, 445: 98, 1471: 316, 450: 99, 1476: 317, 1477: 318, 454: 100, 1479: 319, 459: 101, 1484: 320, 462: 103, 466: 104, 1443: 310, 470: 105, 1495: 321, 475: 106, 476: 107, 480: 108, 1507: 323, 484: 109, 1511: 324, 492: 110, 494: 111, 1519: 325, 498: 112, 1523: 326, 1524: 327, 1527: 328, 1529: 329, 507: 113, 460: 102, 510: 114, 515: 115, 1542: 331, 257: 52, 520: 116, 428: 95, 87: 18, 524: 117, 1550: 333, 528: 118, 1554: 334, 1559: 335, 536: 119, 1563: 336, 1626: 348, 542: 120, 544: 121, 545: 122, 547: 123, 1578: 337, 555: 124, 1583: 338, 560: 125, 563: 126, 564: 127, 565: 128, 1590: 339, 572: 129, 1290: 281, 574: 130, 1600: 341, 578: 131, 1603: 342, 581: 132, 584: 133, 1609: 343, 1612: 344, 1615: 345, 1616: 346, 593: 134, 1620: 347, 598: 135, 602: 136, 604: 137, 609: 138, 1634: 349, 613: 139, 1638: 350, 620: 140, 622: 141, 1651: 351, 630: 142, 634: 143, 636: 144, 637: 145, 640: 146, 645: 147, 649: 148, 657: 149, 661: 150, 666: 151, 671: 152, 283: 59, 676: 153, 681: 154, 686: 155, 694: 156, 699: 157, 704: 158, 1312: 286, 706: 159, 1654: 352, 713: 160, 716: 161, 723: 162, 730: 163, 735: 164, 740: 165, 744: 166, 750: 167, 1661: 353, 752: 168, 756: 169, 760: 170, 764: 171, 770: 172, 773: 173, 778: 174, 779: 175, 780: 176, 788: 177, 793: 178, 796: 179, 797: 180, 801: 181, 805: 182, 807: 183, 1500: 322, 812: 184, 815: 185, 819: 186, 824: 187, 825: 188, 1596: 340, 834: 189, 837: 190, 842: 191, 848: 192, 853: 193, 854: 194, 858: 195, 862: 196, 868: 197, 871: 198, 874: 199, 878: 200, 1341: 290, 883: 201, 888: 202, 891: 203, 899: 204, 905: 205, 907: 206, 911: 207, 913: 208, 918: 209, 923: 210, 925: 211, 926: 212, 933: 213, 939: 214, 943: 215, 949: 216, 1259: 274, 955: 217, 959: 218, 968: 219, 978: 220, 980: 221, 335: 71, 988: 222, 991: 223, 995: 224, 1002: 225, 1012: 226, 1017: 227, 1023: 228}
{1026: 228, 7: 0, 343: 72, 1538: 329, 15: 1, 22: 2, 1048: 230, 25: 3, 1054: 232, 31: 4, 33: 5, 1058: 233, 1062: 234, 41: 7, 44: 8, 48: 9, 49: 10, 1076: 236, 54: 11, 1080: 237, 1081: 238, 1082: 239, 1083: 240, 61: 12, 67: 13, 69: 14, 1096: 242, 1097: 243, 75: 15, 1102: 244, 79: 16, 1110: 246, 1114: 247, 95: 18, 1120: 248, 99: 19, 1125: 249, 1130: 250, 107: 20, 112: 21, 360: 75, 1138: 251, 119: 22, 1144: 252, 1147: 253, 124: 23, 126: 24, 1157: 254, 134: 25, 1162: 255, 142: 26, 1168: 256, 145: 27, 1173: 257, 150: 28, 1049: 231, 1178: 258, 155: 29, 1182: 259, 1187: 260, 164: 30, 166: 31, 1194: 261, 1195: 262, 174: 33, 175: 34, 176: 35, 1201: 263, 1207: 264, 185: 36, 1211: 265, 188: 37, 1216: 266, 194: 38, 1219: 267, 196: 39, 197: 40, 204: 41, 1228: 268, 34: 6, 207: 42, 211: 43, 1236: 269, 1239: 270, 218: 44, 1248: 271, 225: 45, 228: 46, 1257: 272, 234: 47, 239: 48, 1264: 274, 1269: 275, 246: 49, 1065: 235, 1273: 276, 252: 50, 253: 51, 1279: 277, 1280: 278, 1286: 279, 264: 52, 1289: 280, 1293: 281, 273: 54, 1299: 282, 276: 55, 1302: 283, 280: 56, 281: 57, 1306: 284, 284: 59, 287: 60, 292: 61, 293: 62, 294: 63, 1320: 286, 299: 64, 309: 65, 1334: 288, 312: 66, 1340: 289, 1589: 338, 324: 68, 1349: 290, 329: 69, 1354: 291, 334: 70, 1362: 293, 339: 71, 1367: 294, 1372: 295, 349: 73, 1376: 296, 1377: 297, 354: 74, 1384: 298, 1103: 245, 364: 76, 1035: 229, 369: 77, 370: 78, 371: 79, 1396: 299, 376: 80, 378: 81, 379: 82, 1258: 273, 1406: 300, 1429: 305, 386: 83, 389: 84, 1416: 301, 393: 85, 1419: 302, 1421: 303, 398: 86, 399: 87, 1424: 304, 402: 88, 1091: 241, 405: 89, 1430: 306, 1431: 307, 409: 90, 1435: 308, 417: 91, 1442: 309, 420: 93, 1446: 310, 1451: 311, 1454: 312, 433: 95, 436: 96, 1464: 313, 1465: 314, 444: 97, 1470: 315, 449: 98, 1476: 316, 1477: 317, 1478: 318, 1483: 319, 460: 101, 418: 92, 465: 103, 1494: 320, 471: 105, 1499: 321, 476: 106, 479: 107, 1616: 345, 1506: 322, 483: 108, 1510: 323, 491: 109, 493: 110, 1518: 324, 1653: 351, 497: 111, 1522: 325, 1524: 326, 1526: 327, 1528: 328, 506: 112, 509: 113, 514: 114, 427: 94, 86: 17, 519: 115, 523: 116, 1548: 331, 1549: 332, 527: 117, 1553: 333, 1558: 334, 535: 118, 1562: 335, 541: 119, 544: 120, 545: 121, 546: 122, 1577: 336, 554: 123, 1582: 337, 559: 124, 562: 125, 564: 126, 565: 127, 265: 53, 1595: 339, 572: 128, 573: 129, 1599: 340, 577: 130, 1602: 341, 580: 131, 583: 132, 1608: 342, 1611: 343, 1614: 344, 592: 133, 1619: 346, 597: 134, 1625: 347, 602: 135, 603: 136, 608: 137, 1633: 348, 612: 138, 1637: 349, 620: 139, 621: 140, 873: 198, 1650: 350, 629: 141, 634: 142, 635: 143, 637: 144, 1662: 353, 639: 145, 644: 146, 648: 147, 656: 148, 660: 149, 665: 150, 282: 58, 670: 151, 453: 99, 675: 152, 681: 153, 682: 154, 693: 155, 698: 156, 1311: 285, 703: 157, 705: 158, 459: 100, 712: 159, 715: 160, 461: 102, 722: 161, 729: 162, 734: 163, 1661: 352, 739: 164, 743: 165, 750: 166, 751: 167, 755: 168, 759: 169, 763: 170, 769: 171, 772: 172, 470: 104, 777: 173, 779: 174, 780: 175, 787: 176, 792: 177, 795: 178, 797: 179, 800: 180, 805: 181, 806: 182, 811: 183, 814: 184, 818: 185, 823: 186, 825: 187, 1333: 287, 833: 188, 836: 189, 841: 190, 848: 191, 849: 192, 854: 193, 857: 194, 861: 195, 867: 196, 870: 197, 316: 67, 877: 199, 882: 200, 887: 201, 890: 202, 898: 203, 905: 204, 906: 205, 910: 206, 912: 207, 917: 208, 923: 209, 924: 210, 926: 211, 932: 212, 938: 213, 942: 214, 948: 215, 954: 216, 958: 217, 967: 218, 978: 219, 979: 220, 1358: 292, 987: 221, 990: 222, 994: 223, 1001: 224, 1011: 225, 1022: 227, 1016: 226, 170: 32, 1541: 330}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Barbara Walters', 'Rosie O ’ Donnell', 'Trump', 'Barbara Walters', 'Rosie O ’ Donnell', 'Donald Trump', 'The Donald', 'Donald Trump']
response in server.py code:
 [(1281, 5, 'Donald_Trump'), (1471, 5, 'Donald_Trump'), (257, 7, 'Barbara_Walters'), (547, 7, 'Barbara_Walters'), (622, 7, 'Barbara_Walters'), (1115, 5, 'Donald_Trump'), (127, 15, 'Barbara_Walters'), (740, 10, 'Donald_Trump'), (0, 15, 'Barbara_Walters'), (240, 12, 'Donald_Trump'), (686, 7, 'Barbara_Walters'), (26, 15, "Rosie_O'Donnell"), (377, 9, "Rosie_O'Donnell"), (189, 15, "Rosie_O'Donnell"), (355, 5, 'Donald_Trump'), (926, 12, 'Donald_Trump'), (1084, 7, 'Barbara_Walters'), (1667, 5, 'Donald_Trump'), (563, 9, "Rosie_O'Donnell"), (284, 8, 'The_View_(U.S._TV_series)'), (1101, 9, "Rosie_O'Donnell"), (1654, 7, 'United_States'), (778, 9, "Rosie_O'Donnell"), (1693, 9, "Rosie_O'Donnell"), (797, 8, 'The_View_(U.S._TV_series)'), (1307, 26, 'Miss_Universe_Organization'), (1350, 8, 'Miss_USA'), (62, 5, 'Donald_Trump'), (277, 3, 'American_Broadcasting_Company'), (1363, 13, 'Miss_Teen_USA'), (1421, 8, 'The_View_(U.S._TV_series)'), (1799, 3, 'NBC'), (116, 8, 'New_York_City'), (854, 3, 'American_Broadcasting_Company'), (1806, 14, 'The_Apprentice_(U.S._TV_series)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(107, 6, 'Denver'), (124, 6, 'Aurora,_Illinois')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Maxwell', 'Reverend']
response in server.py code:
 [(31, 8, 'The_Reverend'), (71, 9, 'Head_teacher'), (84, 9, 'Marshal'), (8, 7, 'Maxwell_(musician)')]
response in server.py code:
 []
given spans fix. original text:  After graduating from Magdalene College in 1921, Blackett spent ten years working at the Cavendish Laboratory as an experimental physicist with Professor Rutherford and in 1923 became a fellow of King's College, Cambridge, a position he held until 1933.
original word:  held held
new split:  he  and  ld
[(0, 5), (6, 16), (17, 21), (22, 31), (32, 39), (40, 42), (43, 47), (47, 48), (49, 57), (58, 63), (64, 67), (68, 73), (74, 81), (82, 84), (85, 88), (89, 98), (99, 109), (110, 112), (113, 115), (116, 128), (129, 138), (139, 143), (144, 153), (154, 164), (165, 168), (169, 171), (172, 176), (177, 183), (184, 185), (186, 192), (193, 195), (196, 200), (200, 202), (203, 210), (210, 211), (212, 221), (221, 222), (223, 224), (225, 233), (234, 236), (237, 239), (239, 241)]
{0: 0, 64: 10, 203: 33, 68: 11, 6: 1, 129: 20, 200: 32, 177: 27, 74: 12, 139: 21, 237: 40, 144: 22, 17: 2, 82: 13, 196: 31, 212: 35, 85: 14, 22: 3, 89: 15, 154: 23, 239: 41, 186: 29, 223: 37, 32: 4, 225: 38, 99: 16, 165: 24, 113: 18, 40: 5, 169: 25, 193: 30, 43: 6, 172: 26, 210: 34, 110: 17, 47: 7, 49: 8, 221: 36, 116: 19, 184: 28, 58: 9, 234: 39}
{128: 19, 192: 29, 67: 10, 5: 0, 211: 34, 200: 31, 73: 11, 138: 20, 143: 21, 16: 1, 81: 12, 210: 33, 195: 30, 84: 13, 21: 2, 185: 28, 88: 14, 153: 22, 239: 40, 221: 35, 176: 26, 31: 3, 224: 37, 112: 17, 98: 15, 164: 23, 39: 4, 168: 24, 233: 38, 42: 5, 171: 25, 236: 39, 109: 16, 47: 6, 48: 7, 241: 41, 115: 18, 222: 36, 183: 27, 57: 8, 202: 32, 63: 9}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Blackett', 'Rutherford']
response in server.py code:
 [(22, 17, 'Magdalene_College,_Cambridge'), (144, 9, 'Professor'), (89, 20, 'Cavendish_Laboratory'), (129, 9, 'Physicist'), (186, 6, 'Fellow'), (196, 14, "King's_College,_Cambridge"), (212, 9, 'Cambridge'), (49, 8, 'Patrick_Blackett,_Baron_Blackett'), (154, 10, 'Ernest_Rutherford')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Randall Cunningham', 'Jeffrey Lurie']
response in server.py code:
 [(722, 7, 'Randall_Cunningham'), (534, 10, 'Randall_Cunningham'), (50, 12, 'Philadelphia'), (250, 10, 'Randall_Cunningham'), (860, 7, 'Randall_Cunningham'), (1028, 10, 'Randall_Cunningham'), (357, 10, 'Randall_Cunningham'), (74, 18, 'Randall_Cunningham'), (1123, 10, 'Randall_Cunningham'), (775, 3, 'National_Football_League'), (991, 3, 'National_Football_League'), (480, 12, 'Philadelphia'), (807, 13, 'Jeffrey_Lurie'), (303, 19, 'Philadelphia_Eagles'), (846, 12, 'Philadelphia'), (0, 3, 'National_Football_League'), (337, 8, 'Pro_Bowl'), (956, 12, 'Philadelphia'), (98, 24, 'National_Football_League'), (434, 6, 'Philadelphia_Eagles'), (794, 6, 'Philadelphia_Eagles'), (895, 6, 'Philadelphia_Eagles'), (30, 10, 'Randall_Cunningham')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(94, 30, 'Nippon_Telegraph_and_Telephone'), (0, 16, 'Nortel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Robert Galvin', 'Brian Lara', 'Greg Blewett', 'Stuart Law', 'Shane Warne', 'Clive Lloyd', 'Geoff Marsh', 'Ian Healy', 'Shivnarine Chanderpaul']
response in server.py code:
 [(878, 10, 'Stuart_Law'), (928, 4, 'Brian_Lara'), (1023, 11, 'Shane_Warne'), (1075, 11, 'Clive_Lloyd'), (1200, 9, 'Ian_Healy'), (1106, 4, 'Brian_Lara'), (240, 4, 'Brian_Lara'), (691, 7, 'Greg_Blewett'), (96, 10, 'Brian_Lara'), (551, 12, 'Greg_Blewett'), (1170, 11, 'Geoff_Marsh'), (1139, 4, 'Brian_Lara'), (1421, 22, 'Shivnarine_Chanderpaul'), (60, 9, 'Melbourne'), (1532, 11, 'Shivnarine_Chanderpaul'), (430, 11, 'West_Indies_cricket_team'), (153, 11, 'West_Indies_cricket_team'), (10, 4, 'Brian_Lara'), (1050, 11, 'West_Indies_cricket_team'), (1679, 8, 'Pakistan_national_cricket_team'), (81, 9, 'Australia_national_cricket_team'), (1154, 9, 'Australia_national_cricket_team'), (357, 9, 'Australia_national_cricket_team'), (1334, 11, 'West_Indies_cricket_team'), (1703, 9, 'Australia'), (1767, 12, 'World_Series'), (196, 12, 'Australian_Tri-Series')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Karl', 'Theo']
response in server.py code:
 [(9, 4, 'Theo_van_Gogh_(art_dealer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Viravaidya']
response in server.py code:
 [(405, 5, 'Bank'), (377, 10, 'Corporate_title'), (418, 7, 'Finance'), (844, 10, 'Hearst_Corporation'), (354, 9, 'Lifestyle_(sociology)'), (543, 16, 'Bank_of_Thailand'), (129, 16, 'Business_ethics'), (766, 11, 'Thai_people'), (610, 14, 'Criminal_law'), (862, 11, 'Television_channel'), (14, 10, 'Mechai_Viravaidya')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Gillespie', 'M. Waugh', 'Gillespie', 'Warne', 'J. Adams', 'Warne', 'M. Waugh', 'Warne', 'C. Walsh', 'Reiffel', 'Gillespie', 'Warne', 'M. Waugh', 'M. Taylor', 'M. Waugh', 'Ambrose']
response in server.py code:
 [(722, 8, 'Mark_Waugh'), (237, 8, 'Mark_Waugh'), (773, 8, 'Mark_Waugh'), (414, 8, 'Mark_Waugh'), (615, 7, 'Paul_Reiffel'), (387, 5, 'Shane_Warne'), (699, 5, 'Shane_Warne'), (270, 5, 'Shane_Warne'), (439, 5, 'Shane_Warne'), (211, 9, 'Jason_Gillespie'), (22, 11, 'West_Indies_cricket_team'), (641, 9, 'Jason_Gillespie'), (153, 11, 'West_Indies_cricket_team'), (248, 9, 'Jason_Gillespie'), (59, 9, 'Melbourne'), (1238, 9, 'Australia_national_cricket_team'), (139, 9, 'Australia_national_cricket_team'), (177, 11, 'West_Indies_cricket_team'), (377, 7, 'Greg_Blewett'), (311, 7, 'Greg_Blewett'), (679, 7, 'Greg_Blewett'), (741, 9, 'Australia_national_cricket_team'), (872, 6, 'Carl_Hooper'), (10, 9, 'Australia_national_cricket_team'), (890, 6, 'Carl_Hooper'), (203, 5, 'Ian_Healy'), (303, 5, 'Ian_Healy'), (1182, 6, 'Carl_Hooper'), (662, 5, 'Tom_Moody'), (278, 5, 'Tom_Moody'), (357, 5, 'Tom_Moody'), (751, 9, 'Maik_Taylor'), (34, 12, 'World_Series'), (1102, 7, 'Curtly_Ambrose'), (365, 9, 'Jamie_Murray'), (98, 12, 'Australian_Tri-Series')]
given spans fix. original text:  Resolution to imbibe less goes awry — already 
Myriad of conflicting medical studies are enough to drive this writer to drink 
 
The fruitcake’s been digested, the gift cards are empty, and now it’s time to face the most grueling holiday task of all: the annual reassessment. Do I need to exercise more? Spend less? Set aside more quality time for friends and family? The resolution list goes on and on — much like that interminable karaoke version of “Santa Baby” at this year’s holiday party. 
 
Unfortunately, since I was the one holding the microphone, this year’s resolution seems painfully clear: Cut back on the alcohol intake. 
 
Not that I drink a lot — usually just a glass of wine with dinner, if that — but I’ve read that even one drink a day can adversely affect my health. 
 
Also, a recent study by the Mayo Clinic found that women’s bodies are less adept at breaking down alcohol than men’s. As a result, the more we drink, the more we risk heart disease, cancer, cirrhosis of the liver, and, perhaps the most chilling side effect of all — kissing our skinny jeans goodbye forever. 
 
But how much alcohol is too much? There’s the rub. The answer seems to depend on which study you read. The Mayo Clinic study says one drink a day is OK for “younger women who aren’t planning a pregnancy” and that “postmenopausal women should limit themselves to less.” But what about those of us who don’t fit in either category? 
 
Looking for a definitive answer, I turned to another study, this one conducted by a group of doctors at Stony Brook University in New York. But their finding that drinking three glasses of red wine a week reduces the risk of colorectal cancer only confused matters further. 
 
Who to believe? 
Should I cut back on alcohol entirely in order to fend off heart disease, liver problems and dreaded weight gain (not to mention potential blackmail opportunities by family, friends and co-workers) or suck down three or more glasses a week to keep the colorectal cancer at bay?  
 
Or should I listen to the doctors the Goteborg University in Sweden, who found that mice that had ingested low levels of alcohol on a daily basis showed a significantly lower risk of developing rheumatoid arthritis than mice that just drank water. Obsessed, I started digging through medical journals and online health stories until the studies began to stack up like swizzle sticks at a company-hosted bar. 
 
In London, researchers found that people who drank alcohol have a lower risk of developing non-Hodgkin’s lymphoma, but the risk of cancer of the mouth, esophagus and liver actually increases. 
 
At Ohio State University, a study showed that drinking moderately (such as a couple of drinks a day) improved the memories of laboratory rats, although a study at the University of Missouri declared that alcohol hindered academic success. 
 
Live longer so you can die young 
Adding it all up, it seems that by drinking alcohol I can both reduce my chances of heart disease and increase my risk for high blood pressure, fend off dementia while upping my chances for brain damage, boost my memory at the same time that I become more stupid, avoid lymphoma while veering towards breast and liver cancer, and in general, both live longer and die younger. 
 
In other words, alcohol is every bit the hazy hypocritical demon it’s always been (especially when there’s a microphone involved). So this year, I’m taking another resolution route altogether. Instead of squelching my alcohol intake, I’m going to cut out karaoke — and perhaps limit my medical studies to just one per day with dinner, if that. 
 



original word:  non-Hodgkin non-Hodgkin
new split:  non-  and  Hodgkin
[(0, 10), (11, 13), (14, 20), (21, 25), (26, 30), (31, 35), (36, 37), (38, 45), (47, 53), (54, 56), (57, 68), (69, 76), (77, 84), (85, 88), (89, 95), (96, 98), (99, 104), (105, 109), (110, 116), (117, 119), (120, 125), (129, 132), (133, 142), (142, 143), (143, 144), (145, 149), (150, 158), (158, 159), (160, 163), (164, 168), (169, 174), (175, 178), (179, 184), (184, 185), (186, 189), (190, 193), (194, 196), (196, 197), (197, 198), (199, 203), (204, 206), (207, 211), (212, 215), (216, 220), (221, 229), (230, 237), (238, 242), (243, 245), (246, 249), (249, 250), (251, 254), (255, 261), (262, 274), (274, 275), (276, 278), (279, 280), (281, 285), (286, 288), (289, 297), (298, 302), (302, 303), (304, 309), (310, 314), (314, 315), (316, 319), (320, 325), (326, 330), (331, 338), (339, 343), (344, 347), (348, 355), (356, 359), (360, 366), (366, 367), (368, 371), (372, 382), (383, 387), (388, 392), (393, 395), (396, 399), (400, 402), (403, 404), (405, 409), (410, 414), (415, 419), (420, 432), (433, 440), (441, 448), (449, 451), (452, 453), (453, 458), (459, 463), (463, 464), (465, 467), (468, 472), (473, 477), (477, 478), (478, 479), (480, 487), (488, 493), (493, 494), (498, 511), (511, 512), (513, 518), (519, 520), (521, 524), (525, 528), (529, 532), (533, 540), (541, 544), (545, 555), (555, 556), (557, 561), (562, 566), (566, 567), (567, 568), (569, 579), (580, 585), (586, 595), (596, 601), (601, 602), (603, 606), (607, 611), (612, 614), (615, 618), (619, 626), (627, 633), (633, 634), (638, 641), (642, 646), (647, 648), (649, 654), (655, 656), (657, 660), (661, 662), (663, 670), (671, 675), (676, 677), (678, 683), (684, 686), (687, 691), (692, 696), (697, 703), (703, 704), (705, 707), (708, 712), (713, 714), (715, 718), (719, 720), (720, 721), (721, 723), (724, 728), (729, 733), (734, 738), (739, 742), (743, 748), (749, 750), (751, 754), (755, 758), (759, 768), (769, 775), (776, 778), (779, 785), (785, 786), (790, 794), (794, 795), (796, 797), (798, 804), (805, 810), (811, 813), (814, 817), (818, 822), (823, 829), (830, 835), (836, 840), (841, 846), (846, 847), (847, 848), (849, 855), (856, 859), (860, 864), (865, 870), (871, 873), (874, 882), (883, 887), (888, 895), (896, 900), (901, 904), (904, 905), (905, 906), (906, 907), (908, 910), (911, 912), (913, 919), (919, 920), (921, 924), (925, 929), (930, 932), (933, 938), (938, 939), (940, 943), (944, 948), (949, 951), (952, 956), (957, 962), (963, 970), (970, 971), (972, 978), (978, 979), (980, 989), (990, 992), (993, 996), (997, 1002), (1002, 1003), (1004, 1007), (1007, 1008), (1009, 1016), (1017, 1020), (1021, 1025), (1026, 1034), (1035, 1039), (1040, 1046), (1047, 1049), (1050, 1053), (1054, 1055), (1056, 1063), (1064, 1067), (1068, 1074), (1075, 1080), (1081, 1088), (1089, 1096), (1096, 1097), (1101, 1104), (1105, 1108), (1109, 1113), (1114, 1121), (1122, 1124), (1125, 1128), (1129, 1133), (1133, 1134), (1135, 1140), (1140, 1141), (1141, 1142), (1143, 1146), (1147, 1150), (1150, 1151), (1152, 1155), (1156, 1162), (1163, 1168), (1169, 1171), (1172, 1178), (1179, 1181), (1182, 1187), (1188, 1193), (1194, 1197), (1198, 1202), (1202, 1203), (1204, 1207), (1208, 1212), (1213, 1219), (1220, 1225), (1226, 1230), (1231, 1234), (1235, 1240), (1241, 1242), (1243, 1246), (1247, 1249), (1250, 1252), (1253, 1256), (1257, 1258), (1258, 1265), (1266, 1271), (1272, 1275), (1276, 1280), (1280, 1281), (1281, 1282), (1283, 1291), (1292, 1293), (1294, 1303), (1303, 1304), (1305, 1308), (1309, 1313), (1314, 1315), (1315, 1329), (1330, 1335), (1336, 1342), (1343, 1348), (1349, 1359), (1360, 1362), (1363, 1368), (1368, 1369), (1370, 1373), (1374, 1378), (1379, 1384), (1385, 1390), (1391, 1393), (1394, 1396), (1397, 1400), (1401, 1404), (1404, 1405), (1405, 1406), (1407, 1410), (1411, 1413), (1414, 1420), (1421, 1429), (1429, 1430), (1434, 1441), (1442, 1445), (1446, 1447), (1448, 1458), (1459, 1465), (1465, 1466), (1467, 1468), (1469, 1475), (1476, 1478), (1479, 1486), (1487, 1492), (1492, 1493), (1494, 1498), (1499, 1502), (1503, 1512), (1513, 1515), (1516, 1517), (1518, 1523), (1524, 1526), (1527, 1534), (1535, 1537), (1538, 1543), (1544, 1549), (1550, 1560), (1561, 1563), (1564, 1567), (1568, 1572), (1572, 1573), (1574, 1577), (1578, 1583), (1584, 1591), (1592, 1596), (1597, 1605), (1606, 1611), (1612, 1619), (1620, 1622), (1623, 1626), (1627, 1631), (1632, 1633), (1634, 1638), (1639, 1646), (1647, 1650), (1651, 1655), (1656, 1658), (1659, 1669), (1670, 1676), (1677, 1681), (1682, 1690), (1691, 1698), (1699, 1706), (1706, 1707), (1711, 1714), (1715, 1717), (1718, 1725), (1725, 1726), (1728, 1734), (1735, 1736), (1737, 1740), (1741, 1745), (1746, 1748), (1749, 1756), (1757, 1765), (1766, 1768), (1769, 1774), (1775, 1777), (1778, 1782), (1783, 1786), (1787, 1792), (1793, 1800), (1800, 1801), (1802, 1807), (1808, 1816), (1817, 1820), (1821, 1828), (1829, 1835), (1836, 1840), (1841, 1842), (1842, 1845), (1846, 1848), (1849, 1856), (1857, 1866), (1867, 1876), (1877, 1890), (1891, 1893), (1894, 1900), (1900, 1901), (1902, 1909), (1910, 1913), (1914, 1924), (1924, 1925), (1926, 1928), (1929, 1933), (1934, 1938), (1939, 1944), (1945, 1947), (1948, 1952), (1953, 1960), (1961, 1962), (1963, 1967), (1968, 1970), (1971, 1975), (1976, 1979), (1980, 1990), (1991, 1997), (1998, 2000), (2001, 2004), (2004, 2005), (2010, 2012), (2013, 2019), (2020, 2021), (2022, 2028), (2029, 2031), (2032, 2035), (2036, 2043), (2044, 2047), (2048, 2056), (2057, 2067), (2068, 2070), (2071, 2077), (2077, 2078), (2079, 2082), (2083, 2088), (2089, 2093), (2094, 2098), (2099, 2103), (2104, 2107), (2108, 2116), (2117, 2120), (2121, 2127), (2128, 2130), (2131, 2138), (2139, 2141), (2142, 2143), (2144, 2149), (2150, 2155), (2156, 2162), (2163, 2164), (2165, 2178), (2179, 2184), (2185, 2189), (2190, 2192), (2193, 2203), (2204, 2214), (2215, 2224), (2225, 2229), (2230, 2234), (2235, 2239), (2240, 2244), (2245, 2250), (2251, 2256), (2256, 2257), (2258, 2266), (2266, 2267), (2268, 2269), (2270, 2277), (2278, 2285), (2286, 2293), (2294, 2301), (2302, 2310), (2311, 2314), (2315, 2321), (2322, 2328), (2329, 2336), (2337, 2342), (2343, 2346), (2347, 2354), (2355, 2360), (2361, 2363), (2364, 2369), (2370, 2372), (2373, 2377), (2378, 2385), (2386, 2392), (2393, 2395), (2396, 2397), (2398, 2412), (2413, 2416), (2416, 2417), (2421, 2423), (2424, 2430), (2430, 2431), (2432, 2443), (2444, 2449), (2450, 2454), (2455, 2461), (2462, 2465), (2466, 2471), (2472, 2479), (2480, 2484), (2485, 2486), (2487, 2492), (2493, 2497), (2498, 2500), (2501, 2511), (2512, 2516), (2516, 2523)]
{0: 0, 2048: 421, 1026: 219, 2057: 422, 11: 1, 14: 2, 1040: 221, 1368: 290, 2068: 423, 21: 3, 1047: 222, 26: 4, 1711: 357, 2077: 425, 1054: 224, 31: 5, 1056: 225, 2083: 427, 36: 6, 38: 7, 1064: 226, 2089: 428, 1068: 227, 2094: 429, 47: 8, 2286: 462, 1075: 228, 2398: 481, 54: 9, 2104: 431, 57: 10, 2108: 432, 1089: 230, 1035: 220, 69: 11, 1096: 231, 2121: 434, 1639: 346, 77: 12, 2128: 435, 1105: 233, 2131: 436, 85: 13, 89: 14, 1114: 235, 2139: 437, 2117: 433, 96: 15, 1122: 236, 99: 16, 1125: 237, 2150: 440, 105: 17, 2156: 441, 1133: 239, 110: 18, 1135: 240, 2163: 442, 1140: 241, 117: 19, 1143: 243, 120: 20, 2493: 497, 1147: 244, 1150: 245, 1152: 246, 129: 21, 2179: 444, 1156: 247, 133: 22, 243: 47, 2185: 445, 1163: 248, 142: 23, 143: 24, 1169: 249, 1172: 250, 150: 26, 1220: 260, 1179: 251, 2204: 448, 1050: 223, 158: 27, 2245: 454, 160: 28, 2416: 483, 164: 29, 2215: 449, 169: 30, 1194: 254, 1198: 255, 175: 31, 2225: 450, 1202: 256, 179: 32, 1204: 257, 2230: 451, 1737: 363, 184: 33, 186: 34, 2079: 426, 1213: 259, 190: 35, 2421: 484, 2240: 453, 194: 36, 196: 37, 197: 38, 199: 39, 1226: 261, 2251: 455, 204: 40, 207: 41, 2256: 456, 2258: 457, 1235: 263, 212: 42, 216: 43, 1241: 264, 2266: 458, 1243: 265, 2268: 459, 221: 44, 2270: 460, 1247: 266, 1250: 267, 2004: 412, 1253: 268, 230: 45, 1257: 269, 1258: 270, 238: 46, 1266: 271, 383: 76, 246: 48, 1272: 272, 249: 49, 251: 50, 1276: 273, 2302: 464, 255: 51, 1280: 274, 1281: 275, 1283: 276, 262: 52, 2311: 465, 145: 25, 2315: 466, 1292: 277, 1294: 278, 274: 53, 276: 54, 1303: 279, 2396: 480, 281: 56, 1305: 280, 1309: 281, 286: 57, 289: 58, 1314: 282, 1315: 283, 2343: 470, 298: 59, 2347: 471, 1817: 378, 302: 60, 1783: 372, 304: 61, 1330: 284, 2099: 430, 1208: 258, 310: 62, 1929: 397, 1336: 285, 2361: 473, 314: 63, 316: 64, 1343: 286, 320: 65, 2370: 475, 1349: 287, 326: 66, 2193: 447, 2444: 488, 2378: 477, 331: 67, 1360: 288, 2386: 478, 339: 68, 1081: 229, 344: 69, 2393: 479, 1370: 291, 348: 70, 1141: 242, 1374: 292, 1379: 293, 356: 71, 2278: 461, 360: 72, 1385: 294, 2501: 499, 2413: 482, 366: 73, 1391: 295, 368: 74, 1394: 296, 372: 75, 1397: 297, 2424: 485, 1401: 298, 1404: 299, 1405: 300, 2430: 486, 1407: 301, 2432: 487, 1411: 302, 388: 77, 1414: 303, 393: 78, 2455: 490, 396: 79, 1421: 304, 400: 80, 2450: 489, 403: 81, 405: 82, 1945: 400, 1434: 306, 1775: 370, 410: 83, 2462: 491, 415: 84, 1442: 307, 420: 85, 1446: 308, 1448: 309, 2480: 494, 433: 86, 1459: 310, 2485: 495, 2487: 496, 1465: 311, 1467: 312, 1469: 313, 449: 88, 2498: 498, 1476: 314, 453: 90, 1479: 315, 459: 91, 2466: 492, 1487: 316, 2512: 500, 465: 93, 1492: 317, 1494: 318, 473: 95, 1499: 319, 477: 96, 478: 97, 1503: 320, 480: 98, 1101: 232, 1513: 321, 1516: 322, 493: 100, 1518: 323, 2472: 493, 498: 101, 1524: 324, 1527: 325, 1620: 341, 2165: 443, 1109: 234, 513: 103, 1538: 327, 519: 104, 1544: 328, 521: 105, 2190: 446, 1623: 342, 525: 106, 1550: 329, 529: 107, 533: 108, 1561: 330, 1564: 331, 541: 109, 1568: 332, 545: 110, 1627: 343, 1572: 333, 1574: 334, 1231: 262, 1578: 335, 555: 111, 557: 112, 2329: 468, 1584: 336, 1800: 375, 562: 113, 2142: 438, 566: 114, 567: 115, 1592: 337, 569: 116, 1597: 338, 949: 202, 2144: 439, 580: 117, 1606: 339, 586: 118, 1612: 340, 1976: 407, 596: 119, 441: 87, 601: 120, 603: 121, 1793: 374, 607: 122, 1632: 344, 1634: 345, 612: 123, 615: 124, 619: 125, 2322: 467, 1647: 347, 1968: 405, 627: 126, 1129: 238, 1656: 349, 633: 127, 1659: 350, 638: 128, 642: 129, 1670: 351, 647: 130, 649: 131, 279: 55, 1677: 352, 655: 132, 657: 133, 1682: 353, 661: 134, 663: 135, 452: 89, 1691: 354, 671: 136, 1699: 355, 676: 137, 678: 138, 1706: 356, 684: 139, 687: 140, 1651: 348, 692: 141, 1718: 359, 697: 142, 1725: 360, 703: 143, 1728: 361, 705: 144, 708: 145, 1735: 362, 713: 146, 715: 147, 1741: 364, 719: 148, 720: 149, 721: 150, 1746: 365, 724: 151, 1749: 366, 729: 152, 463: 92, 1757: 367, 734: 153, 1829: 380, 739: 154, 2337: 469, 1766: 368, 743: 155, 1769: 369, 749: 156, 751: 157, 1778: 371, 755: 158, 759: 159, 2071: 424, 468: 94, 1787: 373, 769: 160, 776: 161, 1802: 376, 779: 162, 2235: 452, 1808: 377, 785: 163, 790: 164, 1715: 358, 794: 165, 796: 166, 1821: 379, 798: 167, 805: 168, 2294: 463, 811: 169, 1836: 381, 1842: 383, 814: 170, 1841: 382, 818: 171, 2355: 472, 1846: 384, 823: 172, 1849: 385, 830: 173, 1857: 386, 836: 174, 841: 175, 1867: 387, 846: 176, 847: 177, 849: 178, 1877: 388, 856: 179, 860: 180, 865: 181, 1891: 389, 1894: 390, 871: 182, 2364: 474, 874: 183, 1900: 391, 1902: 392, 488: 99, 883: 184, 1910: 393, 888: 185, 1914: 394, 896: 186, 1924: 395, 901: 187, 1926: 396, 904: 188, 905: 189, 906: 190, 908: 191, 1934: 398, 911: 192, 913: 193, 1939: 399, 919: 194, 921: 195, 1948: 401, 925: 196, 2373: 476, 1953: 402, 930: 197, 933: 198, 1429: 305, 1961: 403, 938: 199, 1963: 404, 940: 200, 944: 201, 1971: 406, 1182: 252, 952: 203, 1980: 408, 957: 204, 963: 205, 1991: 409, 970: 206, 972: 207, 1998: 410, 2001: 411, 978: 208, 980: 209, 1188: 253, 2010: 413, 2013: 414, 990: 210, 2516: 501, 993: 211, 2020: 415, 997: 212, 2022: 416, 1002: 213, 1004: 214, 2029: 417, 1007: 215, 2032: 418, 1009: 216, 1363: 289, 2036: 419, 511: 102, 1017: 217, 1535: 326, 2044: 420, 1021: 218}
{1025: 218, 1707: 356, 2056: 421, 10: 0, 13: 1, 1039: 220, 2392: 478, 2067: 422, 20: 2, 1046: 221, 25: 3, 1053: 223, 30: 4, 1055: 224, 1774: 369, 2082: 426, 35: 5, 37: 6, 1063: 225, 2088: 427, 1067: 226, 45: 7, 2397: 480, 1074: 227, 53: 8, 2103: 430, 56: 9, 2107: 431, 1034: 219, 2229: 450, 1088: 229, 68: 10, 1096: 230, 1097: 231, 76: 11, 2127: 434, 1104: 232, 2130: 435, 84: 12, 88: 13, 1113: 234, 2138: 436, 2141: 437, 95: 14, 1121: 235, 98: 15, 1124: 236, 2149: 439, 104: 16, 2155: 440, 109: 17, 1134: 239, 2162: 441, 116: 18, 1141: 241, 1142: 242, 119: 19, 1146: 243, 125: 20, 1150: 244, 1151: 245, 2178: 443, 1155: 246, 132: 21, 2070: 423, 2184: 444, 1162: 247, 2189: 445, 142: 22, 143: 23, 1168: 248, 1171: 249, 149: 25, 1049: 222, 2244: 453, 1178: 250, 2203: 447, 1181: 251, 158: 26, 159: 27, 1187: 252, 2214: 448, 2417: 483, 168: 29, 1193: 253, 1197: 254, 174: 30, 2077: 424, 2224: 449, 1736: 362, 178: 31, 1203: 256, 2078: 425, 1207: 257, 184: 32, 185: 33, 2234: 451, 1212: 258, 189: 34, 2239: 452, 193: 35, 1219: 259, 196: 36, 197: 37, 198: 38, 1225: 260, 2250: 454, 203: 39, 206: 40, 2256: 455, 2257: 456, 1234: 262, 211: 41, 1230: 261, 215: 42, 1240: 263, 1242: 264, 2267: 458, 220: 43, 2269: 459, 1246: 265, 1249: 266, 1252: 267, 229: 44, 1745: 364, 1256: 268, 1258: 269, 237: 45, 1265: 270, 242: 46, 245: 47, 1271: 271, 249: 48, 250: 49, 1275: 272, 2301: 463, 254: 50, 1280: 273, 1281: 274, 1282: 275, 261: 51, 2310: 464, 1202: 255, 2314: 465, 1291: 276, 1293: 277, 2093: 428, 1782: 371, 274: 52, 275: 53, 2430: 485, 278: 54, 1303: 278, 1304: 279, 1924: 394, 1308: 280, 285: 56, 2328: 467, 288: 57, 1313: 281, 1315: 282, 2342: 469, 297: 58, 2192: 446, 2098: 429, 302: 59, 303: 60, 1329: 283, 2354: 471, 309: 61, 1335: 284, 2360: 472, 314: 62, 315: 63, 1342: 285, 319: 64, 2369: 474, 2116: 432, 1348: 286, 325: 65, 2377: 476, 330: 66, 1591: 336, 1359: 287, 1080: 228, 338: 67, 343: 68, 1368: 289, 1369: 290, 347: 69, 1373: 291, 2277: 460, 1378: 292, 355: 70, 359: 71, 1384: 293, 2412: 481, 1390: 294, 367: 73, 2416: 482, 1393: 295, 371: 74, 1396: 296, 2423: 484, 1400: 297, 1404: 298, 1405: 299, 382: 75, 2431: 486, 1410: 301, 387: 76, 1413: 302, 392: 77, 395: 78, 1420: 303, 399: 79, 1944: 399, 402: 80, 404: 81, 1429: 304, 1430: 305, 2285: 461, 409: 82, 2461: 490, 414: 83, 1441: 306, 419: 84, 1445: 307, 1447: 308, 2479: 493, 432: 85, 2120: 433, 1458: 309, 2484: 494, 2486: 495, 440: 86, 1465: 310, 1466: 311, 1468: 312, 2293: 462, 448: 87, 2497: 497, 1475: 313, 2500: 498, 453: 89, 1478: 314, 2465: 491, 458: 90, 1486: 315, 463: 91, 464: 92, 467: 93, 1492: 316, 1493: 317, 472: 94, 1498: 318, 2523: 501, 477: 95, 1502: 319, 479: 97, 2164: 442, 2471: 492, 487: 98, 1512: 320, 1515: 321, 493: 99, 494: 100, 1619: 340, 1523: 323, 1526: 324, 1108: 233, 1962: 403, 1534: 325, 511: 101, 512: 102, 1537: 326, 518: 103, 1543: 327, 520: 104, 524: 105, 1549: 328, 528: 106, 532: 107, 1560: 329, 1563: 330, 540: 108, 1626: 342, 1567: 331, 544: 109, 1572: 332, 1573: 333, 2266: 457, 1577: 334, 555: 110, 556: 111, 1583: 335, 561: 112, 1928: 396, 566: 113, 567: 114, 568: 115, 2143: 438, 1596: 337, 1792: 373, 579: 116, 1605: 338, 2031: 417, 585: 117, 1611: 339, 595: 118, 1622: 341, 601: 119, 602: 120, 606: 121, 1631: 343, 1633: 344, 611: 122, 1638: 345, 614: 123, 2321: 466, 2492: 496, 618: 124, 1646: 346, 1128: 237, 626: 125, 1655: 348, 633: 126, 634: 127, 641: 128, 1658: 349, 646: 129, 648: 130, 1676: 351, 654: 131, 1133: 238, 656: 132, 280: 55, 451: 88, 660: 133, 662: 134, 1690: 353, 2443: 487, 670: 135, 1698: 354, 675: 136, 677: 137, 1706: 355, 683: 138, 1650: 347, 686: 139, 1714: 357, 691: 140, 1717: 358, 696: 141, 1140: 240, 1725: 359, 1726: 360, 703: 142, 704: 143, 2336: 468, 707: 144, 1967: 404, 1734: 361, 712: 145, 714: 146, 1740: 363, 718: 147, 720: 148, 721: 149, 723: 150, 1748: 365, 728: 151, 1828: 379, 2511: 499, 1756: 366, 733: 152, 2449: 488, 738: 153, 1765: 367, 742: 154, 1768: 368, 748: 155, 750: 156, 1777: 370, 754: 157, 366: 72, 758: 158, 2516: 500, 1786: 372, 2346: 470, 768: 159, 775: 160, 1800: 374, 1801: 375, 778: 161, 1807: 376, 785: 162, 786: 163, 1816: 377, 794: 164, 795: 165, 1820: 378, 797: 166, 1669: 350, 804: 167, 163: 28, 810: 168, 1835: 380, 813: 169, 1840: 381, 817: 170, 1842: 382, 478: 96, 822: 171, 1848: 384, 829: 172, 1845: 383, 1856: 385, 835: 173, 840: 174, 1866: 386, 846: 175, 847: 176, 848: 177, 1876: 387, 855: 178, 859: 179, 864: 180, 144: 24, 1890: 388, 2363: 473, 1893: 389, 870: 181, 1681: 352, 873: 182, 1900: 390, 1901: 391, 882: 183, 1909: 392, 887: 184, 1913: 393, 895: 185, 900: 186, 1925: 395, 904: 187, 905: 188, 906: 189, 907: 190, 1933: 397, 910: 191, 1517: 322, 912: 192, 1938: 398, 919: 193, 920: 194, 2372: 475, 1947: 400, 924: 195, 1952: 401, 929: 196, 932: 197, 1960: 402, 938: 198, 939: 199, 943: 200, 2395: 479, 1970: 405, 948: 201, 1975: 406, 951: 202, 1979: 407, 956: 203, 962: 204, 1990: 408, 970: 205, 971: 206, 1997: 409, 2000: 410, 1016: 216, 978: 207, 979: 208, 2004: 411, 2005: 412, 2012: 413, 989: 209, 992: 210, 2019: 414, 996: 211, 2021: 415, 2454: 489, 2385: 477, 1002: 212, 1003: 213, 2028: 416, 1362: 288, 1007: 214, 1008: 215, 2035: 418, 1406: 300, 2043: 419, 1020: 217, 2047: 420}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(2424, 6, 'London'), (2071, 6, 'Sweden'), (2516, 18, "Hodgkin's_lymphoma"), (2783, 22, 'University_of_Missouri'), (1208, 11, 'Mayo_Clinic'), (818, 11, 'Mayo_Clinic'), (1564, 8, 'New_York_City'), (2619, 21, 'Ohio_State_University'), (1538, 22, 'Stony_Brook_University'), (2048, 19, 'University_of_Gothenburg'), (453, 10, 'Santa_Baby')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(36, 11, 'China_Times')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Dulbecco', 'recipient']
response in server.py code:
 [(83, 28, 'National_Academy_of_Sciences'), (160, 13, 'Royal_Society'), (0, 8, 'Renato_Dulbecco'), (17, 9, 'John_Paul_Stevens'), (34, 39, 'Selman_A._Waksman_Award_in_Microbiology'), (138, 14, 'Royal_Society')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Rick Ross', 'Drake']
response in server.py code:
 [(32, 9, 'Rick_Ross'), (46, 5, 'Drake_(rapper)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Beckett']
response in server.py code:
 [(50, 8, 'Lecturer'), (29, 15, 'Trinity_College,_Cambridge'), (9, 7, 'Samuel_Beckett')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(13, 13, 'Hip_dysplasia_(canine)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Nolan Henke', 'Bob Estes', 'Billy Andrade', 'Duffy Waldorf', 'Jesper Parnevik', 'Neal Lancaster', 'Dave Barr', 'Mike Sullivan', 'Willie Wood', 'Loren Roberts', 'Steve Stricker', 'Brian Claar', 'Russ Cochran', 'Mark Calcavecchia', 'Payne Stewart', 'Billy Mayfair', 'Ken Green', 'Jerry Kelly', 'Tim Simpson', 'Olin Browne', 'Mike Hulbert', 'Brian Henninger', 'Tiger Woods']
response in server.py code:
 [(506, 13, 'Billy_Mayfair'), (277, 9, 'Bob_Estes'), (532, 11, 'Jerry_Kelly'), (412, 13, 'Loren_Roberts'), (491, 13, 'Payne_Stewart'), (472, 17, 'Mark_Calcavecchia'), (364, 9, 'Dave_Barr_(golfer)'), (545, 11, 'Tim_Simpson'), (586, 12, 'Mike_Hulbert'), (427, 14, 'Steve_Stricker'), (262, 11, 'Nolan_Henke'), (375, 6, 'Canada'), (337, 6, 'Sweden'), (558, 11, 'Olin_Browne'), (348, 14, 'Neal_Lancaster'), (617, 11, 'Tiger_Woods'), (443, 11, 'Brian_Claar'), (600, 15, 'Brian_Henninger'), (237, 4, 'United_States'), (305, 13, 'Duffy_Waldorf'), (456, 12, 'Russ_Cochran'), (290, 13, 'Billy_Andrade'), (521, 9, 'Ken_Green_(golfer)'), (49, 9, 'Milwaukee'), (384, 13, 'Mike_Sullivan_(golfer)'), (60, 9, 'Wisconsin'), (399, 11, 'Willie_Wood_(golfer)'), (320, 15, 'Jesper_Parnevik'), (25, 22, 'U.S._Bank_Championship_in_Milwaukee'), (117, 22, 'U.S._Bank_Championship_in_Milwaukee'), (166, 27, 'Brown_Deer_Park_Golf_Course')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(26, 8, 'USS_Cole_(DDG-67)'), (93, 5, 'Yemen'), (8, 4, 'United_States_Navy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Kenneth Kaunda']
response in server.py code:
 [(434, 27, 'International_Monetary_Fund'), (463, 3, 'International_Monetary_Fund'), (852, 3, 'International_Monetary_Fund'), (718, 3, 'International_Monetary_Fund'), (379, 14, 'Kenneth_Kaunda'), (4, 18, 'Politics_of_Zambia')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Obama', 'Merkel']
response in server.py code:
 [(0, 5, 'Barack_Obama'), (15, 6, 'Angela_Merkel'), (42, 3, 'John_F._Kennedy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Kamal Kharrazi']
response in server.py code:
 [(270, 14, 'Kamal_Kharazi'), (1084, 15, 'Munich'), (65, 4, 'Iran'), (27, 4, 'United_States'), (127, 9, 'The_Hague'), (521, 15, 'Netherlands'), (590, 6, 'Prague'), (1184, 12, 'Iron_Curtain'), (1142, 6, 'Soviet_Union'), (186, 17, 'Radio_Free_Europe/Radio_Liberty'), (1211, 8, 'Cold_War'), (615, 5, 'Czech_Republic'), (511, 3, 'International_Court_of_Justice'), (819, 4, 'Iraq'), (1248, 9, 'Communism'), (1008, 16, 'Politics_of_the_Czech_Republic'), (954, 5, 'Persian_language')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Shivnarine Chanderpaul', 'Greg Blewett']
response in server.py code:
 [(307, 12, 'Greg_Blewett'), (25, 11, 'West_Indies_cricket_team'), (54, 9, 'Melbourne'), (208, 11, 'West_Indies_cricket_team'), (276, 9, 'Australia_national_cricket_team'), (247, 22, 'Shivnarine_Chanderpaul'), (90, 11, 'West_Indies_cricket_team'), (163, 24, 'Melbourne_Cricket_Ground'), (10, 9, 'Australia_national_cricket_team'), (75, 9, 'Australia_national_cricket_team'), (123, 12, 'Australian_Tri-Series')]
given spans fix. original text:  Home Depot CEO Nardelli quits 
Home-improvement retailer's chief executive had been criticized over pay 
 
ATLANTA - Bob Nardelli abruptly resigned Wednesday as chairman and chief executive of The Home Depot Inc. after a six-year tenure that saw the world’s largest home improvement store chain post big profits but left investors disheartened by poor stock performance. 
 
Nardelli has also been under fire by investors for his hefty pay and is leaving with a severance package valued at about $210 million. He became CEO in December 2000 after being passed over for the top job at General Electric Co., where Nardelli had been a senior executive. 
 
Home Depot said Nardelli was being replaced by Frank Blake, its vice chairman, effective immediately. 
 
Blake’s appointment is permanent, Home Depot spokesman Jerry Shields said. What he will be paid was not immediately disclosed, Shields said. The company declined to make Blake available for comment, and a message left for Nardelli with his secretary was not immediately returned. 
 
Before Wednesday’s news, Home Depot’s stock had been down more than 3 percent on a split-adjusted basis since Nardelli took over. 
 
Nardelli’s sudden departure was stunning in that he told The Associated Press as recently as Sept. 1 that he had no intention of leaving, and a key director also said that the board was pleased with Nardelli despite the uproar by some investors. 
 
Asked in that interview if he had thought of hanging up his orange apron and leaving Home Depot, Nardelli said unequivocally that he hadn’t. Asked what he thought he would be doing 10 years from now, Nardelli said, “Selling hammers.” 
 
For The Home Depot? 
 
“Absolutely,” he said at the time. 
 
Home Depot said Nardelli’s decision to resign was by mutual agreement with the Atlanta-based company. 
 
“We are very grateful to Bob for his strong leadership of The Home Depot over the past six years. Under Bob’s tenure, the company made significant and necessary investments that greatly improved the company’s infrastructure and operations, expanded our markets to include wholesale distribution and new geographies, and undertook key strategic initiatives to strengthen the company’s foundation for the future,” Home Depot’s board said in a statement. 
 
Nardelli was a nuts-and-bolts leader, a former college football player and friend of President Bush. He helped increase revenue and profits at Home Depot and increase the number of stores the company operates to more than 2,000. Home Depot’s earnings per share have increased by approximately 150 percent over the last five years. But the public discussion about his pay and the company’s stock price had become a distraction. 
 
Industry experts and analysts said his departure and Blake’s ascent to the top job are a good thing for Home Depot. 
 
“This is not about strategy or vision,” said James Senn, director of Robinson College’s Center for Global Business Leadership at Georgia State University. “This is coming down to two things. Really the foundation of leadership is credibility. Bob has run into some problems there. The second is execution.” 
 
The Home Depot board also announced that Carol Tome, its chief financial officer, and Joe DeAngelo, its executive vice president for Home Depot Supply, will be assuming additional responsibilities. 
 
Tome will be assuming responsibility for mergers and acquisitions, credit services and additional strategic responsibilities. DeAngelo was appointed to the newly created position of chief operating officer. 
 
Nardelli and Home Depot have agreed to terms of a separation agreement that would provide for payment of the amounts he is entitled to receive under his pre-existing employment contract entered into in 2000. Under this agreement, Nardelli will receive consideration currently valued at about $210 million. 
 
The package includes a cash severance payment of $20 million, the acceleration of unvested deferred stock awards currently valued at approximately $77 million and unvested options with an intrinsic value of approximately $7 million. It also includes payments of earned bonuses and long-term incentive awards of approximately $9 million, account balances under the Company’s 401(k) plan and other benefit programs currently valued at approximately $2 million, previously earned and vested deferred shares with an approximate value of $44 million, the present value of retirement benefits currently valued at approximately $32 million and $18 million for other entitlements under his contract. Those entitlements will be paid over a four-year period and will be forfeited if he does not honor his contractual obligations. 
 
Nardelli has also agreed not to compete with the company for one year, and not to solicit employees or customers of the company for four years. 
 
Home Depot did not say what Nardelli would be doing next. 
 
In conjunction with the management changes, the board also announced that it had waived the retirement age of 72 and has asked John L. Clendenin, Claudio X. Gonzales and Milledge A. Hart III to stand for re-election at the 2007 annual shareholders meeting. This action was taken to retain these directors’ experience. Home Depot said the action was temporary. 



original word:  Atlanta-based Atlanta-based
new split:  Atlanta  and  -based
[(0, 4), (5, 10), (11, 14), (15, 23), (24, 29), (31, 47), (48, 56), (56, 58), (59, 64), (65, 74), (75, 78), (79, 83), (84, 94), (95, 99), (100, 103), (107, 114), (115, 116), (117, 120), (121, 129), (130, 138), (139, 147), (148, 157), (158, 160), (161, 169), (170, 173), (174, 179), (180, 189), (190, 192), (193, 196), (197, 201), (202, 207), (208, 212), (213, 218), (219, 220), (221, 229), (230, 236), (237, 241), (242, 245), (246, 249), (250, 255), (255, 256), (256, 257), (258, 265), (266, 270), (271, 282), (283, 288), (289, 294), (295, 299), (300, 303), (304, 311), (312, 315), (316, 320), (321, 330), (331, 343), (344, 346), (347, 351), (352, 357), (358, 369), (369, 370), (374, 382), (383, 386), (387, 391), (392, 396), (397, 402), (403, 407), (408, 410), (411, 420), (421, 424), (425, 428), (429, 434), (435, 438), (439, 442), (443, 445), (446, 453), (454, 458), (459, 460), (461, 470), (471, 478), (479, 485), (486, 488), (489, 494), (495, 496), (496, 499), (500, 507), (507, 508), (509, 511), (512, 518), (519, 522), (523, 525), (526, 534), (535, 539), (540, 545), (546, 551), (552, 558), (559, 563), (564, 567), (568, 571), (572, 575), (576, 579), (580, 582), (583, 590), (591, 599), (600, 603), (603, 604), (605, 610), (611, 619), (620, 623), (624, 628), (629, 630), (631, 637), (638, 647), (647, 648), (652, 656), (657, 662), (663, 667), (668, 676), (677, 680), (681, 686), (687, 695), (696, 698), (699, 704), (705, 710), (710, 711), (712, 715), (716, 720), (721, 729), (729, 730), (731, 740), (741, 752), (752, 753), (757, 762), (762, 763), (763, 764), (765, 776), (777, 779), (780, 789), (789, 790), (791, 795), (796, 801), (802, 811), (812, 817), (818, 825), (826, 830), (830, 831), (832, 836), (837, 839), (840, 844), (845, 847), (848, 852), (853, 856), (857, 860), (861, 872), (873, 882), (882, 883), (884, 891), (892, 896), (896, 897), (898, 901), (902, 909), (910, 918), (919, 921), (922, 926), (927, 932), (933, 942), (943, 946), (947, 954), (954, 955), (956, 959), (960, 961), (962, 969), (970, 974), (975, 978), (979, 987), (988, 992), (993, 996), (997, 1006), (1007, 1010), (1011, 1014), (1015, 1026), (1027, 1035), (1035, 1036), (1040, 1046), (1047, 1056), (1056, 1057), (1057, 1058), (1059, 1063), (1063, 1064), (1065, 1069), (1070, 1075), (1075, 1076), (1076, 1077), (1078, 1083), (1084, 1087), (1088, 1092), (1093, 1097), (1098, 1102), (1103, 1107), (1108, 1109), (1110, 1117), (1118, 1120), (1121, 1122), (1123, 1137), (1138, 1143), (1144, 1149), (1150, 1158), (1159, 1163), (1164, 1168), (1168, 1169), (1173, 1181), (1181, 1182), (1182, 1183), (1184, 1190), (1191, 1200), (1201, 1204), (1205, 1213), (1214, 1216), (1217, 1221), (1222, 1224), (1225, 1229), (1230, 1233), (1234, 1244), (1245, 1250), (1251, 1253), (1254, 1262), (1263, 1265), (1266, 1271), (1272, 1273), (1274, 1278), (1279, 1281), (1282, 1285), (1286, 1288), (1289, 1298), (1299, 1301), (1302, 1309), (1309, 1310), (1311, 1314), (1315, 1316), (1317, 1320), (1321, 1329), (1330, 1334), (1335, 1339), (1340, 1344), (1345, 1348), (1349, 1354), (1355, 1358), (1359, 1366), (1367, 1371), (1372, 1380), (1381, 1388), (1389, 1392), (1393, 1399), (1400, 1402), (1403, 1407), (1408, 1417), (1417, 1418), (1422, 1427), (1428, 1430), (1431, 1435), (1436, 1445), (1446, 1448), (1449, 1451), (1452, 1455), (1456, 1463), (1464, 1466), (1467, 1474), (1475, 1477), (1478, 1481), (1482, 1488), (1489, 1494), (1495, 1498), (1499, 1506), (1507, 1511), (1512, 1517), (1517, 1518), (1519, 1527), (1528, 1532), (1533, 1546), (1547, 1551), (1552, 1554), (1555, 1559), (1559, 1560), (1560, 1561), (1561, 1562), (1563, 1568), (1569, 1573), (1574, 1576), (1577, 1584), (1585, 1587), (1588, 1593), (1594, 1596), (1597, 1602), (1603, 1605), (1606, 1611), (1612, 1616), (1617, 1620), (1620, 1621), (1622, 1630), (1631, 1635), (1635, 1636), (1637, 1638), (1638, 1645), (1646, 1654), (1654, 1655), (1659, 1662), (1663, 1666), (1667, 1671), (1672, 1677), (1677, 1678), (1682, 1683), (1683, 1693), (1693, 1694), (1694, 1695), (1696, 1698), (1699, 1703), (1704, 1706), (1707, 1710), (1711, 1715), (1715, 1716), (1720, 1724), (1725, 1730), (1731, 1735), (1736, 1744), (1744, 1745), (1745, 1746), (1747, 1755), (1756, 1758), (1759, 1765), (1766, 1769), (1770, 1772), (1773, 1779), (1780, 1789), (1790, 1794), (1795, 1798), (1799, 1806), (1806, 1812)]
{0: 0, 512: 86, 1027: 179, 5: 1, 519: 87, 11: 2, 1282: 229, 526: 89, 15: 3, 1040: 181, 1245: 221, 1555: 279, 1340: 241, 1552: 278, 535: 90, 24: 4, 1561: 282, 1563: 283, 540: 91, 1467: 264, 1606: 292, 31: 5, 1056: 183, 1057: 184, 546: 92, 1059: 185, 1449: 260, 1381: 248, 1574: 285, 1007: 176, 552: 93, 1065: 187, 1070: 188, 559: 94, 48: 6, 1585: 287, 435: 70, 564: 95, 1078: 191, 1289: 231, 56: 7, 1594: 289, 59: 8, 572: 97, 1597: 290, 1635: 298, 576: 98, 65: 9, 523: 88, 580: 99, 1093: 194, 1349: 243, 583: 100, 1098: 195, 75: 10, 1612: 293, 1279: 228, 79: 11, 1617: 294, 1620: 295, 1123: 201, 84: 12, 1806: 334, 1110: 198, 600: 102, 603: 103, 1603: 291, 605: 104, 1118: 199, 95: 13, 1121: 200, 611: 105, 100: 14, 1637: 299, 1638: 300, 107: 15, 620: 106, 1533: 276, 1214: 215, 624: 107, 1138: 202, 115: 16, 117: 17, 1654: 302, 631: 109, 1144: 203, 121: 18, 1659: 303, 638: 110, 1663: 304, 1711: 316, 130: 19, 1667: 305, 647: 111, 1672: 306, 1266: 225, 139: 20, 652: 112, 1677: 307, 1168: 207, 657: 113, 1682: 308, 1475: 265, 148: 21, 1173: 208, 663: 114, 1547: 277, 668: 115, 1181: 209, 158: 22, 1184: 211, 161: 23, 1150: 204, 677: 116, 1191: 212, 1704: 314, 681: 117, 170: 24, 1699: 313, 174: 25, 687: 118, 1201: 213, 1715: 317, 180: 26, 1205: 214, 696: 119, 699: 120, 1482: 267, 190: 27, 629: 108, 705: 121, 1731: 320, 197: 29, 710: 122, 1569: 284, 712: 123, 1225: 218, 202: 30, 1588: 288, 716: 124, 1230: 219, 208: 31, 721: 125, 1234: 220, 1315: 236, 213: 32, 1422: 255, 1047: 182, 729: 126, 731: 127, 1756: 325, 221: 34, 1759: 326, 1519: 274, 1222: 217, 1251: 222, 741: 128, 230: 35, 1745: 323, 1559: 280, 1770: 328, 1063: 186, 237: 36, 1263: 224, 752: 129, 242: 37, 1747: 324, 1780: 330, 757: 130, 246: 38, 1577: 286, 1272: 226, 1720: 318, 762: 131, 763: 132, 765: 133, 1694: 311, 255: 40, 256: 41, 1408: 253, 258: 42, 1795: 332, 1286: 230, 1799: 333, 777: 134, 266: 43, 1495: 269, 780: 135, 1744: 322, 271: 44, 1299: 232, 789: 136, 1302: 233, 791: 137, 283: 45, 796: 138, 1309: 234, 1311: 235, 1560: 281, 289: 46, 802: 139, 219: 33, 1317: 237, 295: 47, 1321: 238, 1159: 205, 300: 48, 1330: 239, 1084: 192, 304: 49, 1766: 327, 818: 141, 1075: 189, 1736: 321, 1335: 240, 312: 50, 1076: 190, 826: 142, 479: 78, 316: 51, 830: 143, 832: 144, 321: 52, 837: 145, 812: 140, 840: 146, 1164: 206, 331: 53, 845: 147, 1359: 245, 848: 148, 568: 96, 193: 28, 853: 149, 1367: 246, 344: 54, 857: 150, 1631: 297, 347: 55, 1372: 247, 861: 151, 352: 56, 1254: 223, 358: 57, 1478: 266, 873: 152, 1103: 196, 1389: 249, 1393: 250, 1035: 180, 369: 58, 882: 153, 1683: 309, 884: 154, 374: 59, 1400: 251, 1274: 227, 1403: 252, 892: 155, 1622: 296, 383: 60, 896: 156, 1088: 193, 898: 157, 387: 61, 902: 158, 1345: 242, 392: 62, 1417: 254, 1431: 257, 397: 63, 910: 159, 1773: 329, 403: 64, 1428: 256, 919: 160, 408: 65, 922: 161, 411: 66, 1436: 258, 927: 162, 933: 163, 1446: 259, 425: 68, 1693: 310, 1452: 261, 429: 69, 943: 164, 1456: 262, 947: 165, 1182: 210, 439: 71, 1464: 263, 954: 166, 443: 72, 956: 167, 446: 73, 960: 168, 1696: 312, 962: 169, 1355: 244, 1217: 216, 454: 74, 1707: 315, 970: 170, 459: 75, 461: 76, 975: 171, 1489: 268, 979: 172, 471: 77, 591: 101, 988: 173, 250: 39, 1499: 270, 421: 67, 1646: 301, 993: 174, 1507: 271, 997: 175, 486: 79, 1725: 319, 1512: 272, 489: 80, 1517: 273, 495: 81, 496: 82, 1011: 177, 500: 83, 1790: 331, 1015: 178, 1528: 275, 1108: 197, 507: 84, 509: 85}
{1695: 311, 1745: 322, 1026: 178, 4: 0, 1057: 183, 518: 86, 1281: 228, 10: 1, 1035: 179, 1036: 180, 525: 88, 14: 2, 173: 24, 1554: 278, 1710: 315, 534: 89, 23: 3, 1560: 280, 1265: 224, 1562: 282, 539: 90, 29: 4, 1056: 182, 545: 91, 1058: 184, 1573: 284, 551: 92, 1064: 186, 1655: 302, 434: 69, 558: 93, 47: 5, 1584: 286, 1288: 230, 563: 94, 1076: 189, 1077: 190, 567: 95, 56: 6, 1593: 288, 58: 7, 571: 96, 1596: 289, 522: 87, 1671: 305, 575: 97, 64: 8, 1602: 290, 579: 98, 1092: 193, 1477: 265, 582: 99, 1097: 194, 74: 9, 1611: 292, 1122: 200, 78: 10, 1616: 293, 1213: 214, 83: 11, 1620: 294, 1109: 197, 599: 101, 1693: 309, 603: 102, 604: 103, 954: 165, 94: 12, 1120: 199, 610: 104, 99: 13, 1636: 298, 1638: 299, 103: 14, 1806: 333, 1494: 268, 619: 105, 1645: 300, 623: 106, 1137: 201, 114: 15, 116: 16, 630: 108, 1143: 202, 120: 17, 1518: 273, 637: 109, 1102: 195, 1301: 232, 129: 18, 1666: 304, 1046: 181, 1158: 204, 647: 110, 648: 111, 1621: 295, 138: 19, 1163: 205, 192: 27, 1677: 306, 1678: 307, 656: 112, 1169: 207, 147: 20, 662: 113, 1561: 281, 667: 114, 157: 21, 1182: 209, 1183: 210, 160: 22, 1698: 312, 676: 115, 1190: 211, 1703: 313, 680: 116, 169: 23, 1706: 314, 1735: 320, 1216: 215, 370: 58, 686: 117, 1309: 233, 1200: 212, 179: 25, 1204: 213, 1455: 261, 695: 118, 628: 107, 698: 119, 1724: 318, 189: 26, 704: 120, 1568: 283, 1730: 319, 196: 28, 1221: 216, 710: 121, 711: 122, 1224: 217, 201: 29, 1348: 242, 715: 123, 1481: 266, 1229: 218, 207: 30, 720: 124, 1233: 219, 1746: 323, 212: 31, 729: 125, 730: 126, 1755: 324, 220: 33, 1758: 325, 1744: 321, 1250: 221, 740: 127, 229: 34, 1576: 285, 1559: 279, 1769: 327, 1063: 185, 236: 35, 1262: 223, 1149: 203, 752: 128, 753: 129, 1779: 329, 245: 37, 1271: 225, 249: 38, 762: 130, 763: 131, 764: 132, 1662: 303, 1278: 227, 255: 39, 256: 40, 257: 41, 1794: 331, 299: 47, 1285: 229, 1798: 332, 776: 133, 265: 42, 1354: 243, 779: 134, 270: 43, 1069: 187, 1253: 222, 1298: 231, 1765: 326, 1812: 334, 789: 135, 790: 136, 1339: 240, 282: 44, 795: 137, 218: 32, 1310: 234, 288: 45, 801: 138, 1314: 235, 1316: 236, 294: 46, 1329: 238, 1320: 237, 1244: 220, 811: 139, 1772: 328, 303: 48, 817: 140, 1075: 188, 1715: 316, 1334: 239, 311: 49, 825: 141, 315: 50, 1630: 296, 830: 142, 831: 143, 320: 51, 1417: 253, 836: 144, 839: 145, 1117: 198, 330: 52, 844: 146, 1506: 270, 1358: 244, 847: 147, 1654: 301, 1716: 317, 852: 148, 1366: 245, 343: 53, 856: 149, 346: 54, 1371: 246, 860: 150, 351: 55, 1168: 206, 1546: 276, 1083: 191, 1380: 247, 357: 56, 872: 151, 1388: 248, 1392: 249, 369: 57, 882: 152, 883: 153, 1683: 308, 1399: 250, 1402: 251, 891: 154, 382: 59, 1407: 252, 896: 155, 897: 156, 386: 60, 901: 157, 391: 61, 1087: 192, 1418: 254, 396: 62, 909: 158, 402: 63, 1427: 255, 1006: 175, 918: 159, 407: 64, 921: 160, 410: 65, 1435: 257, 926: 161, 1605: 291, 1587: 287, 420: 66, 1445: 258, 241: 36, 424: 67, 1451: 260, 428: 68, 942: 163, 1181: 208, 1344: 241, 946: 164, 1694: 310, 438: 70, 1463: 262, 442: 71, 955: 166, 445: 72, 959: 167, 961: 168, 1474: 264, 453: 73, 1430: 256, 969: 169, 458: 74, 460: 75, 974: 170, 1488: 267, 978: 171, 1635: 297, 590: 100, 470: 76, 1273: 226, 932: 162, 1498: 269, 987: 172, 478: 77, 992: 173, 1107: 196, 996: 174, 485: 78, 1511: 271, 488: 79, 1532: 275, 1517: 272, 494: 80, 1789: 330, 496: 81, 1448: 259, 1010: 176, 499: 82, 1014: 177, 1527: 274, 1551: 277, 507: 83, 508: 84, 1466: 263, 511: 85}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Nardelli', 'Bob Nardelli', 'Frank Blake', 'Jerry Shields', 'President Bush', 'DeAngelo']
response in server.py code:
 [(1850, 3, 'Robert_Nardelli'), (374, 8, 'Robert_Nardelli'), (1929, 3, 'Robert_Nardelli'), (1372, 8, 'Robert_Nardelli'), (3072, 3, 'Robert_Nardelli'), (611, 8, 'Robert_Nardelli'), (15, 8, 'Robert_Nardelli'), (1150, 8, 'Robert_Nardelli'), (1622, 8, 'Robert_Nardelli'), (1173, 8, 'Robert_Nardelli'), (668, 8, 'Robert_Nardelli'), (979, 8, 'Robert_Nardelli'), (117, 12, 'Robert_Nardelli'), (1519, 8, 'Robert_Nardelli'), (1736, 8, 'Robert_Nardelli'), (699, 11, 'Frank_Blake'), (3780, 8, 'Robert_Nardelli'), (3550, 8, 'Robert_Nardelli'), (2509, 10, 'The_Home_Depot'), (2423, 10, 'The_Home_Depot'), (4682, 8, 'Robert_Nardelli'), (0, 10, 'The_Home_Depot'), (4857, 8, 'Robert_Nardelli'), (1065, 10, 'The_Home_Depot'), (2237, 10, 'The_Home_Depot'), (927, 5, 'Frank_Blake'), (3143, 10, 'The_Home_Depot'), (2280, 8, 'Robert_Nardelli'), (1230, 20, 'Associated_Press'), (2814, 10, 'The_Home_Depot'), (1883, 14, 'The_Home_Depot'), (791, 10, 'The_Home_Depot'), (652, 10, 'The_Home_Depot'), (5208, 10, 'The_Home_Depot'), (1663, 14, 'The_Home_Depot'), (4829, 10, 'The_Home_Depot'), (3563, 10, 'The_Home_Depot'), (1507, 10, 'The_Home_Depot'), (2898, 16, 'Robinson_College,_Cambridge'), (2763, 5, 'Frank_Blake'), (2365, 14, 'George_W._Bush'), (2958, 24, 'Georgia_State_University'), (1799, 7, 'Atlanta'), (107, 7, 'Atlanta'), (812, 13, 'Jerry_A._Shields')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Bruno Ferrante']
response in server.py code:
 [(14, 14, 'Bruno_Ferrante')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(18, 5, 'Italy'), (150, 10, 'Professor'), (0, 14, 'Professor')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(21, 4, 'Attention_deficit_hyperactivity_disorder')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(82, 21, 'University_of_Chicago'), (44, 19, 'Professor'), (117, 9, 'Physicist'), (141, 27, 'Argonne_National_Laboratory'), (19, 5, 'Woman')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(15, 3, 'Agence_France-Presse'), (140, 6, 'Israel'), (23, 7, 'Lebanon'), (2, 6, 'Beirut')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Nolan Henke', 'Tiger Woods', 'Bob Estes', 'Billy Andrade', 'Duffy Waldorf', 'Jesper Parnevik', 'Andrew Magee', 'Billy Mayfair', 'Payne Stewart', 'Scott Hoch', 'Phil Mickelson', 'Mark Brooks', 'Tom Lehman', "Mark O'Meara"]
response in server.py code:
 [(1764, 13, 'Billy_Mayfair'), (1687, 5, 'Tiger_Woods'), (2088, 11, 'Mark_Brooks_(golfer)'), (690, 5, 'Tiger_Woods'), (2116, 12, "Mark_O'Meara"), (2101, 10, 'Tom_Lehman'), (1956, 14, 'Phil_Mickelson'), (403, 5, 'Tiger_Woods'), (327, 9, 'Bob_Estes'), (1897, 10, 'Scott_Hoch'), (1863, 13, 'Payne_Stewart'), (247, 11, 'Tiger_Woods'), (1262, 12, 'Andrew_Magee'), (1382, 5, 'Bob_Estes'), (368, 13, 'Duffy_Waldorf'), (1202, 5, 'Nolan_Henke'), (353, 13, 'Billy_Andrade'), (72, 9, 'Wisconsin'), (1814, 20, 'World_Series_of_Golf'), (2005, 8, 'PGA_Tour'), (294, 5, 'Nolan_Henke'), (834, 5, 'Nolan_Henke'), (1319, 8, 'PGA_Tour'), (93, 11, 'Nolan_Henke'), (386, 15, 'Jesper_Parnevik'), (61, 9, 'Milwaukee'), (2056, 20, 'World_Series_of_Golf'), (200, 22, 'U.S._Bank_Championship_in_Milwaukee'), (38, 5, 'Tiger_Woods'), (1421, 10, 'Valero_Texas_Open'), (1363, 17, 'AT&T_Classic'), (1493, 11, 'Chrysler_Classic_of_Tucson'), (481, 25, 'United_States_Amateur_Championship_(golf)'), (27, 9, 'Milwaukee'), (1847, 9, 'US_Open_(tennis)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Mir-Hossein Mousavi', 'Saddam']
response in server.py code:
 [(420, 7, 'Mir-Hossein_Mousavi'), (102, 19, 'Mir-Hossein_Mousavi'), (554, 4, 'Iran'), (776, 7, 'Mir-Hossein_Mousavi'), (461, 32, 'BBC'), (619, 4, 'Iran'), (48, 5, 'Basra'), (0, 4, 'Iran'), (685, 4, 'Iraq'), (1028, 5, 'Basra'), (1057, 7, 'Baghdad'), (1178, 5, 'Ahvaz'), (881, 6, 'Saddam_Hussein')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Onassis', 'Kennedy']
response in server.py code:
 [(0, 7, 'Aristotle_Onassis'), (16, 7, 'John_F._Kennedy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(68, 8, 'Interpol'), (930, 16, 'Money_laundering'), (904, 18, 'Illegal_drug_trade'), (574, 15, 'Organized_crime'), (819, 9, 'Terrorism'), (155, 16, 'Organized_crime'), (29, 8, 'Strategy'), (1069, 8, 'Evidence')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(10, 11, 'West_Indies_cricket_team'), (61, 9, 'Melbourne'), (82, 11, 'West_Indies_cricket_team'), (178, 9, 'Australia_national_cricket_team'), (50, 9, 'Australia_national_cricket_team'), (137, 12, 'Australian_Tri-Series')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(73, 25, 'London_Heathrow_Airport'), (411, 15, 'British_Airways'), (234, 25, 'London_Heathrow_Airport'), (598, 8, 'London_Heathrow_Airport'), (958, 8, 'London_Heathrow_Airport'), (124, 6, 'London'), (1205, 8, 'London_Heathrow_Airport'), (640, 2, 'British_Airways'), (468, 2, 'British_Airways'), (817, 2, 'British_Airways'), (1345, 2, 'British_Airways')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Alex Rigopulos']
response in server.py code:
 [(48, 8, 'Harmonix'), (68, 14, 'Alex_Rigopulos')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Reagan']
response in server.py code:
 [(45, 19, 'Screen_Actors_Guild'), (86, 6, 'Actor'), (0, 6, 'Ronald_Reagan'), (28, 9, 'President')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(66, 9, 'Wisconsin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Zewail', 'Barack Obama']
response in server.py code:
 [(60, 12, 'Barack_Obama'), (75, 58, "United_States_President's_Council_of_Advisors_on_Science_and_Technology"), (0, 6, 'Ahmed_Zewail'), (50, 9, 'President_of_the_United_States')]
response in server.py code:
 []
given spans fix. original text:  SOCCER - SILVA'S`LOST PASSPORT ' EXCUSE NOT ENOUGH FOR FIFA. MADRID 1996-08-30 Spanish first division team Deportivo Coruna will be without key midfielder Mauro Silva for Saturday's game with Real Madrid after FIFA, soccer's world governing body, suspended the Brazilian for one game for missing his national side's European tour. Silva excused his absence from Brazil's game against Russia, on Wednesday, and Saturday's match with the Netherlands by saying he had lost his passport. But that did not prevent him from collecting the one-match suspension.
original word:  SILVA'S`LOST SILVA'S`LOST
new split:  SILVA  and  'S`LOST
[(0, 6), (7, 8), (9, 14), (14, 21)]
{0: 0, 9: 2, 14: 3, 7: 1}
{8: 1, 14: 2, 6: 0, 21: 3}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Mauro Silva']
response in server.py code:
 [(61, 6, 'Madrid'), (192, 11, 'Real_Madrid_C.F.'), (79, 7, 'Spain'), (261, 9, 'Brazil'), (362, 6, 'Brazil'), (210, 4, 'FIFA'), (55, 4, 'FIFA'), (316, 8, 'Europe'), (436, 11, 'Netherlands_national_football_team'), (155, 11, 'Mauro_Silva'), (331, 5, 'Mauro_Silva'), (384, 6, 'Russia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(2196, 9, 'Wisconsin'), (2210, 4, 'Iowa'), (3951, 4, 'Washington,_D.C.'), (330, 5, 'Tennessee'), (881, 8, 'Arkansas'), (1175, 11, 'White_House'), (2378, 12, 'Pennsylvania'), (317, 11, 'Chattanooga,_Tennessee'), (2365, 8, 'Michigan'), (3041, 9, 'Green_Bay,_Wisconsin'), (544, 10, 'Washington,_D.C.')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 4, 'Reinhold_Yabo'), (15, 6, 'Aachen')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(51, 6, 'Alaska'), (37, 9, 'Anchorage,_Alaska'), (340, 8, 'Soldotna,_Alaska'), (1331, 5, 'Kenai,_Alaska'), (142, 21, 'Alaska_State_Troopers'), (285, 30, 'Kenai_National_Wildlife_Refuge'), (1296, 13, 'Swanson_River'), (1313, 9, 'Oil_field'), (876, 5, 'Rifle'), (1273, 7, 'Seismology'), (27, 4, 'Bear')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['David Boon', 'Shaun Young', 'Michael DiVenuto']
response in server.py code:
 [(42, 9, 'Australia'), (209, 10, 'David_Boon'), (34, 6, 'Hobart'), (233, 11, 'Shaun_Young'), (10, 16, 'Sheffield_Shield'), (257, 16, 'Michael_Di_Venuto'), (102, 16, 'Sheffield_Shield'), (185, 8, 'Tasmania_cricket_team'), (158, 14, 'Bellerive_Oval'), (133, 8, 'Tasmania_cricket_team'), (146, 8, 'Victoria_cricket_team'), (281, 8, 'Victoria_cricket_team')]
given spans fix. original text:  Evolving presidential preferences 
How will American voters compensate in the next search for a president? 
 
WASHINGTON - Now that the 38th president has been laid to rest, the capital can take up the main business of 2007: trying to figure out who will be the 44th.  What type of leader does the country want? Here is my sense of it, based on talking to politicians, strategists and voters here and around the nation. 
 
No ideologues, please 
There was a time when President George W. Bush’s ideological certitude was politically appealing and perhaps functionally necessary. That time has long since passed. The country is tired, even fearful, of leaders with fervent beliefs that seem impervious to new (or even old) facts. Voters see the war in Iraq as an “idea,” not a solution – and Americans do not like ideas that do not work.  Voters likely will view Bush’s “surge” of troops into Iraq as new evidence of failure, and the dangers of a leader who depends on preconceived ideas. 
 
Serious student 
Presidential elections are a never-ending series of mid-course corrections. Voters look to compensate for the leadership weaknesses of the incumbent. An example comes from the life and career of Gerald Ford. In 1976, voters wanted a pure antidote to Richard Nixon’s paranoid megalomania. Once Ford pardoned Nixon, he could not be that candidate. Instead, Americans chose Jimmy Carter, a peanut farmer who had never worked in Washington, and who promised never to lie to the American people. The counterpoint thinking continues. Voters in 2008 are going to want someone who prides himself (or herself) on spending time in the library – who has a hands-on curiosity about the details. 
 
Washington experience not necessary 
Voters these days not only do not value Washington experience – or any office-holding experience – it can make them suspicious. That is what strategists and polltakers for Sen. Evan Bayh found when they studied whether he should run for president. They found that his remarkably deep resume – the son of a senator, he was the “boy governor” of Indiana before going to the Senate – was as handicap. Americans always are dubious about the capital, but that sentiment seems particularly strong. Bayh decided not to run. “`Washington’ doesn’t make the case,” said Dan Pfeiffer, who worked for Bayh. 
 
No more boomer obsessions 
Not all elections are about change, but 2008 will be. Americans are moderately upbeat about the country’s prospects, but deeply worried about the world – and they have come to realize that they can’t separate one from the other. One thing for sure, says Pfeiffer, voters are tired of arguing about the culture of the 1960s and other Boomer issues.  “There is a sense that the 2004 election was too much about who did or did not do what in Vietnam,” said Pfeiffer, referring to the Bush campaign against Sen. John Kerry. In 2000, Bush won in part by selling himself as a “grown up” Boomer answer to Bill Clinton. “Voters are tired of that era and its concerns,” said Pfeiffer said. “They want to move on.” 
 
Know the middle class 
Bushes have a congenital family problem with this, and it leaves an opening for someone – of either party – who can prove that he or she really understands the strains of middle class life. It’s not just about money, but about cultural assaults and the lack of time for family in an era when both parents or partners need to work. In his forthcoming book, Positively American, Sen. Charles Schumer of New York imagines the hard life of a fictitious middle class family – and offers a series of governmental proposals to address them. A shrewd student of the American mood, Schumer is aiming in the right direction. The next president will need to show that he or she understands that family. 



original word:  `Washington `Washington
new split:  `  and  Washington
[(0, 8), (9, 21), (22, 33), (35, 38), (39, 43), (44, 52), (53, 59), (60, 70), (71, 73), (74, 77), (78, 82), (83, 89), (90, 93), (94, 95), (96, 105), (105, 106), (110, 120), (121, 122), (123, 126), (127, 131), (132, 135), (136, 140), (141, 150), (151, 154), (155, 159), (160, 164), (165, 167), (168, 172), (172, 173), (174, 177), (178, 185), (186, 189), (190, 194), (195, 197), (198, 201), (202, 206), (207, 215), (216, 218), (219, 223), (223, 224), (225, 231), (232, 234), (235, 241), (242, 245), (246, 249), (250, 254), (255, 257), (258, 261), (262, 266), (266, 267), (269, 273), (274, 278), (279, 281), (282, 288), (289, 293), (294, 297), (298, 305), (306, 310), (310, 311), (312, 316), (317, 319), (320, 322), (323, 328), (329, 331), (332, 334), (334, 335), (336, 341), (342, 344), (345, 352), (353, 355), (356, 367), (367, 368), (369, 380), (381, 384), (385, 391), (392, 396), (397, 400), (401, 407), (408, 411), (412, 418), (418, 419), (423, 425), (426, 436), (436, 437), (438, 444), (446, 451), (452, 455), (456, 457), (458, 462), (463, 467), (468, 477), (478, 484), (485, 487), (488, 492), (492, 493), (493, 494), (495, 506), (507, 516), (517, 520), (521, 532), (533, 542), (543, 546), (547, 554), (555, 567), (568, 577), (577, 578), (579, 583), (584, 588), (589, 592), (593, 597), (598, 603), (604, 610), (610, 611), (612, 615), (616, 623), (624, 626), (627, 632), (632, 633), (634, 638), (639, 646), (646, 647), (648, 650), (651, 658), (659, 663), (664, 671), (672, 679), (680, 684), (685, 689), (690, 700), (701, 703), (704, 707), (708, 709), (709, 711), (712, 716), (717, 720), (720, 721), (722, 727), (727, 728), (729, 735), (736, 739), (740, 743), (744, 747), (748, 750), (751, 755), (756, 758), (759, 761), (762, 763), (763, 767), (767, 768), (768, 769), (770, 773), (774, 775), (776, 784), (785, 786), (787, 790), (791, 800), (801, 803), (804, 807), (808, 812), (813, 818), (819, 823), (824, 826), (827, 830), (831, 835), (835, 836), (838, 844), (845, 851), (852, 856), (857, 861), (862, 866), (866, 867), (867, 868), (869, 870), (870, 875), (875, 876), (877, 879), (880, 886), (887, 891), (892, 896), (897, 899), (900, 903), (904, 912), (913, 915), (916, 923), (923, 924), (925, 928), (929, 932), (933, 940), (941, 943), (944, 945), (946, 952), (953, 956), (957, 964), (965, 967), (968, 980), (981, 986), (986, 987), (991, 998), (999, 1006), (1008, 1020), (1021, 1030), (1031, 1034), (1035, 1036), (1037, 1049), (1050, 1056), (1057, 1059), (1060, 1070), (1071, 1082), (1082, 1083), (1084, 1090), (1091, 1095), (1096, 1098), (1099, 1109), (1110, 1113), (1114, 1117), (1118, 1128), (1129, 1139), (1140, 1142), (1143, 1146), (1147, 1156), (1156, 1157), (1158, 1160), (1161, 1168), (1169, 1174), (1175, 1179), (1180, 1183), (1184, 1188), (1189, 1192), (1193, 1199), (1200, 1202), (1203, 1209), (1210, 1214), (1214, 1215), (1216, 1218), (1219, 1223), (1223, 1224), (1225, 1231), (1232, 1238), (1239, 1240), (1241, 1245), (1246, 1254), (1255, 1257), (1258, 1265), (1266, 1271), (1271, 1272), (1272, 1273), (1274, 1282), (1283, 1294), (1294, 1295), (1296, 1300), (1301, 1305), (1306, 1314), (1315, 1320), (1320, 1321), (1322, 1324), (1325, 1330), (1331, 1334), (1335, 1337), (1338, 1342), (1343, 1352), (1352, 1353), (1354, 1361), (1361, 1362), (1363, 1372), (1373, 1378), (1379, 1384), (1385, 1391), (1391, 1392), (1393, 1394), (1395, 1401), (1402, 1408), (1409, 1412), (1413, 1416), (1417, 1422), (1423, 1429), (1430, 1432), (1433, 1443), (1443, 1444), (1445, 1448), (1449, 1452), (1453, 1461), (1462, 1467), (1468, 1470), (1471, 1474), (1475, 1477), (1478, 1481), (1482, 1490), (1491, 1497), (1497, 1498), (1499, 1502), (1503, 1515), (1516, 1524), (1525, 1534), (1534, 1535), (1536, 1542), (1543, 1545), (1546, 1550), (1551, 1554), (1555, 1560), (1561, 1563), (1564, 1568), (1569, 1576), (1577, 1580), (1581, 1587), (1588, 1595), (1596, 1597), (1597, 1599), (1600, 1607), (1607, 1608), (1609, 1611), (1612, 1620), (1621, 1625), (1626, 1628), (1629, 1632), (1633, 1640), (1641, 1642), (1643, 1646), (1647, 1650), (1651, 1652), (1653, 1661), (1662, 1671), (1672, 1677), (1678, 1681), (1682, 1689), (1689, 1690), (1694, 1704), (1705, 1715), (1716, 1719), (1720, 1729), (1731, 1737), (1738, 1743), (1744, 1748), (1749, 1752), (1753, 1757), (1758, 1760), (1761, 1764), (1765, 1770), (1771, 1781), (1782, 1792), (1793, 1794), (1795, 1797), (1798, 1801), (1802, 1816), (1817, 1827), (1828, 1829), (1830, 1832), (1833, 1836), (1837, 1841), (1842, 1846), (1847, 1857), (1857, 1858), (1859, 1863), (1864, 1866), (1867, 1871), (1872, 1883), (1884, 1887), (1888, 1898), (1899, 1902), (1903, 1907), (1908, 1912), (1913, 1917), (1918, 1923), (1924, 1928), (1929, 1933), (1934, 1941), (1942, 1949), (1950, 1952), (1953, 1959), (1960, 1963), (1964, 1967), (1968, 1977), (1977, 1978), (1979, 1983), (1984, 1989), (1990, 1994), (1995, 1998), (1999, 2009), (2010, 2014), (2015, 2021), (2022, 2023), (2024, 2027), (2028, 2031), (2032, 2034), (2035, 2036), (2037, 2044), (2044, 2045), (2046, 2048), (2049, 2052), (2053, 2056), (2057, 2058), (2058, 2061), (2062, 2070), (2070, 2071), (2072, 2074), (2075, 2082), (2083, 2089), (2090, 2095), (2096, 2098), (2099, 2102), (2103, 2109), (2110, 2111), (2112, 2115), (2116, 2118), (2119, 2127), (2127, 2128), (2129, 2138), (2139, 2145), (2146, 2149), (2150, 2157), (2158, 2163), (2164, 2167), (2168, 2175), (2175, 2176), (2177, 2180), (2181, 2185), (2186, 2195), (2196, 2201), (2202, 2214), (2215, 2221), (2221, 2222), (2223, 2227), (2228, 2235), (2236, 2239), (2240, 2242), (2243, 2246), (2246, 2247), (2248, 2249), (2249, 2250), (2250, 2260)]
{0: 0, 2049: 387, 2053: 388, 1031: 201, 9: 1, 2058: 390, 1035: 202, 1037: 203, 2062: 391, 22: 2, 2072: 393, 1050: 204, 2075: 394, 1057: 205, 35: 3, 1060: 206, 39: 4, 2090: 396, 44: 5, 1071: 207, 2096: 397, 2099: 398, 53: 6, 2057: 389, 1082: 208, 60: 7, 2150: 408, 2110: 400, 2112: 401, 1888: 356, 1091: 210, 2116: 402, 991: 197, 71: 8, 1096: 211, 74: 9, 1099: 212, 78: 10, 2127: 404, 2129: 405, 83: 11, 1828: 344, 1110: 213, 1114: 214, 2139: 406, 186: 31, 94: 13, 96: 14, 2146: 407, 2015: 378, 105: 15, 110: 16, 1140: 217, 190: 32, 1143: 218, 2168: 411, 121: 17, 123: 18, 127: 19, 2177: 413, 1899: 357, 132: 20, 2070: 392, 1158: 221, 136: 21, 1161: 222, 2186: 415, 141: 22, 1169: 223, 1219: 234, 2196: 416, 151: 23, 2202: 417, 155: 24, 1180: 225, 1184: 226, 165: 26, 369: 72, 168: 27, 1193: 228, 172: 28, 2221: 419, 174: 29, 2223: 420, 1200: 229, 178: 30, 1203: 230, 2228: 421, 2249: 427, 1210: 231, 2236: 422, 2250: 428, 1214: 232, 1216: 233, 195: 33, 198: 34, 1223: 235, 2248: 426, 1225: 236, 202: 35, 207: 36, 1232: 237, 2083: 395, 1239: 238, 216: 37, 1241: 239, 219: 38, 1246: 240, 223: 39, 225: 40, 1255: 241, 232: 41, 1258: 242, 235: 42, 1266: 243, 246: 44, 1271: 244, 1272: 245, 1274: 246, 255: 46, 258: 47, 1283: 247, 262: 48, 385: 74, 266: 49, 269: 50, 1294: 248, 1296: 249, 274: 51, 1301: 250, 729: 138, 1924: 362, 1306: 251, 289: 54, 1315: 252, 294: 55, 1320: 253, 1322: 254, 1325: 255, 306: 57, 1331: 256, 310: 58, 1335: 257, 312: 59, 1338: 258, 317: 60, 1343: 259, 320: 61, 323: 62, 1352: 260, 329: 63, 1354: 261, 2103: 399, 332: 64, 334: 65, 336: 66, 1361: 262, 1363: 263, 342: 67, 345: 68, 2243: 424, 1373: 264, 353: 69, 1379: 265, 356: 70, 1385: 266, 1391: 267, 1393: 268, 1395: 269, 1402: 270, 381: 73, 1409: 271, 1413: 272, 392: 75, 1417: 273, 397: 76, 1423: 274, 401: 77, 1430: 275, 408: 78, 1433: 276, 412: 79, 418: 80, 1443: 277, 1445: 278, 423: 81, 1449: 279, 426: 82, 2119: 403, 1453: 280, 436: 83, 1462: 281, 1468: 282, 446: 85, 1471: 283, 1475: 284, 452: 86, 1478: 285, 1953: 367, 456: 87, 458: 88, 463: 89, 1491: 287, 468: 90, 1497: 288, 1499: 289, 250: 45, 478: 91, 1503: 290, 1482: 286, 485: 92, 488: 93, 1516: 291, 493: 95, 495: 96, 1525: 292, 507: 97, 1534: 293, 1536: 294, 517: 98, 1543: 295, 521: 99, 1546: 296, 242: 43, 1551: 297, 1555: 298, 533: 100, 1561: 299, 1564: 300, 90: 12, 543: 101, 1569: 301, 547: 102, 1798: 341, 1577: 302, 555: 103, 1581: 303, 1588: 304, 1118: 215, 568: 104, 1596: 305, 1597: 306, 1600: 307, 577: 105, 579: 106, 438: 84, 1607: 308, 584: 107, 1609: 309, 1612: 310, 589: 108, 1929: 363, 593: 109, 1621: 311, 598: 110, 1977: 371, 1626: 312, 604: 111, 1629: 313, 1633: 314, 610: 112, 612: 113, 2032: 382, 616: 114, 1641: 315, 1643: 316, 1647: 317, 624: 115, 1968: 370, 627: 116, 1653: 319, 1129: 216, 632: 117, 634: 118, 1662: 320, 639: 119, 646: 120, 1672: 321, 651: 122, 1678: 322, 1682: 323, 659: 123, 2158: 409, 1817: 343, 664: 124, 1689: 324, 282: 53, 1694: 325, 672: 125, 680: 126, 1705: 326, 685: 127, 690: 128, 1651: 318, 1716: 327, 1720: 328, 2164: 410, 701: 129, 704: 130, 1731: 329, 708: 131, 709: 132, 279: 52, 712: 133, 1738: 330, 2240: 423, 717: 134, 720: 135, 722: 136, 1749: 332, 727: 137, 1753: 333, 1758: 334, 736: 139, 1761: 335, 1147: 219, 740: 140, 1765: 336, 744: 141, 1771: 337, 748: 142, 751: 143, 756: 144, 1782: 338, 759: 145, 762: 146, 763: 147, 298: 56, 767: 148, 768: 149, 1793: 339, 770: 150, 1795: 340, 774: 151, 776: 152, 1802: 342, 1744: 331, 1837: 347, 785: 153, 787: 154, 791: 155, 1156: 220, 2010: 377, 2181: 414, 801: 156, 804: 157, 1830: 345, 808: 158, 1833: 346, 2175: 412, 813: 159, 1084: 209, 648: 121, 1842: 348, 819: 160, 1847: 349, 824: 161, 827: 162, 831: 163, 1857: 350, 835: 164, 838: 165, 1864: 352, 1867: 353, 845: 166, 1872: 354, 852: 167, 857: 168, 1884: 355, 862: 169, 367: 71, 866: 170, 867: 171, 869: 172, 870: 173, 875: 174, 877: 175, 1903: 358, 880: 176, 1908: 359, 887: 177, 1913: 360, 892: 178, 1918: 361, 2246: 425, 897: 179, 900: 180, 904: 181, 492: 94, 1175: 224, 1934: 364, 913: 182, 1859: 351, 916: 183, 1942: 365, 923: 184, 925: 185, 1950: 366, 929: 186, 933: 187, 1960: 368, 1964: 369, 941: 188, 944: 189, 946: 190, 953: 191, 1979: 372, 957: 192, 1984: 373, 160: 25, 965: 193, 1990: 374, 968: 194, 1995: 375, 1999: 376, 981: 195, 986: 196, 1189: 227, 2022: 379, 999: 198, 2024: 380, 2215: 418, 2028: 381, 1008: 199, 2035: 383, 2037: 384, 2044: 385, 1021: 200, 2046: 386}
{2048: 386, 2052: 387, 1030: 200, 8: 0, 1034: 201, 1036: 202, 2061: 390, 2221: 418, 21: 1, 2070: 391, 2071: 392, 1049: 203, 2074: 393, 1056: 204, 33: 2, 2082: 394, 1059: 205, 38: 3, 2089: 395, 43: 4, 1070: 206, 2095: 396, 2056: 388, 2098: 397, 52: 5, 2102: 398, 1082: 207, 59: 6, 2058: 389, 2111: 400, 1090: 209, 2115: 401, 70: 7, 1095: 210, 73: 8, 1098: 211, 1719: 327, 77: 9, 2127: 403, 2128: 404, 82: 10, 355: 69, 1109: 212, 185: 30, 1113: 213, 2138: 405, 1117: 214, 95: 13, 2145: 406, 2149: 407, 1128: 215, 105: 14, 106: 15, 2157: 408, 1139: 216, 1142: 217, 2167: 410, 120: 16, 122: 17, 2239: 422, 126: 18, 2175: 411, 2176: 412, 131: 19, 1156: 219, 1157: 220, 135: 20, 1160: 221, 2185: 414, 140: 21, 194: 32, 1168: 222, 2195: 415, 150: 22, 2201: 416, 154: 23, 1179: 224, 159: 24, 368: 71, 164: 25, 2214: 417, 167: 26, 1192: 227, 2247: 425, 172: 27, 173: 28, 2222: 419, 1199: 228, 177: 29, 1202: 229, 2227: 420, 2249: 426, 1209: 230, 2235: 421, 189: 31, 1214: 231, 1215: 232, 1218: 233, 197: 33, 2246: 424, 1223: 234, 1224: 235, 201: 34, 2250: 427, 206: 35, 1231: 236, 2163: 409, 2260: 428, 1238: 237, 215: 36, 1240: 238, 218: 37, 1245: 239, 223: 38, 224: 39, 1254: 240, 231: 40, 1257: 241, 234: 41, 241: 42, 245: 43, 1271: 243, 1272: 244, 1273: 245, 254: 45, 257: 46, 1282: 246, 261: 47, 266: 48, 267: 49, 1294: 247, 1295: 248, 273: 50, 384: 73, 1923: 361, 1300: 249, 278: 51, 281: 52, 1305: 250, 288: 53, 1314: 251, 293: 54, 1320: 252, 1321: 253, 1324: 254, 305: 56, 1330: 255, 310: 57, 311: 58, 1337: 257, 316: 59, 1342: 258, 319: 60, 322: 61, 1352: 259, 1353: 260, 331: 63, 334: 64, 335: 65, 1361: 261, 1362: 262, 341: 66, 344: 67, 1372: 263, 352: 68, 1378: 264, 1083: 208, 1384: 265, 1391: 266, 1392: 267, 1394: 268, 1401: 269, 380: 72, 1408: 270, 1412: 271, 391: 74, 1416: 272, 396: 75, 1422: 273, 400: 76, 1429: 274, 407: 77, 1432: 275, 411: 78, 418: 79, 1443: 276, 1444: 277, 2118: 402, 1265: 242, 1448: 278, 425: 81, 1607: 307, 1452: 279, 436: 82, 1461: 280, 1467: 281, 444: 84, 1470: 282, 1952: 366, 1474: 283, 451: 85, 1477: 284, 455: 86, 1481: 285, 462: 88, 1490: 286, 419: 80, 249: 44, 1497: 287, 1498: 288, 1967: 369, 477: 90, 1502: 289, 484: 91, 487: 92, 1515: 290, 492: 93, 493: 94, 494: 95, 1524: 291, 506: 96, 1534: 292, 1535: 293, 768: 148, 516: 97, 1542: 294, 520: 98, 1545: 295, 1550: 296, 1554: 297, 532: 99, 89: 11, 1560: 298, 1563: 299, 542: 100, 1797: 340, 1568: 300, 546: 101, 945: 189, 1576: 301, 554: 102, 1580: 302, 93: 12, 1587: 303, 567: 103, 1595: 304, 1597: 305, 1599: 306, 577: 104, 578: 105, 583: 106, 1608: 308, 1611: 309, 588: 107, 592: 108, 1620: 310, 597: 109, 1625: 311, 603: 110, 1628: 312, 1632: 313, 610: 111, 611: 112, 615: 113, 1640: 314, 1642: 315, 1646: 316, 623: 114, 626: 115, 1652: 318, 1146: 218, 632: 116, 633: 117, 1661: 319, 638: 118, 646: 119, 1671: 320, 650: 121, 1677: 321, 1681: 322, 658: 122, 663: 123, 1689: 323, 1690: 324, 671: 124, 679: 125, 1704: 325, 684: 126, 1650: 317, 689: 127, 1715: 326, 457: 87, 700: 128, 703: 129, 1729: 328, 707: 130, 709: 131, 711: 132, 1737: 329, 716: 133, 467: 89, 1743: 330, 720: 134, 721: 135, 1827: 343, 1748: 331, 727: 136, 728: 137, 1757: 333, 735: 138, 1760: 334, 739: 139, 1764: 335, 743: 140, 1770: 336, 747: 141, 750: 142, 755: 143, 1781: 337, 758: 144, 297: 55, 761: 145, 763: 146, 767: 147, 1792: 338, 769: 149, 1794: 339, 773: 150, 775: 151, 2242: 423, 1801: 341, 784: 152, 786: 153, 367: 70, 790: 154, 2009: 376, 1816: 342, 2180: 413, 800: 155, 803: 156, 1829: 344, 807: 157, 1832: 345, 647: 120, 812: 158, 1841: 347, 818: 159, 1846: 348, 823: 160, 826: 161, 830: 162, 1857: 349, 1858: 350, 835: 163, 836: 164, 1334: 256, 1863: 351, 437: 83, 1866: 352, 844: 165, 1871: 353, 851: 166, 856: 167, 1883: 354, 861: 168, 1887: 355, 866: 169, 867: 170, 868: 171, 870: 172, 1836: 346, 1898: 356, 875: 173, 876: 174, 2109: 399, 1902: 357, 879: 175, 1907: 358, 886: 176, 1912: 359, 891: 177, 1917: 360, 896: 178, 899: 179, 1174: 223, 903: 180, 1928: 362, 1933: 363, 912: 181, 915: 182, 1941: 364, 923: 183, 924: 184, 1949: 365, 928: 185, 932: 186, 1959: 367, 1963: 368, 940: 187, 943: 188, 328: 62, 952: 190, 1977: 370, 1978: 371, 1183: 225, 956: 191, 1752: 332, 1983: 372, 964: 192, 1989: 373, 967: 193, 1994: 374, 1998: 375, 980: 194, 1188: 226, 986: 195, 987: 196, 2014: 377, 2021: 378, 998: 197, 2023: 379, 2044: 384, 2027: 380, 1006: 198, 2031: 381, 2034: 382, 2036: 383, 1020: 199, 2045: 385}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['President George W. Bush', 'Gerald Ford', 'Richard Nixon', 'Jimmy Carter', 'Evan Bayh', 'Dan Pfeiffer', 'John Kerry', 'Bill Clinton', 'Charles Schumer']
response in server.py code:
 [(1301, 4, 'Gerald_Ford'), (1315, 5, 'Richard_Nixon'), (1908, 9, 'Evan_Bayh'), (2320, 4, 'Evan_Bayh'), (2223, 4, 'Evan_Bayh'), (862, 4, 'George_W._Bush'), (2885, 4, 'George_W._Bush'), (2075, 7, 'Indiana'), (2954, 12, 'Bill_Clinton'), (2864, 10, 'John_Kerry'), (2291, 12, 'Daniel_Pfeiffer'), (1203, 11, 'Gerald_Ford'), (2837, 13, 'George_W._Bush_presidential_campaign,_2004'), (468, 24, 'George_W._Bush'), (1379, 12, 'Jimmy_Carter'), (1258, 13, 'Richard_Nixon'), (1433, 10, 'Washington,_D.C.'), (892, 4, 'Iraq'), (3022, 8, 'Daniel_Pfeiffer'), (3469, 15, 'Chuck_Schumer'), (1482, 15, 'United_States'), (3660, 7, 'Chuck_Schumer'), (2610, 8, 'Daniel_Pfeiffer'), (751, 4, 'Iraq'), (2810, 8, 'Daniel_Pfeiffer'), (2250, 10, 'Washington,_D.C.'), (1694, 10, 'Washington,_D.C.'), (3488, 8, 'New_York_City'), (1771, 10, 'Washington,_D.C.'), (110, 10, 'Washington,_D.C.'), (2689, 6, 'Baby_boomers'), (2103, 6, 'United_States_Senate'), (2795, 7, 'Vietnam')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['George Mason']
response in server.py code:
 [(52, 12, 'George_Mason_University')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(136, 8, 'Chairman'), (187, 18, 'County_executive'), (18, 9, 'President'), (86, 17, 'Presiding_Officer_of_the_Scottish_Parliament')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Columbus,_Ohio'), (11, 2, 'Georgia_(U.S._state)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(29, 18, 'Harvard_University'), (15, 10, 'Research')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['BAILEY', 'Dennis Mitchell', 'Donovan Bailey', 'Michael Green', 'Jesse Owens', 'Gail Devers', 'Merlene Ottey']
response in server.py code:
 [(1240, 11, 'Jesse_Owens'), (729, 6, 'Donovan_Bailey'), (523, 6, 'Donovan_Bailey'), (959, 6, 'Zürich'), (162, 14, 'Donovan_Bailey'), (949, 6, 'Donovan_Bailey'), (1553, 13, 'Merlene_Ottey'), (1383, 8, 'Dennis_Mitchell'), (768, 8, 'Dennis_Mitchell'), (80, 6, 'Berlin'), (805, 13, '1996_Summer_Olympics'), (867, 6, 'Donovan_Bailey'), (892, 8, 'Brussels'), (967, 6, 'Berlin'), (1304, 6, 'Berlin'), (451, 6, 'Donovan_Bailey'), (1455, 11, 'Gail_Devers'), (107, 15, 'Dennis_Mitchell'), (388, 8, 'Dennis_Mitchell'), (98, 8, 'United_States'), (975, 8, 'Brussels'), (587, 7, 'Atlanta'), (988, 6, 'Zürich'), (616, 8, 'United_States'), (361, 6, 'Berlin'), (1538, 8, 'Jamaica'), (678, 7, 'Jamaica'), (1283, 8, 'Summer_Olympic_Games'), (839, 7, 'Summer_Olympic_Games'), (1097, 7, 'Summer_Olympic_Games'), (329, 7, 'Summer_Olympic_Games'), (134, 7, 'Summer_Olympic_Games'), (688, 13, 'Michael_Green_(sprinter)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(12, 11, 'Weight_loss'), (5, 6, 'Week')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(16, 3, 'Agence_France-Presse'), (1700, 7, 'Bangkok'), (1362, 6, 'Mexico'), (1231, 8, 'Emirates_(airline)'), (2, 6, 'Beirut'), (1089, 7, 'Lebanon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(27, 6, 'Greece'), (0, 9, 'Republic_of_Macedonia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Ottinger']
response in server.py code:
 [(134, 8, 'Albert_Ottinger'), (180, 6, 'Olle_Nordin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Madeleine Albright', 'Thomas Klestil', 'Viktor Klima', 'Wolfgang Schuessel', 'Adolf Hitler']
response in server.py code:
 [(126, 18, 'Madeleine_Albright'), (1302, 7, 'Germany'), (76, 7, 'Austria'), (323, 14, 'Thomas_Klestil'), (664, 12, 'Viktor_Klima'), (607, 13, 'United_States'), (701, 18, 'Wolfgang_Schüssel'), (1284, 12, 'Adolf_Hitler'), (1030, 35, 'Association_of_Art_Museum_Directors'), (898, 21, 'World_Jewish_Congress'), (104, 18, 'Secretary_of_State'), (60, 10, 'Art_theft'), (248, 9, 'The_Holocaust'), (401, 6, 'Moscow'), (276, 5, 'Nazism')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Brian Lara', 'Ian Healy', 'Tom Moody', 'Shane Warne', 'Courtney Walsh', 'Clive Lloyd', 'Geoff Marsh']
response in server.py code:
 [(762, 14, 'Courtney_Walsh'), (1306, 5, 'Clive_Lloyd'), (1461, 5, 'Ian_Healy'), (290, 4, 'Brian_Lara'), (1361, 4, 'Brian_Lara'), (406, 9, 'Ian_Healy'), (626, 11, 'Shane_Warne'), (1110, 11, 'Clive_Lloyd'), (93, 10, 'Brian_Lara'), (810, 4, 'Brian_Lara'), (1198, 11, 'Geoff_Marsh'), (1717, 4, 'Brian_Lara'), (604, 9, 'Tom_Moody'), (1688, 4, 'Brian_Lara'), (1150, 4, 'Brian_Lara'), (52, 9, 'Melbourne'), (1778, 9, 'Australia'), (1601, 21, 'Sydney_Cricket_Ground'), (723, 24, 'Melbourne_Cricket_Ground'), (10, 4, 'Brian_Lara'), (383, 9, 'Australia_national_cricket_team'), (269, 9, 'Australia_national_cricket_team'), (653, 11, 'West_Indies_cricket_team'), (73, 11, 'West_Indies_cricket_team'), (1755, 11, 'West_Indies_cricket_team'), (1825, 9, 'Australia'), (477, 11, 'West_Indies_cricket_team'), (1559, 9, 'Australia_national_cricket_team'), (1182, 9, 'Australia_national_cricket_team'), (872, 10, 'Australia'), (1809, 11, 'West_Indies_cricket_team'), (133, 10, 'Australia_national_cricket_team'), (1541, 9, 'Australia'), (1963, 8, 'Pakistan_national_cricket_team'), (2032, 12, 'World_Series')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Justin Timberlake', 'Cameron Diaz', 'Britney Spears', 'Lou Pearlman']
response in server.py code:
 [(383, 7, "'N_Sync"), (706, 10, 'Justin_Timberlake'), (101, 17, 'Justin_Timberlake'), (284, 10, 'Justin_Timberlake'), (271, 5, 'Colorado'), (578, 10, 'Justin_Timberlake'), (183, 13, 'Star_(magazine)'), (822, 14, 'Britney_Spears'), (123, 12, 'Cameron_Diaz'), (220, 4, 'Cameron_Diaz'), (544, 19, 'Saturday_Night_Live'), (752, 13, 'Innosense'), (940, 12, 'Lou_Pearlman'), (650, 19, "Nickelodeon_Kids'_Choice_Awards"), (569, 4, 'Cameron_Diaz'), (325, 7, 'Memphis,_Tennessee'), (899, 9, 'Innosense'), (265, 4, 'Vail,_Colorado'), (0, 10, 'Justin_Timberlake'), (236, 9, 'Christmas'), (214, 4, 'Star_(magazine)'), (12, 4, 'Cameron_Diaz')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(62, 9, 'Cambridge'), (28, 30, 'Cavendish_Professor_of_Physics')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(67, 12, 'London_Irish')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(17, 11, 'Los_Angeles')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Thomas Eliot', 'Frank Aydelotte']
response in server.py code:
 [(123, 12, 'Eliot_family_(America)'), (175, 7, 'England'), (187, 11, 'New_England'), (41, 28, 'Institute_for_Advanced_Study'), (73, 8, 'Film_director'), (82, 15, 'Frank_Aydelotte'), (99, 5, 'T._S._Eliot'), (0, 12, 'T._S._Eliot')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Hendrix', 'Dylan']
response in server.py code:
 [(25, 7, 'Seattle'), (67, 7, 'Jimi_Hendrix'), (79, 5, 'Bob_Dylan'), (18, 3, 'Electromagnetic_pulse')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Michelle Freeman', 'Ludmila Engquist', 'Aliuska Lopez', 'Dionne Rose', 'Julie Baumann', 'Gillian Russell', 'Svetlana Masterkova', 'Carla Sacramento', 'Yekaterina Podkopayeva', 'Leah Pells', 'Mark Crear', 'Tony Jarrett', 'Florian Schwarthoff', 'Emilio Valle', 'Falk Balzer', 'Steve Brown', 'Frank Busemann', 'Jack Pierce', 'Frankie Fredericks', 'Michael Johnson', 'Ato Boldon', 'Geir Moen', 'Patrick Stevens', 'Jon Drummond', 'Ivan Garcia', 'Astrid Kumbernuss', 'Irina Korzhanenko', 'Valentina Fedyushina', 'Stephanie Storp', 'Noureddine Morceli', 'Venuste Niyongabo', 'William Tanui', 'Laban Rotich', 'Marko Koers', 'Isaac Viciosa', 'John Mayock', "Marcus O'Sullivan", 'Lars Riedel', 'Anthony Washington', 'Vladimir Dubrovshchik', 'Virgilijus Alekna', 'Juergen Schult', 'Andreas Seelig', 'Michael Moellenbeck', 'Gail Devers', 'Merlene Ottey', 'Gwen Torrence', 'Mary Onyali', 'Chryste Gaines', 'Chandra Sturrup', 'Irina Privalova', 'Inger Miller', 'Gabriela Szabo', 'Gete Wami', 'Rose Cheruiyot', 'Annemari Sandell', 'Tegla Loroupe', 'Gunhild Halle', 'Pauline Konga', 'Sally Barsosio', 'Torrance Zellner', 'Samuel Matete', 'Derrick Adkins', 'Fabrizio Mori', 'Sven Nylander', 'Eric Thomas', 'Rohan Robinson', 'Falilat Ogunkoya', 'Jearl Miles', 'Fatima Yusuf', 'Anja Ruecker', 'Olabisi Afolabi', 'Phylis Smith', 'Linda Kisabaka', 'Karin Janke', 'Dennis Mitchell', 'Michael Green', 'Donovan Bailey', 'Jon Drummond', 'Davidson Ezinwa', 'Geir Moen', 'Marc Blume', 'Wilson Kipketer', 'Norberto Tellez', 'Nico Motchebon', 'David Kiptoo', 'Igor Trandenkov', 'Maksim Tarasov', 'Tim Lobinger', 'Igor Potapovich', 'Jean Galfione', 'Dmitri Markov', 'Stefka Kostadinova', 'Inga Babakova', 'Alina Astafei', 'Tatyana Motkova', 'Hanne Haugland', 'Nele Zilinskiene', 'Yelena Gulyayeva', 'Daniel Komen', 'Bob Kennedy', 'Paul Koech', 'Shem Kororia', 'Brahim Lahlafi', 'Tom Nyariki', 'Fita Bayissa', 'Jonathan Edwards', 'Yoelvis Quesada', 'Kenny Harrison', 'Mike Conley', 'Armen Martirosyan', 'Sigurd Njerve', 'Carlos Calado', 'Tanja Damaske', 'Isel Lopez', 'Heli Rantanen', 'Louise McPaul', 'Xiomara Rivero', 'Jesse Owens', 'Donovan Bailey', 'Michael Johnson', 'Frankie Fredericks', 'Linford Christie', 'Michael Green', 'Osmond Ezinwa', 'Davidson Ezinwa', 'Peter Karlsson', 'Falk Balzer', 'George Panayiotopoulos', 'Florian Schwarthoff']
response in server.py code:
 [(4261, 6, 'Russia'), (4069, 6, 'Russia'), (4399, 6, 'Russia'), (4364, 6, 'Russia'), (3939, 6, 'Russia'), (3907, 6, 'Russia'), (3529, 7, 'Germany'), (427, 19, 'Svetlana_Masterkova'), (5436, 16, 'Linford_Christie'), (1856, 7, 'Germany'), (5406, 18, 'Frankie_Fredericks'), (3873, 7, 'Germany'), (989, 7, 'Germany'), (3292, 7, 'Germany'), (3683, 7, 'Germany'), (1951, 21, 'Vladimir_Dubrovshchik'), (448, 6, 'Russia'), (1499, 7, 'Germany'), (4212, 13, 'Alina_Astafei'), (663, 7, 'Germany'), (4003, 9, 'Kazakhstan'), (3261, 7, 'Germany'), (1350, 7, 'Germany'), (1389, 7, 'Germany'), (611, 10, 'Leah_Pells'), (592, 6, 'Russia'), (2437, 14, 'Gabriela_Szabo'), (2716, 5, 'Kenya'), (3969, 7, 'Germany'), (1443, 20, 'Valentina_Fedyushina'), (1052, 18, 'Frankie_Fredericks'), (3160, 7, 'Germany'), (2370, 6, 'Russia'), (2681, 5, 'Kenya'), (5153, 7, 'Finland'), (2120, 7, 'Germany'), (927, 7, 'Germany'), (867, 7, 'Germany'), (2226, 13, 'Gwen_Torrence'), (703, 6, 'Russia'), (3195, 7, 'Nigeria'), (2256, 11, 'Mary_Onyali-Omagbemi'), (5053, 7, 'Germany'), (3500, 6, 'Norway'), (4227, 7, 'Germany'), (1172, 6, 'Norway'), (3783, 6, 'Norway'), (4188, 7, 'Ukraine'), (2646, 6, 'Norway'), (5094, 6, 'Norway'), (3128, 7, 'Nigeria'), (623, 6, 'Canada'), (2612, 5, 'Kenya'), (2081, 7, 'Germany'), (2910, 6, 'Sweden'), (371, 15, 'Gillian_Russell'), (3454, 15, 'Davidson_Ezinwa'), (3060, 7, 'Nigeria'), (2318, 15, 'Chandra_Sturrup'), (4434, 12, 'Daniel_Komen'), (2453, 7, 'Romania'), (2539, 5, 'Kenya'), (2047, 7, 'Germany'), (4244, 15, 'Tatyana_Babashkina'), (2576, 7, 'Finland'), (3392, 14, 'Donovan_Bailey'), (3667, 14, 'Nico_Motchebon'), (3471, 7, 'Nigeria'), (3890, 15, 'Igor_Trandenkov'), (2193, 13, 'Merlene_Ottey'), (303, 11, 'Dionne_Rose-Henley'), (3581, 7, 'Denmark'), (2816, 6, 'Zambia'), (1268, 7, 'Denmark'), (4448, 5, 'Kenya'), (5688, 7, 'Germany'), (5373, 6, 'Canada'), (4928, 6, 'Norway'), (2879, 5, 'Italy'), (1020, 4, 'United_States'), (5602, 6, 'Sweden'), (1482, 15, 'Stephanie_Storp'), (3099, 4, 'United_States'), (2700, 14, 'Sally_Barsosio'), (779, 10, 'Mark_Crear'), (3213, 12, 'Phylis_Smith'), (814, 12, 'Tony_Jarrett'), (2387, 12, 'Inger_Miller'), (5551, 15, 'Davidson_Ezinwa'), (2065, 14, 'Andreas_Seelig'), (5004, 7, 'Germany'), (5520, 7, 'Nigeria'), (334, 13, 'Julie_Baumann'), (4600, 5, 'Kenya'), (5624, 7, 'Germany'), (5568, 7, 'Nigeria'), (5171, 13, 'Louise_Currey'), (4619, 14, 'Brahim_Lahlafi'), (4669, 5, 'Kenya'), (3408, 6, 'Canada'), (4100, 7, 'Belarus'), (5222, 4, 'Cuba'), (2666, 13, 'Pauline_Konga'), (1465, 6, 'Russia'), (4022, 13, 'Jean_Galfione'), (5123, 4, 'Cuba'), (1901, 4, 'United_States'), (4155, 8, 'Bulgaria'), (4525, 5, 'Kenya'), (5541, 7, 'Nigeria'), (5658, 6, 'Greece'), (2971, 9, 'Australia'), (2801, 13, 'Samuel_Matete'), (4293, 6, 'Norway'), (791, 4, 'United_States'), (5357, 14, 'Donovan_Bailey'), (3042, 16, 'Falilat_Ogunkoya'), (1098, 15, 'Michael_Johnson_(sprinter)'), (1426, 6, 'Russia'), (958, 4, 'United_States'), (3178, 15, 'Olabisi_Afolabi'), (3114, 12, 'Fatima_Yusuf'), (2157, 11, 'Gail_Devers'), (4327, 9, 'Lithuania'), (2287, 14, 'Chryste_Gaines'), (1688, 11, 'Marko_Koers'), (1115, 4, 'United_States'), (737, 4, 'United_States'), (3986, 15, 'Igor_Potapovich'), (2170, 4, 'United_States'), (1758, 11, 'John_Mayock'), (5382, 15, 'Michael_Johnson_(sprinter)'), (4688, 12, 'Fita_Bayisa'), (4085, 13, 'Dmitri_Markov'), (3489, 9, 'Geir_Moen'), (4861, 4, 'United_States'), (3344, 4, 'United_States'), (3279, 11, 'Karin_Janke'), (1725, 13, 'Isaac_Viciosa'), (4656, 11, 'Tom_Nyariki'), (5399, 4, 'United_States'), (220, 6, 'Sweden'), (846, 19, 'Florian_Schwarthoff'), (4833, 4, 'United_States'), (2241, 4, 'United_States'), (1206, 7, 'Belgium'), (3439, 4, 'United_States'), (2778, 4, 'United_States'), (1238, 4, 'United_States'), (5328, 11, 'Jesse_Owens'), (3005, 7, 'Hungary'), (2401, 4, 'United_States'), (4785, 15, 'Yoelbi_Quesada'), (2490, 9, 'Gete_Wami'), (2940, 4, 'United_States'), (4802, 4, 'Cuba'), (2849, 4, 'United_States'), (2558, 16, 'Annemari_Sandell-Hyvärinen'), (1161, 9, 'Geir_Moen'), (4565, 7, 'Morocco'), (1701, 11, 'Netherlands'), (3703, 12, 'David_Kiptoo'), (5293, 9, 'Lithuania'), (4586, 12, 'Shem_Kororia'), (284, 8, 'Slovenia'), (2303, 4, 'United_States'), (39, 6, 'Berlin'), (2597, 13, 'Tegla_Loroupe'), (1528, 18, 'Noureddine_Morceli'), (4913, 13, 'Sigurd_Njerve'), (1992, 17, 'Virgilijus_Alekna'), (2269, 7, 'Nigeria'), (1331, 17, 'Astrid_Kumbernuss'), (4635, 7, 'Morocco'), (3227, 7, 'United_Kingdom'), (510, 6, 'France'), (5667, 19, 'Florian_Schwarthoff'), (568, 22, 'Yekaterina_Podkopayeva'), (547, 8, 'Portugal'), (1843, 11, 'Lars_Riedel'), (1740, 5, 'Spain'), (4346, 16, 'Yelena_Gulyayeva'), (5454, 7, 'United_Kingdom'), (1791, 17, "Marcus_O'Sullivan"), (3955, 12, 'Tim_Lobinger'), (1189, 15, 'Patrick_Stevens'), (3327, 15, 'Dennis_Mitchell'), (3816, 7, 'United_Kingdom'), (4037, 6, 'France'), (349, 11, 'Switzerland'), (5186, 9, 'Australia'), (4309, 16, 'Nelė_Žilinskienė'), (4495, 4, 'United_States'), (4876, 17, 'Armen_Martirosyan_(athlete)'), (4817, 14, 'Kenny_Harrison'), (914, 11, 'Falk_Balzer'), (828, 7, 'United_Kingdom'), (2099, 19, 'Michael_Möllenbeck'), (2760, 16, 'Torrance_Zellner'), (1584, 17, 'Vénuste_Niyongabo'), (1881, 18, 'Anthony_Washington'), (4848, 11, 'Mike_Conley,_Sr.'), (3245, 14, 'Linda_Kisabaka'), (2353, 15, 'Irina_Privalova'), (1656, 12, 'Laban_Rotich'), (4960, 8, 'Portugal'), (2011, 9, 'Lithuania'), (1130, 10, 'Ato_Boldon'), (202, 16, 'Ludmila_Engquist'), (1771, 7, 'United_Kingdom'), (3564, 15, 'Wilson_Kipketer'), (5611, 11, 'Falk_Balzer'), (4760, 7, 'United_Kingdom'), (1974, 7, 'Belarus'), (158, 16, 'Michelle_Freeman'), (388, 7, 'Jamaica'), (1670, 5, 'Kenya'), (5206, 14, 'Xiomara_Rivero'), (316, 7, 'Jamaica'), (529, 16, 'Carla_Sacramento'), (3517, 10, 'Marc_Blume'), (1299, 4, 'Cuba'), (176, 7, 'Jamaica'), (2335, 7, 'The_Bahamas'), (1638, 5, 'Kenya'), (2833, 14, 'Derrick_Adkins'), (5255, 7, 'Belarus'), (2864, 13, 'Fabrizio_Mori'), (4277, 14, 'Hanne_Haugland'), (5111, 10, 'Isel_López'), (4173, 13, 'Inha_Babakova'), (5495, 7, 'Jamaica'), (2031, 14, 'Jürgen_Schult'), (1072, 7, 'Namibia'), (1286, 11, 'Iván_García_(athlete)'), (5038, 13, 'Tanja_Damaske'), (5426, 7, 'Namibia'), (3374, 7, 'Jamaica'), (2208, 7, 'Jamaica'), (1933, 7, 'Belarus'), (5505, 13, 'Osmond_Ezinwa'), (3649, 5, 'Kenya'), (5138, 13, 'Heli_Rantanen'), (252, 4, 'Cuba'), (885, 12, 'Emilio_Valle'), (3086, 11, 'Jearl_Miles_Clark'), (237, 13, 'Aliuska_López'), (1224, 12, 'Jon_Drummond'), (2955, 14, 'Rohan_Robinson'), (4135, 18, 'Stefka_Kostadinova'), (2501, 8, 'Ethiopia'), (1623, 13, 'William_Tanui'), (899, 4, 'Cuba'), (3717, 5, 'Kenya'), (3618, 4, 'Cuba'), (2895, 13, 'Sven_Nylander'), (4482, 11, 'Bob_Kennedy_(athlete)'), (3425, 12, 'Jon_Drummond'), (5634, 22, 'Georgios_Panagiotopoulos'), (4513, 10, 'Paul_Koech'), (1407, 17, 'Irina_Korzhanenko'), (1548, 7, 'Algeria'), (3146, 12, 'Anja_Rücker'), (3748, 7, 'Algeria'), (2523, 14, 'Rose_Cheruiyot'), (4702, 8, 'Ethiopia'), (2631, 13, 'Gunhild_Haugen'), (3923, 14, 'Maksim_Tarasov'), (4742, 16, 'Jonathan_Edwards_(athlete)'), (4945, 13, 'Carlos_Calado'), (973, 14, 'Frank_Busemann'), (1810, 7, 'Republic_of_Ireland'), (1142, 8, 'Trinidad'), (4895, 7, 'Armenia'), (1007, 11, 'Jack_Pierce_(athlete)'), (3601, 15, 'Norberto_Téllez'), (5586, 14, 'Peter_Karlsson_(table_tennis)'), (1603, 7, 'Burundi'), (2927, 11, 'Eric_Thomas_(athlete)'), (945, 11, 'Steve_Brown_(English_darts_player)'), (5480, 13, 'Michael_Green_(sprinter)'), (3359, 13, 'Michael_Green_(sprinter)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(278, 6, 'London'), (0, 21, 'Toronto-Dominion_Bank')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Kamal Kharrazi']
response in server.py code:
 [(234, 14, 'Kamal_Kharazi'), (1054, 15, 'Munich'), (29, 4, 'Iran'), (485, 15, 'Netherlands'), (557, 6, 'Prague'), (91, 9, 'The_Hague'), (1154, 12, 'Iron_Curtain'), (1112, 6, 'Soviet_Union'), (150, 17, 'Radio_Free_Europe/Radio_Liberty'), (582, 5, 'Czech_Republic'), (1181, 8, 'Cold_War'), (789, 4, 'Iraq'), (1298, 21, 'Revolutions_of_1989'), (475, 3, 'International_Court_of_Justice'), (763, 9, 'Broadcasting'), (538, 10, 'Ambassador'), (1218, 9, 'Communism'), (978, 16, 'Politics_of_the_Czech_Republic'), (924, 5, 'Persian_language')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Courtney Walsh', 'Mark Taylor', 'Mark Waugh', 'Ricky Ponting', 'Greg Blewett', 'Michael Bevan', 'Stuart Law', 'Tom Moody', 'Ian Healy', 'Paul Reiffel', 'Shane Warne', 'Jason Gillespie', 'Glenn McGrath', 'Sherwin Campbell', 'Robert Samuels', 'Brian Lara', 'Shivnarine Chanderpaul', 'Carl Hooper', 'Jimmy Adams', 'Junior Murray', 'Nixon McLean', 'Kenneth Benjamin', 'Curtly Ambrose', 'Courtney Walsh', 'Roland Holder']
response in server.py code:
 [(647, 14, 'Courtney_Walsh'), (433, 15, 'Jason_Gillespie'), (450, 13, 'Glenn_McGrath'), (94, 14, 'Courtney_Walsh'), (293, 11, 'Mark_Taylor_(cricketer)'), (558, 11, 'Carl_Hooper'), (316, 10, 'Mark_Waugh'), (357, 13, 'Michael_Bevan'), (522, 10, 'Brian_Lara'), (571, 11, 'Jimmy_Adams'), (395, 9, 'Ian_Healy'), (372, 10, 'Stuart_Law'), (631, 14, 'Curtly_Ambrose'), (420, 11, 'Shane_Warne'), (343, 12, 'Greg_Blewett'), (406, 12, 'Paul_Reiffel'), (488, 16, 'Sherwin_Campbell'), (584, 13, 'Junior_Murray'), (384, 9, 'Tom_Moody'), (599, 12, 'Nixon_McLean'), (53, 9, 'Melbourne'), (10, 11, 'West_Indies_cricket_team'), (328, 13, 'Ricky_Ponting'), (613, 16, 'Kenny_Benjamin'), (506, 14, 'Robert_Samuels'), (534, 22, 'Shivnarine_Chanderpaul'), (220, 9, 'Australia_national_cricket_team'), (74, 11, 'West_Indies_cricket_team'), (281, 9, 'Australia_national_cricket_team'), (673, 13, 'Roland_Holder'), (474, 11, 'West_Indies_cricket_team'), (237, 9, 'Melbourne'), (173, 12, 'Australian_Tri-Series')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(65, 7, 'United_Kingdom'), (45, 8, 'Barclays')]
given spans fix. original text:  Health insurance bridges gap for poor families 
Free medical care can help children get out of poverty, official says 
 
BIRMINGHAM, Ala. - For years, Al Rohling watched parents quit their jobs when their kids got sick, deliberately making their incomes drop to a point where they could get U.S. government medical help. 
 
Rohling, who directed Alabama’s housing authority at the time, reached a startling conclusion: If children could drive parents into hardship when they became ill, could medical insurance help parents rediscover financial health? 
 
“Health care for children really is a bridge to get out of poverty,” said Rohling. 
 
Rohling quit his job in 1988 to help set up the Child Caring Foundation, which provides free health insurance for children through the Blue Cross and Blue Shield of Alabama health care provider. 
 
The foundation is just one example of a charity that bridges the gap between Medicaid — subsidized insurance — for the poorest and private health insurance paid for either privately for those who can afford it, or by an employer. 
 
That gap leaves up to 9 million U.S. children uninsured in the United States, a nation with no universal health care. Many parents are forced to struggle with a patchwork of other provisions in order to get health care for their children. 
 
“The problem of the uninsured is getting worse,” and the number of uninsured children has risen since 2004, said Jennifer Tolbert, principal analyst with the Kaiser Commission on Medicaid and the Uninsured, a Washington-based think tank. 
 
Tolbert said it was possible the U.S. Congress could increase the scope of the State Children’s Health Insurance Program (SCHIP) to provide greater state coverage for uninsured children when it debates reauthorizing the program next year. 
 
In the lurch 
Children with health insurance are usually taken to the doctor at the first sign of illness, while parents of uninsured kids often wait because they are conscious of the cost. 
 
Then the child’s illness can worsen and the parent is forced to miss work to nurse the child back to health. 
 
In Alabama, there were 230,000 uninsured children in 1988, and that has fallen to around 70,000 due to a combination of the Child Caring Foundation and state programs. 
 
Jody Sharp, 60, is an example of the problem the charity aims to address. 
 
She and her husband adopted a foster child, Dana, from a mother who was mentally handicapped. Later, they adopted Dana’s brother Kyle who has epilepsy and asthma. 
 
But Sharp’s husband, the family wage earner, walked out in 1990, leaving Sharp to bring up the two children with no health insurance. 
 
“If you never had a child with epilepsy, you would never know how many bills you can incur. With no insurance, it’s thousands of dollars just like that,” Sharp told Reuters. 
 
During their two years in the Alabama Blue Cross Blue Shield program, Sharp’s children received free medical care and she found a job working with special needs children. The money saved helped her move into private health insurance. 
 
Some 90 percent of the 55,000 children on the program move into private health insurance within about 30 months. 
 
“All of us have times when we lose jobs or lose our homes. You need the support of insurance so you don’t have to worry about squeezing doctor bills out of an already stretched paycheck,” said Sharp. 
 
Bear's eye 
To recruit families, Rohling tours the state presenting health screenings at schools with the help of volunteers from the University of Alabama at Birmingham School of Nursing and elsewhere. 
 
At one recent presentation, a student nurse pulled a teddy bear eye out of a child’s ear, ending three years of one-sided deafness. It was an example of how problems can fester for children who don’t have health insurance. 
 
Low cost health insurance for low income American children began in Pittsburgh in 1985 when Highmark Blue Cross Blue Shield of Western Pennsylvania insured children of laid-off steel workers. By 2006, 144,000 children were in their program. 
 
“There was a crisis. And the whole thing came about as an answer for how health insurance should work,” said spokesperson Denise Grabner of Highmark. 
 
In 1997, the program expanded to include children of the working poor when Congress enacted the SCHIP providing some matching funding. 
 
Alabama was the first of 20 states to participate, creating the All Kids program, with money from state settlement with tobacco companies. The program provides insurance for children above the level at which they would qualify for Medicaid. 
 
Many states now provide insurance for families who earn up to double the poverty rate, defined as $10,000 a year for a single person and $20,000 for a family of four. But Rohling said an individual needed to earn nearly three times the poverty level to afford private insurance. 
 
“We fill the void between affordability and eligibility.” 



original word:  Washington-based Washington-based
new split:  Washington  and  -based
[(0, 6), (7, 16), (17, 24), (25, 28), (29, 32), (33, 37), (38, 46), (48, 52), (53, 60), (61, 65), (66, 69), (70, 74), (75, 83), (84, 87), (88, 91), (92, 94), (95, 102), (102, 103), (104, 112), (113, 117), (121, 131), (131, 132), (133, 137), (138, 139), (140, 143), (144, 149), (149, 150), (151, 153), (154, 161), (162, 169), (170, 177), (178, 182), (183, 188), (189, 193), (194, 198), (199, 204), (205, 209), (210, 213), (214, 218), (218, 219), (220, 232), (233, 239), (240, 245), (246, 253), (254, 258), (259, 261), (262, 263), (264, 269), (270, 275), (276, 280), (281, 286), (287, 290), (291, 295), (296, 306), (307, 314), (315, 319), (319, 320), (324, 331), (331, 332), (333, 336), (337, 345), (346, 353), (353, 354), (354, 355), (356, 363), (364, 373), (374, 376), (377, 380), (381, 385), (385, 386), (387, 394), (395, 396), (397, 406), (407, 417), (417, 418), (419, 421), (422, 430), (431, 436), (437, 442), (443, 450), (451, 455), (456, 464), (465, 469), (470, 474), (475, 481), (482, 485), (485, 486), (487, 492), (493, 500), (501, 510), (511, 515), (516, 523), (524, 534), (535, 544), (545, 551), (551, 552), (556, 557), (557, 563), (564, 568), (569, 572), (573, 581), (582, 588), (589, 591), (592, 593), (594, 600), (601, 603), (604, 607), (608, 611), (612, 614), (615, 622), (622, 623), (623, 624), (625, 629), (630, 637), (637, 638), (642, 649), (650, 654), (655, 658), (659, 662), (663, 665), (666, 670), (671, 673), (674, 678), (679, 682), (683, 685), (686, 689), (690, 695), (696, 702), (703, 713), (713, 714), (715, 720), (721, 729), (730, 734), (735, 741), (742, 751), (752, 755), (756, 764), (765, 772), (773, 776), (777, 781), (782, 787), (788, 791), (792, 796), (797, 803), (804, 806), (807, 814), (815, 821), (822, 826), (827, 835), (835, 836), (840, 843), (844, 854), (855, 857), (858, 862), (863, 866), (867, 874), (875, 877), (878, 879), (880, 887), (888, 892), (893, 900), (901, 904), (905, 908), (909, 916), (917, 925), (926, 927), (928, 938), (939, 948), (949, 950), (951, 954), (955, 958), (959, 966), (967, 970), (971, 978), (979, 985), (986, 995), (996, 1000), (1001, 1004), (1005, 1011), (1012, 1021), (1022, 1025), (1026, 1031), (1032, 1035), (1036, 1039), (1040, 1046), (1047, 1049), (1049, 1050), (1051, 1053), (1054, 1056), (1057, 1059), (1060, 1068), (1068, 1069), (1073, 1077), (1078, 1081), (1082, 1088), (1089, 1091), (1092, 1094), (1095, 1096), (1097, 1104), (1105, 1109), (1110, 1118), (1119, 1128), (1129, 1131), (1132, 1135), (1136, 1142), (1143, 1149), (1149, 1150), (1151, 1152), (1153, 1159), (1160, 1164), (1165, 1167), (1168, 1177), (1178, 1184), (1185, 1189), (1189, 1190), (1191, 1195), (1196, 1203), (1204, 1207), (1208, 1214), (1215, 1217), (1218, 1226), (1227, 1231), (1232, 1233), (1234, 1243), (1244, 1246), (1247, 1252), (1253, 1263), (1264, 1266), (1267, 1272), (1273, 1275), (1276, 1279), (1280, 1286), (1287, 1291), (1292, 1295), (1296, 1301), (1302, 1310), (1310, 1311), (1315, 1316), (1316, 1319), (1320, 1327), (1328, 1330), (1331, 1334), (1335, 1344), (1345, 1347), (1348, 1355), (1356, 1361), (1361, 1362), (1362, 1363), (1364, 1367), (1368, 1371), (1372, 1378), (1379, 1381), (1382, 1391), (1392, 1400), (1401, 1404), (1405, 1410), (1411, 1416), (1417, 1421), (1421, 1422), (1423, 1427), (1428, 1436), (1437, 1444), (1444, 1445), (1446, 1455), (1456, 1463), (1464, 1468), (1469, 1472), (1473, 1479), (1480, 1490), (1491, 1493), (1494, 1502), (1503, 1506), (1507, 1510), (1511, 1520), (1520, 1521), (1522, 1523), (1524, 1534), (1534, 1540)]
{0: 0, 1405: 255, 1026: 181, 516: 91, 1057: 189, 7: 1, 1032: 182, 1196: 216, 524: 92, 1040: 184, 17: 2, 535: 93, 25: 3, 1051: 187, 29: 4, 1054: 188, 33: 5, 1060: 190, 38: 6, 551: 95, 92: 15, 556: 96, 557: 97, 48: 7, 1073: 192, 564: 98, 53: 8, 1078: 193, 569: 99, 1082: 194, 1119: 201, 61: 9, 949: 168, 1417: 257, 1089: 195, 66: 10, 1092: 196, 70: 11, 1095: 197, 1036: 183, 75: 12, 589: 102, 1247: 225, 592: 103, 1105: 199, 594: 104, 1379: 251, 84: 13, 782: 140, 1110: 200, 88: 14, 601: 105, 604: 106, 95: 16, 608: 107, 1296: 234, 443: 79, 612: 108, 1382: 252, 102: 17, 615: 109, 104: 18, 1129: 202, 1494: 270, 1132: 203, 622: 110, 623: 111, 1136: 204, 113: 19, 630: 113, 1143: 205, 788: 141, 959: 171, 637: 114, 1151: 207, 1153: 208, 642: 115, 131: 21, 133: 22, 1160: 209, 138: 23, 1047: 185, 140: 24, 1068: 191, 655: 117, 144: 25, 659: 118, 149: 26, 151: 27, 1437: 261, 154: 28, 671: 121, 1185: 213, 674: 122, 1189: 214, 625: 112, 1208: 218, 170: 30, 683: 124, 858: 153, 686: 125, 1165: 210, 1480: 268, 178: 31, 1204: 217, 1097: 198, 183: 32, 696: 127, 1469: 266, 189: 33, 703: 128, 194: 34, 1215: 219, 1392: 253, 199: 35, 713: 129, 715: 130, 205: 36, 1149: 206, 1232: 222, 721: 131, 210: 37, 1315: 237, 214: 38, 121: 20, 1316: 238, 730: 132, 220: 40, 735: 133, 240: 42, 1253: 226, 742: 134, 1218: 220, 233: 41, 1234: 223, 1491: 269, 893: 160, 752: 135, 1320: 239, 1267: 228, 756: 136, 246: 43, 690: 126, 1273: 229, 1276: 230, 765: 137, 254: 44, 1280: 231, 259: 45, 773: 138, 262: 46, 1287: 232, 264: 47, 777: 139, 1168: 211, 1292: 233, 270: 48, 1178: 212, 1411: 256, 276: 49, 1302: 235, 792: 142, 281: 50, 797: 143, 1310: 236, 287: 51, 291: 52, 804: 144, 807: 145, 296: 53, 1244: 224, 827: 148, 815: 146, 1328: 240, 1331: 241, 307: 54, 822: 147, 1335: 242, 315: 55, 650: 116, 319: 56, 1345: 243, 835: 149, 324: 57, 1511: 273, 840: 150, 331: 58, 844: 151, 333: 59, 397: 72, 337: 60, 1362: 247, 1364: 248, 855: 152, 1368: 249, 346: 61, 1423: 259, 1372: 250, 863: 154, 353: 62, 354: 63, 867: 155, 356: 64, 1049: 186, 875: 156, 364: 65, 878: 157, 573: 100, 880: 158, 374: 66, 888: 159, 377: 67, 381: 68, 385: 69, 387: 70, 901: 161, 905: 162, 395: 71, 909: 163, 1005: 178, 1264: 227, 1428: 260, 917: 164, 407: 73, 218: 39, 1348: 244, 1421: 258, 666: 120, 926: 165, 928: 166, 417: 74, 419: 75, 1444: 262, 582: 101, 422: 76, 1446: 263, 939: 167, 1361: 246, 431: 77, 1456: 264, 437: 78, 951: 169, 1464: 265, 1524: 276, 955: 170, 1191: 215, 501: 89, 1473: 267, 451: 80, 967: 172, 456: 81, 1356: 245, 971: 173, 663: 119, 162: 29, 465: 82, 979: 174, 470: 83, 986: 175, 475: 84, 1401: 254, 1503: 271, 482: 85, 1507: 272, 996: 176, 485: 86, 487: 87, 1001: 177, 679: 123, 493: 88, 1520: 274, 1522: 275, 1012: 179, 545: 94, 1227: 221, 1534: 277, 1022: 180, 511: 90}
{1025: 180, 515: 90, 1540: 277, 6: 0, 1031: 181, 1347: 243, 523: 91, 1039: 183, 16: 1, 1490: 268, 534: 92, 857: 152, 24: 2, 1049: 185, 1050: 186, 28: 3, 1053: 187, 32: 4, 91: 14, 37: 5, 689: 125, 552: 95, 1068: 190, 557: 96, 46: 6, 1263: 226, 1246: 224, 563: 97, 52: 7, 1077: 192, 568: 98, 436: 77, 60: 8, 1088: 194, 65: 9, 1035: 182, 1371: 249, 69: 10, 1094: 196, 1096: 197, 74: 11, 1207: 217, 588: 101, 354: 62, 591: 102, 1104: 198, 593: 103, 83: 12, 1109: 199, 87: 13, 600: 104, 603: 105, 442: 78, 94: 15, 607: 106, 1367: 248, 611: 107, 102: 16, 614: 108, 103: 17, 1128: 201, 1131: 202, 622: 109, 623: 110, 624: 111, 787: 140, 117: 19, 1142: 204, 1177: 211, 637: 113, 638: 114, 1152: 207, 131: 20, 132: 21, 1046: 184, 1159: 208, 649: 115, 139: 23, 1164: 209, 654: 116, 143: 24, 658: 117, 149: 25, 662: 118, 665: 119, 1135: 203, 670: 120, 1184: 212, 112: 18, 1189: 213, 678: 122, 169: 29, 682: 123, 455: 80, 685: 124, 177: 30, 1203: 216, 1310: 235, 182: 31, 695: 126, 1404: 254, 188: 32, 1226: 220, 702: 127, 629: 112, 193: 33, 198: 34, 713: 128, 714: 129, 204: 35, 1149: 205, 720: 130, 209: 36, 1059: 189, 213: 37, 729: 131, 218: 38, 219: 39, 734: 132, 1214: 218, 1252: 225, 741: 133, 1233: 222, 232: 40, 892: 159, 551: 94, 1150: 206, 751: 134, 1266: 227, 755: 135, 245: 42, 1272: 228, 673: 121, 1355: 244, 1275: 229, 764: 136, 253: 43, 1279: 230, 258: 44, 772: 137, 261: 45, 1286: 231, 263: 46, 776: 138, 1195: 215, 269: 47, 1190: 214, 1069: 191, 275: 48, 1301: 234, 791: 141, 280: 49, 1444: 261, 796: 142, 286: 50, 1311: 236, 290: 51, 803: 143, 1316: 237, 806: 144, 295: 52, 1510: 272, 1493: 269, 1118: 200, 1330: 240, 814: 145, 1327: 239, 1416: 256, 306: 53, 1391: 252, 821: 146, 1334: 241, 137: 22, 314: 54, 319: 55, 320: 56, 835: 148, 836: 149, 1400: 253, 396: 71, 331: 57, 332: 58, 336: 59, 1361: 245, 1362: 246, 1363: 247, 854: 151, 1081: 193, 345: 60, 1291: 232, 1167: 210, 826: 147, 862: 153, 353: 61, 866: 154, 355: 63, 1381: 251, 572: 99, 874: 155, 363: 64, 1427: 259, 877: 156, 1410: 255, 879: 157, 1319: 238, 373: 65, 887: 158, 376: 66, 380: 67, 385: 68, 386: 69, 900: 160, 150: 26, 1479: 267, 904: 161, 1004: 177, 394: 70, 908: 162, 1421: 257, 1422: 258, 1091: 195, 916: 163, 406: 72, 153: 27, 239: 41, 1436: 260, 925: 164, 581: 100, 417: 73, 418: 74, 781: 139, 421: 75, 938: 166, 1520: 273, 1378: 250, 430: 76, 1455: 263, 1344: 242, 1523: 275, 948: 167, 950: 168, 1463: 264, 954: 169, 927: 165, 1468: 265, 958: 170, 1472: 266, 450: 79, 843: 150, 1217: 219, 966: 171, 161: 28, 970: 172, 464: 81, 978: 173, 469: 82, 1243: 223, 544: 93, 985: 174, 474: 83, 1502: 270, 1445: 262, 481: 84, 1506: 271, 995: 175, 485: 85, 486: 86, 1056: 188, 1000: 176, 492: 87, 1231: 221, 1295: 233, 1521: 274, 1011: 178, 500: 88, 1534: 276, 1021: 179, 510: 89}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Rohling', 'Rohling', 'Rohling', 'Dana', 'Dana', 'Rohling', 'Rohling']
response in server.py code:
 [(1136, 13, 'United_States'), (1635, 41, "State_Children's_Health_Insurance_Program"), (2819, 7, 'Reuters'), (1105, 4, 'United_States'), (2106, 7, 'Alabama'), (1678, 5, "State_Children's_Health_Insurance_Program"), (917, 8, 'Medicaid'), (133, 4, 'Alabama'), (4312, 5, "State_Children's_Health_Insurance_Program"), (346, 7, 'Alabama'), (3887, 10, 'Pittsburgh'), (4585, 8, 'Medicaid'), (777, 37, 'Blue_Cross_Blue_Shield_Association'), (3521, 35, 'University_of_Alabama_at_Birmingham'), (3946, 20, 'Western_Pennsylvania'), (4203, 8, 'Highmark'), (3911, 31, 'Highmark'), (291, 15, 'United_States'), (4291, 8, 'United_States_Congress'), (4354, 7, 'Alabama'), (1589, 13, 'United_States_Congress'), (1524, 10, 'Washington,_D.C.'), (1556, 7, 'William_R._Tolbert,_Jr.'), (630, 7, 'August_Rohling'), (642, 7, 'August_Rohling'), (121, 10, 'Birmingham'), (324, 7, 'August_Rohling'), (3420, 7, 'August_Rohling'), (4769, 7, 'August_Rohling'), (3557, 17, 'Nursing_school'), (2901, 5, 'Sharp_Corporation'), (2590, 5, 'Sharp_Corporation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Faraday']
response in server.py code:
 [(20, 15, 'Newington_Butts'), (122, 6, 'Surrey'), (62, 27, 'London_Borough_of_Southwark'), (0, 7, 'Michael_Faraday')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 21, 'Völkischer_Beobachter')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Eliot', 'Scofield Thayer']
response in server.py code:
 [(33, 13, 'Massachusetts'), (15, 14, 'Milton_Academy'), (84, 15, 'Scofield_Thayer')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Slobodan Milosevic']
response in server.py code:
 [(325, 18, 'Slobodan_Milošević'), (138, 21, 'Democratic_Opposition_of_Serbia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Madonna', 'Carlos']
response in server.py code:
 [(0, 7, 'Madonna_(entertainer)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Guy Hellers', 'Roberto Bisconti', 'Didier Ernst']
response in server.py code:
 [(102, 7, 'Belgium'), (320, 11, 'Guy_Hellers'), (58, 6, 'Geneva'), (440, 16, 'Roberto_Bisconti'), (230, 7, 'Belgium'), (577, 12, 'Didier_Ernst'), (115, 14, 'Standard_Liège'), (15, 14, 'Standard_Liège'), (174, 9, 'UEFA_Intertoto_Cup'), (76, 4, 'UEFA'), (649, 8, 'Roberto_Bisconti'), (483, 4, 'Euro'), (261, 5, 'Switzerland'), (204, 9, 'Karlsruher_SC'), (799, 8, 'UEFA_Europa_League'), (678, 9, 'Karlsruher_SC'), (217, 7, 'Germany'), (555, 9, 'Karlsruher_SC')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Saddam Hussein', 'Abdul-Halim Khaddam', 'Hassan Habibi', 'Hafez Assad']
response in server.py code:
 [(554, 6, 'London'), (154, 14, 'Saddam_Hussein'), (60, 5, 'Syria'), (114, 7, 'United_Kingdom'), (1372, 11, 'Hafez_al-Assad'), (93, 13, 'United_States'), (138, 5, 'Iraq'), (195, 19, 'Abdul_Halim_Khaddam'), (260, 6, 'Israel'), (1503, 13, 'Iran–Iraq_War'), (385, 13, 'Hassan_Habibi'), (311, 7, 'Islam'), (406, 16, 'Damascus_International_Airport'), (827, 11, 'State_of_Palestine'), (299, 4, 'Arab_world')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Chen Gang', 'Dong Jiong', 'Thomas Stuer-Lauridsen', 'Ong Ewe Hock', 'Sun Jun', 'Rashid Sidek', 'Hermawan Susanto', 'Poul-Erik Hoyer-Larsen', 'Fung Permadi', 'Sun Jun', 'Allan Budi Kusuma', 'Gong Zhichao', 'Mia Audina', 'Ye Zhaoying', 'Meiluawati', 'Camilla Martin', 'Wang Chen', 'Susi Susanti', 'Susi Susanti', 'Camilla Martin', 'Ye Zhaoying']
response in server.py code:
 [(610, 9, 'Indonesia'), (842, 9, 'Indonesia'), (537, 9, 'Indonesia'), (769, 9, 'Indonesia'), (719, 9, 'Indonesia'), (456, 9, 'Indonesia'), (316, 9, 'Indonesia'), (909, 9, 'Indonesia'), (1020, 9, 'Indonesia'), (346, 8, 'Malaysia'), (416, 8, 'Malaysia'), (1107, 9, 'Indonesia'), (577, 7, 'Denmark'), (637, 5, 'China'), (818, 5, 'China'), (1093, 12, 'Susi_Susanti'), (490, 7, 'Denmark'), (750, 17, 'Alan_Budikusuma'), (1048, 5, 'China'), (885, 5, 'China'), (214, 7, 'Denmark'), (741, 5, 'China'), (282, 7, 'Denmark'), (980, 5, 'China'), (1006, 12, 'Susi_Susanti'), (553, 22, 'Poul-Erik_Høyer_Larsen'), (955, 7, 'Denmark'), (830, 10, 'Mia_Audina'), (1147, 11, 'Ye_Zhaoying'), (1160, 5, 'China'), (1182, 5, 'China'), (438, 16, 'Hermawan_Susanto'), (234, 10, 'Dong_Jiong'), (390, 5, 'China'), (246, 5, 'China'), (872, 11, 'Ye_Zhaoying'), (1136, 7, 'Denmark'), (38, 4, 'Bali'), (939, 14, 'Camilla_Martin'), (402, 12, 'Rashid_Sidek'), (177, 5, 'China'), (695, 6, 'Taiwan'), (258, 22, 'Thomas_Stuer-Lauridsen'), (1120, 14, 'Camilla_Martin'), (897, 10, 'Meiluawati'), (681, 12, 'Fung_Permadi'), (381, 7, 'Sun_Jun_(badminton)'), (332, 12, 'Ong_Ewe_Hock'), (732, 7, 'Sun_Jun_(badminton)'), (804, 12, 'Gong_Zhichao'), (969, 9, 'Wang_Chen_(badminton)'), (166, 9, 'Chen_Gang'), (98, 16, 'FIVB_World_Grand_Prix'), (12, 16, 'FIVB_World_Grand_Prix')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Harold Reynolds']
response in server.py code:
 [(41, 15, 'Harold_Reynolds'), (21, 11, 'MLB_Network')]
given spans fix. original text:  Stocks start new trading year with rally 
Market indexes surge after Home Depot chief executive quits 
 
NEW YORK - Stocks moved soundly higher in the first session of 2007 as investors cheered mostly solid readings on the economy and found reason for increased prospects for big-name retailers Home Depot Inc. and Wal-Mart Stores Inc. 
 
A decline in oil prices added to the strong sentiment that at times drove the Dow Jones industrials to a new trading high. 
 
Stocks, which had surged from the start on word that Home Depot’s chairman and chief executive had resigned after years of lackluster performance in the company’s stock, added to their gains after Wall Street received a stronger-than-expected report on December manufacturing from the Institute for Supply Management and saw a softer-than-expected decline in construction spending. 
 
“The ISM number was better than expected and construction fell less than expected,” said Al Goldman, chief market strategist at A.G. Edwards. “I think those of us looking for a soft landing had more support on that stance today.” 
 
In early afternoon trading, the Dow surged 96.53, or 0.77 percent, to 12,559.68 after jumping earlier to a new trading high of 12,580.35. 
 
Broader stock indicators also rose, with the Nasdaq composite index especially showing sharp gains. The Standard & Poor’s 500 index was up 7.94, or 0.56 percent, at 1,426.24, and the tech-laden Nasdaq rose 32.92, or 1.36 percent, to 2,448.21. 
 
Bonds rose but retreated from an earlier big advance; the yield on the benchmark 10-year Treasury note fell to 4.68 percent from 4.71 percent late Friday. Bond investors were trying to balance the ISM news with a weak employment report from a division of payroll company Automatic Data Processing Inc. ADP said private sector employment fell by 40,000 in December following three months of gains that averaged 121,000 per month; investors theorized that the report might improve the chances for an interest rate cut in the early part of the year. 
 
The dollar was mixed against other major currencies, while gold prices fell. 
 
Light, sweet crude fell $2.44 to $58.61 per barrel on the New York Mercantile Exchange as mild weather continued its hold over much of the United States, cutting demand for heating oil and natural gas. 
 
With markets closed Tuesday to mark the funeral of President Gerald R. Ford, Wall Street returned from its longest hiatus — four days — since the aftermath of the Sept. 11, 2001, terrorist attacks. Shortly after they returned to work, investors received word that the ISM index came in at 51.4, stronger than the reading of 50 that had been expected. A reading above 50 signals expansion in the manufacturing sector; November’s figure of 49.5 marked the first time the report showed contraction in nearly four years. 
 
Also giving a boost to stocks, construction spending dropped by a less-than-expected 0.2 percent in November as housing activity fell for a record eighth straight month. The Commerce Department reported that building activity edged down to a seasonally adjusted annual rate of $1.18 trillion. 
 
“Basically, we’re still in an up market even though it’s 51 months old,” Goldman said. “This is still a market that has good upside momentum.” 
 
News that Bob Nardelli resigned from the world’s largest home improvement chain added to positive investor sentiment from a weekend report that Wal-Mart Stores Inc.’s December same-store sales rose 1.6 percent, topping the company’s forecast that growth would be flat or up as much as 1 percent. Home Depot rose $1.35, or 3.4 to $41.51, while Wal-Mart advanced $1.53, or 3.3 percent, to $47.71. 
 
In corporate news, Cytokinetics Inc. surged $1.05, or 14 percent, to $8.53 on news it would work with Amgen Inc. to develop drugs to combat heart failure. Amgen rose 72 cents to $69.03. 
 
Sirius Satellite Radio Inc. rose 27 cents, or 7.6 percent, to $3.81 after the radio service said its subscriber base jumped 82 percent to more than 6 million last year. 
 
Goodyear Tire & Rubber Co. advanced $1.79, or 8.5 percent, to $22.78 and moved as high as $22.77 to surpass a 52-week high of $21.35 after a three-month strike that had hurt production ended. 
 
Home builders were weaker after Lennar Corp., the biggest U.S. builder, warned that it expects to post a loss in the fourth quarter and its chief executive said he see no signs of a recovery in the housing market. Lennar fell $1.40, or 2.7 percent, to $51.06. 
 
Advancing issues outnumbered decliners by about 2 to 1 on the New York Stock Exchange, where volume came to 1.13 billion shares, compared with 430.7 million traded at the same point Friday, a day of anemic volume ahead of the New Year’s holiday. 
 
The Russell 2000 index of smaller companies was up 5.96, or 0.76 percent, at 793.62. 
 
Overseas, Japan’s Nikkei stock average rose 0.01 percent. Britain’s FTSE 100 closed up 0.13 percent, Germany’s DAX index was up 0.15 percent, and France’s CAC-40 was down 0.12 percent. 



original word:  Inc. Inc.
new split:  Inc  and  .
[(0, 6), (7, 12), (13, 16), (17, 24), (25, 29), (30, 34), (35, 40), (42, 48), (49, 56), (57, 62), (63, 68), (69, 73), (74, 79), (80, 85), (86, 95), (96, 101), (105, 108), (109, 113), (114, 115), (116, 122), (123, 128), (129, 136), (137, 143), (144, 146), (147, 150), (151, 156), (157, 164), (165, 167), (168, 172), (173, 175), (176, 185), (186, 193), (194, 200), (201, 206), (207, 215), (216, 218), (219, 222), (223, 230), (231, 234), (235, 240), (241, 247), (248, 251), (252, 261), (262, 271), (272, 275), (276, 284), (285, 294), (295, 299), (300, 305), (306, 309), (309, 310)]
{0: 0, 129: 21, 262: 43, 7: 1, 137: 22, 13: 2, 144: 23, 17: 3, 147: 24, 276: 45, 151: 25, 25: 4, 157: 26, 30: 5, 35: 6, 165: 27, 295: 47, 168: 28, 42: 7, 300: 48, 173: 29, 285: 46, 176: 30, 49: 8, 306: 49, 309: 50, 57: 9, 186: 31, 63: 10, 194: 32, 69: 11, 201: 33, 74: 12, 207: 34, 80: 13, 86: 14, 216: 35, 219: 36, 223: 37, 96: 15, 272: 44, 231: 38, 105: 16, 235: 39, 109: 17, 241: 40, 114: 18, 116: 19, 248: 41, 123: 20, 252: 42}
{128: 20, 261: 42, 6: 0, 136: 21, 12: 1, 143: 22, 16: 2, 146: 23, 275: 44, 150: 24, 24: 3, 156: 25, 29: 4, 34: 5, 164: 26, 294: 46, 167: 27, 40: 6, 284: 45, 299: 47, 172: 28, 175: 29, 48: 7, 305: 48, 309: 49, 310: 50, 56: 8, 185: 30, 62: 9, 193: 31, 68: 10, 200: 32, 73: 11, 206: 33, 79: 12, 85: 13, 215: 34, 218: 35, 271: 43, 222: 36, 95: 14, 101: 15, 230: 37, 234: 38, 108: 16, 240: 39, 113: 17, 115: 18, 247: 40, 122: 19, 251: 41}
given spans fix. original text:  Stocks start new trading year with rally 
Market indexes surge after Home Depot chief executive quits 
 
NEW YORK - Stocks moved soundly higher in the first session of 2007 as investors cheered mostly solid readings on the economy and found reason for increased prospects for big-name retailers Home Depot Inc. and Wal-Mart Stores Inc. 
 
A decline in oil prices added to the strong sentiment that at times drove the Dow Jones industrials to a new trading high. 
 
Stocks, which had surged from the start on word that Home Depot’s chairman and chief executive had resigned after years of lackluster performance in the company’s stock, added to their gains after Wall Street received a stronger-than-expected report on December manufacturing from the Institute for Supply Management and saw a softer-than-expected decline in construction spending. 
 
“The ISM number was better than expected and construction fell less than expected,” said Al Goldman, chief market strategist at A.G. Edwards. “I think those of us looking for a soft landing had more support on that stance today.” 
 
In early afternoon trading, the Dow surged 96.53, or 0.77 percent, to 12,559.68 after jumping earlier to a new trading high of 12,580.35. 
 
Broader stock indicators also rose, with the Nasdaq composite index especially showing sharp gains. The Standard & Poor’s 500 index was up 7.94, or 0.56 percent, at 1,426.24, and the tech-laden Nasdaq rose 32.92, or 1.36 percent, to 2,448.21. 
 
Bonds rose but retreated from an earlier big advance; the yield on the benchmark 10-year Treasury note fell to 4.68 percent from 4.71 percent late Friday. Bond investors were trying to balance the ISM news with a weak employment report from a division of payroll company Automatic Data Processing Inc. ADP said private sector employment fell by 40,000 in December following three months of gains that averaged 121,000 per month; investors theorized that the report might improve the chances for an interest rate cut in the early part of the year. 
 
The dollar was mixed against other major currencies, while gold prices fell. 
 
Light, sweet crude fell $2.44 to $58.61 per barrel on the New York Mercantile Exchange as mild weather continued its hold over much of the United States, cutting demand for heating oil and natural gas. 
 
With markets closed Tuesday to mark the funeral of President Gerald R. Ford, Wall Street returned from its longest hiatus — four days — since the aftermath of the Sept. 11, 2001, terrorist attacks. Shortly after they returned to work, investors received word that the ISM index came in at 51.4, stronger than the reading of 50 that had been expected. A reading above 50 signals expansion in the manufacturing sector; November’s figure of 49.5 marked the first time the report showed contraction in nearly four years. 
 
Also giving a boost to stocks, construction spending dropped by a less-than-expected 0.2 percent in November as housing activity fell for a record eighth straight month. The Commerce Department reported that building activity edged down to a seasonally adjusted annual rate of $1.18 trillion. 
 
“Basically, we’re still in an up market even though it’s 51 months old,” Goldman said. “This is still a market that has good upside momentum.” 
 
News that Bob Nardelli resigned from the world’s largest home improvement chain added to positive investor sentiment from a weekend report that Wal-Mart Stores Inc.’s December same-store sales rose 1.6 percent, topping the company’s forecast that growth would be flat or up as much as 1 percent. Home Depot rose $1.35, or 3.4 to $41.51, while Wal-Mart advanced $1.53, or 3.3 percent, to $47.71. 
 
In corporate news, Cytokinetics Inc. surged $1.05, or 14 percent, to $8.53 on news it would work with Amgen Inc. to develop drugs to combat heart failure. Amgen rose 72 cents to $69.03. 
 
Sirius Satellite Radio Inc. rose 27 cents, or 7.6 percent, to $3.81 after the radio service said its subscriber base jumped 82 percent to more than 6 million last year. 
 
Goodyear Tire & Rubber Co. advanced $1.79, or 8.5 percent, to $22.78 and moved as high as $22.77 to surpass a 52-week high of $21.35 after a three-month strike that had hurt production ended. 
 
Home builders were weaker after Lennar Corp., the biggest U.S. builder, warned that it expects to post a loss in the fourth quarter and its chief executive said he see no signs of a recovery in the housing market. Lennar fell $1.40, or 2.7 percent, to $51.06. 
 
Advancing issues outnumbered decliners by about 2 to 1 on the New York Stock Exchange, where volume came to 1.13 billion shares, compared with 430.7 million traded at the same point Friday, a day of anemic volume ahead of the New Year’s holiday. 
 
The Russell 2000 index of smaller companies was up 5.96, or 0.76 percent, at 793.62. 
 
Overseas, Japan’s Nikkei stock average rose 0.01 percent. Britain’s FTSE 100 closed up 0.13 percent, Germany’s DAX index was up 0.15 percent, and France’s CAC-40 was down 0.12 percent. 



original word:  Inc. Inc.
new split:  Inc  and  .
[(0, 6), (7, 12), (13, 16), (17, 24), (25, 29), (30, 34), (35, 40), (42, 48), (49, 56), (57, 62), (63, 68), (69, 73), (74, 79), (80, 85), (86, 95), (96, 101), (105, 108), (109, 113), (114, 115), (116, 122), (123, 128), (129, 136), (137, 143), (144, 146), (147, 150), (151, 156), (157, 164), (165, 167), (168, 172), (173, 175), (176, 185), (186, 193), (194, 200), (201, 206), (207, 215), (216, 218), (219, 222), (223, 230), (231, 234), (235, 240), (241, 247), (248, 251), (252, 261), (262, 271), (272, 275), (276, 284), (285, 294), (295, 299), (300, 305), (306, 309), (309, 310), (311, 314), (315, 323), (324, 330), (331, 335), (339, 340), (341, 348), (349, 351), (352, 355), (356, 362), (363, 368), (369, 371), (372, 375), (376, 382), (383, 392), (393, 397), (398, 400), (401, 406), (407, 412), (413, 416), (417, 420), (421, 426), (427, 438), (439, 441), (442, 443), (444, 447), (448, 455), (456, 460), (460, 461), (465, 471), (471, 472), (473, 478), (479, 482), (483, 489), (490, 494), (495, 498), (499, 504), (505, 507), (508, 512), (513, 517), (518, 522), (523, 528), (528, 529), (529, 530), (531, 539), (540, 543), (544, 549), (550, 559), (560, 563), (564, 572), (573, 578), (579, 584), (585, 587), (588, 598), (599, 610), (611, 613), (614, 617), (618, 625), (625, 626), (626, 627), (628, 633), (633, 634), (635, 640), (641, 643), (644, 649), (650, 655), (656, 661), (662, 666), (667, 673), (674, 682), (683, 684), (685, 707), (708, 714), (715, 717), (718, 726), (727, 740), (741, 745), (746, 749), (750, 759), (760, 763), (764, 770), (771, 781), (782, 785), (786, 789), (790, 791), (792, 812), (813, 820), (821, 823), (824, 836), (837, 845), (845, 846), (850, 851), (851, 854), (855, 858), (859, 865), (866, 869), (870, 876), (877, 881), (882, 890), (891, 894), (895, 907), (908, 912), (913, 917), (918, 922), (923, 931), (931, 932), (932, 933), (934, 938), (939, 941), (942, 949), (949, 950), (951, 956), (957, 963), (964, 974), (975, 977), (978, 982), (983, 990), (990, 991), (992, 993), (993, 994), (995, 1000), (1001, 1006), (1007, 1009), (1010, 1012), (1013, 1020), (1021, 1024), (1025, 1026), (1027, 1031), (1032, 1039), (1040, 1043), (1044, 1048), (1049, 1056), (1057, 1059), (1060, 1064), (1065, 1071), (1072, 1078), (1078, 1079), (1083, 1085), (1086, 1091), (1092, 1101), (1102, 1109), (1109, 1110), (1111, 1114), (1115, 1118), (1119, 1125), (1126, 1131), (1131, 1132), (1133, 1135), (1136, 1140), (1141, 1148), (1148, 1149), (1150, 1152), (1153, 1162), (1163, 1168), (1169, 1176), (1177, 1184), (1185, 1187), (1188, 1189), (1190, 1193), (1194, 1201), (1202, 1206), (1207, 1209), (1210, 1219), (1219, 1220), (1224, 1231), (1232, 1237), (1238, 1248), (1249, 1253), (1254, 1258), (1258, 1259), (1260, 1264), (1265, 1268), (1269, 1275), (1276, 1285), (1286, 1291), (1292, 1302), (1303, 1310), (1311, 1316), (1317, 1322), (1322, 1323), (1324, 1327), (1328, 1336), (1337, 1338), (1339, 1343), (1343, 1344), (1344, 1345), (1346, 1349), (1350, 1355), (1356, 1359), (1360, 1362), (1363, 1367), (1367, 1368), (1369, 1371), (1372, 1376), (1377, 1384), (1384, 1385), (1386, 1388), (1389, 1397), (1397, 1398), (1399, 1402), (1403, 1406), (1407, 1417), (1418, 1424), (1425, 1429), (1430, 1435), (1435, 1436), (1437, 1439), (1440, 1444), (1445, 1452), (1452, 1453), (1454, 1456), (1457, 1465), (1465, 1466), (1470, 1475), (1476, 1480), (1481, 1484), (1485, 1494), (1495, 1499), (1500, 1502), (1503, 1510), (1511, 1514), (1515, 1522), (1522, 1523), (1524, 1527), (1528, 1533), (1534, 1536), (1537, 1540), (1541, 1550), (1551, 1558), (1559, 1567), (1568, 1572), (1573, 1577), (1578, 1580), (1581, 1585), (1586, 1593), (1594, 1598), (1599, 1603), (1604, 1611), (1612, 1616), (1617, 1623), (1623, 1624), (1625, 1629), (1630, 1639), (1640, 1644), (1645, 1651), (1652, 1654), (1655, 1662), (1663, 1666), (1667, 1670), (1671, 1675), (1676, 1680), (1681, 1682), (1683, 1687), (1688, 1698), (1699, 1705), (1706, 1710), (1711, 1712), (1713, 1721), (1722, 1724), (1725, 1732), (1733, 1740), (1741, 1750), (1751, 1755), (1756, 1766), (1767, 1771), (1772, 1775), (1776, 1780), (1781, 1788), (1789, 1795), (1796, 1806), (1807, 1811), (1812, 1814), (1815, 1821), (1822, 1824), (1825, 1833), (1834, 1843), (1844, 1849), (1850, 1856), (1857, 1859), (1860, 1865), (1866, 1870), (1871, 1879), (1880, 1887), (1888, 1891), (1892, 1897), (1897, 1898), (1899, 1908), (1909, 1918), (1919, 1923), (1924, 1927), (1928, 1934), (1935, 1940), (1941, 1948), (1949, 1952), (1953, 1960), (1961, 1964), (1965, 1967), (1968, 1976), (1977, 1981), (1982, 1985), (1986, 1988), (1989, 1992), (1993, 1998), (1999, 2003), (2004, 2006), (2007, 2010), (2011, 2015), (2015, 2016), (2020, 2023), (2024, 2030), (2031, 2034), (2035, 2040), (2041, 2048), (2049, 2054), (2055, 2060), (2061, 2071), (2071, 2072), (2073, 2078), (2079, 2083), (2084, 2090), (2091, 2095), (2095, 2096), (2100, 2105), (2105, 2106), (2107, 2112), (2113, 2118), (2119, 2123), (2124, 2125), (2125, 2129), (2130, 2132), (2133, 2134), (2134, 2139), (2140, 2143), (2144, 2150), (2151, 2153), (2154, 2157), (2158, 2161), (2162, 2166), (2167, 2177), (2178, 2186), (2187, 2189), (2190, 2194), (2195, 2202), (2203, 2212), (2213, 2216), (2217, 2221), (2222, 2226), (2227, 2231), (2232, 2234), (2235, 2238), (2239, 2245), (2246, 2252), (2252, 2253), (2254, 2261), (2262, 2268), (2269, 2272), (2273, 2280), (2281, 2284), (2285, 2288), (2289, 2296), (2297, 2300), (2300, 2301), (2305, 2309), (2310, 2317), (2318, 2324), (2325, 2332), (2333, 2335), (2336, 2340), (2341, 2344), (2345, 2352), (2353, 2355), (2356, 2365), (2366, 2372), (2373, 2375), (2376, 2380), (2380, 2381), (2382, 2386), (2387, 2393), (2394, 2402), (2403, 2407), (2408, 2411), (2412, 2419), (2420, 2426), (2427, 2428), (2429, 2433), (2434, 2438), (2439, 2440), (2441, 2446), (2447, 2450), (2451, 2460), (2461, 2463), (2464, 2467), (2468, 2473), (2474, 2476), (2476, 2477), (2478, 2482), (2482, 2483), (2484, 2493), (2494, 2501), (2501, 2502), (2503, 2510), (2511, 2516), (2517, 2521), (2522, 2530), (2531, 2533), (2534, 2538), (2538, 2539), (2540, 2549), (2550, 2558), (2559, 2563), (2564, 2568), (2569, 2572), (2573, 2576), (2577, 2582), (2583, 2587), (2588, 2590), (2591, 2593), (2594, 2598), (2598, 2599), (2600, 2608), (2609, 2613), (2614, 2617), (2618, 2625), (2626, 2628), (2629, 2631), (2632, 2636), (2637, 2640), (2641, 2645), (2646, 2654), (2654, 2655), (2656, 2657), (2658, 2665), (2666, 2671), (2672, 2674), (2675, 2682), (2683, 2692), (2693, 2695), (2696, 2699), (2700, 2713), (2714, 2720), (2720, 2721), (2722, 2730), (2730, 2731), (2731, 2732), (2733, 2739), (2740, 2742), (2743, 2747), (2748, 2754), (2755, 2758), (2759, 2764), (2765, 2769), (2770, 2773), (2774, 2780), (2781, 2787), (2788, 2799), (2800, 2802), (2803, 2809), (2810, 2814), (2815, 2820), (2820, 2821), (2825, 2829), (2830, 2836), (2837, 2838), (2839, 2844), (2845, 2847), (2848, 2854), (2854, 2855), (2856, 2868), (2869, 2877), (2878, 2885), (2886, 2888), (2889, 2890), (2891, 2909), (2910, 2913), (2914, 2921), (2922, 2924), (2925, 2933), (2934, 2936), (2937, 2944), (2945, 2953), (2954, 2958), (2959, 2962), (2963, 2964), (2965, 2971), (2972, 2978), (2979, 2987), (2988, 2993), (2993, 2994), (2995, 2998), (2999, 3007), (3008, 3018), (3019, 3027), (3028, 3032), (3033, 3041), (3042, 3050), (3051, 3056), (3057, 3061), (3062, 3064), (3065, 3066), (3067, 3077), (3078, 3086), (3087, 3093), (3094, 3098), (3099, 3101), (3102, 3103), (3103, 3107), (3108, 3116), (3116, 3117), (3121, 3122), (3122, 3131), (3131, 3132), (3133, 3135), (3135, 3136), (3136, 3138), (3139, 3144), (3145, 3147), (3148, 3150), (3151, 3153), (3154, 3160), (3161, 3165), (3166, 3172), (3173, 3175), (3175, 3176), (3176, 3177), (3178, 3180), (3181, 3187), (3188, 3191), (3191, 3192), (3192, 3193), (3194, 3201), (3202, 3206), (3206, 3207), (3208, 3209), (3209, 3213), (3214, 3216), (3217, 3222), (3223, 3224), (3225, 3231), (3232, 3236), (3237, 3240), (3241, 3245), (3246, 3252), (3253, 3262), (3262, 3263), (3267, 3271), (3272, 3276), (3277, 3280), (3281, 3289), (3290, 3298), (3299, 3303), (3304, 3307), (3308, 3313), (3313, 3314), (3314, 3315), (3316, 3323), (3324, 3328), (3329, 3340), (3341, 3346), (3347, 3352), (3353, 3355), (3356, 3364), (3365, 3373), (3374, 3383), (3384, 3388), (3389, 3390), (3391, 3398), (3399, 3405), (3406, 3410), (3411, 3419), (3420, 3426), (3427, 3431), (3431, 3432), (3432, 3433), (3434, 3442), (3443, 3453), (3454, 3459), (3460, 3464), (3465, 3468), (3469, 3476), (3476, 3477), (3478, 3485), (3486, 3489), (3490, 3497), (3497, 3498), (3498, 3499), (3500, 3508), (3509, 3513), (3514, 3520), (3521, 3526), (3527, 3529), (3530, 3534), (3535, 3537), (3538, 3540), (3541, 3543), (3544, 3548), (3549, 3551), (3552, 3553), (3554, 3561), (3561, 3562), (3563, 3567), (3568, 3573), (3574, 3578), (3579, 3580), (3580, 3584), (3584, 3585), (3586, 3588), (3589, 3592), (3593, 3595), (3596, 3597), (3597, 3602), (3602, 3603), (3604, 3609), (3610, 3618), (3619, 3627), (3628, 3629), (3629, 3633), (3633, 3634), (3635, 3637), (3638, 3641), (3642, 3649), (3649, 3650), (3651, 3653), (3654, 3655), (3655, 3660), (3660, 3661), (3665, 3667), (3668, 3677), (3678, 3682), (3682, 3683), (3684, 3696), (3697, 3700), (3700, 3701)]
{0: 0, 1025: 176, 1027: 177, 3078: 550, 7: 1, 1032: 178, 3121: 558, 2387: 427, 13: 2, 2733: 494, 1040: 179, 17: 3, 1044: 180, 3246: 591, 3094: 552, 2071: 366, 25: 4, 2380: 425, 30: 5, 2079: 368, 1057: 182, 35: 6, 1060: 183, 1065: 184, 42: 7, 2055: 364, 3103: 555, 2095: 371, 1072: 185, 49: 8, 3122: 559, 2100: 372, 1078: 186, 2569: 461, 57: 9, 3682: 678, 1083: 187, 2162: 387, 3133: 561, 1086: 188, 63: 10, 3136: 563, 2113: 375, 3139: 564, 1092: 189, 69: 11, 2119: 376, 3145: 565, 74: 12, 2743: 496, 2124: 377, 2125: 378, 1102: 190, 2061: 365, 80: 13, 2130: 379, 2403: 429, 1537: 276, 1109: 191, 86: 14, 1111: 192, 3161: 569, 1115: 193, 2140: 382, 186: 31, 3166: 570, 1119: 194, 96: 15, 2765: 500, 2049: 363, 1623: 290, 1126: 195, 2151: 384, 3176: 573, 105: 16, 2154: 385, 1131: 196, 109: 17, 2158: 386, 1136: 198, 2408: 430, 114: 18, 116: 19, 1141: 199, 3597: 659, 2167: 388, 3192: 578, 3194: 579, 123: 20, 1148: 200, 2800: 505, 1150: 201, 129: 21, 2178: 389, 3206: 581, 3208: 582, 137: 22, 1163: 203, 2190: 391, 2925: 526, 144: 23, 1169: 204, 147: 24, 1812: 321, 151: 25, 1177: 205, 2203: 393, 157: 26, 3108: 556, 3232: 588, 1185: 206, 3099: 553, 1188: 207, 165: 27, 1190: 208, 168: 28, 2217: 395, 1194: 209, 3313: 602, 173: 29, 2222: 396, 176: 30, 3272: 595, 1202: 210, 2227: 397, 2073: 367, 1207: 211, 2232: 398, 2420: 432, 1210: 212, 2235: 399, 3262: 593, 2239: 400, 1568: 280, 194: 32, 1219: 213, 2934: 527, 2246: 401, 1224: 214, 201: 33, 3655: 673, 2252: 402, 3277: 596, 2254: 403, 207: 34, 1232: 215, 3281: 597, 3178: 574, 1238: 216, 216: 35, 2084: 369, 3290: 598, 219: 36, 2269: 405, 223: 37, 1249: 217, 2427: 433, 2598: 468, 1254: 218, 231: 38, 3304: 600, 2281: 407, 1258: 219, 235: 39, 1260: 220, 2285: 408, 2531: 454, 241: 40, 3314: 603, 383: 64, 3316: 604, 1269: 222, 248: 41, 2297: 410, 1919: 338, 1276: 223, 2305: 412, 2091: 370, 2262: 404, 1286: 224, 2600: 469, 3116: 557, 1751: 312, 1292: 225, 3341: 607, 2318: 414, 479: 82, 272: 44, 3521: 638, 3347: 608, 276: 45, 2325: 415, 3541: 643, 1303: 226, 3353: 609, 3665: 675, 3356: 610, 285: 46, 1311: 227, 2336: 417, 1317: 228, 295: 47, 2345: 419, 1322: 229, 1324: 230, 3642: 669, 3374: 612, 3181: 575, 1328: 231, 2353: 420, 306: 49, 3635: 667, 2356: 421, 309: 50, 311: 51, 3384: 613, 1337: 232, 315: 52, 3389: 614, 2366: 422, 1343: 234, 1344: 235, 1346: 236, 324: 53, 2373: 423, 1350: 237, 2273: 406, 2376: 424, 331: 54, 1356: 238, 3589: 656, 2382: 426, 1360: 239, 3365: 611, 339: 55, 341: 56, 1367: 241, 3308: 601, 1369: 242, 2394: 428, 2959: 531, 1372: 243, 349: 57, 352: 58, 1377: 244, 2107: 374, 356: 59, 2730: 492, 1425: 253, 1384: 245, 1386: 246, 363: 60, 2412: 431, 1389: 247, 369: 61, 3443: 624, 372: 62, 1397: 248, 1399: 249, 376: 63, 3476: 629, 1403: 250, 2429: 434, 3391: 615, 1407: 251, 2434: 435, 3460: 626, 3478: 630, 2439: 436, 393: 65, 1418: 252, 3469: 628, 398: 66, 2447: 438, 401: 67, 2451: 439, 3454: 625, 1430: 254, 407: 68, 3267: 594, 1435: 255, 413: 69, 3486: 631, 1440: 257, 417: 70, 3490: 632, 2289: 409, 2468: 442, 1445: 258, 1265: 221, 3497: 633, 2474: 443, 427: 72, 1452: 259, 1454: 260, 1437: 256, 1457: 261, 2482: 446, 3253: 592, 2333: 416, 3509: 636, 439: 73, 1465: 262, 442: 74, 444: 75, 3629: 665, 1470: 263, 448: 76, 2464: 441, 1476: 264, 2501: 449, 3527: 639, 2503: 450, 456: 77, 1612: 288, 3530: 640, 460: 78, 1485: 266, 3399: 616, 2511: 451, 3554: 647, 465: 79, 3538: 642, 2979: 535, 2300: 411, 2641: 477, 1495: 267, 3544: 644, 473: 81, 2522: 453, 3151: 567, 1500: 268, 2914: 524, 421: 71, 3552: 646, 3065: 548, 483: 83, 2534: 455, 1511: 270, 3638: 668, 252: 42, 490: 84, 1515: 271, 2540: 457, 2731: 493, 495: 85, 3568: 650, 1522: 272, 499: 86, 1524: 273, 3324: 605, 2550: 458, 1528: 274, 505: 87, 2815: 508, 508: 88, 3087: 551, 1534: 275, 2133: 380, 3584: 654, 513: 89, 3586: 655, 2564: 460, 1541: 277, 518: 90, 3329: 606, 2461: 440, 2476: 444, 523: 91, 3596: 658, 2573: 462, 1551: 278, 528: 92, 529: 93, 3602: 660, 531: 94, 3604: 661, 2478: 445, 1559: 279, 3154: 568, 2820: 509, 3610: 662, 540: 95, 2591: 466, 544: 96, 2594: 467, 3619: 663, 1573: 281, 550: 97, 2213: 394, 1578: 282, 3628: 664, 1581: 283, 3188: 576, 560: 98, 2609: 470, 1586: 284, 2995: 538, 564: 99, 2654: 479, 2614: 471, 2825: 510, 2484: 447, 1594: 285, 3427: 620, 573: 100, 1599: 286, 2144: 383, 2626: 473, 579: 101, 1604: 287, 2629: 474, 3654: 672, 2031: 360, 2632: 475, 585: 102, 2999: 539, 588: 103, 2637: 476, 3668: 676, 1617: 289, 2577: 463, 2830: 511, 2646: 478, 599: 104, 1625: 291, 3191: 577, 2134: 381, 3514: 637, 1630: 292, 3173: 571, 2441: 437, 2658: 481, 611: 105, 3684: 679, 614: 106, 1640: 293, 618: 107, 3175: 572, 1645: 294, 2672: 483, 625: 108, 626: 109, 2675: 484, 628: 110, 2494: 448, 1655: 296, 633: 111, 635: 112, 2666: 482, 3500: 635, 1663: 297, 3465: 627, 641: 113, 1667: 298, 644: 114, 2693: 486, 1671: 299, 2696: 487, 650: 115, 2839: 513, 1676: 300, 3420: 619, 1133: 197, 656: 116, 1681: 301, 1683: 302, 3148: 566, 662: 117, 1688: 303, 2714: 489, 667: 118, 2720: 490, 3432: 622, 674: 119, 1699: 304, 3649: 670, 2889: 521, 1706: 305, 683: 120, 685: 121, 1711: 306, 1713: 307, 2740: 495, 3535: 641, 1481: 265, 1652: 295, 1722: 308, 2748: 497, 1725: 309, 262: 43, 2755: 498, 708: 122, 1733: 310, 2759: 499, 715: 123, 2105: 373, 1741: 311, 718: 124, 2770: 501, 2774: 502, 727: 125, 1999: 353, 1756: 313, 2781: 503, 2341: 418, 3431: 621, 2683: 485, 2788: 504, 741: 126, 1767: 314, 746: 127, 1772: 315, 750: 128, 1776: 316, 3135: 562, 2803: 506, 3697: 680, 1781: 317, 760: 129, 3028: 542, 2810: 507, 764: 130, 1789: 318, 2517: 452, 2310: 413, 771: 131, 1796: 319, 1153: 202, 2583: 464, 300: 48, 471: 80, 3202: 580, 782: 132, 1807: 320, 786: 133, 1049: 181, 2837: 512, 790: 134, 1815: 322, 792: 135, 2845: 514, 1822: 323, 2848: 515, 1825: 324, 2618: 472, 2854: 516, 3299: 599, 2856: 517, 1834: 325, 813: 136, 3549: 645, 1844: 326, 821: 137, 3209: 583, 824: 138, 1850: 327, 1503: 269, 2878: 519, 2869: 518, 3660: 674, 1857: 328, 3633: 666, 2187: 390, 1860: 329, 837: 139, 2886: 520, 3067: 549, 2700: 488, 1866: 330, 2891: 522, 3574: 651, 845: 140, 1871: 331, 3131: 560, 850: 141, 851: 142, 3214: 584, 855: 143, 1880: 332, 3651: 671, 859: 144, 3498: 634, 2910: 523, 3579: 652, 1888: 333, 866: 145, 1339: 233, 1892: 334, 870: 146, 3217: 585, 1897: 335, 2922: 525, 1899: 336, 877: 147, 882: 148, 2195: 392, 1909: 337, 2007: 355, 3561: 648, 2937: 528, 891: 149, 3678: 677, 2538: 456, 895: 150, 2945: 529, 3563: 649, 1924: 339, 1928: 340, 2954: 530, 3223: 586, 908: 151, 3411: 618, 1935: 341, 913: 152, 2963: 532, 1941: 342, 918: 153, 3225: 587, 3593: 657, 2656: 480, 923: 154, 2972: 534, 1949: 343, 2588: 465, 1953: 344, 931: 155, 932: 156, 934: 157, 1961: 345, 3434: 623, 939: 158, 2988: 536, 1965: 346, 942: 159, 1968: 347, 2993: 537, 2035: 361, 949: 160, 951: 161, 1977: 348, 957: 162, 1982: 349, 3008: 540, 3237: 589, 1986: 350, 964: 163, 1989: 351, 1993: 352, 3580: 653, 3019: 541, 2722: 491, 975: 164, 978: 165, 2004: 354, 3406: 617, 983: 166, 2965: 533, 3033: 543, 2011: 356, 990: 167, 2015: 357, 992: 168, 993: 169, 3042: 544, 995: 170, 2020: 358, 3700: 681, 2024: 359, 1001: 171, 3102: 554, 3051: 545, 1007: 172, 3057: 546, 1010: 173, 1363: 240, 1013: 174, 3062: 547, 3241: 590, 2041: 362, 2559: 459, 1021: 175}
{1024: 175, 1536: 275, 1026: 176, 3077: 549, 6: 0, 1031: 177, 2732: 493, 12: 1, 3086: 550, 1039: 178, 16: 2, 1043: 179, 2699: 487, 3093: 551, 2071: 365, 24: 3, 3588: 655, 3098: 552, 3240: 589, 29: 4, 2078: 367, 3103: 554, 1056: 181, 3513: 636, 34: 5, 1059: 182, 2054: 363, 40: 6, 382: 63, 3116: 556, 3117: 557, 1071: 184, 48: 7, 3592: 656, 3122: 558, 2739: 494, 3650: 670, 2593: 466, 1078: 185, 1079: 186, 56: 8, 2105: 372, 2106: 373, 3131: 559, 3132: 560, 1085: 187, 62: 9, 3135: 561, 2112: 374, 3187: 575, 3138: 563, 1091: 188, 68: 10, 2048: 362, 2730: 491, 3144: 564, 73: 11, 2123: 376, 1101: 189, 3150: 566, 79: 12, 2129: 378, 2132: 379, 85: 13, 1110: 191, 185: 30, 3160: 568, 1114: 192, 2139: 381, 3165: 569, 1118: 193, 95: 14, 2576: 462, 3172: 570, 101: 15, 2150: 383, 3175: 571, 3176: 572, 2153: 384, 1131: 195, 108: 16, 2157: 385, 3497: 632, 1135: 197, 113: 17, 115: 18, 1140: 198, 3262: 592, 2166: 387, 2868: 517, 3192: 577, 2530: 453, 122: 19, 1148: 199, 1149: 200, 128: 20, 2177: 388, 2440: 436, 2582: 463, 3206: 580, 3207: 581, 136: 21, 2924: 525, 1162: 202, 2189: 390, 3653: 671, 143: 22, 1168: 203, 1048: 180, 146: 23, 3431: 620, 150: 24, 1176: 204, 2202: 392, 156: 25, 3231: 587, 1184: 205, 1187: 206, 164: 26, 1189: 207, 167: 27, 2216: 394, 1193: 208, 3271: 594, 172: 28, 2221: 395, 3107: 555, 175: 29, 3553: 646, 1201: 209, 2226: 396, 2419: 431, 3252: 591, 1206: 210, 2231: 397, 1209: 211, 2234: 398, 1567: 279, 2238: 399, 3263: 593, 193: 31, 1219: 212, 1220: 213, 2245: 400, 2463: 440, 200: 32, 2764: 499, 3655: 672, 2252: 401, 2253: 402, 206: 33, 1231: 214, 3280: 596, 1132: 196, 2083: 368, 1237: 215, 215: 34, 3289: 597, 218: 35, 2268: 404, 2426: 432, 222: 36, 1248: 216, 3298: 598, 1253: 217, 230: 37, 3303: 599, 2280: 406, 234: 38, 1259: 219, 2284: 407, 3453: 624, 240: 39, 1064: 183, 3314: 602, 3315: 603, 1268: 221, 894: 149, 247: 40, 2296: 409, 1275: 222, 2300: 410, 2090: 369, 2261: 403, 3328: 605, 2944: 528, 3567: 649, 261: 42, 3459: 625, 1291: 224, 3340: 606, 2317: 413, 271: 43, 3602: 659, 3180: 574, 3346: 607, 275: 44, 2324: 414, 1302: 225, 3352: 608, 3419: 618, 2095: 370, 284: 45, 1310: 226, 2335: 416, 2096: 371, 1316: 227, 294: 46, 3633: 665, 2344: 418, 3432: 621, 1322: 228, 1323: 229, 3373: 611, 1327: 230, 2352: 419, 305: 48, 3147: 565, 2355: 420, 309: 49, 310: 50, 3323: 604, 1336: 231, 314: 51, 3388: 613, 2365: 421, 3390: 614, 1343: 233, 1344: 234, 1345: 235, 323: 52, 2372: 422, 1349: 236, 2909: 522, 2375: 423, 3468: 627, 330: 53, 1355: 237, 498: 85, 2381: 425, 335: 54, 1750: 311, 3489: 631, 1362: 239, 340: 55, 2958: 530, 1367: 240, 1368: 241, 2393: 427, 1371: 242, 348: 56, 3701: 681, 351: 57, 1376: 243, 1424: 252, 2402: 428, 355: 58, 2655: 479, 2407: 429, 1384: 244, 1385: 245, 362: 59, 2411: 430, 1388: 246, 368: 60, 3442: 623, 371: 61, 1397: 247, 1398: 248, 375: 62, 2964: 532, 1402: 249, 2428: 433, 1258: 218, 1406: 250, 3477: 629, 2433: 434, 3307: 600, 2438: 435, 3649: 669, 392: 64, 1417: 251, 3216: 584, 397: 65, 2446: 437, 400: 66, 2450: 438, 3476: 628, 1429: 253, 406: 67, 1435: 254, 412: 68, 3485: 630, 1439: 256, 416: 69, 1264: 220, 2467: 441, 1444: 257, 2118: 375, 2844: 513, 3313: 601, 3276: 595, 1436: 255, 426: 71, 3499: 634, 1452: 258, 1453: 259, 2060: 364, 1456: 260, 2482: 445, 2483: 446, 3508: 635, 438: 72, 1465: 261, 1466: 262, 443: 74, 2493: 447, 447: 75, 3520: 637, 1611: 287, 2501: 448, 2502: 449, 455: 76, 1480: 264, 3529: 639, 3562: 648, 1484: 265, 461: 78, 2510: 450, 2125: 377, 3537: 641, 2516: 451, 1285: 223, 471: 79, 472: 80, 420: 70, 1499: 267, 3548: 644, 478: 81, 3551: 645, 2640: 476, 482: 82, 251: 41, 2533: 454, 1510: 269, 3153: 567, 489: 83, 1514: 270, 2539: 456, 3426: 619, 494: 84, 2301: 411, 1522: 271, 1523: 272, 3177: 573, 2549: 457, 1527: 273, 504: 86, 3578: 651, 507: 87, 3580: 652, 1533: 274, 2558: 458, 1109: 190, 512: 88, 3585: 654, 2563: 459, 1540: 276, 517: 89, 2568: 460, 2476: 443, 522: 90, 3595: 657, 2572: 461, 3597: 658, 1550: 277, 2072: 366, 528: 91, 529: 92, 530: 93, 3603: 660, 1558: 278, 3609: 661, 539: 94, 2590: 465, 543: 95, 2473: 442, 3618: 662, 1572: 280, 549: 96, 2598: 467, 2599: 468, 1577: 281, 3627: 663, 1580: 282, 3629: 664, 559: 97, 2608: 469, 1585: 283, 3634: 666, 563: 98, 2613: 470, 1593: 284, 2143: 382, 572: 99, 1598: 285, 2625: 472, 578: 100, 1603: 286, 2628: 473, 2998: 538, 3410: 617, 2631: 474, 584: 101, 587: 102, 2636: 475, 3661: 674, 2829: 510, 1616: 288, 3584: 653, 3667: 675, 2645: 477, 598: 103, 1623: 289, 1624: 290, 2134: 380, 1629: 291, 2654: 478, 1125: 194, 2657: 480, 610: 104, 3683: 678, 3364: 610, 613: 105, 1639: 292, 617: 106, 1644: 293, 2671: 482, 3696: 679, 625: 107, 626: 108, 627: 109, 3700: 680, 3660: 673, 1654: 295, 2309: 412, 633: 110, 634: 111, 3064: 547, 1662: 296, 640: 112, 1666: 297, 643: 113, 2692: 485, 2838: 512, 1670: 298, 1985: 349, 649: 114, 1675: 299, 2272: 405, 655: 115, 1680: 300, 1682: 301, 1475: 263, 661: 116, 1687: 302, 3534: 640, 2477: 444, 666: 117, 2773: 501, 2720: 489, 673: 118, 1698: 303, 3355: 609, 3398: 615, 3526: 638, 2161: 386, 1705: 304, 682: 119, 2731: 492, 684: 120, 2674: 483, 1710: 305, 2921: 524, 1712: 306, 1651: 294, 2799: 504, 2288: 408, 2742: 495, 1721: 307, 2747: 496, 1724: 308, 3433: 622, 2754: 497, 707: 121, 1732: 309, 2758: 498, 2821: 509, 460: 77, 714: 122, 3191: 576, 1740: 310, 717: 123, 2030: 359, 2769: 500, 1998: 352, 726: 124, 3193: 578, 2340: 417, 1755: 312, 2780: 502, 2682: 484, 2787: 503, 740: 125, 1766: 313, 745: 126, 1771: 314, 749: 127, 1775: 315, 2802: 505, 3027: 541, 1780: 316, 759: 128, 2809: 506, 3637: 667, 763: 129, 1788: 317, 2814: 507, 3236: 588, 1152: 201, 770: 130, 1795: 318, 2820: 508, 1494: 266, 3201: 579, 3543: 643, 781: 131, 1806: 319, 785: 132, 1811: 320, 2836: 511, 789: 133, 1814: 321, 791: 134, 299: 47, 2460: 439, 2617: 471, 1821: 322, 2847: 514, 1824: 323, 3641: 668, 2854: 515, 2855: 516, 1833: 324, 2695: 486, 812: 135, 1843: 325, 820: 136, 1502: 268, 823: 137, 3682: 677, 1849: 326, 2015: 356, 2186: 389, 1856: 327, 1859: 328, 836: 138, 2885: 519, 2665: 481, 3041: 543, 2888: 520, 1865: 329, 2890: 521, 3383: 612, 3540: 642, 845: 139, 846: 140, 3213: 583, 851: 141, 854: 142, 1879: 331, 2006: 354, 858: 143, 3498: 633, 1338: 232, 3677: 676, 1887: 332, 865: 144, 1891: 333, 3573: 650, 869: 145, 1897: 334, 1898: 335, 876: 146, 2194: 391, 2877: 518, 881: 147, 1908: 336, 2933: 526, 3561: 647, 2936: 527, 3245: 590, 890: 148, 2538: 455, 1918: 337, 2587: 464, 1923: 338, 3222: 585, 1927: 339, 2953: 529, 907: 150, 3136: 562, 1934: 340, 912: 151, 3224: 586, 2962: 531, 1940: 341, 917: 152, 2713: 488, 922: 153, 2971: 533, 1948: 342, 1952: 343, 2978: 534, 931: 154, 932: 155, 933: 156, 3464: 626, 1960: 344, 938: 157, 2987: 535, 1964: 345, 941: 158, 1967: 346, 2993: 536, 2994: 537, 949: 159, 950: 160, 2913: 523, 1976: 347, 956: 161, 1981: 348, 3007: 539, 441: 73, 2521: 452, 963: 162, 1988: 350, 2721: 490, 1992: 351, 2380: 424, 3018: 540, 3101: 553, 3209: 582, 974: 163, 3405: 616, 977: 164, 2003: 353, 1870: 330, 982: 165, 3032: 542, 2212: 393, 2010: 355, 1359: 238, 990: 166, 991: 167, 2016: 357, 993: 168, 994: 169, 2023: 358, 1000: 170, 3050: 544, 2386: 426, 1006: 171, 3056: 545, 1009: 172, 2034: 360, 1012: 173, 3061: 546, 2040: 361, 3066: 548, 1020: 174, 2332: 415}
given spans fix. original text:  Stocks start new trading year with rally 
Market indexes surge after Home Depot chief executive quits 
 
NEW YORK - Stocks moved soundly higher in the first session of 2007 as investors cheered mostly solid readings on the economy and found reason for increased prospects for big-name retailers Home Depot Inc. and Wal-Mart Stores Inc. 
 
A decline in oil prices added to the strong sentiment that at times drove the Dow Jones industrials to a new trading high. 
 
Stocks, which had surged from the start on word that Home Depot’s chairman and chief executive had resigned after years of lackluster performance in the company’s stock, added to their gains after Wall Street received a stronger-than-expected report on December manufacturing from the Institute for Supply Management and saw a softer-than-expected decline in construction spending. 
 
“The ISM number was better than expected and construction fell less than expected,” said Al Goldman, chief market strategist at A.G. Edwards. “I think those of us looking for a soft landing had more support on that stance today.” 
 
In early afternoon trading, the Dow surged 96.53, or 0.77 percent, to 12,559.68 after jumping earlier to a new trading high of 12,580.35. 
 
Broader stock indicators also rose, with the Nasdaq composite index especially showing sharp gains. The Standard & Poor’s 500 index was up 7.94, or 0.56 percent, at 1,426.24, and the tech-laden Nasdaq rose 32.92, or 1.36 percent, to 2,448.21. 
 
Bonds rose but retreated from an earlier big advance; the yield on the benchmark 10-year Treasury note fell to 4.68 percent from 4.71 percent late Friday. Bond investors were trying to balance the ISM news with a weak employment report from a division of payroll company Automatic Data Processing Inc. ADP said private sector employment fell by 40,000 in December following three months of gains that averaged 121,000 per month; investors theorized that the report might improve the chances for an interest rate cut in the early part of the year. 
 
The dollar was mixed against other major currencies, while gold prices fell. 
 
Light, sweet crude fell $2.44 to $58.61 per barrel on the New York Mercantile Exchange as mild weather continued its hold over much of the United States, cutting demand for heating oil and natural gas. 
 
With markets closed Tuesday to mark the funeral of President Gerald R. Ford, Wall Street returned from its longest hiatus — four days — since the aftermath of the Sept. 11, 2001, terrorist attacks. Shortly after they returned to work, investors received word that the ISM index came in at 51.4, stronger than the reading of 50 that had been expected. A reading above 50 signals expansion in the manufacturing sector; November’s figure of 49.5 marked the first time the report showed contraction in nearly four years. 
 
Also giving a boost to stocks, construction spending dropped by a less-than-expected 0.2 percent in November as housing activity fell for a record eighth straight month. The Commerce Department reported that building activity edged down to a seasonally adjusted annual rate of $1.18 trillion. 
 
“Basically, we’re still in an up market even though it’s 51 months old,” Goldman said. “This is still a market that has good upside momentum.” 
 
News that Bob Nardelli resigned from the world’s largest home improvement chain added to positive investor sentiment from a weekend report that Wal-Mart Stores Inc.’s December same-store sales rose 1.6 percent, topping the company’s forecast that growth would be flat or up as much as 1 percent. Home Depot rose $1.35, or 3.4 to $41.51, while Wal-Mart advanced $1.53, or 3.3 percent, to $47.71. 
 
In corporate news, Cytokinetics Inc. surged $1.05, or 14 percent, to $8.53 on news it would work with Amgen Inc. to develop drugs to combat heart failure. Amgen rose 72 cents to $69.03. 
 
Sirius Satellite Radio Inc. rose 27 cents, or 7.6 percent, to $3.81 after the radio service said its subscriber base jumped 82 percent to more than 6 million last year. 
 
Goodyear Tire & Rubber Co. advanced $1.79, or 8.5 percent, to $22.78 and moved as high as $22.77 to surpass a 52-week high of $21.35 after a three-month strike that had hurt production ended. 
 
Home builders were weaker after Lennar Corp., the biggest U.S. builder, warned that it expects to post a loss in the fourth quarter and its chief executive said he see no signs of a recovery in the housing market. Lennar fell $1.40, or 2.7 percent, to $51.06. 
 
Advancing issues outnumbered decliners by about 2 to 1 on the New York Stock Exchange, where volume came to 1.13 billion shares, compared with 430.7 million traded at the same point Friday, a day of anemic volume ahead of the New Year’s holiday. 
 
The Russell 2000 index of smaller companies was up 5.96, or 0.76 percent, at 793.62. 
 
Overseas, Japan’s Nikkei stock average rose 0.01 percent. Britain’s FTSE 100 closed up 0.13 percent, Germany’s DAX index was up 0.15 percent, and France’s CAC-40 was down 0.12 percent. 



original word:  Inc. Inc.
new split:  Inc  and  .
[(0, 6), (7, 12), (13, 16), (17, 24), (25, 29), (30, 34), (35, 40), (42, 48), (49, 56), (57, 62), (63, 68), (69, 73), (74, 79), (80, 85), (86, 95), (96, 101), (105, 108), (109, 113), (114, 115), (116, 122), (123, 128), (129, 136), (137, 143), (144, 146), (147, 150), (151, 156), (157, 164), (165, 167), (168, 172), (173, 175), (176, 185), (186, 193), (194, 200), (201, 206), (207, 215), (216, 218), (219, 222), (223, 230), (231, 234), (235, 240), (241, 247), (248, 251), (252, 261), (262, 271), (272, 275), (276, 284), (285, 294), (295, 299), (300, 305), (306, 309), (309, 310), (311, 314), (315, 323), (324, 330), (331, 335), (339, 340), (341, 348), (349, 351), (352, 355), (356, 362), (363, 368), (369, 371), (372, 375), (376, 382), (383, 392), (393, 397), (398, 400), (401, 406), (407, 412), (413, 416), (417, 420), (421, 426), (427, 438), (439, 441), (442, 443), (444, 447), (448, 455), (456, 460), (460, 461), (465, 471), (471, 472), (473, 478), (479, 482), (483, 489), (490, 494), (495, 498), (499, 504), (505, 507), (508, 512), (513, 517), (518, 522), (523, 528), (528, 529), (529, 530), (531, 539), (540, 543), (544, 549), (550, 559), (560, 563), (564, 572), (573, 578), (579, 584), (585, 587), (588, 598), (599, 610), (611, 613), (614, 617), (618, 625), (625, 626), (626, 627), (628, 633), (633, 634), (635, 640), (641, 643), (644, 649), (650, 655), (656, 661), (662, 666), (667, 673), (674, 682), (683, 684), (685, 707), (708, 714), (715, 717), (718, 726), (727, 740), (741, 745), (746, 749), (750, 759), (760, 763), (764, 770), (771, 781), (782, 785), (786, 789), (790, 791), (792, 812), (813, 820), (821, 823), (824, 836), (837, 845), (845, 846), (850, 851), (851, 854), (855, 858), (859, 865), (866, 869), (870, 876), (877, 881), (882, 890), (891, 894), (895, 907), (908, 912), (913, 917), (918, 922), (923, 931), (931, 932), (932, 933), (934, 938), (939, 941), (942, 949), (949, 950), (951, 956), (957, 963), (964, 974), (975, 977), (978, 982), (983, 990), (990, 991), (992, 993), (993, 994), (995, 1000), (1001, 1006), (1007, 1009), (1010, 1012), (1013, 1020), (1021, 1024), (1025, 1026), (1027, 1031), (1032, 1039), (1040, 1043), (1044, 1048), (1049, 1056), (1057, 1059), (1060, 1064), (1065, 1071), (1072, 1078), (1078, 1079), (1083, 1085), (1086, 1091), (1092, 1101), (1102, 1109), (1109, 1110), (1111, 1114), (1115, 1118), (1119, 1125), (1126, 1131), (1131, 1132), (1133, 1135), (1136, 1140), (1141, 1148), (1148, 1149), (1150, 1152), (1153, 1162), (1163, 1168), (1169, 1176), (1177, 1184), (1185, 1187), (1188, 1189), (1190, 1193), (1194, 1201), (1202, 1206), (1207, 1209), (1210, 1219), (1219, 1220), (1224, 1231), (1232, 1237), (1238, 1248), (1249, 1253), (1254, 1258), (1258, 1259), (1260, 1264), (1265, 1268), (1269, 1275), (1276, 1285), (1286, 1291), (1292, 1302), (1303, 1310), (1311, 1316), (1317, 1322), (1322, 1323), (1324, 1327), (1328, 1336), (1337, 1338), (1339, 1343), (1343, 1344), (1344, 1345), (1346, 1349), (1350, 1355), (1356, 1359), (1360, 1362), (1363, 1367), (1367, 1368), (1369, 1371), (1372, 1376), (1377, 1384), (1384, 1385), (1386, 1388), (1389, 1397), (1397, 1398), (1399, 1402), (1403, 1406), (1407, 1417), (1418, 1424), (1425, 1429), (1430, 1435), (1435, 1436), (1437, 1439), (1440, 1444), (1445, 1452), (1452, 1453), (1454, 1456), (1457, 1465), (1465, 1466), (1470, 1475), (1476, 1480), (1481, 1484), (1485, 1494), (1495, 1499), (1500, 1502), (1503, 1510), (1511, 1514), (1515, 1522), (1522, 1523), (1524, 1527), (1528, 1533), (1534, 1536), (1537, 1540), (1541, 1550), (1551, 1558), (1559, 1567), (1568, 1572), (1573, 1577), (1578, 1580), (1581, 1585), (1586, 1593), (1594, 1598), (1599, 1603), (1604, 1611), (1612, 1616), (1617, 1623), (1623, 1624), (1625, 1629), (1630, 1639), (1640, 1644), (1645, 1651), (1652, 1654), (1655, 1662), (1663, 1666), (1667, 1670), (1671, 1675), (1676, 1680), (1681, 1682), (1683, 1687), (1688, 1698), (1699, 1705), (1706, 1710), (1711, 1712), (1713, 1721), (1722, 1724), (1725, 1732), (1733, 1740), (1741, 1750), (1751, 1755), (1756, 1766), (1767, 1771), (1772, 1775), (1776, 1780), (1781, 1788), (1789, 1795), (1796, 1806), (1807, 1811), (1812, 1814), (1815, 1821), (1822, 1824), (1825, 1833), (1834, 1843), (1844, 1849), (1850, 1856), (1857, 1859), (1860, 1865), (1866, 1870), (1871, 1879), (1880, 1887), (1888, 1891), (1892, 1897), (1897, 1898), (1899, 1908), (1909, 1918), (1919, 1923), (1924, 1927), (1928, 1934), (1935, 1940), (1941, 1948), (1949, 1952), (1953, 1960), (1961, 1964), (1965, 1967), (1968, 1976), (1977, 1981), (1982, 1985), (1986, 1988), (1989, 1992), (1993, 1998), (1999, 2003), (2004, 2006), (2007, 2010), (2011, 2015), (2015, 2016), (2020, 2023), (2024, 2030), (2031, 2034), (2035, 2040), (2041, 2048), (2049, 2054), (2055, 2060), (2061, 2071), (2071, 2072), (2073, 2078), (2079, 2083), (2084, 2090), (2091, 2095), (2095, 2096), (2100, 2105), (2105, 2106), (2107, 2112), (2113, 2118), (2119, 2123), (2124, 2125), (2125, 2129), (2130, 2132), (2133, 2134), (2134, 2139), (2140, 2143), (2144, 2150), (2151, 2153), (2154, 2157), (2158, 2161), (2162, 2166), (2167, 2177), (2178, 2186), (2187, 2189), (2190, 2194), (2195, 2202), (2203, 2212), (2213, 2216), (2217, 2221), (2222, 2226), (2227, 2231), (2232, 2234), (2235, 2238), (2239, 2245), (2246, 2252), (2252, 2253), (2254, 2261), (2262, 2268), (2269, 2272), (2273, 2280), (2281, 2284), (2285, 2288), (2289, 2296), (2297, 2300), (2300, 2301), (2305, 2309), (2310, 2317), (2318, 2324), (2325, 2332), (2333, 2335), (2336, 2340), (2341, 2344), (2345, 2352), (2353, 2355), (2356, 2365), (2366, 2372), (2373, 2375), (2376, 2380), (2380, 2381), (2382, 2386), (2387, 2393), (2394, 2402), (2403, 2407), (2408, 2411), (2412, 2419), (2420, 2426), (2427, 2428), (2429, 2433), (2434, 2438), (2439, 2440), (2441, 2446), (2447, 2450), (2451, 2460), (2461, 2463), (2464, 2467), (2468, 2473), (2474, 2476), (2476, 2477), (2478, 2482), (2482, 2483), (2484, 2493), (2494, 2501), (2501, 2502), (2503, 2510), (2511, 2516), (2517, 2521), (2522, 2530), (2531, 2533), (2534, 2538), (2538, 2539), (2540, 2549), (2550, 2558), (2559, 2563), (2564, 2568), (2569, 2572), (2573, 2576), (2577, 2582), (2583, 2587), (2588, 2590), (2591, 2593), (2594, 2598), (2598, 2599), (2600, 2608), (2609, 2613), (2614, 2617), (2618, 2625), (2626, 2628), (2629, 2631), (2632, 2636), (2637, 2640), (2641, 2645), (2646, 2654), (2654, 2655), (2656, 2657), (2658, 2665), (2666, 2671), (2672, 2674), (2675, 2682), (2683, 2692), (2693, 2695), (2696, 2699), (2700, 2713), (2714, 2720), (2720, 2721), (2722, 2730), (2730, 2731), (2731, 2732), (2733, 2739), (2740, 2742), (2743, 2747), (2748, 2754), (2755, 2758), (2759, 2764), (2765, 2769), (2770, 2773), (2774, 2780), (2781, 2787), (2788, 2799), (2800, 2802), (2803, 2809), (2810, 2814), (2815, 2820), (2820, 2821), (2825, 2829), (2830, 2836), (2837, 2838), (2839, 2844), (2845, 2847), (2848, 2854), (2854, 2855), (2856, 2868), (2869, 2877), (2878, 2885), (2886, 2888), (2889, 2890), (2891, 2909), (2910, 2913), (2914, 2921), (2922, 2924), (2925, 2933), (2934, 2936), (2937, 2944), (2945, 2953), (2954, 2958), (2959, 2962), (2963, 2964), (2965, 2971), (2972, 2978), (2979, 2987), (2988, 2993), (2993, 2994), (2995, 2998), (2999, 3007), (3008, 3018), (3019, 3027), (3028, 3032), (3033, 3041), (3042, 3050), (3051, 3056), (3057, 3061), (3062, 3064), (3065, 3066), (3067, 3077), (3078, 3086), (3087, 3093), (3094, 3098), (3099, 3101), (3102, 3103), (3103, 3107), (3108, 3116), (3116, 3117), (3121, 3122), (3122, 3131), (3131, 3132), (3133, 3135), (3135, 3136), (3136, 3138), (3139, 3144), (3145, 3147), (3148, 3150), (3151, 3153), (3154, 3160), (3161, 3165), (3166, 3172), (3173, 3175), (3175, 3176), (3176, 3177), (3178, 3180), (3181, 3187), (3188, 3191), (3191, 3192), (3192, 3193), (3194, 3201), (3202, 3206), (3206, 3207), (3208, 3209), (3209, 3213), (3214, 3216), (3217, 3222), (3223, 3224), (3225, 3231), (3232, 3236), (3237, 3240), (3241, 3245), (3246, 3252), (3253, 3262), (3262, 3263), (3267, 3271), (3272, 3276), (3277, 3280), (3281, 3289), (3290, 3298), (3299, 3303), (3304, 3307), (3308, 3313), (3313, 3314), (3314, 3315), (3316, 3323), (3324, 3328), (3329, 3340), (3341, 3346), (3347, 3352), (3353, 3355), (3356, 3364), (3365, 3373), (3374, 3383), (3384, 3388), (3389, 3390), (3391, 3398), (3399, 3405), (3406, 3410), (3411, 3419), (3420, 3426), (3427, 3431), (3431, 3432), (3432, 3433), (3434, 3442), (3443, 3453), (3454, 3459), (3460, 3464), (3465, 3468), (3469, 3476), (3476, 3477), (3478, 3485), (3486, 3489), (3490, 3497), (3497, 3498), (3498, 3499), (3500, 3508), (3509, 3513), (3514, 3520), (3521, 3526), (3527, 3529), (3530, 3534), (3535, 3537), (3538, 3540), (3541, 3543), (3544, 3548), (3549, 3551), (3552, 3553), (3554, 3561), (3561, 3562), (3563, 3567), (3568, 3573), (3574, 3578), (3579, 3580), (3580, 3584), (3584, 3585), (3586, 3588), (3589, 3592), (3593, 3595), (3596, 3597), (3597, 3602), (3602, 3603), (3604, 3609), (3610, 3618), (3619, 3627), (3628, 3629), (3629, 3633), (3633, 3634), (3635, 3637), (3638, 3641), (3642, 3649), (3649, 3650), (3651, 3653), (3654, 3655), (3655, 3660), (3660, 3661), (3665, 3667), (3668, 3677), (3678, 3682), (3682, 3683), (3684, 3696), (3697, 3700), (3700, 3701), (3702, 3708), (3709, 3710), (3710, 3714), (3714, 3715), (3716, 3718), (3719, 3721), (3722, 3729), (3729, 3730), (3731, 3733), (3734, 3735), (3735, 3739), (3740, 3742), (3743, 3747), (3748, 3750), (3751, 3756), (3757, 3761), (3762, 3766), (3767, 3772), (3773, 3776), (3776, 3777)]
{0: 0, 2049: 363, 683: 120, 7: 1, 13: 2, 685: 121, 17: 3, 2071: 366, 25: 4, 1711: 306, 30: 5, 2079: 368, 35: 6, 2084: 369, 3420: 619, 42: 7, 2055: 364, 2095: 371, 49: 8, 2100: 372, 57: 9, 2107: 374, 63: 10, 2113: 375, 69: 11, 2119: 376, 74: 12, 2124: 377, 2125: 378, 2061: 365, 80: 13, 2130: 379, 2133: 380, 86: 14, 2140: 382, 96: 15, 2151: 384, 105: 16, 2154: 385, 109: 17, 2158: 386, 3773: 700, 3432: 622, 2162: 387, 116: 19, 2167: 388, 123: 20, 3434: 623, 129: 21, 2178: 389, 137: 22, 2187: 390, 2190: 391, 144: 23, 147: 24, 151: 25, 2203: 393, 157: 26, 165: 27, 168: 28, 2217: 395, 173: 29, 2222: 396, 176: 30, 2227: 397, 2232: 398, 372: 62, 186: 31, 2235: 399, 2239: 400, 194: 32, 2246: 401, 201: 33, 2252: 402, 2254: 403, 207: 34, 2262: 404, 216: 35, 3108: 556, 219: 36, 2269: 405, 223: 37, 2273: 406, 231: 38, 2281: 407, 235: 39, 2285: 408, 241: 40, 248: 41, 2297: 410, 2300: 411, 2305: 412, 2091: 370, 262: 43, 2318: 414, 272: 44, 276: 45, 2325: 415, 285: 46, 2336: 417, 2341: 418, 295: 47, 2345: 419, 300: 48, 2353: 420, 306: 49, 2356: 421, 309: 50, 311: 51, 315: 52, 2366: 422, 324: 53, 2373: 423, 2376: 424, 331: 54, 2380: 425, 2382: 426, 2387: 427, 341: 56, 2105: 373, 2394: 428, 349: 57, 352: 58, 2403: 429, 356: 59, 2408: 430, 363: 60, 2412: 431, 369: 61, 2420: 432, 376: 63, 2427: 433, 2429: 434, 383: 64, 2434: 435, 1430: 254, 2439: 436, 393: 65, 398: 66, 2447: 438, 401: 67, 2451: 439, 407: 68, 413: 69, 2464: 441, 417: 70, 2468: 442, 421: 71, 2474: 443, 427: 72, 2476: 444, 2478: 445, 2461: 440, 2482: 446, 2484: 447, 439: 73, 442: 74, 444: 75, 2494: 448, 448: 76, 2501: 449, 2503: 450, 456: 77, 460: 78, 2511: 451, 465: 79, 2517: 452, 471: 80, 473: 81, 2522: 453, 479: 82, 2531: 454, 2534: 455, 490: 84, 2540: 457, 495: 85, 499: 86, 2550: 458, 505: 87, 508: 88, 2559: 459, 513: 89, 2564: 460, 2134: 381, 518: 90, 2569: 461, 523: 91, 2573: 462, 528: 92, 529: 93, 531: 94, 2583: 464, 540: 95, 2591: 466, 544: 96, 2594: 467, 2598: 468, 2600: 469, 560: 98, 2609: 470, 564: 99, 2614: 471, 2618: 472, 573: 100, 2144: 383, 2626: 473, 579: 101, 2629: 474, 2632: 475, 585: 102, 588: 103, 2637: 476, 2641: 477, 782: 132, 2646: 478, 599: 104, 2654: 479, 2656: 480, 2658: 481, 611: 105, 614: 106, 618: 107, 3175: 572, 2672: 483, 625: 108, 626: 109, 2675: 484, 628: 110, 633: 111, 635: 112, 641: 113, 644: 114, 2693: 486, 2696: 487, 650: 115, 2700: 488, 1133: 197, 656: 116, 662: 117, 2714: 489, 3500: 635, 2720: 490, 674: 119, 2730: 492, 2731: 493, 2733: 494, 2740: 495, 2743: 496, 2748: 497, 2755: 498, 708: 122, 2759: 499, 715: 123, 2765: 500, 718: 124, 2770: 501, 2774: 502, 727: 125, 2781: 503, 2788: 504, 741: 126, 746: 127, 750: 128, 2800: 505, 2803: 506, 760: 129, 2810: 507, 764: 130, 2815: 508, 771: 131, 2820: 509, 2825: 510, 2830: 511, 786: 133, 2837: 512, 790: 134, 2839: 513, 792: 135, 2845: 514, 2848: 515, 2854: 516, 2856: 517, 813: 136, 2073: 367, 821: 137, 824: 138, 2878: 519, 2869: 518, 837: 139, 2886: 520, 2889: 521, 2891: 522, 845: 140, 850: 141, 483: 83, 855: 143, 859: 144, 2910: 523, 2914: 524, 870: 146, 3217: 585, 2922: 525, 2925: 526, 882: 148, 2195: 392, 2934: 527, 3561: 648, 2937: 528, 891: 149, 2538: 456, 895: 150, 2945: 529, 3563: 649, 2954: 530, 908: 151, 2959: 531, 913: 152, 2963: 532, 2965: 533, 918: 153, 3225: 587, 923: 154, 2972: 534, 2979: 535, 932: 156, 934: 157, 939: 158, 2988: 536, 942: 159, 2993: 537, 2995: 538, 949: 160, 2999: 539, 957: 162, 3008: 540, 964: 163, 3019: 541, 975: 164, 978: 165, 3028: 542, 983: 166, 3033: 543, 990: 167, 2213: 394, 992: 168, 993: 169, 3042: 544, 995: 170, 1001: 171, 3051: 545, 1007: 172, 3057: 546, 1010: 173, 851: 142, 1013: 174, 3062: 547, 3241: 590, 3065: 548, 3067: 549, 1021: 175, 1025: 176, 1027: 177, 3078: 550, 1032: 178, 3087: 551, 1040: 179, 1044: 180, 3094: 552, 1049: 181, 3099: 553, 3102: 554, 3103: 555, 1057: 182, 1060: 183, 1065: 184, 3116: 557, 1072: 185, 3121: 558, 3122: 559, 1078: 186, 1083: 187, 3133: 561, 1086: 188, 3135: 562, 3136: 563, 3139: 564, 1092: 189, 3145: 565, 3148: 566, 866: 145, 1102: 190, 3151: 567, 3154: 568, 1109: 191, 1111: 192, 3161: 569, 1115: 193, 3166: 570, 1119: 194, 3173: 571, 1126: 195, 2577: 463, 3176: 573, 3178: 574, 1131: 196, 3181: 575, 1136: 198, 3188: 576, 1141: 199, 3191: 577, 3192: 578, 3194: 579, 1148: 200, 1150: 201, 1153: 202, 3202: 580, 3206: 581, 3208: 582, 3209: 583, 1163: 203, 3214: 584, 877: 147, 1169: 204, 3267: 594, 3223: 586, 1177: 205, 3232: 588, 1185: 206, 1188: 207, 3237: 589, 1190: 208, 2588: 465, 1194: 209, 3246: 591, 1224: 214, 1202: 210, 3253: 592, 1207: 211, 1210: 212, 3262: 593, 1219: 213, 3272: 595, 1541: 277, 3277: 596, 1232: 215, 3281: 597, 1238: 216, 3290: 598, 1249: 217, 3299: 599, 550: 97, 1254: 218, 3304: 600, 1258: 219, 1260: 220, 3313: 602, 3314: 603, 3316: 604, 1269: 222, 1276: 223, 3329: 606, 1286: 224, 1292: 225, 3341: 607, 1581: 283, 3347: 608, 1303: 226, 3353: 609, 3356: 610, 1311: 227, 1317: 228, 1322: 229, 1324: 230, 3374: 612, 1328: 231, 3384: 613, 1337: 232, 1339: 233, 3389: 614, 1343: 234, 1344: 235, 1346: 236, 1350: 237, 3399: 616, 1356: 238, 3406: 617, 1360: 239, 3411: 618, 1367: 241, 1369: 242, 1372: 243, 1594: 285, 3660: 674, 1377: 244, 3427: 620, 114: 18, 3431: 621, 1384: 245, 1386: 246, 1389: 247, 3443: 624, 1397: 248, 1399: 249, 1403: 250, 3454: 625, 1407: 251, 3460: 626, 3308: 601, 1418: 252, 3469: 628, 1425: 253, 3476: 629, 3478: 630, 1435: 255, 1437: 256, 3486: 631, 1440: 257, 3490: 632, 1445: 258, 2289: 409, 3497: 633, 3498: 634, 1452: 259, 1454: 260, 1457: 261, 3509: 636, 1617: 289, 1465: 262, 3514: 637, 1470: 263, 3521: 638, 1476: 264, 3527: 639, 1481: 265, 3530: 640, 1485: 266, 3535: 641, 3538: 642, 931: 155, 3541: 643, 1495: 267, 3544: 644, 1500: 268, 3549: 645, 1503: 269, 3552: 646, 3554: 647, 1511: 270, 252: 42, 1515: 271, 3568: 650, 1522: 272, 1524: 273, 3324: 605, 3574: 651, 1528: 274, 3579: 652, 3580: 653, 1534: 275, 3584: 654, 1537: 276, 3586: 655, 3589: 656, 3593: 657, 3596: 658, 3597: 659, 1551: 278, 3602: 660, 3604: 661, 1559: 279, 1265: 221, 3610: 662, 1568: 280, 3619: 663, 1573: 281, 1578: 282, 3628: 664, 3629: 665, 3633: 666, 1586: 284, 3635: 667, 3678: 677, 3638: 668, 3642: 669, 1599: 286, 3649: 670, 3651: 671, 1604: 287, 3654: 672, 3655: 673, 951: 161, 1612: 288, 3665: 675, 3668: 676, 1623: 290, 1625: 291, 1630: 292, 2441: 437, 3682: 678, 3684: 679, 1640: 293, 1645: 294, 3697: 680, 1652: 295, 3702: 682, 1655: 296, 2666: 482, 3710: 684, 1663: 297, 3465: 627, 3714: 685, 1667: 298, 3716: 686, 1671: 299, 3722: 688, 1676: 300, 1681: 301, 1683: 302, 3734: 691, 3735: 692, 1688: 303, 3740: 693, 3743: 694, 1699: 304, 3748: 695, 3751: 696, 1706: 305, 3757: 697, 2333: 416, 1713: 307, 3762: 698, 3767: 699, 3700: 681, 1722: 308, 1725: 309, 3776: 701, 1733: 310, 1741: 311, 1751: 312, 1756: 313, 3365: 611, 2683: 485, 1767: 314, 1772: 315, 3709: 683, 1776: 316, 1781: 317, 1789: 318, 2310: 413, 1796: 319, 1807: 320, 1812: 321, 1815: 322, 1822: 323, 1825: 324, 1834: 325, 3719: 687, 1844: 326, 1850: 327, 1857: 328, 1860: 329, 1866: 330, 1871: 331, 3131: 560, 1880: 332, 1888: 333, 1892: 334, 3729: 689, 1897: 335, 1899: 336, 3731: 690, 1909: 337, 3391: 615, 1919: 338, 1924: 339, 1928: 340, 1935: 341, 1941: 342, 1949: 343, 1953: 344, 667: 118, 1961: 345, 1965: 346, 1968: 347, 2035: 361, 1977: 348, 1982: 349, 1986: 350, 1989: 351, 1993: 352, 2722: 491, 1999: 353, 2004: 354, 2007: 355, 2011: 356, 2015: 357, 2020: 358, 2024: 359, 1363: 240, 2031: 360, 339: 55, 2041: 362}
{2048: 362, 6: 0, 684: 120, 12: 1, 16: 2, 2071: 365, 24: 3, 29: 4, 2078: 367, 34: 5, 2083: 368, 2054: 363, 40: 6, 2090: 369, 2095: 370, 48: 7, 56: 8, 2105: 372, 2106: 373, 62: 9, 2112: 374, 68: 10, 2118: 375, 73: 11, 2123: 376, 2125: 377, 79: 12, 2129: 378, 2132: 379, 85: 13, 2134: 380, 2139: 381, 95: 14, 101: 15, 2150: 383, 2153: 384, 108: 16, 2157: 385, 113: 17, 115: 18, 2166: 387, 3433: 622, 3209: 582, 122: 19, 128: 20, 2177: 388, 136: 21, 2186: 389, 2189: 390, 143: 22, 2072: 366, 146: 23, 150: 24, 2202: 392, 156: 25, 164: 26, 167: 27, 2216: 394, 172: 28, 2221: 395, 175: 29, 2226: 396, 371: 61, 2231: 397, 185: 30, 2234: 398, 2238: 399, 193: 31, 2245: 400, 200: 32, 2252: 401, 2253: 402, 206: 33, 3107: 555, 2261: 403, 215: 34, 218: 35, 2268: 404, 222: 36, 2272: 405, 230: 37, 2280: 406, 234: 38, 2284: 407, 240: 39, 247: 40, 2296: 409, 251: 41, 2300: 410, 2301: 411, 261: 42, 2317: 413, 271: 43, 275: 44, 2324: 414, 284: 45, 2335: 416, 2096: 371, 2340: 417, 294: 46, 2344: 418, 299: 47, 2352: 419, 305: 48, 2355: 420, 309: 49, 310: 50, 314: 51, 2365: 421, 323: 52, 2372: 422, 2375: 423, 330: 53, 2380: 424, 2381: 425, 335: 54, 2386: 426, 340: 55, 2393: 427, 348: 56, 351: 57, 2402: 428, 355: 58, 2407: 429, 362: 59, 2411: 430, 368: 60, 2419: 431, 375: 62, 2426: 432, 2428: 433, 382: 63, 1429: 253, 2433: 434, 2438: 435, 2440: 436, 397: 65, 2446: 437, 400: 66, 2450: 438, 406: 67, 412: 68, 2463: 440, 416: 69, 2467: 441, 420: 70, 2473: 442, 426: 71, 2476: 443, 2477: 444, 2060: 364, 2482: 445, 2483: 446, 438: 72, 441: 73, 443: 74, 2493: 447, 447: 75, 2501: 448, 2502: 449, 455: 76, 460: 77, 461: 78, 2510: 450, 2516: 451, 471: 79, 472: 80, 2521: 452, 478: 81, 2530: 453, 2533: 454, 489: 83, 2538: 455, 2539: 456, 494: 84, 498: 85, 2549: 457, 504: 86, 507: 87, 2558: 458, 512: 88, 2563: 459, 517: 89, 2568: 460, 522: 90, 2572: 461, 2576: 462, 529: 92, 530: 93, 2582: 463, 539: 94, 2590: 465, 543: 95, 2593: 466, 549: 96, 2598: 467, 2599: 468, 559: 97, 2608: 469, 563: 98, 2613: 470, 2617: 471, 2143: 382, 572: 99, 2625: 472, 578: 100, 2628: 473, 2631: 474, 584: 101, 587: 102, 2636: 475, 781: 131, 2640: 476, 2645: 477, 598: 103, 1465: 261, 2654: 478, 2655: 479, 1384: 244, 610: 104, 613: 105, 617: 106, 2671: 482, 625: 107, 626: 108, 627: 109, 633: 110, 634: 111, 640: 112, 643: 113, 2692: 485, 2695: 486, 3180: 574, 2699: 487, 655: 115, 661: 116, 2713: 488, 666: 117, 2720: 489, 673: 118, 2161: 386, 2730: 491, 2731: 492, 2732: 493, 2739: 494, 2742: 495, 2747: 496, 2754: 497, 707: 121, 2758: 498, 714: 122, 2764: 499, 717: 123, 2769: 500, 2773: 501, 726: 124, 2780: 502, 2787: 503, 740: 125, 745: 126, 749: 127, 2799: 504, 2802: 505, 759: 128, 2809: 506, 763: 129, 2814: 507, 770: 130, 2820: 508, 2821: 509, 2829: 510, 785: 132, 2836: 511, 789: 133, 2838: 512, 791: 134, 2844: 513, 2847: 514, 3641: 668, 2854: 515, 2855: 516, 812: 135, 2868: 517, 823: 137, 820: 136, 2877: 518, 836: 138, 2885: 519, 2888: 520, 2890: 521, 482: 82, 846: 140, 851: 141, 854: 142, 858: 143, 2909: 522, 3216: 584, 869: 145, 2921: 524, 2924: 525, 2194: 391, 881: 147, 2933: 526, 2936: 527, 890: 148, 1514: 270, 894: 149, 2944: 528, 2953: 529, 907: 150, 2958: 530, 912: 151, 3224: 586, 2962: 531, 2964: 532, 917: 152, 922: 153, 2971: 533, 2978: 534, 931: 154, 932: 155, 933: 156, 938: 157, 2987: 535, 941: 158, 2993: 536, 2994: 537, 949: 159, 2998: 538, 956: 161, 3007: 539, 963: 162, 3018: 540, 974: 163, 845: 139, 977: 164, 3027: 541, 982: 165, 3032: 542, 2212: 393, 990: 166, 991: 167, 3041: 543, 994: 169, 1000: 170, 3050: 544, 1006: 171, 3056: 545, 1009: 172, 1012: 173, 3061: 546, 3307: 600, 3064: 547, 3066: 548, 1020: 174, 1024: 175, 3584: 653, 1026: 176, 3077: 549, 1031: 177, 3086: 550, 1039: 178, 1043: 179, 3093: 551, 1048: 180, 1540: 276, 3098: 552, 3101: 553, 3103: 554, 1056: 181, 1059: 182, 1064: 183, 3116: 556, 3117: 557, 1071: 184, 3122: 558, 1078: 185, 1079: 186, 3131: 559, 3132: 560, 1085: 187, 3135: 561, 3136: 562, 3138: 563, 1091: 188, 1371: 242, 865: 144, 3144: 564, 3147: 565, 1101: 189, 3150: 566, 3153: 567, 1109: 190, 1110: 191, 3160: 568, 1114: 192, 3165: 569, 1118: 193, 528: 91, 3172: 570, 1125: 194, 3175: 571, 3176: 572, 3177: 573, 1131: 195, 1132: 196, 2288: 408, 1135: 197, 3187: 575, 1140: 198, 3191: 576, 3192: 577, 3193: 578, 1148: 199, 1149: 200, 1152: 201, 3201: 579, 3206: 580, 3207: 581, 876: 146, 1162: 202, 3213: 583, 1168: 203, 3772: 699, 3222: 585, 1176: 204, 3231: 587, 1184: 205, 1187: 206, 3236: 588, 1189: 207, 3240: 589, 1193: 208, 3245: 590, 1201: 209, 3252: 591, 1206: 210, 1209: 211, 3262: 592, 3263: 593, 1219: 212, 1220: 213, 3271: 594, 3276: 595, 1231: 214, 3280: 596, 1237: 215, 3289: 597, 1248: 216, 3298: 598, 1253: 217, 3303: 599, 1258: 218, 1259: 219, 1264: 220, 3313: 601, 3314: 602, 3315: 603, 1268: 221, 1275: 222, 3328: 605, 1285: 223, 1291: 224, 3340: 606, 3346: 607, 1302: 225, 3352: 608, 3355: 609, 1310: 226, 1316: 227, 1585: 283, 1322: 228, 1323: 229, 3373: 611, 1327: 230, 3383: 612, 1336: 231, 1338: 232, 3388: 613, 3390: 614, 1343: 233, 1344: 234, 1345: 235, 1349: 236, 3398: 615, 1355: 237, 3405: 616, 1359: 238, 1362: 239, 1367: 240, 1368: 241, 3419: 618, 1376: 243, 3426: 619, 3431: 620, 3432: 621, 1385: 245, 1388: 246, 3442: 623, 1397: 247, 1398: 248, 1402: 249, 3453: 624, 1406: 250, 3459: 625, 3464: 626, 1417: 251, 3468: 627, 1424: 252, 3476: 628, 3477: 629, 1435: 254, 1436: 255, 3485: 630, 1439: 256, 3489: 631, 1444: 257, 3497: 632, 3498: 633, 3499: 634, 1452: 258, 1453: 259, 1456: 260, 3508: 635, 3513: 636, 1466: 262, 2913: 523, 3520: 637, 1475: 263, 3526: 638, 1480: 264, 3529: 639, 1484: 265, 3534: 640, 3537: 641, 3540: 642, 1494: 266, 3543: 643, 1499: 267, 3548: 644, 1502: 268, 3551: 645, 3553: 646, 3323: 604, 1510: 269, 3561: 647, 3562: 648, 3567: 649, 1522: 271, 1523: 272, 3573: 650, 1527: 273, 3578: 651, 3580: 652, 1533: 274, 1536: 275, 3585: 654, 392: 64, 3588: 655, 3592: 656, 3595: 657, 3597: 658, 1550: 277, 3602: 659, 3603: 660, 1558: 278, 3609: 661, 1567: 279, 3618: 662, 1572: 280, 1577: 281, 3627: 663, 1580: 282, 3629: 664, 3677: 676, 3633: 665, 3634: 666, 3637: 667, 1593: 284, 1598: 285, 3649: 669, 3650: 670, 1603: 286, 3653: 671, 3655: 672, 1611: 287, 3660: 673, 3661: 674, 1616: 288, 3667: 675, 1623: 289, 1624: 290, 1629: 291, 3682: 677, 3683: 678, 1639: 292, 1644: 293, 3696: 679, 1651: 294, 3700: 680, 3701: 681, 1654: 295, 2665: 481, 3708: 682, 1662: 296, 1666: 297, 3715: 685, 1670: 298, 3721: 687, 1675: 299, 1680: 300, 3729: 688, 1682: 301, 3733: 690, 1687: 302, 3739: 692, 3742: 693, 1698: 303, 3747: 694, 3750: 695, 1705: 304, 3756: 696, 2674: 483, 1710: 305, 1712: 306, 3761: 697, 3766: 698, 1721: 307, 1724: 308, 3776: 700, 3777: 701, 1732: 309, 1740: 310, 1750: 311, 3364: 610, 1755: 312, 2682: 484, 2309: 412, 1766: 313, 1771: 314, 1775: 315, 1780: 316, 3710: 683, 1788: 317, 1795: 318, 3714: 684, 1806: 319, 1811: 320, 1814: 321, 2460: 439, 1821: 322, 1824: 323, 3718: 686, 1833: 324, 1843: 325, 649: 114, 1849: 326, 1856: 327, 1859: 328, 993: 168, 1865: 329, 1870: 330, 1879: 331, 1887: 332, 1891: 333, 1897: 334, 1898: 335, 3730: 689, 1908: 336, 950: 160, 1918: 337, 2587: 464, 1923: 338, 1927: 339, 3735: 691, 1934: 340, 1940: 341, 1948: 342, 1952: 343, 1960: 344, 1964: 345, 1967: 346, 2657: 480, 1976: 347, 1981: 348, 1985: 349, 1988: 350, 2721: 490, 1992: 351, 1998: 352, 2003: 353, 2006: 354, 2010: 355, 2015: 356, 2016: 357, 2023: 358, 3410: 617, 2030: 359, 2332: 415, 2034: 360, 2040: 361, 682: 119}
given spans fix. original text:  Stocks start new trading year with rally 
Market indexes surge after Home Depot chief executive quits 
 
NEW YORK - Stocks moved soundly higher in the first session of 2007 as investors cheered mostly solid readings on the economy and found reason for increased prospects for big-name retailers Home Depot Inc. and Wal-Mart Stores Inc. 
 
A decline in oil prices added to the strong sentiment that at times drove the Dow Jones industrials to a new trading high. 
 
Stocks, which had surged from the start on word that Home Depot’s chairman and chief executive had resigned after years of lackluster performance in the company’s stock, added to their gains after Wall Street received a stronger-than-expected report on December manufacturing from the Institute for Supply Management and saw a softer-than-expected decline in construction spending. 
 
“The ISM number was better than expected and construction fell less than expected,” said Al Goldman, chief market strategist at A.G. Edwards. “I think those of us looking for a soft landing had more support on that stance today.” 
 
In early afternoon trading, the Dow surged 96.53, or 0.77 percent, to 12,559.68 after jumping earlier to a new trading high of 12,580.35. 
 
Broader stock indicators also rose, with the Nasdaq composite index especially showing sharp gains. The Standard & Poor’s 500 index was up 7.94, or 0.56 percent, at 1,426.24, and the tech-laden Nasdaq rose 32.92, or 1.36 percent, to 2,448.21. 
 
Bonds rose but retreated from an earlier big advance; the yield on the benchmark 10-year Treasury note fell to 4.68 percent from 4.71 percent late Friday. Bond investors were trying to balance the ISM news with a weak employment report from a division of payroll company Automatic Data Processing Inc. ADP said private sector employment fell by 40,000 in December following three months of gains that averaged 121,000 per month; investors theorized that the report might improve the chances for an interest rate cut in the early part of the year. 
 
The dollar was mixed against other major currencies, while gold prices fell. 
 
Light, sweet crude fell $2.44 to $58.61 per barrel on the New York Mercantile Exchange as mild weather continued its hold over much of the United States, cutting demand for heating oil and natural gas. 
 
With markets closed Tuesday to mark the funeral of President Gerald R. Ford, Wall Street returned from its longest hiatus — four days — since the aftermath of the Sept. 11, 2001, terrorist attacks. Shortly after they returned to work, investors received word that the ISM index came in at 51.4, stronger than the reading of 50 that had been expected. A reading above 50 signals expansion in the manufacturing sector; November’s figure of 49.5 marked the first time the report showed contraction in nearly four years. 
 
Also giving a boost to stocks, construction spending dropped by a less-than-expected 0.2 percent in November as housing activity fell for a record eighth straight month. The Commerce Department reported that building activity edged down to a seasonally adjusted annual rate of $1.18 trillion. 
 
“Basically, we’re still in an up market even though it’s 51 months old,” Goldman said. “This is still a market that has good upside momentum.” 
 
News that Bob Nardelli resigned from the world’s largest home improvement chain added to positive investor sentiment from a weekend report that Wal-Mart Stores Inc.’s December same-store sales rose 1.6 percent, topping the company’s forecast that growth would be flat or up as much as 1 percent. Home Depot rose $1.35, or 3.4 to $41.51, while Wal-Mart advanced $1.53, or 3.3 percent, to $47.71. 
 
In corporate news, Cytokinetics Inc. surged $1.05, or 14 percent, to $8.53 on news it would work with Amgen Inc. to develop drugs to combat heart failure. Amgen rose 72 cents to $69.03. 
 
Sirius Satellite Radio Inc. rose 27 cents, or 7.6 percent, to $3.81 after the radio service said its subscriber base jumped 82 percent to more than 6 million last year. 
 
Goodyear Tire & Rubber Co. advanced $1.79, or 8.5 percent, to $22.78 and moved as high as $22.77 to surpass a 52-week high of $21.35 after a three-month strike that had hurt production ended. 
 
Home builders were weaker after Lennar Corp., the biggest U.S. builder, warned that it expects to post a loss in the fourth quarter and its chief executive said he see no signs of a recovery in the housing market. Lennar fell $1.40, or 2.7 percent, to $51.06. 
 
Advancing issues outnumbered decliners by about 2 to 1 on the New York Stock Exchange, where volume came to 1.13 billion shares, compared with 430.7 million traded at the same point Friday, a day of anemic volume ahead of the New Year’s holiday. 
 
The Russell 2000 index of smaller companies was up 5.96, or 0.76 percent, at 793.62. 
 
Overseas, Japan’s Nikkei stock average rose 0.01 percent. Britain’s FTSE 100 closed up 0.13 percent, Germany’s DAX index was up 0.15 percent, and France’s CAC-40 was down 0.12 percent. 



original word:  Inc. Inc.
new split:  Inc  and  .
[(0, 6), (7, 12), (13, 16), (17, 24), (25, 29), (30, 34), (35, 40), (42, 48), (49, 56), (57, 62), (63, 68), (69, 73), (74, 79), (80, 85), (86, 95), (96, 101), (105, 108), (109, 113), (114, 115), (116, 122), (123, 128), (129, 136), (137, 143), (144, 146), (147, 150), (151, 156), (157, 164), (165, 167), (168, 172), (173, 175), (176, 185), (186, 193), (194, 200), (201, 206), (207, 215), (216, 218), (219, 222), (223, 230), (231, 234), (235, 240), (241, 247), (248, 251), (252, 261), (262, 271), (272, 275), (276, 284), (285, 294), (295, 299), (300, 305), (306, 309), (309, 310), (311, 314), (315, 323), (324, 330), (331, 335), (339, 340), (341, 348), (349, 351), (352, 355), (356, 362), (363, 368), (369, 371), (372, 375), (376, 382), (383, 392), (393, 397), (398, 400), (401, 406), (407, 412), (413, 416), (417, 420), (421, 426), (427, 438), (439, 441), (442, 443), (444, 447), (448, 455), (456, 460), (460, 461), (465, 471), (471, 472), (473, 478), (479, 482), (483, 489), (490, 494), (495, 498), (499, 504), (505, 507), (508, 512), (513, 517), (518, 522), (523, 528), (528, 529), (529, 530), (531, 539), (540, 543), (544, 549), (550, 559), (560, 563), (564, 572), (573, 578), (579, 584), (585, 587), (588, 598), (599, 610), (611, 613), (614, 617), (618, 625), (625, 626), (626, 627), (628, 633), (633, 634), (635, 640), (641, 643), (644, 649), (650, 655), (656, 661), (662, 666), (667, 673), (674, 682), (683, 684), (685, 707), (708, 714), (715, 717), (718, 726), (727, 740), (741, 745), (746, 749), (750, 759), (760, 763), (764, 770), (771, 781), (782, 785), (786, 789), (790, 791), (792, 812), (813, 820), (821, 823), (824, 836), (837, 845), (845, 846), (850, 851), (851, 854), (855, 858), (859, 865), (866, 869), (870, 876), (877, 881), (882, 890), (891, 894), (895, 907), (908, 912), (913, 917), (918, 922), (923, 931), (931, 932), (932, 933), (934, 938), (939, 941), (942, 949), (949, 950), (951, 956), (957, 963), (964, 974), (975, 977), (978, 982), (983, 990), (990, 991), (992, 993), (993, 994), (995, 1000), (1001, 1006), (1007, 1009), (1010, 1012), (1013, 1020), (1021, 1024), (1025, 1026), (1027, 1031), (1032, 1039), (1040, 1043), (1044, 1048), (1049, 1056), (1057, 1059), (1060, 1064), (1065, 1071), (1072, 1078), (1078, 1079), (1083, 1085), (1086, 1091), (1092, 1101), (1102, 1109), (1109, 1110), (1111, 1114), (1115, 1118), (1119, 1125), (1126, 1131), (1131, 1132), (1133, 1135), (1136, 1140), (1141, 1148), (1148, 1149), (1150, 1152), (1153, 1162), (1163, 1168), (1169, 1176), (1177, 1184), (1185, 1187), (1188, 1189), (1190, 1193), (1194, 1201), (1202, 1206), (1207, 1209), (1210, 1219), (1219, 1220), (1224, 1231), (1232, 1237), (1238, 1248), (1249, 1253), (1254, 1258), (1258, 1259), (1260, 1264), (1265, 1268), (1269, 1275), (1276, 1285), (1286, 1291), (1292, 1302), (1303, 1310), (1311, 1316), (1317, 1322), (1322, 1323), (1324, 1327), (1328, 1336), (1337, 1338), (1339, 1343), (1343, 1344), (1344, 1345), (1346, 1349), (1350, 1355), (1356, 1359), (1360, 1362), (1363, 1367), (1367, 1368), (1369, 1371), (1372, 1376), (1377, 1384), (1384, 1385), (1386, 1388), (1389, 1397), (1397, 1398), (1399, 1402), (1403, 1406), (1407, 1417), (1418, 1424), (1425, 1429), (1430, 1435), (1435, 1436), (1437, 1439), (1440, 1444), (1445, 1452), (1452, 1453), (1454, 1456), (1457, 1465), (1465, 1466), (1470, 1475), (1476, 1480), (1481, 1484), (1485, 1494), (1495, 1499), (1500, 1502), (1503, 1510), (1511, 1514), (1515, 1522), (1522, 1523), (1524, 1527), (1528, 1533), (1534, 1536), (1537, 1540), (1541, 1550), (1551, 1558), (1559, 1567), (1568, 1572), (1573, 1577), (1578, 1580), (1581, 1585), (1586, 1593), (1594, 1598), (1599, 1603), (1604, 1611), (1612, 1616), (1617, 1623), (1623, 1624), (1625, 1629), (1630, 1639), (1640, 1644), (1645, 1651), (1652, 1654), (1655, 1662), (1663, 1666), (1667, 1670), (1671, 1675), (1676, 1680), (1681, 1682), (1683, 1687), (1688, 1698), (1699, 1705), (1706, 1710), (1711, 1712), (1713, 1721), (1722, 1724), (1725, 1732), (1733, 1740), (1741, 1750), (1751, 1755), (1756, 1766), (1767, 1771), (1772, 1775), (1776, 1780), (1781, 1788), (1789, 1795), (1796, 1806), (1807, 1811), (1812, 1814), (1815, 1821), (1822, 1824), (1825, 1833), (1834, 1843), (1844, 1849), (1850, 1856), (1857, 1859), (1860, 1865), (1866, 1870), (1871, 1879), (1880, 1887), (1888, 1891), (1892, 1897), (1897, 1898), (1899, 1908), (1909, 1918), (1919, 1923), (1924, 1927), (1928, 1934), (1935, 1940), (1941, 1948), (1949, 1952), (1953, 1960), (1961, 1964), (1965, 1967), (1968, 1976), (1977, 1981), (1982, 1985), (1986, 1988), (1989, 1992), (1993, 1998), (1999, 2003), (2004, 2006), (2007, 2010), (2011, 2015), (2015, 2016), (2020, 2023), (2024, 2030), (2031, 2034), (2035, 2040), (2041, 2048), (2049, 2054), (2055, 2060), (2061, 2071), (2071, 2072), (2073, 2078), (2079, 2083), (2084, 2090), (2091, 2095), (2095, 2096), (2100, 2105), (2105, 2106), (2107, 2112), (2113, 2118), (2119, 2123), (2124, 2125), (2125, 2129), (2130, 2132), (2133, 2134), (2134, 2139), (2140, 2143), (2144, 2150), (2151, 2153), (2154, 2157), (2158, 2161), (2162, 2166), (2167, 2177), (2178, 2186), (2187, 2189), (2190, 2194), (2195, 2202), (2203, 2212), (2213, 2216), (2217, 2221), (2222, 2226), (2227, 2231), (2232, 2234), (2235, 2238), (2239, 2245), (2246, 2252), (2252, 2253), (2254, 2261), (2262, 2268), (2269, 2272), (2273, 2280), (2281, 2284), (2285, 2288), (2289, 2296), (2297, 2300), (2300, 2301), (2305, 2309), (2310, 2317), (2318, 2324), (2325, 2332), (2333, 2335), (2336, 2340), (2341, 2344), (2345, 2352), (2353, 2355), (2356, 2365), (2366, 2372), (2373, 2375), (2376, 2380), (2380, 2381), (2382, 2386), (2387, 2393), (2394, 2402), (2403, 2407), (2408, 2411), (2412, 2419), (2420, 2426), (2427, 2428), (2429, 2433), (2434, 2438), (2439, 2440), (2441, 2446), (2447, 2450), (2451, 2460), (2461, 2463), (2464, 2467), (2468, 2473), (2474, 2476), (2476, 2477), (2478, 2482), (2482, 2483), (2484, 2493), (2494, 2501), (2501, 2502), (2503, 2510), (2511, 2516), (2517, 2521), (2522, 2530), (2531, 2533), (2534, 2538), (2538, 2539), (2540, 2549), (2550, 2558), (2559, 2563), (2564, 2568), (2569, 2572), (2573, 2576), (2577, 2582), (2583, 2587), (2588, 2590), (2591, 2593), (2594, 2598), (2598, 2599), (2600, 2608), (2609, 2613), (2614, 2617), (2618, 2625), (2626, 2628), (2629, 2631), (2632, 2636), (2637, 2640), (2641, 2645), (2646, 2654), (2654, 2655), (2656, 2657), (2658, 2665), (2666, 2671), (2672, 2674), (2675, 2682), (2683, 2692), (2693, 2695), (2696, 2699), (2700, 2713), (2714, 2720), (2720, 2721), (2722, 2730), (2730, 2731), (2731, 2732), (2733, 2739), (2740, 2742), (2743, 2747), (2748, 2754), (2755, 2758), (2759, 2764), (2765, 2769), (2770, 2773), (2774, 2780), (2781, 2787), (2788, 2799), (2800, 2802), (2803, 2809), (2810, 2814), (2815, 2820), (2820, 2821), (2825, 2829), (2830, 2836), (2837, 2838), (2839, 2844), (2845, 2847), (2848, 2854), (2854, 2855), (2856, 2868), (2869, 2877), (2878, 2885), (2886, 2888), (2889, 2890), (2891, 2909), (2910, 2913), (2914, 2921), (2922, 2924), (2925, 2933), (2934, 2936), (2937, 2944), (2945, 2953), (2954, 2958), (2959, 2962), (2963, 2964), (2965, 2971), (2972, 2978), (2979, 2987), (2988, 2993), (2993, 2994), (2995, 2998), (2999, 3007), (3008, 3018), (3019, 3027), (3028, 3032), (3033, 3041), (3042, 3050), (3051, 3056), (3057, 3061), (3062, 3064), (3065, 3066), (3067, 3077), (3078, 3086), (3087, 3093), (3094, 3098), (3099, 3101), (3102, 3103), (3103, 3107), (3108, 3116), (3116, 3117), (3121, 3122), (3122, 3131), (3131, 3132), (3133, 3135), (3135, 3136), (3136, 3138), (3139, 3144), (3145, 3147), (3148, 3150), (3151, 3153), (3154, 3160), (3161, 3165), (3166, 3172), (3173, 3175), (3175, 3176), (3176, 3177), (3178, 3180), (3181, 3187), (3188, 3191), (3191, 3192), (3192, 3193), (3194, 3201), (3202, 3206), (3206, 3207), (3208, 3209), (3209, 3213), (3214, 3216), (3217, 3222), (3223, 3224), (3225, 3231), (3232, 3236), (3237, 3240), (3241, 3245), (3246, 3252), (3253, 3262), (3262, 3263), (3267, 3271), (3272, 3276), (3277, 3280), (3281, 3289), (3290, 3298), (3299, 3303), (3304, 3307), (3308, 3313), (3313, 3314), (3314, 3315), (3316, 3323), (3324, 3328), (3329, 3340), (3341, 3346), (3347, 3352), (3353, 3355), (3356, 3364), (3365, 3373), (3374, 3383), (3384, 3388), (3389, 3390), (3391, 3398), (3399, 3405), (3406, 3410), (3411, 3419), (3420, 3426), (3427, 3431), (3431, 3432), (3432, 3433), (3434, 3442), (3443, 3453), (3454, 3459), (3460, 3464), (3465, 3468), (3469, 3476), (3476, 3477), (3478, 3485), (3486, 3489), (3490, 3497), (3497, 3498), (3498, 3499), (3500, 3508), (3509, 3513), (3514, 3520), (3521, 3526), (3527, 3529), (3530, 3534), (3535, 3537), (3538, 3540), (3541, 3543), (3544, 3548), (3549, 3551), (3552, 3553), (3554, 3561), (3561, 3562), (3563, 3567), (3568, 3573), (3574, 3578), (3579, 3580), (3580, 3584), (3584, 3585), (3586, 3588), (3589, 3592), (3593, 3595), (3596, 3597), (3597, 3602), (3602, 3603), (3604, 3609), (3610, 3618), (3619, 3627), (3628, 3629), (3629, 3633), (3633, 3634), (3635, 3637), (3638, 3641), (3642, 3649), (3649, 3650), (3651, 3653), (3654, 3655), (3655, 3660), (3660, 3661), (3665, 3667), (3668, 3677), (3678, 3682), (3682, 3683), (3684, 3696), (3697, 3700), (3700, 3701), (3702, 3708), (3709, 3710), (3710, 3714), (3714, 3715), (3716, 3718), (3719, 3721), (3722, 3729), (3729, 3730), (3731, 3733), (3734, 3735), (3735, 3739), (3740, 3742), (3743, 3747), (3748, 3750), (3751, 3756), (3757, 3761), (3762, 3766), (3767, 3772), (3773, 3776), (3776, 3777), (3778, 3780), (3781, 3788), (3789, 3794), (3795, 3797), (3798, 3804), (3805, 3810), (3811, 3818), (3818, 3819), (3820, 3825), (3826, 3830), (3831, 3833), (3834, 3839), (3840, 3842), (3843, 3844), (3844, 3849), (3849, 3850), (3854, 3860), (3861, 3870), (3871, 3876), (3877, 3880), (3880, 3881)]
{0: 0, 2049: 363, 683: 120, 7: 1, 13: 2, 685: 121, 17: 3, 2071: 366, 25: 4, 1711: 306, 30: 5, 2079: 368, 35: 6, 2084: 369, 3820: 710, 3420: 619, 42: 7, 2055: 364, 2095: 371, 49: 8, 2100: 372, 57: 9, 2107: 374, 63: 10, 2113: 375, 69: 11, 2119: 376, 74: 12, 2124: 377, 2125: 378, 2061: 365, 80: 13, 2130: 379, 2133: 380, 86: 14, 2140: 382, 96: 15, 2151: 384, 105: 16, 2154: 385, 109: 17, 2158: 386, 3773: 700, 3432: 622, 2162: 387, 116: 19, 2167: 388, 123: 20, 3434: 623, 129: 21, 2178: 389, 137: 22, 2187: 390, 2190: 391, 144: 23, 147: 24, 151: 25, 2203: 393, 157: 26, 3781: 703, 165: 27, 168: 28, 2217: 395, 173: 29, 2222: 396, 176: 30, 2227: 397, 2232: 398, 372: 62, 186: 31, 2235: 399, 2239: 400, 194: 32, 2246: 401, 201: 33, 2252: 402, 2254: 403, 207: 34, 2262: 404, 216: 35, 3108: 556, 219: 36, 2269: 405, 223: 37, 2273: 406, 231: 38, 2281: 407, 235: 39, 2285: 408, 241: 40, 248: 41, 2297: 410, 2300: 411, 2305: 412, 2091: 370, 262: 43, 2318: 414, 272: 44, 276: 45, 2325: 415, 285: 46, 2336: 417, 2341: 418, 295: 47, 2345: 419, 300: 48, 2353: 420, 306: 49, 2356: 421, 309: 50, 311: 51, 315: 52, 2366: 422, 324: 53, 2373: 423, 2376: 424, 331: 54, 2380: 425, 2382: 426, 2387: 427, 3811: 708, 341: 56, 2105: 373, 2394: 428, 349: 57, 352: 58, 2403: 429, 356: 59, 2408: 430, 363: 60, 2412: 431, 369: 61, 2420: 432, 376: 63, 2427: 433, 2429: 434, 383: 64, 2434: 435, 1430: 254, 2439: 436, 393: 65, 398: 66, 2447: 438, 401: 67, 2451: 439, 407: 68, 413: 69, 2464: 441, 417: 70, 2468: 442, 421: 71, 2474: 443, 427: 72, 2476: 444, 2478: 445, 2461: 440, 2482: 446, 2484: 447, 439: 73, 442: 74, 444: 75, 2494: 448, 448: 76, 2501: 449, 2503: 450, 456: 77, 460: 78, 2511: 451, 465: 79, 2517: 452, 471: 80, 473: 81, 2522: 453, 479: 82, 2531: 454, 2534: 455, 490: 84, 2540: 457, 495: 85, 499: 86, 2550: 458, 505: 87, 508: 88, 2559: 459, 513: 89, 2564: 460, 2134: 381, 518: 90, 2569: 461, 523: 91, 2573: 462, 528: 92, 529: 93, 531: 94, 2583: 464, 3844: 716, 540: 95, 2591: 466, 544: 96, 2594: 467, 2598: 468, 2600: 469, 560: 98, 2609: 470, 564: 99, 2614: 471, 2618: 472, 573: 100, 2144: 383, 2626: 473, 579: 101, 2629: 474, 2632: 475, 585: 102, 588: 103, 2637: 476, 2641: 477, 782: 132, 2646: 478, 599: 104, 2654: 479, 2656: 480, 2658: 481, 611: 105, 614: 106, 618: 107, 3175: 572, 2672: 483, 625: 108, 626: 109, 2675: 484, 628: 110, 633: 111, 635: 112, 641: 113, 644: 114, 2693: 486, 2696: 487, 650: 115, 2700: 488, 1133: 197, 656: 116, 662: 117, 2714: 489, 3500: 635, 2720: 490, 674: 119, 2730: 492, 2731: 493, 2733: 494, 2740: 495, 2743: 496, 2748: 497, 2755: 498, 708: 122, 2759: 499, 715: 123, 2765: 500, 718: 124, 2770: 501, 2774: 502, 727: 125, 2781: 503, 2788: 504, 741: 126, 746: 127, 750: 128, 2800: 505, 2803: 506, 760: 129, 2810: 507, 764: 130, 2815: 508, 771: 131, 2820: 509, 2825: 510, 2830: 511, 786: 133, 2837: 512, 790: 134, 2839: 513, 792: 135, 2845: 514, 2848: 515, 2854: 516, 2856: 517, 813: 136, 2073: 367, 821: 137, 824: 138, 2878: 519, 2869: 518, 837: 139, 2886: 520, 2889: 521, 2891: 522, 845: 140, 850: 141, 483: 83, 855: 143, 859: 144, 2910: 523, 2914: 524, 870: 146, 3217: 585, 2922: 525, 2925: 526, 882: 148, 2195: 392, 2934: 527, 3561: 648, 2937: 528, 891: 149, 2538: 456, 895: 150, 2945: 529, 3563: 649, 2954: 530, 908: 151, 2959: 531, 913: 152, 2963: 532, 2965: 533, 918: 153, 3225: 587, 923: 154, 2972: 534, 2979: 535, 932: 156, 934: 157, 939: 158, 2988: 536, 942: 159, 2993: 537, 2995: 538, 949: 160, 2999: 539, 957: 162, 3008: 540, 964: 163, 3019: 541, 975: 164, 978: 165, 3028: 542, 983: 166, 3033: 543, 990: 167, 2213: 394, 992: 168, 993: 169, 3042: 544, 995: 170, 1001: 171, 3051: 545, 1007: 172, 3057: 546, 1010: 173, 851: 142, 1013: 174, 3062: 547, 3241: 590, 3065: 548, 3067: 549, 1021: 175, 1025: 176, 1027: 177, 3078: 550, 1032: 178, 3087: 551, 1040: 179, 1044: 180, 3094: 552, 1049: 181, 3099: 553, 3102: 554, 3103: 555, 1057: 182, 1060: 183, 1065: 184, 3116: 557, 1072: 185, 3121: 558, 3122: 559, 1078: 186, 1083: 187, 3133: 561, 1086: 188, 3135: 562, 3136: 563, 3139: 564, 1092: 189, 3145: 565, 3148: 566, 866: 145, 1102: 190, 3151: 567, 3154: 568, 1109: 191, 1111: 192, 3161: 569, 1115: 193, 3166: 570, 1119: 194, 3173: 571, 1126: 195, 2577: 463, 3176: 573, 3178: 574, 1131: 196, 3181: 575, 1136: 198, 3188: 576, 1141: 199, 3191: 577, 3192: 578, 3194: 579, 1148: 200, 1150: 201, 1153: 202, 3202: 580, 3206: 581, 3208: 582, 3209: 583, 1163: 203, 3214: 584, 877: 147, 1169: 204, 3267: 594, 3223: 586, 1177: 205, 3232: 588, 1185: 206, 1188: 207, 3237: 589, 1190: 208, 2588: 465, 1194: 209, 3246: 591, 1224: 214, 1202: 210, 3253: 592, 1207: 211, 1210: 212, 3262: 593, 1219: 213, 3272: 595, 1541: 277, 3277: 596, 1232: 215, 3281: 597, 1238: 216, 3290: 598, 1249: 217, 3299: 599, 550: 97, 1254: 218, 3304: 600, 1258: 219, 1260: 220, 3313: 602, 3314: 603, 3316: 604, 1269: 222, 1276: 223, 3329: 606, 1286: 224, 1292: 225, 3341: 607, 1581: 283, 3347: 608, 1303: 226, 3353: 609, 3356: 610, 1311: 227, 1317: 228, 1322: 229, 1324: 230, 3374: 612, 1328: 231, 3384: 613, 1337: 232, 1339: 233, 3389: 614, 1343: 234, 1344: 235, 1346: 236, 1350: 237, 3399: 616, 1356: 238, 3406: 617, 1360: 239, 3411: 618, 1367: 241, 1369: 242, 1372: 243, 1594: 285, 3660: 674, 1377: 244, 3427: 620, 114: 18, 3431: 621, 1384: 245, 1386: 246, 1389: 247, 3443: 624, 1397: 248, 1399: 249, 1403: 250, 3454: 625, 1407: 251, 3460: 626, 3308: 601, 1418: 252, 3469: 628, 1425: 253, 3476: 629, 3478: 630, 1435: 255, 1437: 256, 3486: 631, 1440: 257, 3490: 632, 1445: 258, 2289: 409, 3497: 633, 3498: 634, 1452: 259, 1454: 260, 1457: 261, 3509: 636, 1617: 289, 1465: 262, 3514: 637, 1470: 263, 3521: 638, 1476: 264, 3527: 639, 1481: 265, 3530: 640, 1485: 266, 3535: 641, 3538: 642, 931: 155, 3541: 643, 1495: 267, 3544: 644, 1500: 268, 3549: 645, 1503: 269, 3552: 646, 3554: 647, 1511: 270, 252: 42, 1515: 271, 3568: 650, 1522: 272, 1524: 273, 3324: 605, 3574: 651, 1528: 274, 3579: 652, 3580: 653, 1534: 275, 3584: 654, 1537: 276, 3586: 655, 3589: 656, 3593: 657, 3596: 658, 3597: 659, 1551: 278, 3602: 660, 3604: 661, 1559: 279, 1265: 221, 3610: 662, 1568: 280, 3619: 663, 1573: 281, 1578: 282, 3628: 664, 3629: 665, 3633: 666, 1586: 284, 3635: 667, 3678: 677, 3638: 668, 3642: 669, 1599: 286, 3649: 670, 3651: 671, 1604: 287, 3654: 672, 3655: 673, 951: 161, 1612: 288, 3665: 675, 3668: 676, 1623: 290, 1625: 291, 1630: 292, 2441: 437, 3682: 678, 3684: 679, 1640: 293, 1645: 294, 3697: 680, 1652: 295, 3702: 682, 1655: 296, 2666: 482, 3710: 684, 1663: 297, 3465: 627, 3714: 685, 1667: 298, 3716: 686, 1671: 299, 3722: 688, 1676: 300, 3789: 704, 1681: 301, 1683: 302, 3734: 691, 3735: 692, 1688: 303, 3740: 693, 3743: 694, 1699: 304, 3748: 695, 3751: 696, 1706: 305, 3757: 697, 2333: 416, 1713: 307, 3762: 698, 3767: 699, 3700: 681, 1722: 308, 1725: 309, 3776: 701, 3778: 702, 1733: 310, 1741: 311, 3795: 705, 3798: 706, 1751: 312, 1756: 313, 3805: 707, 3365: 611, 2683: 485, 1767: 314, 3818: 709, 1772: 315, 3709: 683, 1776: 316, 3826: 711, 1781: 317, 3831: 712, 3834: 713, 1789: 318, 3840: 714, 2310: 413, 3843: 715, 1796: 319, 3849: 717, 3854: 718, 1807: 320, 1812: 321, 3861: 719, 1815: 322, 1822: 323, 3871: 720, 1825: 324, 3877: 721, 3880: 722, 1834: 325, 3719: 687, 1844: 326, 1850: 327, 1857: 328, 1860: 329, 1866: 330, 1871: 331, 3131: 560, 1880: 332, 1888: 333, 1892: 334, 3729: 689, 1897: 335, 1899: 336, 3731: 690, 1909: 337, 3391: 615, 1919: 338, 1924: 339, 1928: 340, 1935: 341, 1941: 342, 1949: 343, 1953: 344, 667: 118, 1961: 345, 1965: 346, 1968: 347, 2035: 361, 1977: 348, 1982: 349, 1986: 350, 1989: 351, 1993: 352, 2722: 491, 1999: 353, 2004: 354, 2007: 355, 2011: 356, 2015: 357, 2020: 358, 2024: 359, 1363: 240, 2031: 360, 339: 55, 2041: 362}
{2048: 362, 6: 0, 684: 120, 12: 1, 16: 2, 2071: 365, 24: 3, 29: 4, 2078: 367, 34: 5, 2083: 368, 2054: 363, 40: 6, 2090: 369, 2095: 370, 48: 7, 56: 8, 2105: 372, 2106: 373, 62: 9, 2112: 374, 68: 10, 2118: 375, 73: 11, 2123: 376, 2125: 377, 79: 12, 2129: 378, 2132: 379, 85: 13, 2134: 380, 2139: 381, 95: 14, 101: 15, 2150: 383, 2153: 384, 108: 16, 2157: 385, 113: 17, 115: 18, 2166: 387, 3433: 622, 3209: 582, 122: 19, 128: 20, 2177: 388, 136: 21, 2186: 389, 2189: 390, 143: 22, 2072: 366, 146: 23, 150: 24, 3780: 702, 2202: 392, 156: 25, 164: 26, 167: 27, 2216: 394, 172: 28, 2221: 395, 175: 29, 2226: 396, 371: 61, 2231: 397, 185: 30, 2234: 398, 2238: 399, 193: 31, 2245: 400, 200: 32, 3788: 703, 2252: 401, 2253: 402, 206: 33, 3107: 555, 2261: 403, 215: 34, 218: 35, 2268: 404, 222: 36, 2272: 405, 230: 37, 2280: 406, 234: 38, 2284: 407, 240: 39, 247: 40, 2296: 409, 251: 41, 2300: 410, 2301: 411, 261: 42, 2317: 413, 271: 43, 275: 44, 2324: 414, 284: 45, 2335: 416, 2096: 371, 2340: 417, 294: 46, 2344: 418, 299: 47, 2352: 419, 305: 48, 2355: 420, 309: 49, 310: 50, 314: 51, 2365: 421, 323: 52, 2372: 422, 2375: 423, 330: 53, 2380: 424, 2381: 425, 335: 54, 2386: 426, 340: 55, 2393: 427, 348: 56, 351: 57, 2402: 428, 355: 58, 2407: 429, 362: 59, 2411: 430, 368: 60, 2419: 431, 375: 62, 2426: 432, 2428: 433, 382: 63, 1429: 253, 2433: 434, 3819: 709, 2438: 435, 2440: 436, 397: 65, 2446: 437, 400: 66, 2450: 438, 406: 67, 412: 68, 2463: 440, 416: 69, 2467: 441, 420: 70, 2473: 442, 426: 71, 2476: 443, 2477: 444, 2060: 364, 2482: 445, 2483: 446, 438: 72, 441: 73, 443: 74, 2493: 447, 447: 75, 2501: 448, 2502: 449, 455: 76, 460: 77, 461: 78, 2510: 450, 2516: 451, 471: 79, 472: 80, 2521: 452, 478: 81, 2530: 453, 2533: 454, 489: 83, 2538: 455, 2539: 456, 494: 84, 498: 85, 2549: 457, 504: 86, 507: 87, 2558: 458, 512: 88, 2563: 459, 517: 89, 2568: 460, 522: 90, 2572: 461, 2576: 462, 529: 92, 530: 93, 2582: 463, 539: 94, 2590: 465, 543: 95, 2593: 466, 549: 96, 2598: 467, 2599: 468, 559: 97, 2608: 469, 563: 98, 2613: 470, 2617: 471, 2143: 382, 572: 99, 2625: 472, 578: 100, 2628: 473, 2631: 474, 584: 101, 587: 102, 2636: 475, 781: 131, 2640: 476, 2645: 477, 598: 103, 1465: 261, 2654: 478, 2655: 479, 1384: 244, 610: 104, 613: 105, 617: 106, 2671: 482, 625: 107, 626: 108, 627: 109, 633: 110, 634: 111, 640: 112, 643: 113, 2692: 485, 2695: 486, 3180: 574, 2699: 487, 655: 115, 661: 116, 2713: 488, 666: 117, 2720: 489, 673: 118, 2161: 386, 2730: 491, 2731: 492, 2732: 493, 2739: 494, 2742: 495, 2747: 496, 2754: 497, 707: 121, 2758: 498, 714: 122, 2764: 499, 717: 123, 2769: 500, 2773: 501, 726: 124, 2780: 502, 2787: 503, 740: 125, 745: 126, 749: 127, 2799: 504, 2802: 505, 759: 128, 2809: 506, 763: 129, 2814: 507, 770: 130, 2820: 508, 2821: 509, 2829: 510, 785: 132, 2836: 511, 789: 133, 2838: 512, 791: 134, 2844: 513, 2847: 514, 3641: 668, 2854: 515, 2855: 516, 812: 135, 2868: 517, 823: 137, 820: 136, 2877: 518, 836: 138, 2885: 519, 2888: 520, 2890: 521, 482: 82, 846: 140, 851: 141, 854: 142, 858: 143, 2909: 522, 3216: 584, 869: 145, 2921: 524, 2924: 525, 2194: 391, 881: 147, 2933: 526, 2936: 527, 890: 148, 1514: 270, 894: 149, 2944: 528, 2953: 529, 907: 150, 2958: 530, 912: 151, 3224: 586, 2962: 531, 2964: 532, 917: 152, 922: 153, 2971: 533, 2978: 534, 931: 154, 932: 155, 933: 156, 938: 157, 2987: 535, 941: 158, 2993: 536, 2994: 537, 949: 159, 2998: 538, 956: 161, 3007: 539, 963: 162, 3018: 540, 974: 163, 845: 139, 977: 164, 3027: 541, 982: 165, 3032: 542, 2212: 393, 990: 166, 991: 167, 3041: 543, 994: 169, 1000: 170, 3050: 544, 1006: 171, 3056: 545, 1009: 172, 1012: 173, 3061: 546, 3307: 600, 3064: 547, 3066: 548, 1020: 174, 1024: 175, 3584: 653, 1026: 176, 3077: 549, 1031: 177, 3086: 550, 1039: 178, 1043: 179, 3093: 551, 1048: 180, 1540: 276, 3098: 552, 3101: 553, 3103: 554, 1056: 181, 1059: 182, 1064: 183, 3116: 556, 3117: 557, 1071: 184, 3122: 558, 1078: 185, 1079: 186, 3131: 559, 3132: 560, 1085: 187, 3135: 561, 3136: 562, 3138: 563, 1091: 188, 1371: 242, 865: 144, 3144: 564, 3147: 565, 1101: 189, 3150: 566, 3153: 567, 1109: 190, 1110: 191, 3160: 568, 1114: 192, 3165: 569, 1118: 193, 528: 91, 3172: 570, 1125: 194, 3175: 571, 3176: 572, 3177: 573, 1131: 195, 1132: 196, 2288: 408, 1135: 197, 3187: 575, 1140: 198, 3191: 576, 3192: 577, 3193: 578, 1148: 199, 1149: 200, 1152: 201, 3201: 579, 3206: 580, 3207: 581, 876: 146, 1162: 202, 3213: 583, 1168: 203, 3772: 699, 3222: 585, 1176: 204, 3231: 587, 1184: 205, 1187: 206, 3236: 588, 1189: 207, 3240: 589, 1193: 208, 3245: 590, 1201: 209, 3252: 591, 1206: 210, 1209: 211, 3262: 592, 3263: 593, 1219: 212, 1220: 213, 3271: 594, 3276: 595, 1231: 214, 3280: 596, 1237: 215, 3289: 597, 1248: 216, 3298: 598, 1253: 217, 3303: 599, 1258: 218, 1259: 219, 1264: 220, 3313: 601, 3314: 602, 3315: 603, 1268: 221, 1275: 222, 3328: 605, 1285: 223, 1291: 224, 3340: 606, 3346: 607, 1302: 225, 3352: 608, 3355: 609, 1310: 226, 1316: 227, 1585: 283, 1322: 228, 1323: 229, 3373: 611, 1327: 230, 3383: 612, 1336: 231, 1338: 232, 3388: 613, 3390: 614, 1343: 233, 1344: 234, 1345: 235, 1349: 236, 3398: 615, 1355: 237, 3405: 616, 1359: 238, 1362: 239, 1367: 240, 1368: 241, 3419: 618, 1376: 243, 3426: 619, 3431: 620, 3432: 621, 1385: 245, 1388: 246, 3442: 623, 1397: 247, 1398: 248, 1402: 249, 3453: 624, 1406: 250, 3459: 625, 3464: 626, 1417: 251, 3468: 627, 1424: 252, 3476: 628, 3477: 629, 1435: 254, 1436: 255, 3485: 630, 1439: 256, 3489: 631, 1444: 257, 3497: 632, 3498: 633, 3499: 634, 1452: 258, 1453: 259, 1456: 260, 3508: 635, 3513: 636, 1466: 262, 2913: 523, 3520: 637, 1475: 263, 3526: 638, 1480: 264, 3529: 639, 1484: 265, 3534: 640, 3537: 641, 3540: 642, 1494: 266, 3543: 643, 1499: 267, 3548: 644, 1502: 268, 3551: 645, 3553: 646, 3323: 604, 1510: 269, 3561: 647, 3562: 648, 3567: 649, 1522: 271, 1523: 272, 3573: 650, 1527: 273, 3578: 651, 3580: 652, 1533: 274, 1536: 275, 3585: 654, 392: 64, 3588: 655, 3592: 656, 3595: 657, 3597: 658, 1550: 277, 3602: 659, 3603: 660, 1558: 278, 3609: 661, 1567: 279, 3618: 662, 1572: 280, 1577: 281, 3627: 663, 1580: 282, 3629: 664, 3677: 676, 3633: 665, 3634: 666, 3637: 667, 1593: 284, 1598: 285, 3649: 669, 3650: 670, 1603: 286, 3653: 671, 3655: 672, 1611: 287, 3660: 673, 3661: 674, 1616: 288, 3667: 675, 1623: 289, 1624: 290, 1629: 291, 3682: 677, 3683: 678, 1639: 292, 1644: 293, 3696: 679, 1651: 294, 3700: 680, 3701: 681, 1654: 295, 2665: 481, 3708: 682, 1662: 296, 1666: 297, 3715: 685, 1670: 298, 3721: 687, 1675: 299, 1680: 300, 3729: 688, 1682: 301, 3733: 690, 1687: 302, 3739: 692, 3742: 693, 1698: 303, 3747: 694, 3750: 695, 1705: 304, 3756: 696, 2674: 483, 1710: 305, 1712: 306, 3761: 697, 3766: 698, 1721: 307, 1724: 308, 3776: 700, 3777: 701, 1732: 309, 1740: 310, 3794: 704, 3797: 705, 1750: 311, 3364: 610, 1755: 312, 3804: 706, 2682: 484, 3810: 707, 2309: 412, 1766: 313, 3818: 708, 1771: 314, 1775: 315, 3825: 710, 1780: 316, 3710: 683, 3830: 711, 3833: 712, 1788: 317, 3839: 713, 3842: 714, 1795: 318, 3844: 715, 3849: 716, 3850: 717, 3714: 684, 1806: 319, 1811: 320, 3860: 718, 1814: 321, 2460: 439, 1821: 322, 3870: 719, 1824: 323, 3876: 720, 3718: 686, 3880: 721, 1833: 324, 1843: 325, 649: 114, 1849: 326, 1856: 327, 1859: 328, 993: 168, 1865: 329, 3881: 722, 1870: 330, 1879: 331, 1887: 332, 1891: 333, 1897: 334, 1898: 335, 3730: 689, 1908: 336, 950: 160, 1918: 337, 2587: 464, 1923: 338, 1927: 339, 3735: 691, 1934: 340, 1940: 341, 1948: 342, 1952: 343, 1960: 344, 1964: 345, 1967: 346, 2657: 480, 1976: 347, 1981: 348, 1985: 349, 1988: 350, 2721: 490, 1992: 351, 1998: 352, 2003: 353, 2006: 354, 2010: 355, 2015: 356, 2016: 357, 2023: 358, 3410: 617, 2030: 359, 2332: 415, 2034: 360, 2040: 361, 682: 119}
given spans fix. original text:  Stocks start new trading year with rally 
Market indexes surge after Home Depot chief executive quits 
 
NEW YORK - Stocks moved soundly higher in the first session of 2007 as investors cheered mostly solid readings on the economy and found reason for increased prospects for big-name retailers Home Depot Inc. and Wal-Mart Stores Inc. 
 
A decline in oil prices added to the strong sentiment that at times drove the Dow Jones industrials to a new trading high. 
 
Stocks, which had surged from the start on word that Home Depot’s chairman and chief executive had resigned after years of lackluster performance in the company’s stock, added to their gains after Wall Street received a stronger-than-expected report on December manufacturing from the Institute for Supply Management and saw a softer-than-expected decline in construction spending. 
 
“The ISM number was better than expected and construction fell less than expected,” said Al Goldman, chief market strategist at A.G. Edwards. “I think those of us looking for a soft landing had more support on that stance today.” 
 
In early afternoon trading, the Dow surged 96.53, or 0.77 percent, to 12,559.68 after jumping earlier to a new trading high of 12,580.35. 
 
Broader stock indicators also rose, with the Nasdaq composite index especially showing sharp gains. The Standard & Poor’s 500 index was up 7.94, or 0.56 percent, at 1,426.24, and the tech-laden Nasdaq rose 32.92, or 1.36 percent, to 2,448.21. 
 
Bonds rose but retreated from an earlier big advance; the yield on the benchmark 10-year Treasury note fell to 4.68 percent from 4.71 percent late Friday. Bond investors were trying to balance the ISM news with a weak employment report from a division of payroll company Automatic Data Processing Inc. ADP said private sector employment fell by 40,000 in December following three months of gains that averaged 121,000 per month; investors theorized that the report might improve the chances for an interest rate cut in the early part of the year. 
 
The dollar was mixed against other major currencies, while gold prices fell. 
 
Light, sweet crude fell $2.44 to $58.61 per barrel on the New York Mercantile Exchange as mild weather continued its hold over much of the United States, cutting demand for heating oil and natural gas. 
 
With markets closed Tuesday to mark the funeral of President Gerald R. Ford, Wall Street returned from its longest hiatus — four days — since the aftermath of the Sept. 11, 2001, terrorist attacks. Shortly after they returned to work, investors received word that the ISM index came in at 51.4, stronger than the reading of 50 that had been expected. A reading above 50 signals expansion in the manufacturing sector; November’s figure of 49.5 marked the first time the report showed contraction in nearly four years. 
 
Also giving a boost to stocks, construction spending dropped by a less-than-expected 0.2 percent in November as housing activity fell for a record eighth straight month. The Commerce Department reported that building activity edged down to a seasonally adjusted annual rate of $1.18 trillion. 
 
“Basically, we’re still in an up market even though it’s 51 months old,” Goldman said. “This is still a market that has good upside momentum.” 
 
News that Bob Nardelli resigned from the world’s largest home improvement chain added to positive investor sentiment from a weekend report that Wal-Mart Stores Inc.’s December same-store sales rose 1.6 percent, topping the company’s forecast that growth would be flat or up as much as 1 percent. Home Depot rose $1.35, or 3.4 to $41.51, while Wal-Mart advanced $1.53, or 3.3 percent, to $47.71. 
 
In corporate news, Cytokinetics Inc. surged $1.05, or 14 percent, to $8.53 on news it would work with Amgen Inc. to develop drugs to combat heart failure. Amgen rose 72 cents to $69.03. 
 
Sirius Satellite Radio Inc. rose 27 cents, or 7.6 percent, to $3.81 after the radio service said its subscriber base jumped 82 percent to more than 6 million last year. 
 
Goodyear Tire & Rubber Co. advanced $1.79, or 8.5 percent, to $22.78 and moved as high as $22.77 to surpass a 52-week high of $21.35 after a three-month strike that had hurt production ended. 
 
Home builders were weaker after Lennar Corp., the biggest U.S. builder, warned that it expects to post a loss in the fourth quarter and its chief executive said he see no signs of a recovery in the housing market. Lennar fell $1.40, or 2.7 percent, to $51.06. 
 
Advancing issues outnumbered decliners by about 2 to 1 on the New York Stock Exchange, where volume came to 1.13 billion shares, compared with 430.7 million traded at the same point Friday, a day of anemic volume ahead of the New Year’s holiday. 
 
The Russell 2000 index of smaller companies was up 5.96, or 0.76 percent, at 793.62. 
 
Overseas, Japan’s Nikkei stock average rose 0.01 percent. Britain’s FTSE 100 closed up 0.13 percent, Germany’s DAX index was up 0.15 percent, and France’s CAC-40 was down 0.12 percent. 



original word:  Co. Co.
new split:  Co  and  .
[(0, 6), (7, 12), (13, 16), (17, 24), (25, 29), (30, 34), (35, 40), (42, 48), (49, 56), (57, 62), (63, 68), (69, 73), (74, 79), (80, 85), (86, 95), (96, 101), (105, 108), (109, 113), (114, 115), (116, 122), (123, 128), (129, 136), (137, 143), (144, 146), (147, 150), (151, 156), (157, 164), (165, 167), (168, 172), (173, 175), (176, 185), (186, 193), (194, 200), (201, 206), (207, 215), (216, 218), (219, 222), (223, 230), (231, 234), (235, 240), (241, 247), (248, 251), (252, 261), (262, 271), (272, 275), (276, 284), (285, 294), (295, 299), (300, 305), (306, 309), (309, 310), (311, 314), (315, 323), (324, 330), (331, 335), (339, 340), (341, 348), (349, 351), (352, 355), (356, 362), (363, 368), (369, 371), (372, 375), (376, 382), (383, 392), (393, 397), (398, 400), (401, 406), (407, 412), (413, 416), (417, 420), (421, 426), (427, 438), (439, 441), (442, 443), (444, 447), (448, 455), (456, 460), (460, 461), (465, 471), (471, 472), (473, 478), (479, 482), (483, 489), (490, 494), (495, 498), (499, 504), (505, 507), (508, 512), (513, 517), (518, 522), (523, 528), (528, 529), (529, 530), (531, 539), (540, 543), (544, 549), (550, 559), (560, 563), (564, 572), (573, 578), (579, 584), (585, 587), (588, 598), (599, 610), (611, 613), (614, 617), (618, 625), (625, 626), (626, 627), (628, 633), (633, 634), (635, 640), (641, 643), (644, 649), (650, 655), (656, 661), (662, 666), (667, 673), (674, 682), (683, 684), (685, 707), (708, 714), (715, 717), (718, 726), (727, 740), (741, 745), (746, 749), (750, 759), (760, 763), (764, 770), (771, 781), (782, 785), (786, 789), (790, 791), (792, 812), (813, 820), (821, 823), (824, 836), (837, 845), (845, 846), (850, 851), (851, 854), (855, 858), (859, 865), (866, 869), (870, 876), (877, 881), (882, 890), (891, 894), (895, 907), (908, 912), (913, 917), (918, 922), (923, 931), (931, 932), (932, 933), (934, 938), (939, 941), (942, 949), (949, 950), (951, 956), (957, 963), (964, 974), (975, 977), (978, 982), (983, 990), (990, 991), (992, 993), (993, 994), (995, 1000), (1001, 1006), (1007, 1009), (1010, 1012), (1013, 1020), (1021, 1024), (1025, 1026), (1027, 1031), (1032, 1039), (1040, 1043), (1044, 1048), (1049, 1056), (1057, 1059), (1060, 1064), (1065, 1071), (1072, 1078), (1078, 1079), (1083, 1085), (1086, 1091), (1092, 1101), (1102, 1109), (1109, 1110), (1111, 1114), (1115, 1118), (1119, 1125), (1126, 1131), (1131, 1132), (1133, 1135), (1136, 1140), (1141, 1148), (1148, 1149), (1150, 1152), (1153, 1162), (1163, 1168), (1169, 1176), (1177, 1184), (1185, 1187), (1188, 1189), (1190, 1193), (1194, 1201), (1202, 1206), (1207, 1209), (1210, 1219), (1219, 1220), (1224, 1231), (1232, 1237), (1238, 1248), (1249, 1253), (1254, 1258), (1258, 1259), (1260, 1264), (1265, 1268), (1269, 1275), (1276, 1285), (1286, 1291), (1292, 1302), (1303, 1310), (1311, 1316), (1317, 1322), (1322, 1323), (1324, 1327), (1328, 1336), (1337, 1338), (1339, 1343), (1343, 1344), (1344, 1345), (1346, 1349), (1350, 1355), (1356, 1359), (1360, 1362), (1363, 1367), (1367, 1368), (1369, 1371), (1372, 1376), (1377, 1384), (1384, 1385), (1386, 1388), (1389, 1397), (1397, 1398), (1399, 1402), (1403, 1406), (1407, 1417), (1418, 1424), (1425, 1429), (1430, 1435), (1435, 1436), (1437, 1439), (1440, 1444), (1445, 1452), (1452, 1453), (1454, 1456), (1457, 1465), (1465, 1466), (1470, 1475), (1476, 1480), (1481, 1484), (1485, 1494), (1495, 1499), (1500, 1502), (1503, 1510), (1511, 1514), (1515, 1522), (1522, 1523), (1524, 1527), (1528, 1533), (1534, 1536), (1537, 1540), (1541, 1550), (1551, 1558), (1559, 1567), (1568, 1572), (1573, 1577), (1578, 1580), (1581, 1585), (1586, 1593), (1594, 1598), (1599, 1603), (1604, 1611), (1612, 1616), (1617, 1623), (1623, 1624), (1625, 1629), (1630, 1639), (1640, 1644), (1645, 1651), (1652, 1654), (1655, 1662), (1663, 1666), (1667, 1670), (1671, 1675), (1676, 1680), (1681, 1682), (1683, 1687), (1688, 1698), (1699, 1705), (1706, 1710), (1711, 1712), (1713, 1721), (1722, 1724), (1725, 1732), (1733, 1740), (1741, 1750), (1751, 1755), (1756, 1766), (1767, 1771), (1772, 1775), (1776, 1780), (1781, 1788), (1789, 1795), (1796, 1806), (1807, 1811), (1812, 1814), (1815, 1821), (1822, 1824), (1825, 1833), (1834, 1843), (1844, 1849), (1850, 1856), (1857, 1859), (1860, 1865), (1866, 1870), (1871, 1879), (1880, 1887), (1888, 1891), (1892, 1897), (1897, 1898), (1899, 1908), (1909, 1918), (1919, 1923), (1924, 1927), (1928, 1934), (1935, 1940), (1941, 1948), (1949, 1952), (1953, 1960), (1961, 1964), (1965, 1967), (1968, 1976), (1977, 1981), (1982, 1985), (1986, 1988), (1989, 1992), (1993, 1998), (1999, 2003), (2004, 2006), (2007, 2010), (2011, 2015), (2015, 2016), (2020, 2023), (2024, 2030), (2031, 2034), (2035, 2040), (2041, 2048), (2049, 2054), (2055, 2060), (2061, 2071), (2071, 2072), (2073, 2078), (2079, 2083), (2084, 2090), (2091, 2095), (2095, 2096), (2100, 2105), (2105, 2106), (2107, 2112), (2113, 2118), (2119, 2123), (2124, 2125), (2125, 2129), (2130, 2132), (2133, 2134), (2134, 2139), (2140, 2143), (2144, 2150), (2151, 2153), (2154, 2157), (2158, 2161), (2162, 2166), (2167, 2177), (2178, 2186), (2187, 2189), (2190, 2194), (2195, 2202), (2203, 2212), (2213, 2216), (2217, 2221), (2222, 2226), (2227, 2231), (2232, 2234), (2235, 2238), (2239, 2245), (2246, 2252), (2252, 2253), (2254, 2261), (2262, 2268), (2269, 2272), (2273, 2280), (2281, 2284), (2285, 2288), (2289, 2296), (2297, 2300), (2300, 2301), (2305, 2309), (2310, 2317), (2318, 2324), (2325, 2332), (2333, 2335), (2336, 2340), (2341, 2344), (2345, 2352), (2353, 2355), (2356, 2365), (2366, 2372), (2373, 2375), (2376, 2380), (2380, 2381), (2382, 2386), (2387, 2393), (2394, 2402), (2403, 2407), (2408, 2411), (2412, 2419), (2420, 2426), (2427, 2428), (2429, 2433), (2434, 2438), (2439, 2440), (2441, 2446), (2447, 2450), (2451, 2460), (2461, 2463), (2464, 2467), (2468, 2473), (2474, 2476), (2476, 2477), (2478, 2482), (2482, 2483), (2484, 2493), (2494, 2501), (2501, 2502), (2503, 2510), (2511, 2516), (2517, 2521), (2522, 2530), (2531, 2533), (2534, 2538), (2538, 2539), (2540, 2549), (2550, 2558), (2559, 2563), (2564, 2568), (2569, 2572), (2573, 2576), (2577, 2582), (2583, 2587), (2588, 2590), (2591, 2593), (2594, 2598), (2598, 2599), (2600, 2608), (2609, 2613), (2614, 2617), (2618, 2625), (2626, 2628), (2629, 2631), (2632, 2636), (2637, 2640), (2641, 2645), (2646, 2654), (2654, 2655), (2656, 2657), (2658, 2665), (2666, 2671), (2672, 2674), (2675, 2682), (2683, 2692), (2693, 2695), (2696, 2699), (2700, 2713), (2714, 2720), (2720, 2721), (2722, 2730), (2730, 2731), (2731, 2732), (2733, 2739), (2740, 2742), (2743, 2747), (2748, 2754), (2755, 2758), (2759, 2764), (2765, 2769), (2770, 2773), (2774, 2780), (2781, 2787), (2788, 2799), (2800, 2802), (2803, 2809), (2810, 2814), (2815, 2820), (2820, 2821), (2825, 2829), (2830, 2836), (2837, 2838), (2839, 2844), (2845, 2847), (2848, 2854), (2854, 2855), (2856, 2868), (2869, 2877), (2878, 2885), (2886, 2888), (2889, 2890), (2891, 2909), (2910, 2913), (2914, 2921), (2922, 2924), (2925, 2933), (2934, 2936), (2937, 2944), (2945, 2953), (2954, 2958), (2959, 2962), (2963, 2964), (2965, 2971), (2972, 2978), (2979, 2987), (2988, 2993), (2993, 2994), (2995, 2998), (2999, 3007), (3008, 3018), (3019, 3027), (3028, 3032), (3033, 3041), (3042, 3050), (3051, 3056), (3057, 3061), (3062, 3064), (3065, 3066), (3067, 3077), (3078, 3086), (3087, 3093), (3094, 3098), (3099, 3101), (3102, 3103), (3103, 3107), (3108, 3116), (3116, 3117), (3121, 3122), (3122, 3131), (3131, 3132), (3133, 3135), (3135, 3136), (3136, 3138), (3139, 3144), (3145, 3147), (3148, 3150), (3151, 3153), (3154, 3160), (3161, 3165), (3166, 3172), (3173, 3175), (3175, 3176), (3176, 3177), (3178, 3180), (3181, 3187), (3188, 3191), (3191, 3192), (3192, 3193), (3194, 3201), (3202, 3206), (3206, 3207), (3208, 3209), (3209, 3213), (3214, 3216), (3217, 3222), (3223, 3224), (3225, 3231), (3232, 3236), (3237, 3240), (3241, 3245), (3246, 3252), (3253, 3262), (3262, 3263), (3267, 3271), (3272, 3276), (3277, 3280), (3281, 3289), (3290, 3298), (3299, 3303), (3304, 3307), (3308, 3313), (3313, 3314), (3314, 3315), (3316, 3323), (3324, 3328), (3329, 3340), (3341, 3346), (3347, 3352), (3353, 3355), (3356, 3364), (3365, 3373), (3374, 3383), (3384, 3388), (3389, 3390), (3391, 3398), (3399, 3405), (3406, 3410), (3411, 3419), (3420, 3426), (3427, 3431), (3431, 3432), (3432, 3433), (3434, 3442), (3443, 3453), (3454, 3459), (3460, 3464), (3465, 3468), (3469, 3476), (3476, 3477), (3478, 3485), (3486, 3489), (3490, 3497), (3497, 3498), (3498, 3499), (3500, 3508), (3509, 3513), (3514, 3520), (3521, 3526), (3527, 3529), (3530, 3534), (3535, 3537), (3538, 3540), (3541, 3543), (3544, 3548), (3549, 3551), (3552, 3553), (3554, 3561), (3561, 3562), (3563, 3567), (3568, 3573), (3574, 3578), (3579, 3580), (3580, 3584), (3584, 3585), (3586, 3588), (3589, 3592), (3593, 3595), (3596, 3597), (3597, 3602), (3602, 3603), (3604, 3609), (3610, 3618), (3619, 3627), (3628, 3629), (3629, 3633), (3633, 3634), (3635, 3637), (3638, 3641), (3642, 3649), (3649, 3650), (3651, 3653), (3654, 3655), (3655, 3660), (3660, 3661), (3665, 3667), (3668, 3677), (3678, 3682), (3682, 3683), (3684, 3696), (3697, 3700), (3700, 3701), (3702, 3708), (3709, 3710), (3710, 3714), (3714, 3715), (3716, 3718), (3719, 3721), (3722, 3729), (3729, 3730), (3731, 3733), (3734, 3735), (3735, 3739), (3740, 3742), (3743, 3747), (3748, 3750), (3751, 3756), (3757, 3761), (3762, 3766), (3767, 3772), (3773, 3776), (3776, 3777), (3778, 3780), (3781, 3788), (3789, 3794), (3795, 3797), (3798, 3804), (3805, 3810), (3811, 3818), (3818, 3819), (3820, 3825), (3826, 3830), (3831, 3833), (3834, 3839), (3840, 3842), (3843, 3844), (3844, 3849), (3849, 3850), (3854, 3860), (3861, 3870), (3871, 3876), (3877, 3880), (3880, 3881), (3882, 3886), (3887, 3889), (3890, 3895), (3895, 3896), (3897, 3899), (3900, 3903), (3904, 3911), (3911, 3912), (3913, 3915), (3916, 3917), (3917, 3921), (3922, 3927), (3928, 3931), (3932, 3937), (3938, 3945), (3946, 3950), (3951, 3954), (3955, 3965), (3966, 3970), (3971, 3977), (3978, 3980), (3981, 3988), (3989, 3991), (3992, 3996), (3997, 4001), (4002, 4003), (4004, 4011), (4012, 4016), (4017, 4021), (4021, 4022), (4026, 4034), (4035, 4039), (4040, 4041), (4042, 4048), (4049, 4051), (4051, 4052)]
{0: 0, 2049: 363, 683: 120, 7: 1, 13: 2, 685: 121, 17: 3, 2071: 366, 25: 4, 1711: 306, 30: 5, 2079: 368, 35: 6, 2084: 369, 3820: 710, 3420: 619, 42: 7, 2055: 364, 2095: 371, 49: 8, 2100: 372, 57: 9, 2107: 374, 63: 10, 2113: 375, 69: 11, 2119: 376, 74: 12, 2124: 377, 2125: 378, 2061: 365, 80: 13, 2130: 379, 2133: 380, 86: 14, 2140: 382, 96: 15, 2151: 384, 105: 16, 2154: 385, 109: 17, 2158: 386, 3773: 700, 3432: 622, 2162: 387, 116: 19, 2167: 388, 123: 20, 3434: 623, 129: 21, 2178: 389, 137: 22, 2187: 390, 2190: 391, 144: 23, 147: 24, 151: 25, 2203: 393, 157: 26, 3781: 703, 165: 27, 168: 28, 2217: 395, 173: 29, 2222: 396, 176: 30, 2227: 397, 2232: 398, 372: 62, 186: 31, 2235: 399, 2239: 400, 194: 32, 2246: 401, 201: 33, 2252: 402, 2254: 403, 207: 34, 2262: 404, 216: 35, 3108: 556, 219: 36, 2269: 405, 223: 37, 2273: 406, 231: 38, 2281: 407, 235: 39, 2285: 408, 241: 40, 248: 41, 2297: 410, 2300: 411, 2305: 412, 2091: 370, 262: 43, 2318: 414, 272: 44, 276: 45, 2325: 415, 285: 46, 2336: 417, 2341: 418, 295: 47, 2345: 419, 300: 48, 2353: 420, 306: 49, 2356: 421, 309: 50, 311: 51, 315: 52, 2366: 422, 324: 53, 2373: 423, 2376: 424, 331: 54, 2380: 425, 2382: 426, 2387: 427, 3811: 708, 341: 56, 2105: 373, 2394: 428, 349: 57, 352: 58, 2403: 429, 356: 59, 2408: 430, 363: 60, 2412: 431, 369: 61, 2420: 432, 376: 63, 2427: 433, 2429: 434, 383: 64, 2434: 435, 1430: 254, 2439: 436, 393: 65, 398: 66, 2447: 438, 401: 67, 2451: 439, 407: 68, 413: 69, 2464: 441, 417: 70, 2468: 442, 421: 71, 2474: 443, 427: 72, 2476: 444, 2478: 445, 2461: 440, 2482: 446, 2484: 447, 439: 73, 442: 74, 444: 75, 2494: 448, 448: 76, 2501: 449, 2503: 450, 456: 77, 460: 78, 2511: 451, 465: 79, 2517: 452, 471: 80, 473: 81, 2522: 453, 479: 82, 2531: 454, 2534: 455, 490: 84, 2540: 457, 495: 85, 499: 86, 2550: 458, 505: 87, 508: 88, 2559: 459, 513: 89, 2564: 460, 2134: 381, 518: 90, 2569: 461, 523: 91, 2573: 462, 528: 92, 529: 93, 531: 94, 2583: 464, 3844: 716, 540: 95, 2591: 466, 544: 96, 2594: 467, 2598: 468, 2600: 469, 560: 98, 2609: 470, 564: 99, 2614: 471, 2618: 472, 573: 100, 2144: 383, 2626: 473, 579: 101, 2629: 474, 2632: 475, 585: 102, 588: 103, 2637: 476, 2641: 477, 782: 132, 2646: 478, 599: 104, 2654: 479, 2656: 480, 2658: 481, 611: 105, 614: 106, 618: 107, 3175: 572, 2672: 483, 625: 108, 626: 109, 2675: 484, 628: 110, 633: 111, 635: 112, 641: 113, 644: 114, 2693: 486, 2696: 487, 650: 115, 2700: 488, 1133: 197, 656: 116, 662: 117, 2714: 489, 3500: 635, 2720: 490, 674: 119, 2730: 492, 2731: 493, 2733: 494, 2740: 495, 2743: 496, 2748: 497, 2755: 498, 708: 122, 2759: 499, 715: 123, 2765: 500, 718: 124, 2770: 501, 2774: 502, 727: 125, 2781: 503, 2788: 504, 741: 126, 746: 127, 750: 128, 2800: 505, 2803: 506, 760: 129, 2810: 507, 764: 130, 3882: 723, 2815: 508, 771: 131, 2820: 509, 2825: 510, 2830: 511, 786: 133, 2837: 512, 790: 134, 2839: 513, 792: 135, 2845: 514, 2848: 515, 2854: 516, 2856: 517, 813: 136, 2073: 367, 821: 137, 824: 138, 2878: 519, 2869: 518, 837: 139, 2886: 520, 2889: 521, 2891: 522, 845: 140, 850: 141, 483: 83, 855: 143, 859: 144, 2910: 523, 2914: 524, 870: 146, 3217: 585, 2922: 525, 2925: 526, 882: 148, 2195: 392, 2934: 527, 3561: 648, 2937: 528, 891: 149, 2538: 456, 895: 150, 2945: 529, 3563: 649, 2954: 530, 908: 151, 2959: 531, 913: 152, 2963: 532, 2965: 533, 918: 153, 3225: 587, 923: 154, 2972: 534, 2979: 535, 932: 156, 934: 157, 939: 158, 2988: 536, 942: 159, 2993: 537, 2995: 538, 949: 160, 2999: 539, 957: 162, 3008: 540, 964: 163, 3019: 541, 975: 164, 978: 165, 3028: 542, 983: 166, 3033: 543, 990: 167, 2213: 394, 992: 168, 993: 169, 3042: 544, 995: 170, 1001: 171, 3051: 545, 1007: 172, 3057: 546, 1010: 173, 851: 142, 1013: 174, 3062: 547, 3241: 590, 3989: 745, 3065: 548, 3067: 549, 1021: 175, 1025: 176, 1027: 177, 3078: 550, 1032: 178, 3087: 551, 1040: 179, 3928: 735, 1044: 180, 3094: 552, 1049: 181, 3099: 553, 3102: 554, 3103: 555, 1057: 182, 1060: 183, 1065: 184, 3116: 557, 1072: 185, 3121: 558, 3122: 559, 1078: 186, 1083: 187, 3133: 561, 1086: 188, 3135: 562, 3136: 563, 3139: 564, 1092: 189, 3145: 565, 3148: 566, 866: 145, 1102: 190, 3151: 567, 3154: 568, 1109: 191, 1111: 192, 3161: 569, 1115: 193, 3166: 570, 1119: 194, 3173: 571, 1126: 195, 2577: 463, 3176: 573, 3178: 574, 1131: 196, 3181: 575, 1136: 198, 3188: 576, 1141: 199, 3191: 577, 3192: 578, 3194: 579, 1148: 200, 1150: 201, 1153: 202, 3202: 580, 3206: 581, 3208: 582, 3209: 583, 1163: 203, 3214: 584, 877: 147, 1169: 204, 3267: 594, 3223: 586, 1177: 205, 3232: 588, 1185: 206, 1188: 207, 3237: 589, 1190: 208, 2588: 465, 1194: 209, 3246: 591, 1224: 214, 1202: 210, 3955: 740, 3253: 592, 1207: 211, 1210: 212, 3262: 593, 1219: 213, 3272: 595, 1541: 277, 3277: 596, 1232: 215, 3281: 597, 1238: 216, 3290: 598, 1249: 217, 3299: 599, 550: 97, 1254: 218, 3304: 600, 1258: 219, 1260: 220, 3313: 602, 3314: 603, 3316: 604, 1269: 222, 1276: 223, 3329: 606, 1286: 224, 1292: 225, 3341: 607, 1581: 283, 3347: 608, 1303: 226, 3353: 609, 3356: 610, 1311: 227, 1317: 228, 1322: 229, 1324: 230, 3374: 612, 1328: 231, 3384: 613, 1337: 232, 1339: 233, 3389: 614, 1343: 234, 1344: 235, 1346: 236, 1350: 237, 3399: 616, 1356: 238, 3406: 617, 1360: 239, 3411: 618, 1367: 241, 1369: 242, 1372: 243, 1594: 285, 3660: 674, 1377: 244, 3427: 620, 114: 18, 3431: 621, 1384: 245, 1386: 246, 1389: 247, 3443: 624, 1397: 248, 1399: 249, 1403: 250, 3454: 625, 1407: 251, 3460: 626, 3308: 601, 1418: 252, 3469: 628, 1425: 253, 3476: 629, 3478: 630, 1435: 255, 1437: 256, 3486: 631, 1440: 257, 3490: 632, 1445: 258, 2289: 409, 3497: 633, 3498: 634, 1452: 259, 1454: 260, 3997: 747, 1457: 261, 3509: 636, 1617: 289, 1465: 262, 3514: 637, 1470: 263, 3521: 638, 1476: 264, 3527: 639, 1481: 265, 3530: 640, 1485: 266, 3535: 641, 3538: 642, 931: 155, 3541: 643, 1495: 267, 3544: 644, 1500: 268, 3549: 645, 1503: 269, 3552: 646, 3554: 647, 1511: 270, 252: 42, 1515: 271, 3568: 650, 1522: 272, 1524: 273, 3324: 605, 3574: 651, 1528: 274, 3579: 652, 3580: 653, 1534: 275, 3584: 654, 1537: 276, 3586: 655, 3589: 656, 3593: 657, 3596: 658, 3597: 659, 1551: 278, 3602: 660, 3604: 661, 1559: 279, 1265: 221, 3610: 662, 1568: 280, 3619: 663, 1573: 281, 1578: 282, 3628: 664, 3629: 665, 3633: 666, 1586: 284, 3635: 667, 3678: 677, 3638: 668, 3642: 669, 1599: 286, 3649: 670, 3651: 671, 1604: 287, 3654: 672, 3655: 673, 951: 161, 1612: 288, 3665: 675, 3668: 676, 1623: 290, 1625: 291, 1630: 292, 2441: 437, 3682: 678, 3684: 679, 1640: 293, 1645: 294, 3697: 680, 1652: 295, 3702: 682, 1655: 296, 2666: 482, 3710: 684, 1663: 297, 3465: 627, 3714: 685, 1667: 298, 3716: 686, 1671: 299, 3722: 688, 1676: 300, 3789: 704, 1681: 301, 1683: 302, 3734: 691, 3735: 692, 1688: 303, 3740: 693, 3743: 694, 1699: 304, 3748: 695, 3751: 696, 1706: 305, 3757: 697, 2333: 416, 1713: 307, 3762: 698, 3767: 699, 3700: 681, 1722: 308, 1725: 309, 3776: 701, 3778: 702, 1733: 310, 1741: 311, 3795: 705, 3798: 706, 1751: 312, 1756: 313, 3805: 707, 3365: 611, 2683: 485, 1767: 314, 3818: 709, 1772: 315, 3709: 683, 1776: 316, 3826: 711, 1781: 317, 3831: 712, 3834: 713, 1789: 318, 3840: 714, 2310: 413, 3843: 715, 1796: 319, 3849: 717, 3854: 718, 1807: 320, 1812: 321, 3861: 719, 1815: 322, 1822: 323, 3871: 720, 1825: 324, 3877: 721, 3880: 722, 1834: 325, 3719: 687, 3887: 724, 3890: 725, 1844: 326, 3895: 726, 3897: 727, 1850: 327, 3900: 728, 3904: 729, 1857: 328, 1860: 329, 3911: 730, 3913: 731, 1866: 330, 3916: 732, 3917: 733, 1871: 331, 3131: 560, 3922: 734, 1880: 332, 3932: 736, 1888: 333, 3938: 737, 1892: 334, 3729: 689, 1897: 335, 3946: 738, 1899: 336, 3951: 739, 3731: 690, 1909: 337, 3391: 615, 3966: 741, 1919: 338, 3971: 742, 1924: 339, 1928: 340, 3978: 743, 3981: 744, 1935: 341, 1941: 342, 3992: 746, 1949: 343, 1953: 344, 4002: 748, 667: 118, 4004: 749, 1961: 345, 4012: 750, 1965: 346, 1968: 347, 4017: 751, 2035: 361, 4021: 752, 1977: 348, 4026: 753, 1982: 349, 1986: 350, 4035: 754, 1989: 351, 4040: 755, 1993: 352, 4042: 756, 2722: 491, 1999: 353, 4049: 757, 4051: 758, 2004: 354, 2007: 355, 2011: 356, 2015: 357, 2020: 358, 2024: 359, 1363: 240, 2031: 360, 339: 55, 2041: 362}
{2048: 362, 6: 0, 684: 120, 12: 1, 16: 2, 2071: 365, 24: 3, 29: 4, 2078: 367, 34: 5, 2083: 368, 2054: 363, 40: 6, 2090: 369, 2095: 370, 48: 7, 56: 8, 2105: 372, 2106: 373, 62: 9, 2112: 374, 68: 10, 2118: 375, 73: 11, 2123: 376, 2125: 377, 79: 12, 2129: 378, 2132: 379, 85: 13, 2134: 380, 2139: 381, 95: 14, 101: 15, 2150: 383, 2153: 384, 108: 16, 2157: 385, 113: 17, 115: 18, 2166: 387, 3433: 622, 3209: 582, 122: 19, 128: 20, 2177: 388, 136: 21, 2186: 389, 2189: 390, 143: 22, 2072: 366, 146: 23, 150: 24, 3780: 702, 2202: 392, 156: 25, 164: 26, 167: 27, 2216: 394, 172: 28, 2221: 395, 175: 29, 2226: 396, 371: 61, 2231: 397, 185: 30, 2234: 398, 2238: 399, 193: 31, 2245: 400, 200: 32, 3788: 703, 2252: 401, 2253: 402, 206: 33, 3107: 555, 2261: 403, 215: 34, 218: 35, 2268: 404, 222: 36, 2272: 405, 230: 37, 2280: 406, 234: 38, 2284: 407, 240: 39, 247: 40, 2296: 409, 251: 41, 2300: 410, 2301: 411, 261: 42, 2317: 413, 271: 43, 275: 44, 2324: 414, 284: 45, 2335: 416, 2096: 371, 2340: 417, 294: 46, 2344: 418, 299: 47, 2352: 419, 305: 48, 2355: 420, 309: 49, 310: 50, 314: 51, 2365: 421, 323: 52, 2372: 422, 2375: 423, 330: 53, 2380: 424, 2381: 425, 335: 54, 2386: 426, 340: 55, 2393: 427, 348: 56, 351: 57, 2402: 428, 355: 58, 2407: 429, 362: 59, 2411: 430, 368: 60, 2419: 431, 375: 62, 2426: 432, 2428: 433, 382: 63, 1429: 253, 2433: 434, 3819: 709, 2438: 435, 2440: 436, 397: 65, 2446: 437, 400: 66, 2450: 438, 406: 67, 412: 68, 2463: 440, 416: 69, 2467: 441, 420: 70, 2473: 442, 426: 71, 2476: 443, 2477: 444, 2060: 364, 2482: 445, 2483: 446, 438: 72, 441: 73, 443: 74, 2493: 447, 447: 75, 2501: 448, 2502: 449, 455: 76, 460: 77, 461: 78, 2510: 450, 2516: 451, 471: 79, 472: 80, 2521: 452, 478: 81, 2530: 453, 2533: 454, 489: 83, 2538: 455, 2539: 456, 494: 84, 498: 85, 2549: 457, 504: 86, 507: 87, 2558: 458, 512: 88, 2563: 459, 517: 89, 2568: 460, 522: 90, 2572: 461, 2576: 462, 529: 92, 530: 93, 2582: 463, 539: 94, 2590: 465, 543: 95, 2593: 466, 549: 96, 2598: 467, 2599: 468, 559: 97, 2608: 469, 563: 98, 2613: 470, 2617: 471, 2143: 382, 572: 99, 2625: 472, 578: 100, 2628: 473, 2631: 474, 584: 101, 587: 102, 2636: 475, 781: 131, 2640: 476, 2645: 477, 598: 103, 1465: 261, 2654: 478, 2655: 479, 1384: 244, 610: 104, 613: 105, 617: 106, 2671: 482, 625: 107, 626: 108, 627: 109, 633: 110, 634: 111, 640: 112, 643: 113, 2692: 485, 2695: 486, 3180: 574, 2699: 487, 655: 115, 661: 116, 2713: 488, 666: 117, 2720: 489, 673: 118, 2161: 386, 2730: 491, 2731: 492, 2732: 493, 2739: 494, 2742: 495, 2747: 496, 2754: 497, 707: 121, 2758: 498, 714: 122, 2764: 499, 717: 123, 2769: 500, 3911: 729, 2773: 501, 726: 124, 2780: 502, 2787: 503, 740: 125, 745: 126, 749: 127, 2799: 504, 2802: 505, 759: 128, 2809: 506, 763: 129, 2814: 507, 770: 130, 2820: 508, 2821: 509, 2829: 510, 785: 132, 2836: 511, 789: 133, 2838: 512, 791: 134, 2844: 513, 2847: 514, 3641: 668, 2854: 515, 2855: 516, 812: 135, 2868: 517, 823: 137, 820: 136, 2877: 518, 836: 138, 2885: 519, 2888: 520, 2890: 521, 3895: 725, 482: 82, 846: 140, 851: 141, 854: 142, 858: 143, 2909: 522, 3216: 584, 869: 145, 2921: 524, 2924: 525, 2194: 391, 881: 147, 2933: 526, 2936: 527, 890: 148, 1514: 270, 894: 149, 2944: 528, 3917: 732, 2953: 529, 907: 150, 2958: 530, 912: 151, 3224: 586, 2962: 531, 2964: 532, 917: 152, 922: 153, 2971: 533, 2978: 534, 931: 154, 932: 155, 933: 156, 938: 157, 2987: 535, 941: 158, 2993: 536, 2994: 537, 949: 159, 2998: 538, 956: 161, 3007: 539, 963: 162, 3018: 540, 974: 163, 845: 139, 977: 164, 3027: 541, 982: 165, 3032: 542, 2212: 393, 990: 166, 991: 167, 3041: 543, 994: 169, 1000: 170, 3050: 544, 1006: 171, 3056: 545, 1009: 172, 1012: 173, 3061: 546, 3307: 600, 3064: 547, 3066: 548, 1020: 174, 1024: 175, 3584: 653, 1026: 176, 3077: 549, 1031: 177, 3927: 734, 3086: 550, 1039: 178, 1043: 179, 3093: 551, 1048: 180, 1540: 276, 3098: 552, 3101: 553, 3103: 554, 1056: 181, 1059: 182, 1064: 183, 3116: 556, 3117: 557, 1071: 184, 3122: 558, 1078: 185, 1079: 186, 3131: 559, 3132: 560, 1085: 187, 3135: 561, 3136: 562, 3138: 563, 1091: 188, 1371: 242, 865: 144, 3144: 564, 3147: 565, 1101: 189, 3150: 566, 3153: 567, 1109: 190, 1110: 191, 3160: 568, 1114: 192, 3165: 569, 1118: 193, 528: 91, 3172: 570, 1125: 194, 3175: 571, 3176: 572, 3177: 573, 1131: 195, 1132: 196, 2288: 408, 1135: 197, 3187: 575, 1140: 198, 3191: 576, 3192: 577, 3193: 578, 1148: 199, 1149: 200, 1152: 201, 3201: 579, 3206: 580, 3207: 581, 876: 146, 1162: 202, 3213: 583, 1168: 203, 3772: 699, 3222: 585, 1176: 204, 3231: 587, 1184: 205, 1187: 206, 3236: 588, 1189: 207, 3240: 589, 1193: 208, 3245: 590, 1201: 209, 3252: 591, 1206: 210, 1209: 211, 3262: 592, 3263: 593, 1219: 212, 1220: 213, 3271: 594, 3996: 746, 3276: 595, 1231: 214, 3280: 596, 1237: 215, 3289: 597, 1248: 216, 3298: 598, 1253: 217, 3303: 599, 1258: 218, 1259: 219, 1264: 220, 3313: 601, 3314: 602, 3315: 603, 1268: 221, 1275: 222, 3328: 605, 1285: 223, 1291: 224, 3340: 606, 3346: 607, 1302: 225, 3352: 608, 3355: 609, 1310: 226, 1316: 227, 1585: 283, 1322: 228, 1323: 229, 3373: 611, 1327: 230, 3383: 612, 1336: 231, 1338: 232, 3388: 613, 3390: 614, 1343: 233, 1344: 234, 1345: 235, 1349: 236, 3398: 615, 1355: 237, 3405: 616, 1359: 238, 1362: 239, 1367: 240, 1368: 241, 3419: 618, 1376: 243, 3426: 619, 3431: 620, 3432: 621, 1385: 245, 1388: 246, 3442: 623, 1397: 247, 1398: 248, 3988: 744, 1402: 249, 3453: 624, 1406: 250, 3459: 625, 3464: 626, 1417: 251, 3468: 627, 1424: 252, 3476: 628, 3477: 629, 1435: 254, 1436: 255, 3485: 630, 1439: 256, 3489: 631, 1444: 257, 3497: 632, 3498: 633, 3499: 634, 1452: 258, 1453: 259, 1456: 260, 3508: 635, 3513: 636, 1466: 262, 2913: 523, 3520: 637, 1475: 263, 3526: 638, 1480: 264, 3529: 639, 1484: 265, 3534: 640, 3537: 641, 3540: 642, 1494: 266, 3543: 643, 1499: 267, 3548: 644, 1502: 268, 3551: 645, 3553: 646, 3323: 604, 1510: 269, 3561: 647, 3562: 648, 3567: 649, 1522: 271, 1523: 272, 3573: 650, 1527: 273, 3578: 651, 3580: 652, 1533: 274, 1536: 275, 3585: 654, 392: 64, 3588: 655, 3592: 656, 3595: 657, 3597: 658, 1550: 277, 3602: 659, 3603: 660, 1558: 278, 3609: 661, 1567: 279, 3618: 662, 1572: 280, 1577: 281, 3627: 663, 1580: 282, 3629: 664, 3677: 676, 3633: 665, 3634: 666, 3637: 667, 1593: 284, 1598: 285, 3649: 669, 3650: 670, 1603: 286, 3653: 671, 3655: 672, 1611: 287, 3660: 673, 3661: 674, 1616: 288, 3667: 675, 1623: 289, 1624: 290, 1629: 291, 3682: 677, 3683: 678, 1639: 292, 1644: 293, 3696: 679, 1651: 294, 3700: 680, 3701: 681, 1654: 295, 2665: 481, 3708: 682, 1662: 296, 1666: 297, 3715: 685, 1670: 298, 3721: 687, 1675: 299, 1680: 300, 3729: 688, 1682: 301, 3733: 690, 1687: 302, 3739: 692, 3742: 693, 1698: 303, 3747: 694, 3750: 695, 1705: 304, 4039: 754, 3756: 696, 2674: 483, 1710: 305, 1712: 306, 3761: 697, 3766: 698, 1721: 307, 1724: 308, 3776: 700, 3777: 701, 1732: 309, 1740: 310, 3945: 737, 3794: 704, 3797: 705, 1750: 311, 3364: 610, 1755: 312, 3804: 706, 2682: 484, 3810: 707, 2309: 412, 1766: 313, 3818: 708, 1771: 314, 1775: 315, 3825: 710, 4051: 757, 1780: 316, 3710: 683, 3830: 711, 3833: 712, 1788: 317, 3839: 713, 3842: 714, 1795: 318, 3844: 715, 3849: 716, 3850: 717, 3714: 684, 1806: 319, 1811: 320, 3860: 718, 1814: 321, 2460: 439, 1821: 322, 3870: 719, 1824: 323, 3876: 720, 3718: 686, 3880: 721, 1833: 324, 3886: 723, 3889: 724, 1843: 325, 649: 114, 3896: 726, 1849: 326, 3899: 727, 3903: 728, 1856: 327, 1859: 328, 993: 168, 3912: 730, 1865: 329, 3915: 731, 3881: 722, 1870: 330, 3921: 733, 1879: 331, 3931: 735, 1887: 332, 3937: 736, 1891: 333, 1897: 334, 1898: 335, 3730: 689, 3950: 738, 3954: 739, 1908: 336, 950: 160, 3965: 740, 1918: 337, 2587: 464, 3970: 741, 1923: 338, 1927: 339, 3977: 742, 3735: 691, 3980: 743, 1934: 340, 1940: 341, 3991: 745, 1948: 342, 1952: 343, 4001: 747, 4003: 748, 1960: 344, 4011: 749, 1964: 345, 1967: 346, 4016: 750, 4021: 751, 4022: 752, 2657: 480, 1976: 347, 1981: 348, 1985: 349, 4034: 753, 1988: 350, 2721: 490, 1992: 351, 4041: 755, 1998: 352, 4048: 756, 2003: 353, 4052: 758, 2006: 354, 2010: 355, 2015: 356, 2016: 357, 2023: 358, 3410: 617, 2030: 359, 2332: 415, 2034: 360, 2040: 361, 682: 119}
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Gerald R. Ford', 'Bob Nardelli']
response in server.py code:
 [(4546, 23, 'New_York_Stock_Exchange'), (2239, 13, 'United_States'), (69, 10, 'The_Home_Depot'), (4279, 4, 'United_States'), (1418, 6, 'NASDAQ'), (1269, 6, 'NASDAQ'), (3563, 10, 'The_Home_Depot'), (3610, 8, 'Walmart'), (4932, 3, 'DAX'), (417, 9, 'Dow_Jones_Industrial_Average'), (4976, 6, 'CAC_40'), (2158, 28, 'New_York_Mercantile_Exchange'), (4879, 7, 'United_Kingdom'), (4889, 8, 'FTSE_100_Index'), (4922, 7, 'Germany'), (3820, 5, 'Amgen'), (518, 10, 'The_Home_Depot'), (4831, 5, 'Japan'), (4967, 6, 'France'), (3277, 12, 'Robert_Nardelli'), (4737, 18, 'Russell_Indexes'), (3767, 9, 'Amgen'), (4839, 20, 'Nikkei_225'), (1772, 3, 'Automatic_Data_Processing'), (662, 11, 'New_York_Stock_Exchange'), (3194, 7, 'Goldman_Sachs'), (750, 31, 'Institute_for_Supply_Management'), (2999, 19, 'United_States_Department_of_Commerce'), (1115, 3, 'Dow_Jones_Industrial_Average'), (978, 12, 'A._G._Edwards'), (2366, 14, 'Gerald_Ford'), (105, 8, 'New_York_City'), (4710, 8, 'New_Year'), (2382, 11, 'New_York_Stock_Exchange'), (1667, 3, 'ISM_band'), (2573, 3, 'ISM_band'), (855, 3, 'ISM_band')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(9, 5, 'Gucci')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Lord Kames']
response in server.py code:
 [(125, 9, 'Edinburgh'), (90, 23, 'University_of_Edinburgh'), (47, 9, 'Professor'), (26, 10, 'Henry_Home,_Lord_Kames')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Anchorage,_Alaska'), (14, 5, 'Hotel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(0, 14, 'Virginia_Beach,_Virginia'), (15, 10, 'Nightlife')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Beckett', 'Beckett']
response in server.py code:
 [(170, 7, 'Belfast'), (252, 5, 'Paris'), (150, 16, 'Campbell_College'), (65, 6, 'Dublin'), (224, 24, 'École_Normale_Supérieure'), (48, 15, 'Trinity_College,_Dublin'), (91, 7, 'Samuel_Beckett'), (0, 7, 'Samuel_Beckett')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Jobs', 'Baez']
response in server.py code:
 [(0, 4, 'Steve_Jobs'), (64, 8, 'Stanford_University'), (9, 4, 'Joan_Baez')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(347, 7, 'Hanover'), (105, 7, 'Hanover')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Kenny Harrison', 'Jonathan Edwards']
response in server.py code:
 [(91, 14, 'Kenny_Harrison'), (487, 13, '1996_Summer_Olympics'), (586, 8, 'Sarajevo'), (41, 8, 'Sarajevo'), (130, 16, 'Jonathan_Edwards_(athlete)'), (914, 8, 'Sarajevo'), (521, 7, 'Jonathan_Edwards_(athlete)'), (837, 5, 'Milan'), (730, 7, 'Jonathan_Edwards_(athlete)'), (632, 6, 'Bosnia_and_Herzegovina'), (255, 41, 'International_Association_of_Athletics_Federations'), (723, 5, 'Milan'), (674, 7, 'Balkans'), (51, 11, 'Monte_Carlo'), (812, 21, 'IAAF_Grand_Prix_Final'), (74, 7, 'Summer_Olympic_Games'), (22, 7, 'John_Edwards')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Mohammed Saeed al-Sahhaf']
response in server.py code:
 [(798, 40, 'International_Committee_of_the_Red_Cross'), (74, 4, 'Iran'), (704, 13, 'Iran–Iraq_War'), (84, 15, 'Prisoner_of_war'), (314, 24, 'Muhammad_Saeed_al-Sahhaf'), (891, 7, 'Baghdad'), (928, 16, 'Associated_Press'), (257, 17, 'National_Iraqi_News_Agency')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(57, 5, 'Cairo'), (174, 16, 'Arab_Contractors_SC'), (30, 25, "African_Cup_Winners'_Cup"), (106, 25, "African_Cup_Winners'_Cup"), (192, 5, 'Egypt'), (211, 5, 'DR_Congo_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Gregoire']
response in server.py code:
 [(0, 8, 'Christine_Gregoire')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Carlos Osorio', 'Venegas', 'Bownds', 'Bownds']
response in server.py code:
 [(354, 7, 'Houston'), (13, 5, 'Texas'), (1140, 13, 'United_States'), (1267, 6, 'London'), (1020, 6, 'Greg_Bownds'), (121, 7, 'Houston'), (828, 6, 'Carlos_Manuel_Arana_Osorio'), (726, 13, 'Carlos_Manuel_Arana_Osorio'), (241, 36, 'George_Bush_Intercontinental_Airport'), (1451, 6, 'Greg_Bownds'), (396, 6, 'Police'), (938, 7, 'Julieta_Venegas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(31, 13, 'Kings_of_Leon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Mark Zuckerberg', 'Eduardo Saverin', 'Andrew McCollum', 'Dustin Moskovitz', 'Chris Hughes']
response in server.py code:
 [(89, 9, 'Roommate'), (48, 15, 'Mark_Zuckerberg'), (153, 16, 'Dustin_Moskovitz'), (73, 15, 'Harvard_College'), (119, 15, 'Eduardo_Saverin'), (136, 15, 'Andrew_McCollum'), (69, 3, 'Bon_Jovi'), (175, 12, 'Christopher_Hughes_II')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(28, 14, 'House_of_Blues'), (0, 24, 'KC_and_the_Sunshine_Band')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(154, 5, 'Paris'), (36, 17, 'Collège_de_France'), (83, 55, 'ESPCI_ParisTech'), (19, 9, 'Professor'), (67, 8, 'Film_director')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(30, 11, 'James_Adams_(character)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['BARATELLI', 'Dominique Baratelli', 'Albert Emon']
response in server.py code:
 [(226, 16, 'Paris_Saint-Germain_F.C.'), (40, 6, 'France'), (260, 11, 'Albert_Emon'), (133, 6, 'France'), (90, 19, 'Dominique_Baratelli'), (191, 9, 'Dominique_Baratelli'), (9, 9, 'Dominique_Baratelli'), (326, 8, 'En_Avant_de_Guingamp'), (354, 4, 'OGC_Nice'), (34, 4, 'Nice'), (217, 4, 'OGC_Nice'), (160, 4, 'OGC_Nice'), (304, 4, 'OGC_Nice'), (28, 4, 'OGC_Nice')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Monet', 'Alfred Sisley']
response in server.py code:
 [(630, 13, 'Alfred_Sisley'), (400, 5, 'Claude_Monet'), (39, 7, 'Curator'), (103, 13, 'Impressionism'), (449, 4, 'Nice'), (755, 20, 'Saint-Laurent-du-Var'), (736, 7, 'French_Riviera')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(452, 7, 'Miami_Marlins'), (1164, 12, 'Philadelphia_Phillies'), (619, 9, 'Tampa_Bay_Rays'), (1199, 8, 'Colorado_Rockies'), (368, 10, 'Pittsburgh_Pirates'), (317, 6, 'Boston_Red_Sox'), (476, 12, 'Philadelphia_Phillies'), (1035, 7, 'Los_Angeles_Angels_of_Anaheim'), (1078, 7, 'Los_Angeles_Angels_of_Anaheim'), (877, 8, 'Colorado_Rockies'), (590, 12, 'New_York_Islanders'), (697, 7, 'Detroit_Tigers'), (0, 3, 'National_Hockey_League'), (1187, 8, 'St._Louis_Cardinals'), (51, 8, 'New_York_City'), (562, 10, 'New_York_Rangers'), (664, 16, 'National_League_Central'), (84, 22, 'National_Hockey_League'), (769, 8, 'St._Louis_Cardinals'), (1097, 7, 'Toronto'), (1144, 8, 'Montreal_Expos'), (1218, 8, 'Edmonton'), (955, 11, 'Los_Angeles_Angels_of_Anaheim'), (795, 7, 'Toronto_Blue_Jays'), (1208, 6, 'Ottawa'), (341, 8, 'Montreal'), (984, 8, 'San_Jose_Giants'), (292, 7, 'Buffalo_Bisons'), (395, 6, 'Ottawa_Lynx')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Bob Martin']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Reagan']
response in server.py code:
 [(13, 6, 'Ronald_Reagan'), (145, 14, 'National_Guard_of_the_United_States'), (111, 24, 'University_of_California'), (93, 10, 'Protest'), (3, 8, 'Governor')]
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = []
response in server.py code:
 [(9, 11, 'Theatrical_property')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 0
persons_mentions_seen = ['Mandela', 'F. W. de Klerk']
response in server.py code:
 [(153, 14, 'F._W._de_Klerk'), (98, 7, 'Nelson_Mandela'), (254, 3, 'African_National_Congress'), (280, 12, 'South_Africa'), (143, 9, 'President'), (307, 9, 'President')]
response in server.py code:
 []
given spans fix. original text:  Müller scored a hattrick against England.
original word:  England England
new split:  E  and  ngland
[(0, 6), (7, 13), (14, 15), (16, 24), (25, 32), (33, 34), (34, 40)]
{0: 0, 16: 3, 34: 6, 33: 5, 7: 1, 25: 4, 14: 2}
{32: 4, 40: 6, 34: 5, 6: 0, 24: 3, 13: 1, 15: 2}
given span: Müller   new span: Müller
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = ['Müller']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(189, 5, 'Avnet'), (0, 9, 'Avnet'), (33, 34, 'U.S._Securities_and_Exchange_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = ['Gianluigi Lentini', 'Fabio Capello', 'Emiliano Mondonico']
response in server.py code:
 [(68, 7, 'Italy'), (97, 17, 'Gianluigi_Lentini'), (44, 5, 'Milan'), (354, 7, 'Gianluigi_Lentini'), (782, 7, 'Gianluigi_Lentini'), (824, 13, 'Fabio_Capello'), (327, 8, 'Atalanta_B.C.'), (764, 8, 'Atalanta_B.C.'), (281, 20, 'La_Gazzetta_dello_Sport'), (385, 6, 'Torino_F.C.'), (731, 5, 'Turin'), (225, 8, 'Atalanta_B.C.'), (876, 6, 'Torino_F.C.'), (884, 18, 'Emiliano_Mondonico'), (34, 8, 'Atalanta_B.C.'), (212, 7, 'Serie_A'), (374, 5, 'A.C._Milan'), (131, 5, 'A.C._Milan'), (9, 5, 'A.C._Milan'), (17, 7, 'Gianluigi_Lentini')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(146, 12, 'Human_rights'), (114, 25, 'African_National_Congress'), (12, 12, 'South_Africa'), (74, 9, 'Apartheid'), (1479, 6, 'Angola'), (297, 10, 'Dominant_minority'), (226, 11, 'Presenter'), (422, 35, 'Truth_and_Reconciliation_Commission_(South_Africa)'), (1244, 13, 'European_Commissioner'), (1416, 10, 'Land_mine'), (199, 4, 'Bomb'), (184, 7, 'Torture')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(56, 10, 'Piranha_3D')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(352, 9, 'Tampa_Bay_Rays'), (283, 7, 'Miami_Marlins'), (110, 3, 'National_Hockey_League'), (54, 3, 'Greenwich_Mean_Time'), (0, 3, 'National_Hockey_League'), (200, 22, 'National_Hockey_League'), (103, 3, 'National_Basketball_Association'), (274, 6, 'Boston_Red_Sox'), (59, 8, 'New_York_City'), (341, 8, 'St._Louis_Blues'), (263, 8, 'Hartford_Whalers'), (321, 7, 'Calgary_Flames'), (364, 11, 'Los_Angeles_Angels_of_Anaheim')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(27, 10, 'Daily_News_(New_York)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(26, 8, 'Florence'), (14, 7, 'Bologna')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(0, 13, 'Breast_cancer')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = ['Mandela']
response in server.py code:
 [(48, 13, 'Robben_Island'), (76, 16, 'Pollsmoor_Prison'), (0, 7, 'Nelson_Mandela'), (97, 21, 'Drakenstein_Correctional_Centre')]
response in server.py code:
 []
given spans fix. original text:  The Enola Gay bombed Hiroshima at the end of Second World War.﻿
original word:  War.﻿ War.﻿
new split:  War  and  .﻿
[(0, 3), (4, 9), (10, 13), (14, 20), (21, 30), (31, 33), (34, 37), (38, 41), (42, 44), (45, 51), (52, 57), (58, 61), (61, 63)]
{0: 0, 34: 6, 4: 1, 38: 7, 10: 2, 45: 9, 14: 3, 61: 12, 52: 10, 21: 4, 58: 11, 42: 8, 31: 5}
{33: 5, 3: 0, 37: 6, 41: 7, 44: 8, 13: 2, 51: 9, 20: 3, 9: 1, 57: 10, 61: 11, 30: 4, 63: 12}
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(21, 9, 'Hiroshima'), (45, 16, 'World_War_II'), (4, 9, 'Enola_Gay')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(216, 9, 'Australia_national_cricket_team'), (138, 19, 'Singer_World_Series'), (52, 7, 'Colombo'), (86, 9, 'Australia_national_cricket_team'), (245, 9, 'Sri_Lanka_national_cricket_team'), (25, 9, 'Australia_national_cricket_team'), (71, 9, 'Sri_Lanka_national_cricket_team'), (10, 9, 'Sri_Lanka_national_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(1172, 14, 'Negeri_Sembilan'), (1246, 12, 'Port_Dickson'), (4, 8, 'Malaysia'), (1099, 5, 'Lukut'), (409, 10, 'Resource_allocation'), (64, 19, 'Government_agency'), (819, 8, 'Minister_(government)'), (472, 4, 'Poverty'), (116, 8, 'Economy'), (228, 14, 'Implementation'), (439, 8, 'Ministry_(government_department)'), (1064, 6, 'Mussel'), (1383, 7, 'Research'), (250, 5, 'Rural_area'), (55, 5, 'Political_divisions_of_the_United_States')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = ['Peyton Manning']
response in server.py code:
 [(105, 14, 'Peyton_Manning'), (89, 3, 'Most_Valuable_Player')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = ['Marshall Faulk', 'Jason Belser', 'Paul Justin', 'Jim Harbaugh', 'Tony Siragusa', 'Ray Buchanan', 'Quentin Coryatt', 'Kerwin Bell', 'Marvin Harrison', 'Troy Vincent', 'Ty Detmer', 'Ricky Watters']
response in server.py code:
 [(295, 14, 'Marshall_Faulk'), (516, 11, 'Paul_Justin'), (1346, 6, 'Paul_Justin'), (1772, 5, 'Marshall_Faulk'), (1224, 5, 'Marshall_Faulk'), (1421, 6, 'Paul_Justin'), (1519, 11, 'Kerwin_Bell'), (556, 12, 'Jim_Harbaugh'), (1896, 9, 'Ty_Detmer'), (1956, 13, 'Ricky_Watters'), (1018, 17, 'Green_Bay_Packers'), (1179, 12, 'Ray_Buchanan'), (1752, 12, 'Troy_Vincent'), (867, 14, 'Dallas_Cowboys'), (420, 5, 'Indianapolis_Colts'), (1388, 8, 'Jim_Harbaugh'), (934, 13, 'New_York_Jets'), (68, 12, 'Indianapolis'), (1661, 15, 'Marvin_Harrison'), (886, 19, 'Washington_Redskins'), (1559, 14, 'Miami_Dolphins'), (111, 18, 'Indianapolis_Colts'), (1584, 3, 'National_Football_League'), (1086, 5, 'Indianapolis_Colts'), (232, 19, 'Philadelphia_Eagles'), (1153, 13, 'Tony_Siragusa'), (625, 5, 'Indianapolis_Colts'), (0, 3, 'National_Football_League'), (1207, 15, 'Quentin_Coryatt'), (354, 12, 'Jason_Belser'), (464, 6, 'Philadelphia_Eagles'), (1877, 6, 'Philadelphia_Eagles'), (729, 10, 'Cincinnati'), (713, 11, 'Kansas_City,_Missouri'), (745, 6, 'Philadelphia_Eagles'), (36, 6, 'Philadelphia_Eagles'), (1737, 12, 'Philadelphia_Phillies'), (679, 12, 'Indianapolis'), (988, 12, 'Philadelphia_Phillies')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(15, 23, 'University_of_Edinburgh'), (71, 22, 'Scotland'), (44, 10, 'University')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Kshatriya')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(18, 6, 'Odessa')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(40, 24, 'Johns_Hopkins_University'), (100, 14, 'Teacher'), (146, 9, 'Assistant_referee_(association_football)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = []
response in server.py code:
 [(115, 9, 'Australia'), (704, 7, 'Reuters'), (258, 23, 'Australian_Securities_Exchange'), (804, 10, 'Queensland'), (472, 8, 'Adelaide'), (536, 3, 'Common_Access_Card'), (401, 3, 'Common_Access_Card'), (370, 3, 'Common_Access_Card'), (44, 3, 'Common_Access_Card')]
self.special_words_assertion_errors = 0
gm_idx_errors = 1
persons_mentions_seen = ['Stewart Talbot', 'Madeleine Albright', 'Richard Levin']
response in server.py code:
 [(136, 18, 'Madeleine_Albright'), (295, 13, 'Rick_Levin'), (670, 11, 'Middle_East'), (44, 7, 'United_States'), (236, 15, 'Yale_University'), (902, 13, 'Time_(magazine)'), (281, 9, 'Northeastern_United_States'), (28, 14, 'Stewart_Talbot'), (77, 5, 'Political_divisions_of_the_United_States')]
given spans fix. original text:  Völler will never forget the match against Oranje in San Siro.
original word:  Oranje Oranje
new split:  O  and  ranje
[(0, 6), (7, 11), (12, 17), (18, 24), (25, 28), (29, 34), (35, 42), (43, 44), (44, 49)]
{0: 0, 18: 3, 35: 6, 7: 1, 25: 4, 43: 7, 12: 2, 29: 5, 44: 8}
{17: 2, 34: 5, 6: 0, 49: 8, 24: 3, 44: 7, 42: 6, 11: 1, 28: 4}
given spans fix. original text:  Völler will never forget the match against Oranje in San Siro.
original word:  San San
new split:  S  and  an
[(0, 6), (7, 11), (12, 17), (18, 24), (25, 28), (29, 34), (35, 42), (43, 44), (44, 49), (50, 52), (53, 54), (54, 56)]
{0: 0, 35: 6, 7: 1, 44: 8, 43: 7, 12: 2, 18: 3, 50: 9, 53: 10, 54: 11, 25: 4, 29: 5}
{34: 5, 6: 0, 49: 8, 42: 6, 11: 1, 44: 7, 17: 2, 52: 9, 54: 10, 56: 11, 24: 3, 28: 4}
given span: Völler   new span: Völler
given span: ranje   new span: ranje
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Völler']
response in server.py code:
 [(0, 7, 'Rudi_Völler')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lawrence Tribe', 'Gore']
response in server.py code:
 [(59, 10, 'Washington,_D.C.'), (770, 14, 'Laurence_Tribe'), (412, 24, 'Johns_Hopkins_University'), (400, 9, 'Baltimore'), (3237, 8, 'United_States_Congress'), (838, 4, 'Al_Gore'), (2981, 11, 'Legislature'), (171, 13, 'Supreme_Court_of_the_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Trisha']
response in server.py code:
 [(59, 5, 'Paris'), (49, 6, 'Trisha_(actress)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(809, 11, 'Natural_gas'), (63, 15, 'Norsk_Hydro'), (1053, 6, 'Norway'), (849, 9, 'Petroleum'), (144, 11, 'Power_station'), (1237, 20, 'Hydroelectricity'), (185, 11, 'Electricity'), (303, 48, 'Norwegian_Water_Resources_and_Energy_Directorate'), (965, 14, 'Carbon_dioxide'), (1490, 4, 'Oslo'), (267, 19, 'Government-owned_corporation'), (1355, 8, 'Nitrogen'), (124, 8, 'Hydrogen'), (235, 9, 'Greenhouse_gas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(491, 7, 'Atlanta_Braves'), (470, 9, 'Cleveland_Indians'), (1101, 9, 'Minnesota_Twins'), (643, 7, 'Houston_Astros'), (1015, 9, 'Cleveland_Indians'), (451, 7, 'Detroit_Tigers'), (332, 12, 'Philadelphia_Phillies'), (360, 6, 'Boston_Red_Sox'), (0, 3, 'National_Basketball_Association'), (84, 31, 'National_Basketball_Association'), (678, 9, 'Minnesota_Twins'), (1008, 6, 'Boston_Red_Sox'), (51, 8, 'New_York_City'), (1176, 9, 'Los_Angeles_Lakers'), (841, 9, 'Los_Angeles_Lakers'), (1028, 7, 'Detroit_Tigers'), (886, 11, 'Los_Angeles_Clippers'), (572, 7, 'Toronto_Blue_Jays'), (822, 7, 'Seattle_Mariners'), (1152, 12, 'Golden_State_Warriors'), (530, 9, 'Milwaukee_Brewers'), (1089, 11, 'San_Antonio_Missions'), (909, 12, 'Golden_State_Warriors'), (273, 8, 'New_York_Yankees'), (1132, 8, 'Portland_Sea_Dogs'), (1076, 9, 'Vancouver'), (1036, 8, 'New_York_Yankees'), (748, 11, 'San_Antonio_Missions')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['him']
response in server.py code:
 [(167, 21, 'Kirkcaldy_High_School')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(23, 6, 'Tucson,_Arizona'), (11, 8, 'Shih_Tzu'), (0, 10, 'Purebred')]
response in server.py code:
 []
given spans fix. original text:  Eastman Kodak Co is raising 25 mln dlrs through an offering of notes due 1997, said sole underwriter Morgan Stanley and Co Inc. The notes have a 7-1/2 pct coupon and an initial offering price of 99.625 to yield 7.34 pct, or 20 basis points over five-year Treasury notes. MorganMoodyMoody's Investors Service Inc and AA by Standard and PoorStandard and Poor's Corp. Investors can sell the notes back to the company in 1992. Reuter
original word:  MorganMoodyMoody MorganMoodyMoody
new split:  Morgan  and  MoodyMoody
[(0, 7), (8, 13), (14, 16), (17, 19), (20, 27), (28, 30), (31, 34), (35, 39), (40, 47), (48, 50), (51, 59), (60, 62), (63, 68), (69, 72), (73, 77), (77, 78), (79, 83), (84, 88), (89, 100), (101, 107), (108, 115), (116, 119), (120, 122), (123, 126), (126, 127), (128, 131), (132, 137), (138, 142), (143, 144), (145, 150), (151, 154), (155, 161), (162, 165), (166, 168), (169, 176), (177, 185), (186, 191), (192, 194), (195, 201), (202, 204), (205, 210), (211, 215), (216, 219), (219, 220), (221, 223), (224, 226), (227, 232), (233, 239), (240, 244), (245, 254), (255, 263), (264, 269), (269, 270), (271, 277), (277, 287)]
{0: 0, 128: 25, 132: 26, 8: 1, 138: 27, 269: 52, 14: 2, 143: 28, 17: 3, 205: 40, 20: 4, 277: 54, 151: 30, 155: 31, 28: 5, 31: 6, 162: 32, 35: 7, 166: 33, 40: 8, 169: 34, 48: 9, 177: 35, 51: 10, 186: 36, 60: 11, 63: 12, 192: 37, 195: 38, 69: 13, 73: 14, 202: 39, 77: 15, 79: 16, 271: 53, 211: 41, 84: 17, 216: 42, 89: 18, 219: 43, 221: 44, 224: 45, 227: 46, 101: 19, 145: 29, 233: 47, 108: 20, 240: 48, 116: 21, 245: 49, 264: 51, 120: 22, 123: 23, 126: 24, 255: 50}
{131: 25, 7: 0, 137: 26, 13: 1, 142: 27, 16: 2, 19: 3, 277: 53, 150: 29, 154: 30, 27: 4, 30: 5, 287: 54, 161: 31, 34: 6, 165: 32, 39: 7, 168: 33, 263: 50, 47: 8, 176: 34, 50: 9, 185: 35, 59: 10, 62: 11, 191: 36, 194: 37, 68: 12, 72: 13, 201: 38, 204: 39, 77: 14, 78: 15, 269: 51, 210: 40, 83: 16, 270: 52, 215: 41, 88: 17, 219: 42, 220: 43, 223: 44, 144: 28, 226: 45, 100: 18, 232: 46, 107: 19, 239: 47, 115: 20, 244: 48, 254: 49, 119: 21, 122: 22, 126: 23, 127: 24}
given spans fix. original text:  Eastman Kodak Co is raising 25 mln dlrs through an offering of notes due 1997, said sole underwriter Morgan Stanley and Co Inc. The notes have a 7-1/2 pct coupon and an initial offering price of 99.625 to yield 7.34 pct, or 20 basis points over five-year Treasury notes. MorganMoodyMoody's Investors Service Inc and AA by Standard and PoorStandard and Poor's Corp. Investors can sell the notes back to the company in 1992. Reuter
original word:  Corp. Corp.
new split:  Corp  and  .
[(0, 7), (8, 13), (14, 16), (17, 19), (20, 27), (28, 30), (31, 34), (35, 39), (40, 47), (48, 50), (51, 59), (60, 62), (63, 68), (69, 72), (73, 77), (77, 78), (79, 83), (84, 88), (89, 100), (101, 107), (108, 115), (116, 119), (120, 122), (123, 126), (126, 127), (128, 131), (132, 137), (138, 142), (143, 144), (145, 150), (151, 154), (155, 161), (162, 165), (166, 168), (169, 176), (177, 185), (186, 191), (192, 194), (195, 201), (202, 204), (205, 210), (211, 215), (216, 219), (219, 220), (221, 223), (224, 226), (227, 232), (233, 239), (240, 244), (245, 254), (255, 263), (264, 269), (269, 270), (271, 277), (277, 287), (287, 289), (290, 299), (300, 307), (308, 311), (312, 315), (316, 318), (319, 321), (322, 330), (331, 334), (335, 347), (348, 351), (352, 356), (356, 358), (359, 363), (363, 364)]
{0: 0, 128: 25, 363: 69, 132: 26, 8: 1, 138: 27, 290: 56, 269: 52, 14: 2, 143: 28, 17: 3, 205: 40, 20: 4, 277: 54, 151: 30, 155: 31, 28: 5, 31: 6, 162: 32, 35: 7, 166: 33, 40: 8, 169: 34, 300: 57, 48: 9, 177: 35, 51: 10, 308: 58, 312: 59, 186: 36, 287: 55, 60: 11, 63: 12, 192: 37, 352: 66, 322: 62, 195: 38, 69: 13, 73: 14, 202: 39, 331: 63, 77: 15, 79: 16, 271: 53, 335: 64, 211: 41, 84: 17, 216: 42, 89: 18, 316: 60, 219: 43, 348: 65, 221: 44, 224: 45, 227: 46, 356: 67, 101: 19, 145: 29, 233: 47, 359: 68, 108: 20, 240: 48, 319: 61, 116: 21, 245: 49, 264: 51, 120: 22, 123: 23, 126: 24, 255: 50}
{131: 25, 7: 0, 363: 68, 137: 26, 13: 1, 142: 27, 16: 2, 19: 3, 277: 53, 150: 29, 299: 56, 154: 30, 27: 4, 30: 5, 287: 54, 318: 60, 161: 31, 34: 6, 347: 64, 165: 32, 39: 7, 168: 33, 263: 50, 47: 8, 176: 34, 50: 9, 307: 57, 334: 63, 311: 58, 185: 35, 59: 10, 62: 11, 191: 36, 321: 61, 194: 37, 68: 12, 289: 55, 72: 13, 201: 38, 330: 62, 204: 39, 77: 14, 78: 15, 269: 51, 210: 40, 83: 16, 270: 52, 215: 41, 88: 17, 356: 66, 219: 42, 220: 43, 223: 44, 144: 28, 226: 45, 315: 59, 100: 18, 358: 67, 232: 46, 107: 19, 364: 69, 239: 47, 115: 20, 244: 48, 254: 49, 119: 21, 122: 22, 351: 65, 126: 23, 127: 24}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Eastman_Kodak')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Imre']
response in server.py code:
 [(89, 28, 'Auschwitz_concentration_camp'), (141, 10, 'Buchenwald_concentration_camp'), (67, 14, 'History_of_the_Jews_in_Hungary'), (21, 4, 'Sándor_Imre')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['M. Waugh', 'Jayasuriya', 'Dharmasena', 'Vaas', 'Chandana', 'S. Waugh', 'Muralitharan', 'Kaluwitharana', 'Chandana', 'Ranatunga', 'Muralitharan', 'Kaluwitharana', 'Chandana', 'D. Fleming', 'Chandana', 'Jayasuriya', 'de Silva', 'Dharmasena', 'Muralitharan', 'Jayasuriya', 'Chandana', 'S. Waugh', 'McGrath', 'U. Chandana', 'Dharmasena', 'Vaas', 'Muralitharan', 'S. Waugh', 'McGrath', 'Gillespie', 'M. Waugh', 'Bevan', 'Aravinda de Silva']
response in server.py code:
 [(175, 8, 'Mark_Waugh'), (294, 8, 'Steve_Waugh'), (1269, 8, 'Mark_Waugh'), (844, 8, 'Steve_Waugh'), (714, 12, 'Muttiah_Muralitharan'), (1178, 8, 'Steve_Waugh'), (305, 12, 'Muttiah_Muralitharan'), (407, 12, 'Muttiah_Muralitharan'), (1154, 12, 'Muttiah_Muralitharan'), (275, 4, 'Chaminda_Vaas'), (760, 8, 'Upul_Chandana'), (87, 19, 'Singer_World_Series'), (1341, 17, 'Aravinda_de_Silva'), (282, 8, 'Upul_Chandana'), (489, 10, 'Sanath_Jayasuriya'), (478, 8, 'Upul_Chandana'), (454, 8, 'Upul_Chandana'), (192, 10, 'Sanath_Jayasuriya'), (373, 8, 'Upul_Chandana'), (738, 10, 'Sanath_Jayasuriya'), (1148, 4, 'Chaminda_Vaas'), (357, 13, 'Romesh_Kaluwitharana'), (438, 13, 'Romesh_Kaluwitharana'), (1249, 9, 'Jason_Gillespie'), (44, 7, 'Colombo'), (976, 7, 'Glenn_McGrath'), (250, 10, 'Kumar_Dharmasena'), (674, 8, 'Lanka_de_Silva'), (1136, 10, 'Kumar_Dharmasena'), (165, 9, 'Australia_national_cricket_team'), (129, 9, 'Australia_national_cricket_team'), (395, 9, 'Arjuna_Ranatunga'), (1387, 8, 'Zimbabwe_national_cricket_team'), (693, 10, 'Kumar_Dharmasena'), (814, 7, 'Stephen_Fleming'), (1211, 7, 'Glenn_McGrath'), (987, 11, 'U._Chandana'), (143, 9, 'Sri_Lanka_national_cricket_team'), (10, 9, 'Australia_national_cricket_team'), (920, 7, 'Stephen_Fleming'), (780, 9, 'Sri_Lanka_national_cricket_team'), (806, 5, 'Ian_Healy'), (1379, 5, 'India_national_cricket_team'), (952, 7, 'Stephen_Fleming'), (1306, 5, 'Michael_Bevan'), (22, 9, 'Sri_Lanka_national_cricket_team'), (1231, 7, 'Stephen_Fleming'), (1288, 7, 'Darren_Lehmann')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Hertha_BSC'), (19, 8, 'Borussia_Dortmund')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Rob Williams', 'Peter Thompson']
response in server.py code:
 [(75, 5, 'Michigan'), (653, 12, 'Pennsylvania'), (2481, 7, 'Detroit'), (640, 8, 'New_York_City'), (55, 18, 'Grosse_Pointe_Park,_Michigan'), (904, 31, 'Minnesota_Department_of_Natural_Resources'), (3719, 14, 'Peter_Thompson_(English_footballer)'), (2330, 12, 'Rob_Williams_(basketball)')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Benjamin Netanyahu']
response in server.py code:
 [(575, 18, 'Benjamin_Netanyahu'), (271, 7, 'Israel'), (873, 8, 'Israel'), (351, 10, 'Gaza_Strip'), (200, 14, 'Civil_aviation'), (1105, 8, 'Passport'), (1135, 7, 'Customs'), (296, 35, 'Yasser_Arafat_International_Airport'), (794, 24, 'National_aviation_authority'), (79, 11, 'State_of_Palestine'), (513, 12, 'Ratification'), (94, 7, 'Airport'), (502, 7, 'Cabinet_of_Israel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Josh Beckett']
response in server.py code:
 [(146, 12, 'Josh_Beckett'), (123, 17, 'Baltimore_Orioles')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(1394, 9, 'Tampa_Bay_Rays'), (1333, 7, 'Atlanta_Braves'), (1259, 10, 'Cincinnati_Reds'), (974, 9, 'Tampa_Bay_Rays'), (1356, 9, 'San_Diego_Padres'), (1314, 9, 'San_Francisco_Giants'), (1369, 10, 'Pittsburgh_Pirates'), (1490, 9, 'Minnesota_Twins'), (1476, 13, 'San_Francisco_Giants'), (477, 10, 'Cincinnati_Reds'), (1306, 7, 'Houston_Astros'), (1414, 7, 'Arizona_Diamondbacks'), (1102, 7, 'Atlanta_Braves'), (1503, 7, 'Detroit_Tigers'), (1246, 9, 'Baltimore_Orioles'), (826, 9, 'San_Francisco_Giants'), (605, 9, 'San_Diego_Padres'), (55, 8, 'New_York_City'), (428, 7, 'Houston_Astros'), (777, 12, 'Philadelphia_Phillies'), (351, 7, 'New_York_Jets'), (629, 7, 'Oakland_Athletics'), (906, 9, 'Minnesota_Twins'), (1545, 7, 'Oakland_Athletics'), (1456, 7, 'Seattle_Mariners'), (502, 9, 'Baltimore_Orioles'), (1027, 13, 'San_Francisco_Giants'), (804, 7, 'Arizona_Diamondbacks'), (952, 7, 'Detroit_Tigers'), (1422, 7, 'New_York_Jets'), (75, 24, 'National_Football_League'), (0, 3, 'National_Football_League'), (1226, 8, 'St._Louis_Cardinals'), (198, 8, 'United_States'), (1530, 11, 'Kansas_City_Royals'), (1079, 8, 'St._Louis_Cardinals'), (651, 7, 'Seattle_Mariners'), (1464, 8, 'Carolina_Mudcats'), (579, 11, 'Kansas_City_Royals'), (1238, 7, 'Chicago'), (1290, 12, 'Jacksonville_Suns'), (1344, 11, 'New_Orleans_Zephyrs'), (1445, 7, 'Buffalo_Bisons'), (450, 12, 'Jacksonville_Suns')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['recipient']
response in server.py code:
 [(44, 9, 'Stockholm'), (107, 4, 'Oslo'), (55, 6, 'Sweden'), (113, 6, 'Norway'), (234, 16, 'Nobel_Foundation'), (143, 8, 'Laureate'), (129, 9, 'John_Paul_Stevens')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(41, 8, 'New_York_City'), (0, 3, 'National_Football_League'), (80, 15, 'The_Football_League'), (151, 12, 'Philadelphia_Phillies'), (135, 12, 'Indianapolis')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(27, 9, 'Monologue'), (0, 5, 'Printing')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(337, 6, 'Brazil')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mario Capecchi']
response in server.py code:
 [(57, 18, 'Harvard_University'), (138, 18, 'University_of_Utah'), (35, 18, 'Harvard_Society_of_Fellows'), (21, 6, 'Fellow'), (103, 8, 'Mario_Capecchi'), (123, 7, 'Faculty_(academic_staff)'), (0, 14, 'Mario_Capecchi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(194, 19, 'Singer_World_Series'), (10, 9, 'Australia_national_cricket_team'), (70, 9, 'Australia_national_cricket_team'), (51, 7, 'Colombo'), (134, 9, 'Sri_Lanka_national_cricket_team'), (40, 9, 'Sri_Lanka_national_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(15, 7, 'US_Open_(tennis)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Brett Favre']
response in server.py code:
 [(45, 42, 'National_Football_League'), (133, 11, 'Brett_Favre')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['John Weir']
response in server.py code:
 [(2704, 5, 'Japan'), (2, 18, 'Xinhua_News_Agency'), (2711, 11, 'South_Korea'), (209, 5, 'China'), (2727, 6, 'Taiwan'), (22, 7, 'Beijing'), (92, 2, 'United_States'), (155, 16, 'Jiangsu'), (1927, 6, 'Rudong_County'), (74, 10, 'Weir_Group'), (3174, 5, 'Gordon_Brown')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Rembrandt']
response in server.py code:
 [(194, 7, "Sotheby's"), (224, 13, 'Auction'), (810, 14, 'Online_auction'), (367, 8, 'Antique'), (394, 18, 'Sports_memorabilia'), (426, 12, 'Collectable'), (96, 13, 'Beanie_Babies'), (1278, 11, 'Charge_card'), (212, 8, 'New_York_City'), (860, 8, 'Baseball'), (165, 9, 'Rembrandt'), (1332, 8, "Christie's")]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(9, 4, 'Room')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(78, 8, 'Scotland'), (13, 6, 'Rector_(ecclesiastical)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Orlando Pace', 'Cornell Brown', 'Juan Roque', 'Jared Tomich', 'Vince Lombardi']
response in server.py code:
 [(600, 4, 'Orlando_Pace'), (522, 4, 'Orlando_Pace'), (77, 7, 'Houston'), (935, 14, 'Vince_Lombardi'), (294, 4, 'Orlando_Pace'), (54, 14, 'Lombardi_Award'), (776, 14, 'Lombardi_Award'), (671, 13, 'Cornell_Brown'), (170, 14, 'Lombardi_Award'), (224, 7, 'Houston'), (746, 12, 'Jared_Tomich'), (717, 10, 'Juan_Roque'), (119, 12, 'Orlando_Pace'), (974, 17, 'Green_Bay_Packers'), (762, 8, 'Nebraska'), (0, 4, 'National_Collegiate_Athletic_Association'), (209, 11, 'Rotary_International'), (686, 13, 'Arizona_State_University'), (382, 13, 'Arizona_State_University'), (643, 13, 'Virginia_Tech'), (96, 10, 'Ohio_State_Buckeyes_football'), (317, 10, 'Ohio_State_Buckeyes_football'), (36, 4, 'Orlando_Pace'), (364, 9, 'Rose_Bowl_(stadium)')]
given spans fix. original text:  silverdollarstore
original word:  silverdollarstore silverdollarstore
new split:  silverdollar  and  store
[(0, 12), (12, 17)]
{0: 0, 12: 1}
{17: 1, 12: 0}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['James Miller', 'Reagan']
response in server.py code:
 [(408, 16, 'United_States_House_Committee_on_the_Budget'), (69, 6, 'Ronald_Reagan'), (0, 31, 'Office_of_Management_and_Budget'), (41, 12, 'James_Miller_(filmmaker)'), (884, 6, 'James_Miller_(filmmaker)'), (670, 6, 'James_Miller_(filmmaker)'), (246, 6, 'James_Miller_(filmmaker)'), (1043, 6, 'James_Miller_(filmmaker)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Giulio Natta', 'Karl Ziegler']
response in server.py code:
 [(34, 5, 'Italy'), (25, 7, 'Imperia'), (131, 5, 'Milan'), (196, 12, 'Karl_Ziegler'), (0, 12, 'Giulio_Natta'), (95, 21, 'Polytechnic_University_of_Milan'), (146, 5, 'Giulio_Natta')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ian Healy', 'Michael Bevan', 'Jason Gillespie', 'Stuart Law', 'Glenn McGrath', 'Ricky Ponting', 'Michael Slater', 'Darren Lehmann', 'Mark Waugh', 'Steve Waugh', 'Arjuna Ranatunga', 'Sanath Jayasuriya', 'Romesh Kaluwitharana', 'Asanka Gurusinha', 'Aravinda de Silva', 'Roshan Mahanama', 'Chaminda Vaas', 'Muthiah Muralitharan', 'Upul Chandana']
response in server.py code:
 [(300, 15, 'Jason_Gillespie'), (329, 13, 'Glenn_McGrath'), (247, 9, 'Ian_Healy'), (391, 10, 'Mark_Waugh'), (359, 14, 'Michael_Slater'), (317, 10, 'Stuart_Law'), (268, 13, 'Michael_Bevan'), (403, 11, 'Steve_Waugh'), (375, 14, 'Darren_Lehmann'), (497, 16, 'Asanka_Gurusinha'), (515, 17, 'Aravinda_de_Silva'), (606, 20, 'Muttiah_Muralitharan'), (48, 7, 'Colombo'), (475, 20, 'Romesh_Kaluwitharana'), (456, 17, 'Sanath_Jayasuriya'), (67, 9, 'Australia_national_cricket_team'), (344, 13, 'Ricky_Ponting'), (591, 13, 'Chaminda_Vaas'), (428, 16, 'Arjuna_Ranatunga'), (628, 13, 'Upul_Chandana'), (235, 9, 'Australia_national_cricket_team'), (10, 9, 'Australia_national_cricket_team'), (555, 15, 'Roshan_Mahanama'), (117, 9, 'Sri_Lanka_national_cricket_team'), (416, 9, 'Sri_Lanka_national_cricket_team'), (185, 6, 'Singing')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lance Armstrong']
response in server.py code:
 [(33, 15, 'Lance_Armstrong'), (19, 6, 'France')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(23, 11, 'New_Zealand'), (595, 7, 'Shotgun'), (893, 7, 'Firearm'), (633, 8, 'Auckland'), (130, 20, 'Auckland_Art_Gallery'), (799, 7, 'Crowbar_(tool)'), (1354, 11, 'Albert_Park,_Victoria')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(65, 27, 'Sapienza_University_of_Rome'), (44, 13, 'Professor')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(615, 9, 'NAC_Breda'), (51, 9, 'Amsterdam'), (490, 16, 'Roda_JC_Kerkrade'), (150, 17, 'Willem_II_(football_club)'), (135, 12, 'RKC_Waalwijk'), (643, 17, 'Willem_II_(football_club)'), (428, 14, 'AFC_Ajax'), (737, 15, 'Fortuna_Sittard'), (771, 12, 'N.E.C._(football_club)'), (395, 14, 'Vitesse'), (320, 15, 'FC_Twente'), (461, 10, 'SC_Heerenveen'), (707, 10, 'AZ_Alkmaar'), (258, 13, 'PSV_Eindhoven'), (291, 9, 'Feyenoord'), (802, 12, 'RKC_Waalwijk'), (579, 16, 'Sparta_Rotterdam'), (552, 8, 'FC_Volendam'), (82, 5, 'Netherlands'), (9, 5, 'Netherlands'), (679, 9, 'FC_Groningen'), (525, 7, 'FC_Utrecht')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Dufour', 'Thomas Bell', 'Dufour', 'Asher Edelman']
response in server.py code:
 [(336, 7, 'Reuters'), (1321, 16, 'Dominion_Textile'), (435, 16, 'Dominion_Textile'), (1189, 16, 'Dominion_Textile'), (794, 16, 'Dominion_Textile'), (697, 16, 'Dominion_Textile'), (1236, 13, 'Asher_Edelman'), (1080, 21, 'Burlington_Industries'), (867, 14, 'Avondale_Mill'), (976, 6, 'Marjolain_Dufour')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(44, 9, 'Bucharest'), (511, 9, 'Bucharest'), (0, 7, 'Romania'), (595, 8, 'Bistrița'), (573, 13, 'Transylvania'), (65, 8, 'Romania')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(18, 11, 'Neunkirchen,_Saarland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Murkowski']
response in server.py code:
 [(28, 9, 'Lisa_Murkowski')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Felix Hernandez']
response in server.py code:
 [(0, 15, 'Félix_Hernández'), (28, 16, 'Seattle_Mariners')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(870, 9, 'Amsterdam'), (841, 6, 'Sweden'), (896, 9, 'Stockholm'), (881, 10, 'Copenhagen'), (30, 3, 'Agence_France-Presse'), (1912, 5, 'Malta'), (574, 12, 'Soviet_Union'), (2, 10, 'Scottish_Court_in_the_Netherlands'), (14, 7, 'Holland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(110, 8, 'Budapest'), (647, 9, 'Hungary'), (408, 13, 'Eastern_Europe'), (1465, 11, 'Art_dealer'), (889, 7, 'Hungarian_forint'), (1481, 11, 'Auction'), (260, 8, 'Interpol'), (559, 6, 'France'), (160, 15, 'Smuggling'), (762, 9, 'Communism'), (277, 20, 'United_Nations_Police'), (1417, 9, 'Database'), (1436, 7, 'Computer_network')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(64, 14, 'Head_of_state'), (130, 27, 'Semi-presidential_system'), (106, 22, 'Presidential_system'), (161, 23, 'Parliamentary_republic'), (87, 9, 'Republic'), (21, 9, 'President')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(583, 13, 'SV_Werder_Bremen'), (522, 13, '1._FC_Köln'), (747, 12, 'Hamburger_SV'), (163, 13, 'SV_Werder_Bremen'), (554, 10, 'FC_Schalke_04'), (710, 18, 'Fortuna_Düsseldorf'), (778, 17, 'Arminia_Bielefeld'), (429, 17, 'Borussia_Dortmund'), (144, 16, 'Bayer_04_Leverkusen'), (329, 16, 'Bayer_04_Leverkusen'), (493, 10, 'VfL_Bochum'), (397, 13, 'VfB_Stuttgart'), (216, 7, 'FC_Schalke_04'), (52, 4, 'Bonn'), (615, 12, 'MSV_Duisburg'), (79, 6, 'Germany'), (9, 6, 'Germany'), (850, 24, 'Borussia_Mönchengladbach'), (893, 11, 'SC_Freiburg'), (226, 13, 'F.C._Hansa_Rostock'), (135, 6, 'VfL_Bochum'), (365, 13, 'FC_Bayern_Munich'), (679, 12, 'FC_St._Pauli'), (179, 11, 'TSV_1860_München'), (814, 16, 'F.C._Hansa_Rostock'), (465, 9, 'Karlsruher_SC'), (205, 8, 'SC_Freiburg'), (193, 9, 'Karlsruher_SC')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Hans Geiger', 'Bothe']
response in server.py code:
 [(31, 8, 'Film_director'), (261, 8, 'Film_director'), (107, 5, 'Walther_Bothe'), (251, 6, 'Hans_Geiger'), (0, 11, 'Hans_Geiger'), (133, 6, 'Hans_Geiger'), (102, 3, 'Physikalisch-Technische_Bundesanstalt'), (120, 9, 'Assistant_referee_(association_football)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Getty']
response in server.py code:
 [(0, 17, 'First_Boston'), (190, 8, 'Pennzoil'), (677, 8, 'Pennzoil'), (350, 13, 'Supreme_Court_of_the_United_States'), (729, 5, 'Getty_Oil'), (798, 6, 'E._Randol_Schoenberg')]
response in server.py code:
 []
given spans fix. original text:  POLISH NBP REFRAINS FROM REVERSE REPO OPERATION. WARSAW 1996-08-30 The National Bank of Poland refrained from staging a reverse repo operation on Friday, the bank said.-- Warsaw Newsroom+48 22 653 9700
original word:  Newsroom+48 Newsroom+48
new split:  Newsroom  and  +48
[(0, 6), (7, 10), (11, 19), (20, 24), (25, 32), (33, 37), (38, 47), (47, 48), (49, 55), (56, 66), (67, 70), (71, 79), (80, 84), (85, 87), (88, 94), (95, 104), (105, 109), (110, 117), (118, 119), (120, 127), (128, 132), (133, 142), (143, 145), (146, 152), (152, 153), (154, 157), (158, 162), (163, 168), (168, 170), (171, 177), (178, 186), (186, 189)]
{0: 0, 128: 20, 67: 10, 133: 21, 7: 1, 11: 2, 143: 22, 80: 12, 56: 9, 146: 23, 20: 3, 85: 13, 88: 14, 25: 4, 152: 24, 154: 25, 158: 26, 95: 15, 33: 5, 163: 27, 38: 6, 168: 28, 105: 16, 171: 29, 71: 11, 110: 17, 47: 7, 49: 8, 178: 30, 118: 18, 120: 19, 186: 31}
{66: 9, 132: 20, 6: 0, 10: 1, 55: 8, 142: 21, 79: 11, 145: 22, 19: 2, 84: 12, 87: 13, 24: 3, 153: 24, 152: 23, 157: 25, 94: 14, 32: 4, 162: 26, 37: 5, 177: 29, 104: 15, 170: 28, 109: 16, 47: 6, 48: 7, 168: 27, 117: 17, 119: 18, 186: 30, 70: 10, 189: 31, 127: 19}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(49, 6, 'Warsaw'), (0, 6, 'Poland'), (71, 23, 'National_Bank_of_Poland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Stefani']
response in server.py code:
 [(76, 7, 'Twitter'), (68, 3, 'MTV'), (21, 4, 'Catherine,_Duchess_of_Cambridge'), (8, 7, 'Lady_Gaga')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(25, 8, 'Brooklyn')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Kamal Kharrazi']
response in server.py code:
 [(264, 14, 'Kamal_Kharazi'), (1084, 15, 'Munich'), (121, 9, 'The_Hague'), (515, 15, 'Netherlands'), (1187, 12, 'Iron_Curtain'), (587, 6, 'Prague'), (1145, 6, 'Soviet_Union'), (180, 17, 'Radio_Free_Europe/Radio_Liberty'), (1214, 8, 'Cold_War'), (505, 3, 'International_Court_of_Justice'), (612, 5, 'Czech_Republic'), (822, 4, 'Iraq'), (568, 10, 'Ambassador'), (1254, 9, 'Communism'), (1125, 8, 'Censorship'), (1238, 4, 'Western_world'), (716, 9, 'Politics'), (700, 8, 'Economy'), (957, 5, 'Persian_language'), (1267, 4, 'East_Asia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(8, 11, 'LightWave_3D')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Maxwell']
response in server.py code:
 [(86, 23, 'University_of_Cambridge'), (133, 10, 'Peterhouse,_Cambridge'), (69, 8, 'Scotland'), (41, 13, 'Mathematician'), (255, 10, 'Fellow'), (56, 7, 'James_Clerk_Maxwell'), (197, 7, 'Trinity')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ["Japhet N'Doram", 'Claude Makelele', 'Jocelyn Gourvennec', "Bruno N'Gotty", 'Paul Fischer', 'Phil Gray']
response in server.py code:
 [(161, 18, 'Jocelyn_Gourvennec'), (34, 5, 'Paris'), (64, 6, 'France'), (123, 14, "Japhet_N'Doram"), (141, 15, 'Claude_Makélélé'), (9, 6, 'France'), (242, 16, 'Paris_Saint-Germain_F.C.'), (279, 5, 'AS_Nancy'), (262, 13, "Bruno_N'Gotty"), (106, 4, 'RC_Lens'), (305, 9, 'Phil_Gray'), (113, 6, 'FC_Nantes')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['William Golding', 'Elizabeth II']
response in server.py code:
 [(59, 12, 'Elizabeth_II'), (30, 15, 'Knight_Bachelor'), (0, 15, 'William_Golding'), (53, 5, 'Queen_(band)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
given spans fix. original text:  Volkswagen AG VOWG.F, VW, is due to make a formal announcement about its 1986 dividend tomorrow after saying the 1985 level of 10 marks per ordinary share would be held, despite massive losses because of a suspected foreign currency fraud. A spokesman said VWs supervisory board will meet tomorrow to discuss the payout. A statement will be made afterwards. VW has also said disclosed profits for 1986 will reach their 1985 level, despite provisions of a possible 480 mln marks linked to the currency affair. The figure is virtually the same as the 477 mln mark 1985 parent company net profit. When VW first confirmed the currency scandal on March 10 it said the management board would propose an unchanged 10-mark dividend to the supervisory board. A dividend of 11 marks would be proposed for the companys new preference shares. Share analysts said they saw supervisory board approval of the management board proposal as virtually a formality. Anything else would be more than a surprise, one said. Company sources said VW would have to dig into reserves to maintain the disclosed profit. Parent company reserves stood at around three billion marks at end-1985.
original word:  VWs VWs
new split:  VW  and  s
[(0, 10), (11, 13), (14, 20), (20, 21), (22, 24), (24, 25), (26, 28), (29, 32), (33, 35), (36, 40), (41, 42), (43, 49), (50, 62), (63, 68), (69, 72), (73, 77), (78, 86), (87, 95), (96, 101), (102, 108), (109, 112), (113, 117), (118, 123), (124, 126), (127, 129), (130, 135), (136, 139), (140, 148), (149, 154), (155, 160), (161, 163), (164, 168), (168, 169), (170, 177), (178, 185), (186, 192), (193, 200), (201, 203), (204, 205), (206, 215), (216, 223), (224, 232), (233, 238), (238, 239), (240, 241), (242, 251), (252, 256), (257, 259), (259, 260)]
{0: 0, 257: 47, 130: 25, 259: 48, 136: 26, 11: 1, 140: 27, 14: 2, 20: 3, 149: 28, 22: 4, 24: 5, 26: 6, 155: 29, 29: 7, 161: 30, 164: 31, 168: 32, 41: 10, 170: 33, 43: 11, 50: 12, 178: 34, 238: 43, 201: 37, 186: 35, 63: 13, 193: 36, 69: 14, 33: 8, 73: 15, 204: 38, 78: 16, 206: 39, 87: 17, 216: 40, 36: 9, 224: 41, 102: 19, 233: 42, 252: 46, 109: 20, 96: 18, 240: 44, 113: 21, 242: 45, 118: 22, 124: 23, 127: 24}
{256: 46, 129: 24, 259: 47, 260: 48, 135: 25, 10: 0, 139: 26, 13: 1, 20: 2, 21: 3, 24: 4, 25: 5, 154: 28, 28: 6, 32: 7, 163: 30, 49: 11, 168: 31, 169: 32, 42: 10, 177: 33, 185: 34, 223: 40, 62: 12, 192: 35, 160: 29, 68: 13, 72: 14, 203: 37, 77: 15, 205: 38, 35: 8, 86: 16, 215: 39, 95: 17, 251: 45, 101: 18, 232: 41, 108: 19, 238: 42, 239: 43, 112: 20, 40: 9, 117: 21, 241: 44, 148: 27, 123: 22, 200: 36, 126: 23}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(257, 2, 'Volkswagen'), (358, 2, 'Volkswagen'), (599, 2, 'Volkswagen'), (22, 2, 'Volkswagen'), (0, 13, 'Volkswagen_Group'), (1022, 2, 'Volkswagen')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(82, 6, 'Canada'), (380, 6, 'Canada'), (0, 6, 'Canada'), (562, 8, 'Canada'), (526, 8, 'Canada'), (46, 6, 'Ottawa'), (148, 14, 'Bank_of_Canada'), (343, 8, 'United_States_Department_of_the_Treasury')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(4, 7, 'Arsenal_F.C.'), (47, 8, 'Emirates_Stadium')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(98, 6, 'Russia'), (29, 3, 'Agence_France-Presse'), (2, 19, 'Bandar_Seri_Begawan'), (553, 6, 'Brunei')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(466, 7, 'Germany'), (244, 6, 'Africa'), (581, 13, 'South_Africa'), (358, 7, 'Cologne'), (440, 6, 'Erfurt'), (908, 11, 'Switzerland'), (72, 7, 'Dresden'), (1323, 6, 'Saxony'), (208, 9, 'Elephant'), (554, 8, 'Botswana'), (83, 3, 'Zoo'), (1249, 12, 'Animal_euthanasia'), (1169, 10, 'Parliament')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Printer_(publishing)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(48, 4, 'Iraq'), (60, 4, 'Iran'), (975, 40, 'International_Committee_of_the_Red_Cross'), (1168, 13, 'Iran–Iraq_War'), (226, 7, 'Baghdad'), (147, 16, 'Prisoner_of_war'), (609, 6, 'Tehran'), (376, 17, 'National_Iraqi_News_Agency'), (912, 12, 'Repatriation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Konterman']
response in server.py code:
 [(41, 9, 'Amsterdam'), (155, 17, 'Willem_II_(football_club)'), (126, 12, 'RKC_Waalwijk'), (176, 9, 'Bert_Konterman'), (73, 5, 'Netherlands'), (9, 5, 'Netherlands')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(20, 9, 'Professor'), (48, 24, 'University_of_Manchester'), (92, 8, 'Film_director'), (108, 52, 'Manchester_Centre_for_Mesoscience_and_Nanotechnology')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(22, 4, 'WEEI'), (7, 14, 'Internet_radio')]
given spans fix. original text:  Britain intends to negotiate further agreements on international securities regulation to match those now in force with the U.S. And Japan, government sources said. The Department of Trade and Industry said earlier it had concluded a memorandum of understanding with Japans Finance Ministry to swap supervisory and investigatory information. The agreement covers stocks, shares and government bonds, but not commodity futures, whose regulation in Japan does not come under the Finance Ministry. It therefore does not cover some transactions on the London International Financial Futures Exchange and the London commodities and metal exchanges. The DTI said it hoped to seek further understandings with other countries which met in the U.K. Last December. The meeting involved delegates from the U.K., Switzerland, the U.S., Canada, Australia, Hong Kong, Japan, France, West Germany and Holland. Government sources said the deal with Japan completes arrangements linking Tokyo, the U.S. And London. A U.K. Agreement with the U.S. Securities and Exchange Commission (SEC) was signed last September. Todays agreement will deal with requests for information on a case by case basis, U.K. Government sources said. It is not legally binding and comes into force immediately.
original word:  U.S. U.S.
new split:  U.S  and  .
[(0, 7), (8, 15), (16, 18), (19, 28), (29, 36), (37, 47), (48, 50), (51, 64), (65, 75), (76, 86), (87, 89), (90, 95), (96, 101), (102, 105), (106, 108), (109, 114), (115, 119), (120, 123), (124, 127), (127, 128)]
{0: 0, 51: 7, 115: 16, 37: 5, 65: 8, 48: 6, 8: 1, 96: 12, 106: 14, 76: 9, 109: 15, 16: 2, 102: 13, 19: 3, 87: 10, 120: 17, 90: 11, 124: 18, 29: 4, 127: 19}
{64: 7, 128: 19, 123: 17, 36: 4, 101: 12, 7: 0, 105: 13, 75: 8, 108: 14, 50: 6, 47: 5, 18: 2, 86: 9, 119: 16, 127: 18, 89: 10, 114: 15, 15: 1, 28: 3, 95: 11}
given spans fix. original text:  Britain intends to negotiate further agreements on international securities regulation to match those now in force with the U.S. And Japan, government sources said. The Department of Trade and Industry said earlier it had concluded a memorandum of understanding with Japans Finance Ministry to swap supervisory and investigatory information. The agreement covers stocks, shares and government bonds, but not commodity futures, whose regulation in Japan does not come under the Finance Ministry. It therefore does not cover some transactions on the London International Financial Futures Exchange and the London commodities and metal exchanges. The DTI said it hoped to seek further understandings with other countries which met in the U.K. Last December. The meeting involved delegates from the U.K., Switzerland, the U.S., Canada, Australia, Hong Kong, Japan, France, West Germany and Holland. Government sources said the deal with Japan completes arrangements linking Tokyo, the U.S. And London. A U.K. Agreement with the U.S. Securities and Exchange Commission (SEC) was signed last September. Todays agreement will deal with requests for information on a case by case basis, U.K. Government sources said. It is not legally binding and comes into force immediately.
original word:  U.K. U.K.
new split:  U.K  and  .
[(0, 7), (8, 15), (16, 18), (19, 28), (29, 36), (37, 47), (48, 50), (51, 64), (65, 75), (76, 86), (87, 89), (90, 95), (96, 101), (102, 105), (106, 108), (109, 114), (115, 119), (120, 123), (124, 127), (127, 128), (129, 132), (133, 138), (138, 139), (140, 150), (151, 158), (159, 163), (163, 164), (165, 168), (169, 179), (180, 182), (183, 188), (189, 192), (193, 201), (202, 206), (207, 214), (215, 217), (218, 221), (222, 231), (232, 233), (234, 244), (245, 247), (248, 261), (262, 266), (267, 273), (274, 281), (282, 290), (291, 293), (294, 298), (299, 310), (311, 314), (315, 328), (329, 340), (340, 341), (342, 345), (346, 355), (356, 362), (363, 369), (369, 370), (371, 377), (378, 381), (382, 392), (393, 398), (398, 399), (400, 403), (404, 407), (408, 417), (418, 425), (425, 426), (427, 432), (433, 443), (444, 446), (447, 452), (453, 457), (458, 461), (462, 466), (467, 472), (473, 476), (477, 484), (485, 493), (493, 494), (495, 497), (498, 507), (508, 512), (513, 516), (517, 522), (523, 527), (528, 540), (541, 543), (544, 547), (548, 554), (555, 568), (569, 578), (579, 586), (587, 595), (596, 599), (600, 603), (604, 610), (611, 622), (623, 626), (627, 632), (633, 642), (642, 643), (644, 647), (648, 651), (652, 656), (657, 659), (660, 665), (666, 668), (669, 673), (674, 681), (682, 696), (697, 701), (702, 707), (708, 717), (718, 723), (724, 727), (728, 730), (731, 734), (735, 738), (738, 739)]
{0: 0, 513: 83, 555: 90, 517: 84, 262: 42, 8: 1, 267: 43, 16: 2, 274: 44, 19: 3, 282: 45, 90: 11, 544: 88, 541: 87, 291: 46, 548: 89, 37: 5, 294: 47, 299: 48, 48: 6, 51: 7, 311: 49, 569: 91, 315: 50, 65: 8, 523: 85, 329: 51, 587: 93, 76: 9, 340: 52, 342: 53, 87: 10, 600: 95, 346: 54, 604: 96, 96: 12, 528: 86, 611: 97, 356: 55, 102: 13, 106: 14, 363: 56, 109: 15, 623: 98, 369: 57, 660: 106, 371: 58, 120: 17, 633: 100, 378: 59, 124: 18, 382: 60, 127: 19, 129: 20, 642: 101, 644: 102, 133: 21, 648: 103, 393: 61, 138: 22, 652: 104, 140: 23, 398: 62, 400: 63, 657: 105, 579: 92, 404: 64, 151: 24, 408: 65, 666: 107, 669: 108, 159: 25, 418: 66, 163: 26, 165: 27, 169: 28, 682: 110, 427: 68, 29: 4, 433: 69, 115: 16, 180: 29, 183: 30, 202: 33, 697: 111, 444: 70, 189: 31, 702: 112, 447: 71, 193: 32, 708: 113, 453: 72, 458: 73, 674: 109, 462: 74, 207: 34, 467: 75, 724: 115, 718: 114, 215: 35, 728: 116, 473: 76, 218: 36, 731: 117, 477: 77, 222: 37, 735: 118, 627: 99, 738: 119, 485: 78, 232: 38, 234: 39, 493: 79, 495: 80, 498: 81, 245: 40, 425: 67, 248: 41, 596: 94, 508: 82}
{512: 82, 516: 83, 261: 41, 7: 0, 266: 42, 15: 1, 273: 43, 18: 2, 345: 53, 281: 44, 28: 3, 543: 87, 290: 45, 547: 88, 36: 4, 293: 46, 298: 47, 47: 5, 50: 6, 310: 48, 568: 90, 314: 49, 522: 84, 64: 7, 681: 109, 578: 91, 651: 103, 328: 50, 586: 92, 75: 8, 595: 93, 340: 51, 341: 52, 86: 9, 599: 94, 89: 10, 527: 85, 540: 86, 95: 11, 610: 96, 355: 54, 101: 12, 105: 13, 362: 55, 108: 14, 622: 97, 369: 56, 370: 57, 659: 105, 626: 98, 119: 16, 632: 99, 377: 58, 123: 17, 381: 59, 127: 18, 128: 19, 642: 100, 643: 101, 132: 20, 647: 102, 392: 60, 138: 21, 139: 22, 398: 61, 399: 62, 656: 104, 403: 63, 150: 23, 407: 64, 665: 106, 668: 107, 158: 24, 417: 65, 163: 25, 164: 26, 168: 27, 425: 66, 426: 67, 114: 15, 432: 68, 179: 28, 182: 29, 201: 32, 696: 110, 443: 69, 188: 30, 701: 111, 446: 70, 192: 31, 603: 95, 707: 112, 452: 71, 673: 108, 457: 72, 461: 73, 206: 33, 717: 113, 466: 74, 723: 114, 214: 34, 727: 115, 472: 75, 217: 35, 730: 116, 476: 76, 221: 36, 734: 117, 738: 118, 739: 119, 484: 77, 231: 37, 233: 38, 493: 78, 494: 79, 497: 80, 244: 39, 247: 40, 507: 81, 554: 89}
given spans fix. original text:  Britain intends to negotiate further agreements on international securities regulation to match those now in force with the U.S. And Japan, government sources said. The Department of Trade and Industry said earlier it had concluded a memorandum of understanding with Japans Finance Ministry to swap supervisory and investigatory information. The agreement covers stocks, shares and government bonds, but not commodity futures, whose regulation in Japan does not come under the Finance Ministry. It therefore does not cover some transactions on the London International Financial Futures Exchange and the London commodities and metal exchanges. The DTI said it hoped to seek further understandings with other countries which met in the U.K. Last December. The meeting involved delegates from the U.K., Switzerland, the U.S., Canada, Australia, Hong Kong, Japan, France, West Germany and Holland. Government sources said the deal with Japan completes arrangements linking Tokyo, the U.S. And London. A U.K. Agreement with the U.S. Securities and Exchange Commission (SEC) was signed last September. Todays agreement will deal with requests for information on a case by case basis, U.K. Government sources said. It is not legally binding and comes into force immediately.
original word:  U.K. U.K.
new split:  U.K  and  .
[(0, 7), (8, 15), (16, 18), (19, 28), (29, 36), (37, 47), (48, 50), (51, 64), (65, 75), (76, 86), (87, 89), (90, 95), (96, 101), (102, 105), (106, 108), (109, 114), (115, 119), (120, 123), (124, 127), (127, 128), (129, 132), (133, 138), (138, 139), (140, 150), (151, 158), (159, 163), (163, 164), (165, 168), (169, 179), (180, 182), (183, 188), (189, 192), (193, 201), (202, 206), (207, 214), (215, 217), (218, 221), (222, 231), (232, 233), (234, 244), (245, 247), (248, 261), (262, 266), (267, 273), (274, 281), (282, 290), (291, 293), (294, 298), (299, 310), (311, 314), (315, 328), (329, 340), (340, 341), (342, 345), (346, 355), (356, 362), (363, 369), (369, 370), (371, 377), (378, 381), (382, 392), (393, 398), (398, 399), (400, 403), (404, 407), (408, 417), (418, 425), (425, 426), (427, 432), (433, 443), (444, 446), (447, 452), (453, 457), (458, 461), (462, 466), (467, 472), (473, 476), (477, 484), (485, 493), (493, 494), (495, 497), (498, 507), (508, 512), (513, 516), (517, 522), (523, 527), (528, 540), (541, 543), (544, 547), (548, 554), (555, 568), (569, 578), (579, 586), (587, 595), (596, 599), (600, 603), (604, 610), (611, 622), (623, 626), (627, 632), (633, 642), (642, 643), (644, 647), (648, 651), (652, 656), (657, 659), (660, 665), (666, 668), (669, 673), (674, 681), (682, 696), (697, 701), (702, 707), (708, 717), (718, 723), (724, 727), (728, 730), (731, 734), (735, 738), (738, 739), (740, 744), (745, 753), (753, 754), (755, 758), (759, 766), (767, 775), (776, 785), (786, 790), (791, 794), (795, 798), (798, 799)]
{0: 0, 513: 83, 555: 90, 517: 84, 262: 42, 8: 1, 267: 43, 16: 2, 274: 44, 19: 3, 791: 128, 282: 45, 795: 129, 90: 11, 798: 130, 544: 88, 541: 87, 291: 46, 548: 89, 37: 5, 294: 47, 299: 48, 48: 6, 776: 126, 51: 7, 311: 49, 569: 91, 786: 127, 315: 50, 65: 8, 523: 85, 329: 51, 587: 93, 76: 9, 340: 52, 342: 53, 87: 10, 600: 95, 346: 54, 604: 96, 96: 12, 528: 86, 611: 97, 356: 55, 102: 13, 106: 14, 363: 56, 109: 15, 623: 98, 369: 57, 660: 106, 371: 58, 120: 17, 633: 100, 378: 59, 124: 18, 382: 60, 127: 19, 129: 20, 642: 101, 644: 102, 133: 21, 648: 103, 393: 61, 138: 22, 652: 104, 140: 23, 398: 62, 400: 63, 657: 105, 579: 92, 404: 64, 151: 24, 408: 65, 666: 107, 669: 108, 159: 25, 418: 66, 163: 26, 165: 27, 169: 28, 682: 110, 427: 68, 29: 4, 433: 69, 115: 16, 180: 29, 183: 30, 202: 33, 697: 111, 444: 70, 189: 31, 702: 112, 447: 71, 193: 32, 708: 113, 453: 72, 458: 73, 759: 124, 674: 109, 462: 74, 207: 34, 467: 75, 724: 115, 718: 114, 215: 35, 728: 116, 473: 76, 218: 36, 731: 117, 477: 77, 222: 37, 735: 118, 627: 99, 738: 119, 740: 120, 485: 78, 232: 38, 745: 121, 234: 39, 493: 79, 495: 80, 753: 122, 498: 81, 755: 123, 245: 40, 425: 67, 248: 41, 596: 94, 508: 82, 767: 125}
{512: 82, 516: 83, 261: 41, 7: 0, 266: 42, 15: 1, 273: 43, 18: 2, 790: 127, 345: 53, 281: 44, 794: 128, 28: 3, 798: 129, 543: 87, 290: 45, 547: 88, 36: 4, 293: 46, 298: 47, 775: 125, 47: 5, 50: 6, 310: 48, 568: 90, 314: 49, 522: 84, 64: 7, 681: 109, 578: 91, 651: 103, 328: 50, 586: 92, 75: 8, 595: 93, 340: 51, 341: 52, 86: 9, 599: 94, 89: 10, 527: 85, 540: 86, 95: 11, 610: 96, 355: 54, 101: 12, 785: 126, 105: 13, 362: 55, 108: 14, 622: 97, 369: 56, 370: 57, 659: 105, 626: 98, 119: 16, 632: 99, 377: 58, 123: 17, 381: 59, 127: 18, 128: 19, 642: 100, 643: 101, 132: 20, 647: 102, 392: 60, 138: 21, 139: 22, 398: 61, 399: 62, 656: 104, 403: 63, 150: 23, 407: 64, 665: 106, 668: 107, 158: 24, 417: 65, 163: 25, 164: 26, 753: 121, 168: 27, 425: 66, 426: 67, 114: 15, 432: 68, 179: 28, 182: 29, 201: 32, 696: 110, 443: 69, 188: 30, 701: 111, 446: 70, 192: 31, 799: 130, 603: 95, 707: 112, 452: 71, 673: 108, 457: 72, 461: 73, 206: 33, 717: 113, 466: 74, 723: 114, 214: 34, 727: 115, 472: 75, 217: 35, 730: 116, 476: 76, 221: 36, 734: 117, 738: 118, 739: 119, 484: 77, 231: 37, 744: 120, 233: 38, 493: 78, 494: 79, 497: 80, 754: 122, 244: 39, 758: 123, 247: 40, 507: 81, 554: 89, 766: 124}
given spans fix. original text:  Britain intends to negotiate further agreements on international securities regulation to match those now in force with the U.S. And Japan, government sources said. The Department of Trade and Industry said earlier it had concluded a memorandum of understanding with Japans Finance Ministry to swap supervisory and investigatory information. The agreement covers stocks, shares and government bonds, but not commodity futures, whose regulation in Japan does not come under the Finance Ministry. It therefore does not cover some transactions on the London International Financial Futures Exchange and the London commodities and metal exchanges. The DTI said it hoped to seek further understandings with other countries which met in the U.K. Last December. The meeting involved delegates from the U.K., Switzerland, the U.S., Canada, Australia, Hong Kong, Japan, France, West Germany and Holland. Government sources said the deal with Japan completes arrangements linking Tokyo, the U.S. And London. A U.K. Agreement with the U.S. Securities and Exchange Commission (SEC) was signed last September. Todays agreement will deal with requests for information on a case by case basis, U.K. Government sources said. It is not legally binding and comes into force immediately.
original word:  U.S. U.S.
new split:  U.S  and  .
[(0, 7), (8, 15), (16, 18), (19, 28), (29, 36), (37, 47), (48, 50), (51, 64), (65, 75), (76, 86), (87, 89), (90, 95), (96, 101), (102, 105), (106, 108), (109, 114), (115, 119), (120, 123), (124, 127), (127, 128), (129, 132), (133, 138), (138, 139), (140, 150), (151, 158), (159, 163), (163, 164), (165, 168), (169, 179), (180, 182), (183, 188), (189, 192), (193, 201), (202, 206), (207, 214), (215, 217), (218, 221), (222, 231), (232, 233), (234, 244), (245, 247), (248, 261), (262, 266), (267, 273), (274, 281), (282, 290), (291, 293), (294, 298), (299, 310), (311, 314), (315, 328), (329, 340), (340, 341), (342, 345), (346, 355), (356, 362), (363, 369), (369, 370), (371, 377), (378, 381), (382, 392), (393, 398), (398, 399), (400, 403), (404, 407), (408, 417), (418, 425), (425, 426), (427, 432), (433, 443), (444, 446), (447, 452), (453, 457), (458, 461), (462, 466), (467, 472), (473, 476), (477, 484), (485, 493), (493, 494), (495, 497), (498, 507), (508, 512), (513, 516), (517, 522), (523, 527), (528, 540), (541, 543), (544, 547), (548, 554), (555, 568), (569, 578), (579, 586), (587, 595), (596, 599), (600, 603), (604, 610), (611, 622), (623, 626), (627, 632), (633, 642), (642, 643), (644, 647), (648, 651), (652, 656), (657, 659), (660, 665), (666, 668), (669, 673), (674, 681), (682, 696), (697, 701), (702, 707), (708, 717), (718, 723), (724, 727), (728, 730), (731, 734), (735, 738), (738, 739), (740, 744), (745, 753), (753, 754), (755, 758), (759, 766), (767, 775), (776, 785), (786, 790), (791, 794), (795, 798), (798, 799), (799, 800), (801, 812), (812, 813), (814, 817), (818, 821), (821, 822)]
{0: 0, 513: 83, 555: 90, 517: 84, 262: 42, 8: 1, 267: 43, 16: 2, 274: 44, 19: 3, 791: 128, 282: 45, 795: 129, 90: 11, 798: 130, 799: 131, 544: 88, 801: 132, 541: 87, 291: 46, 548: 89, 37: 5, 294: 47, 299: 48, 812: 133, 814: 134, 48: 6, 776: 126, 818: 135, 51: 7, 821: 136, 311: 49, 569: 91, 786: 127, 315: 50, 65: 8, 523: 85, 329: 51, 587: 93, 76: 9, 340: 52, 342: 53, 87: 10, 600: 95, 346: 54, 604: 96, 96: 12, 528: 86, 611: 97, 356: 55, 102: 13, 106: 14, 363: 56, 109: 15, 623: 98, 369: 57, 660: 106, 371: 58, 120: 17, 633: 100, 378: 59, 124: 18, 382: 60, 127: 19, 129: 20, 642: 101, 644: 102, 133: 21, 648: 103, 393: 61, 138: 22, 652: 104, 140: 23, 398: 62, 400: 63, 657: 105, 579: 92, 404: 64, 151: 24, 408: 65, 666: 107, 669: 108, 159: 25, 418: 66, 163: 26, 165: 27, 169: 28, 682: 110, 427: 68, 29: 4, 433: 69, 115: 16, 180: 29, 183: 30, 202: 33, 697: 111, 444: 70, 189: 31, 702: 112, 447: 71, 193: 32, 708: 113, 453: 72, 458: 73, 759: 124, 674: 109, 462: 74, 207: 34, 467: 75, 724: 115, 718: 114, 215: 35, 728: 116, 473: 76, 218: 36, 731: 117, 477: 77, 222: 37, 735: 118, 627: 99, 738: 119, 740: 120, 485: 78, 232: 38, 745: 121, 234: 39, 493: 79, 495: 80, 753: 122, 498: 81, 755: 123, 245: 40, 425: 67, 248: 41, 596: 94, 508: 82, 767: 125}
{512: 82, 516: 83, 261: 41, 7: 0, 266: 42, 15: 1, 273: 43, 18: 2, 790: 127, 345: 53, 281: 44, 794: 128, 28: 3, 798: 129, 543: 87, 800: 131, 290: 45, 547: 88, 36: 4, 293: 46, 298: 47, 775: 125, 812: 132, 813: 133, 47: 5, 817: 134, 50: 6, 821: 135, 310: 48, 568: 90, 314: 49, 522: 84, 64: 7, 681: 109, 578: 91, 651: 103, 822: 136, 328: 50, 586: 92, 75: 8, 595: 93, 340: 51, 341: 52, 86: 9, 599: 94, 89: 10, 527: 85, 540: 86, 95: 11, 610: 96, 355: 54, 101: 12, 785: 126, 105: 13, 362: 55, 108: 14, 622: 97, 369: 56, 370: 57, 659: 105, 626: 98, 119: 16, 632: 99, 377: 58, 123: 17, 381: 59, 127: 18, 128: 19, 642: 100, 643: 101, 132: 20, 647: 102, 392: 60, 138: 21, 139: 22, 398: 61, 399: 62, 656: 104, 403: 63, 150: 23, 407: 64, 665: 106, 668: 107, 158: 24, 417: 65, 163: 25, 164: 26, 753: 121, 168: 27, 425: 66, 426: 67, 114: 15, 432: 68, 179: 28, 182: 29, 201: 32, 696: 110, 443: 69, 188: 30, 701: 111, 446: 70, 192: 31, 799: 130, 603: 95, 707: 112, 452: 71, 673: 108, 457: 72, 461: 73, 206: 33, 717: 113, 466: 74, 723: 114, 214: 34, 727: 115, 472: 75, 217: 35, 730: 116, 476: 76, 221: 36, 734: 117, 738: 118, 739: 119, 484: 77, 231: 37, 744: 120, 233: 38, 493: 78, 494: 79, 497: 80, 754: 122, 244: 39, 758: 123, 247: 40, 507: 81, 554: 89, 766: 124}
given spans fix. original text:  Britain intends to negotiate further agreements on international securities regulation to match those now in force with the U.S. And Japan, government sources said. The Department of Trade and Industry said earlier it had concluded a memorandum of understanding with Japans Finance Ministry to swap supervisory and investigatory information. The agreement covers stocks, shares and government bonds, but not commodity futures, whose regulation in Japan does not come under the Finance Ministry. It therefore does not cover some transactions on the London International Financial Futures Exchange and the London commodities and metal exchanges. The DTI said it hoped to seek further understandings with other countries which met in the U.K. Last December. The meeting involved delegates from the U.K., Switzerland, the U.S., Canada, Australia, Hong Kong, Japan, France, West Germany and Holland. Government sources said the deal with Japan completes arrangements linking Tokyo, the U.S. And London. A U.K. Agreement with the U.S. Securities and Exchange Commission (SEC) was signed last September. Todays agreement will deal with requests for information on a case by case basis, U.K. Government sources said. It is not legally binding and comes into force immediately.
original word:  U.S. U.S.
new split:  U.S  and  .
[(0, 7), (8, 15), (16, 18), (19, 28), (29, 36), (37, 47), (48, 50), (51, 64), (65, 75), (76, 86), (87, 89), (90, 95), (96, 101), (102, 105), (106, 108), (109, 114), (115, 119), (120, 123), (124, 127), (127, 128), (129, 132), (133, 138), (138, 139), (140, 150), (151, 158), (159, 163), (163, 164), (165, 168), (169, 179), (180, 182), (183, 188), (189, 192), (193, 201), (202, 206), (207, 214), (215, 217), (218, 221), (222, 231), (232, 233), (234, 244), (245, 247), (248, 261), (262, 266), (267, 273), (274, 281), (282, 290), (291, 293), (294, 298), (299, 310), (311, 314), (315, 328), (329, 340), (340, 341), (342, 345), (346, 355), (356, 362), (363, 369), (369, 370), (371, 377), (378, 381), (382, 392), (393, 398), (398, 399), (400, 403), (404, 407), (408, 417), (418, 425), (425, 426), (427, 432), (433, 443), (444, 446), (447, 452), (453, 457), (458, 461), (462, 466), (467, 472), (473, 476), (477, 484), (485, 493), (493, 494), (495, 497), (498, 507), (508, 512), (513, 516), (517, 522), (523, 527), (528, 540), (541, 543), (544, 547), (548, 554), (555, 568), (569, 578), (579, 586), (587, 595), (596, 599), (600, 603), (604, 610), (611, 622), (623, 626), (627, 632), (633, 642), (642, 643), (644, 647), (648, 651), (652, 656), (657, 659), (660, 665), (666, 668), (669, 673), (674, 681), (682, 696), (697, 701), (702, 707), (708, 717), (718, 723), (724, 727), (728, 730), (731, 734), (735, 738), (738, 739), (740, 744), (745, 753), (753, 754), (755, 758), (759, 766), (767, 775), (776, 785), (786, 790), (791, 794), (795, 798), (798, 799), (799, 800), (801, 812), (812, 813), (814, 817), (818, 821), (821, 822), (822, 823), (824, 830), (830, 831), (832, 841), (841, 842), (843, 847), (848, 852), (852, 853), (854, 859), (859, 860), (861, 867), (867, 868), (869, 873), (874, 881), (882, 885), (886, 893), (893, 894), (895, 905), (906, 913), (914, 918), (919, 922), (923, 927), (928, 932), (933, 938), (939, 948), (949, 961), (962, 969), (970, 975), (975, 976), (977, 980), (981, 984), (984, 985)]
{0: 0, 513: 83, 555: 90, 517: 84, 262: 42, 8: 1, 267: 43, 16: 2, 984: 168, 274: 44, 19: 3, 852: 144, 791: 128, 282: 45, 795: 129, 90: 11, 798: 130, 799: 131, 544: 88, 801: 132, 541: 87, 291: 46, 548: 89, 37: 5, 294: 47, 299: 48, 812: 133, 939: 161, 814: 134, 48: 6, 776: 126, 818: 135, 51: 7, 854: 145, 821: 136, 822: 137, 311: 49, 824: 138, 569: 91, 786: 127, 315: 50, 906: 155, 830: 139, 832: 140, 65: 8, 523: 85, 329: 51, 587: 93, 76: 9, 848: 143, 867: 148, 340: 52, 342: 53, 87: 10, 600: 95, 346: 54, 859: 146, 604: 96, 861: 147, 933: 160, 96: 12, 528: 86, 611: 97, 356: 55, 869: 149, 102: 13, 106: 14, 363: 56, 109: 15, 623: 98, 369: 57, 660: 106, 371: 58, 886: 152, 120: 17, 633: 100, 378: 59, 124: 18, 874: 150, 382: 60, 127: 19, 129: 20, 642: 101, 981: 167, 644: 102, 133: 21, 648: 103, 393: 61, 138: 22, 652: 104, 140: 23, 398: 62, 400: 63, 657: 105, 914: 156, 579: 92, 404: 64, 151: 24, 408: 65, 666: 107, 923: 158, 669: 108, 159: 25, 928: 159, 418: 66, 163: 26, 165: 27, 169: 28, 682: 110, 427: 68, 882: 151, 841: 141, 29: 4, 433: 69, 115: 16, 180: 29, 949: 162, 183: 30, 202: 33, 697: 111, 919: 157, 444: 70, 189: 31, 702: 112, 447: 71, 193: 32, 962: 163, 843: 142, 708: 113, 453: 72, 893: 153, 458: 73, 759: 124, 674: 109, 462: 74, 207: 34, 970: 164, 977: 166, 467: 75, 724: 115, 718: 114, 215: 35, 728: 116, 473: 76, 218: 36, 731: 117, 477: 77, 222: 37, 735: 118, 627: 99, 738: 119, 740: 120, 485: 78, 232: 38, 745: 121, 234: 39, 493: 79, 495: 80, 753: 122, 498: 81, 755: 123, 975: 165, 245: 40, 425: 67, 248: 41, 596: 94, 895: 154, 508: 82, 767: 125}
{512: 82, 516: 83, 261: 41, 7: 0, 266: 42, 15: 1, 273: 43, 18: 2, 790: 127, 345: 53, 281: 44, 794: 128, 28: 3, 798: 129, 543: 87, 800: 131, 290: 45, 547: 88, 36: 4, 293: 46, 867: 147, 298: 47, 775: 125, 812: 132, 813: 133, 47: 5, 817: 134, 50: 6, 821: 135, 310: 48, 823: 137, 568: 90, 314: 49, 522: 84, 830: 138, 831: 139, 64: 7, 681: 109, 578: 91, 651: 103, 822: 136, 328: 50, 841: 140, 586: 92, 75: 8, 938: 160, 881: 150, 847: 142, 595: 93, 340: 51, 341: 52, 86: 9, 599: 94, 89: 10, 527: 85, 860: 146, 540: 86, 95: 11, 610: 96, 355: 54, 868: 148, 101: 12, 785: 126, 105: 13, 362: 55, 108: 14, 622: 97, 873: 149, 369: 56, 370: 57, 659: 105, 984: 167, 626: 98, 119: 16, 632: 99, 377: 58, 123: 17, 381: 59, 894: 153, 127: 18, 128: 19, 642: 100, 643: 101, 132: 20, 918: 156, 647: 102, 392: 60, 905: 154, 138: 21, 139: 22, 398: 61, 399: 62, 656: 104, 913: 155, 985: 168, 403: 63, 150: 23, 407: 64, 665: 106, 922: 157, 668: 107, 158: 24, 927: 158, 417: 65, 163: 25, 164: 26, 753: 121, 168: 27, 425: 66, 426: 67, 114: 15, 432: 68, 969: 163, 179: 28, 948: 161, 182: 29, 201: 32, 696: 110, 443: 69, 188: 30, 701: 111, 446: 70, 885: 151, 192: 31, 799: 130, 603: 95, 707: 112, 452: 71, 673: 108, 932: 159, 457: 72, 859: 145, 961: 162, 842: 141, 461: 73, 206: 33, 717: 113, 976: 165, 466: 74, 723: 114, 980: 166, 214: 34, 727: 115, 472: 75, 217: 35, 730: 116, 975: 164, 476: 76, 221: 36, 734: 117, 738: 118, 739: 119, 484: 77, 231: 37, 744: 120, 233: 38, 493: 78, 494: 79, 893: 152, 497: 80, 754: 122, 244: 39, 758: 123, 247: 40, 852: 143, 507: 81, 554: 89, 766: 124, 853: 144}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(447, 5, 'Japan'), (854, 5, 'Japan'), (933, 5, 'Japan'), (548, 47, 'London_International_Financial_Futures_and_Options_Exchange'), (990, 6, 'London'), (824, 6, 'Canada'), (0, 7, 'United_Kingdom'), (832, 9, 'Australia'), (133, 5, 'Japan'), (795, 3, 'United_Kingdom'), (861, 6, 'France'), (735, 3, 'United_Kingdom'), (970, 5, 'Tokyo'), (981, 3, 'United_States'), (818, 3, 'United_States'), (843, 9, 'Hong_Kong'), (124, 3, 'United_States'), (1024, 39, 'U.S._Securities_and_Exchange_Commission'), (477, 16, 'Ministry_of_Finance_(Japan)'), (869, 12, 'West_Germany'), (801, 11, 'Switzerland'), (169, 32, 'United_Kingdom'), (648, 3, 'Department_of_Trade_and_Industry_(United_Kingdom)'), (886, 7, 'Holland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(443, 7, 'Chicago'), (37, 9, 'St._Louis'), (178, 4, 'Florida'), (162, 14, 'St._Petersburg,_Florida'), (375, 7, 'Levothyroxine')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Elin']
response in server.py code:
 [(54, 4, 'Elin_Nordegren')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ed Miliband']
response in server.py code:
 [(72, 11, 'Ed_Miliband')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Bowflex')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Alan Rifkin']
response in server.py code:
 [(70, 8, 'Barclays')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Fermi', 'Giovanni Giorgi']
response in server.py code:
 [(83, 8, 'Sardinia'), (57, 22, 'University_of_Cagliari'), (0, 5, 'Enrico_Fermi'), (135, 15, 'Giovanni_Giorgi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Kamal Kharrazi']
response in server.py code:
 [(237, 14, 'Kamal_Kharazi'), (1048, 15, 'Munich'), (29, 4, 'Iran'), (488, 15, 'Netherlands'), (557, 6, 'Prague'), (1148, 12, 'Iron_Curtain'), (91, 9, 'The_Hague'), (1106, 6, 'Soviet_Union'), (150, 17, 'Radio_Free_Europe/Radio_Liberty'), (1175, 8, 'Cold_War'), (582, 5, 'Czech_Republic'), (786, 4, 'Iraq'), (478, 3, 'International_Court_of_Justice'), (1212, 9, 'Communism'), (217, 16, 'Ministry_of_Foreign_Affairs_(Soviet_Union)'), (921, 5, 'Persian_language')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(185, 19, 'Paris_Saint-Germain_F.C.'), (332, 7, 'AJ_Auxerre'), (34, 5, 'Paris'), (406, 8, 'En_Avant_de_Guingamp'), (663, 5, 'AS_Nancy'), (68, 6, 'France'), (533, 4, 'RC_Lens'), (508, 6, 'Stade_Rennais_F.C.'), (9, 6, 'France'), (485, 4, 'Olympique_Lyonnais'), (557, 8, 'Le_Havre_AC'), (381, 6, 'FC_Nantes'), (224, 6, 'AS_Monaco_FC'), (433, 5, 'Lille_OSC'), (609, 11, 'Montpellier_HSC'), (250, 8, 'FC_Girondins_de_Bordeaux'), (307, 6, 'SC_Bastia'), (457, 9, 'Olympique_de_Marseille'), (688, 4, 'OGC_Nice'), (584, 6, 'AS_Cannes'), (358, 4, 'FC_Metz'), (639, 4, 'Stade_Malherbe_Caen'), (277, 10, 'RC_Strasbourg')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Richard Kuhn', 'Lavoslav Ružička', 'him']
response in server.py code:
 [(60, 7, 'Germany'), (181, 7, 'Germany'), (87, 8, 'Lecturer'), (121, 16, 'Leopold_Ružička'), (163, 3, 'Fidel_Castro'), (71, 12, 'Richard_Kuhn'), (147, 6, 'Prelog,_Croatia'), (38, 6, 'Prelog,_Croatia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(35, 4, 'Ohio'), (0, 13, 'Mercedes-Benz'), (25, 9, 'Cleveland'), (14, 10, 'Car_dealership')]
response in server.py code:
 []
given spans fix. original text:  NYMEX heating oil near session lows in pre-close. NEW YORK 1996-08-30 NYMEX refined product prices lingered at session lows amid slim volume before the close while crude experienced lackluster buying ahead of the U.S. Labor Day weekend, traders said. "There was some profit-taking early on, and it's just sitting there," a Texas trader said of heating oil's and gasoline's losses. September heating oil stood 1.02 cents lower at 62.65 cents a gallon. Heat hit a session low of 62.45 shortly before the close. September gasoline stood 0.87 cent lower at 62.85 cents a gallon. Friday's low in September gasoline was 62.75. Traders also said players were selling refined products in favor of crude ahead of the front month's Friday expiry in the refined products. The October heating oil-to-crude crack spread narrowed to $ 4.22 a barrel from Thursday's $ 4.58 while the October gasoline-to-crude spread narrowed to $ 3.60 from Thursday's $ 3.86 a barrel. October crude stood eight cents higher at $ 22.23 barrel. Buying interest in crude did not have enough conviction to send it much higher since many players had left early to start the Labor Day holiday weekend, traders said. NYMEX will be closed Monday due to Labor Day.-- Harry Milling, New York Energy Desk,+1 212-859-1761
original word:  Day. Day.
new split:  Day  and  .
[(0, 5), (6, 13), (14, 17), (18, 22), (23, 30), (31, 35), (36, 38), (39, 48), (48, 49), (50, 53), (54, 58), (59, 69), (70, 75), (76, 83), (84, 91), (92, 98), (99, 107), (108, 110), (111, 118), (119, 123), (124, 128), (129, 133), (134, 140), (141, 147), (148, 151), (152, 157), (158, 163), (164, 169), (170, 181), (182, 192), (193, 199), (200, 205), (206, 208), (209, 212), (213, 217), (218, 223), (224, 227), (228, 235), (235, 236), (237, 244), (245, 249), (249, 250), (251, 252), (252, 257), (258, 261), (262, 266), (267, 280), (281, 286), (287, 289), (289, 290), (291, 294), (295, 297), (297, 299), (300, 304), (305, 312), (313, 318), (318, 319), (319, 320), (321, 322), (323, 328), (329, 335), (336, 340), (341, 343), (344, 351), (352, 355), (355, 357), (358, 361), (362, 370), (370, 372), (373, 379), (379, 380), (381, 390), (391, 398), (399, 402), (403, 408), (409, 413), (414, 419), (420, 425), (426, 428), (429, 434), (435, 440), (441, 442), (443, 449), (449, 450), (451, 455), (456, 459), (460, 461), (462, 469), (470, 473), (474, 476), (477, 482), (483, 490), (491, 497), (498, 501), (502, 507), (507, 508), (509, 518), (519, 527), (528, 533), (534, 538), (539, 543), (544, 549), (550, 552), (553, 558), (559, 564), (565, 566), (567, 573), (573, 574), (575, 581), (581, 583), (584, 587), (588, 590), (591, 600), (601, 609), (610, 613), (614, 619), (619, 620), (621, 628), (629, 633), (634, 638), (639, 646), (647, 651), (652, 659), (660, 667), (668, 676), (677, 679), (680, 685), (686, 688), (689, 694), (695, 700), (701, 703), (704, 707), (708, 713), (714, 719), (719, 721), (722, 728), (729, 735), (736, 738), (739, 742), (743, 750), (751, 759), (759, 760), (761, 764), (765, 772), (773, 780), (781, 793), (794, 799), (800, 806), (807, 815), (816, 818), (819, 820), (821, 825), (826, 827), (828, 834), (835, 839), (840, 848), (848, 850), (851, 852), (853, 857), (858, 863), (864, 867), (868, 875), (876, 893), (894, 900), (901, 909), (910, 912), (913, 914), (915, 919), (920, 924), (925, 933), (933, 935), (936, 937), (938, 942), (943, 944), (945, 951), (951, 952), (953, 960), (961, 966), (967, 972), (973, 978), (979, 984), (985, 991), (992, 994), (995, 996), (997, 1002), (1003, 1009), (1009, 1010), (1011, 1017), (1018, 1026), (1027, 1029), (1030, 1035), (1036, 1039), (1040, 1043), (1044, 1048), (1049, 1055), (1056, 1066), (1067, 1069), (1070, 1074), (1075, 1077), (1078, 1082), (1083, 1089), (1090, 1095), (1096, 1100), (1101, 1108), (1109, 1112), (1113, 1117), (1118, 1123), (1124, 1126), (1127, 1132), (1133, 1136), (1137, 1142), (1143, 1146), (1147, 1154), (1155, 1162), (1162, 1163), (1164, 1171), (1172, 1176), (1176, 1177), (1178, 1183), (1184, 1188), (1189, 1191), (1192, 1198), (1199, 1205), (1206, 1209), (1210, 1212), (1213, 1218), (1219, 1222), (1222, 1223)]
{0: 0, 1027: 189, 6: 1, 519: 97, 1036: 191, 14: 2, 938: 172, 528: 98, 18: 3, 1044: 193, 534: 99, 23: 4, 1049: 194, 539: 100, 1003: 185, 31: 5, 544: 101, 36: 6, 1030: 190, 550: 102, 39: 7, 553: 103, 1067: 196, 1070: 197, 559: 104, 48: 8, 50: 9, 1075: 198, 565: 105, 54: 10, 567: 106, 59: 11, 573: 107, 575: 108, 864: 160, 1090: 201, 581: 109, 70: 12, 584: 110, 76: 13, 224: 36, 591: 112, 1213: 225, 84: 14, 1109: 204, 953: 176, 601: 113, 92: 15, 1118: 206, 1040: 192, 610: 114, 99: 16, 1124: 207, 614: 115, 1127: 208, 619: 116, 108: 17, 621: 117, 111: 18, 1137: 210, 629: 118, 119: 19, 634: 119, 1147: 212, 124: 20, 639: 120, 129: 21, 1155: 213, 134: 22, 647: 121, 1162: 214, 652: 122, 141: 23, 1133: 209, 1164: 215, 660: 123, 1113: 205, 152: 25, 1178: 218, 668: 124, 158: 26, 1184: 219, 164: 27, 677: 125, 680: 126, 170: 28, 686: 127, 1199: 222, 689: 128, 182: 29, 695: 129, 1210: 224, 701: 130, 995: 183, 704: 131, 193: 30, 961: 177, 1219: 226, 708: 132, 1222: 227, 200: 31, 714: 133, 1143: 211, 206: 32, 719: 134, 209: 33, 722: 135, 213: 34, 729: 136, 218: 35, 736: 137, 739: 138, 228: 37, 743: 139, 807: 148, 237: 39, 751: 140, 245: 40, 759: 141, 761: 142, 1096: 202, 251: 42, 252: 43, 765: 143, 258: 44, 773: 144, 262: 45, 267: 46, 781: 145, 1083: 200, 281: 47, 794: 146, 287: 48, 800: 147, 289: 49, 291: 50, 295: 51, 297: 52, 300: 53, 816: 149, 305: 54, 819: 150, 821: 151, 313: 55, 826: 152, 828: 153, 318: 56, 319: 57, 321: 58, 323: 59, 1078: 199, 840: 155, 329: 60, 336: 61, 851: 157, 341: 62, 344: 63, 858: 159, 352: 64, 355: 65, 868: 161, 358: 66, 362: 67, 876: 162, 1018: 188, 370: 68, 403: 74, 373: 69, 148: 24, 379: 70, 381: 71, 894: 163, 1206: 223, 1172: 216, 235: 38, 901: 164, 391: 72, 910: 165, 399: 73, 913: 166, 915: 167, 920: 168, 409: 75, 925: 169, 414: 76, 420: 77, 933: 170, 936: 171, 426: 78, 429: 79, 943: 173, 945: 174, 435: 80, 951: 175, 441: 81, 443: 82, 449: 83, 451: 84, 967: 178, 456: 85, 588: 111, 460: 86, 973: 179, 462: 87, 1101: 203, 979: 180, 470: 88, 249: 41, 985: 181, 474: 89, 1192: 221, 477: 90, 1189: 220, 992: 182, 848: 156, 483: 91, 1176: 217, 997: 184, 1056: 195, 491: 92, 1009: 186, 498: 93, 1011: 187, 502: 94, 835: 154, 507: 95, 509: 96, 853: 158}
{1026: 188, 5: 0, 518: 96, 1035: 190, 13: 1, 527: 97, 17: 2, 1043: 192, 533: 98, 22: 3, 1048: 193, 538: 99, 30: 4, 543: 100, 35: 5, 549: 101, 38: 6, 552: 102, 1066: 195, 1069: 196, 558: 103, 1117: 205, 48: 7, 49: 8, 1074: 197, 564: 104, 53: 9, 566: 105, 58: 10, 863: 159, 573: 106, 574: 107, 1205: 222, 1089: 200, 69: 11, 583: 109, 75: 12, 1100: 202, 590: 111, 952: 175, 83: 13, 1108: 203, 600: 112, 91: 14, 1077: 198, 609: 113, 98: 15, 1009: 185, 613: 114, 1126: 207, 1029: 189, 1212: 224, 107: 16, 620: 116, 110: 17, 1123: 206, 1136: 209, 628: 117, 118: 18, 1112: 204, 633: 118, 1146: 211, 123: 19, 638: 119, 128: 20, 1154: 212, 619: 115, 133: 21, 646: 120, 1132: 208, 1162: 213, 651: 121, 140: 22, 147: 23, 151: 24, 1176: 216, 1177: 217, 667: 123, 157: 25, 1183: 218, 994: 182, 163: 26, 676: 124, 679: 125, 169: 27, 1223: 227, 685: 126, 1198: 221, 688: 127, 181: 28, 694: 128, 1209: 223, 1055: 194, 700: 129, 703: 130, 192: 29, 1218: 225, 707: 131, 1142: 210, 1222: 226, 199: 30, 713: 132, 205: 31, 719: 133, 208: 32, 721: 134, 212: 33, 728: 135, 217: 34, 735: 136, 738: 137, 227: 36, 294: 50, 742: 138, 223: 35, 235: 37, 236: 38, 750: 139, 1188: 219, 244: 39, 759: 140, 760: 141, 249: 40, 250: 41, 764: 142, 257: 43, 772: 143, 261: 44, 266: 45, 780: 144, 280: 46, 793: 145, 286: 47, 799: 146, 289: 48, 290: 49, 806: 147, 297: 51, 299: 52, 815: 148, 304: 53, 818: 149, 820: 150, 312: 54, 825: 151, 827: 152, 318: 55, 319: 56, 320: 57, 322: 58, 1163: 214, 839: 154, 328: 59, 476: 89, 335: 60, 848: 155, 850: 156, 852: 157, 343: 62, 857: 158, 1082: 199, 351: 63, 355: 64, 1171: 215, 357: 65, 361: 66, 875: 161, 402: 73, 370: 67, 659: 122, 372: 68, 379: 69, 380: 70, 893: 162, 900: 163, 390: 71, 909: 164, 398: 72, 912: 165, 1002: 184, 914: 166, 919: 167, 408: 74, 924: 168, 413: 75, 581: 108, 419: 76, 933: 169, 935: 170, 425: 77, 1095: 201, 428: 78, 942: 172, 944: 173, 434: 79, 951: 174, 440: 80, 442: 81, 867: 160, 960: 176, 449: 82, 450: 83, 587: 110, 966: 177, 455: 84, 459: 85, 972: 178, 461: 86, 978: 179, 469: 87, 1017: 187, 984: 180, 473: 88, 834: 153, 991: 181, 482: 90, 996: 183, 1039: 191, 252: 42, 490: 91, 1191: 220, 497: 92, 1010: 186, 501: 93, 937: 171, 340: 61, 507: 94, 508: 95}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(213, 4, 'United_States'), (1213, 9, 'Labor_Day'), (218, 9, 'Labor_Day'), (1137, 9, 'Labor_Day'), (50, 8, 'New_York_City'), (323, 5, 'Texas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Thomas']
response in server.py code:
 [(41, 6, 'Munich')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(21, 10, 'BlackBerry')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Federer', 'Bernard Tomic']
response in server.py code:
 [(13, 13, 'Bernard_Tomic'), (0, 7, 'Roger_Federer')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(14, 3, 'Agence_France-Presse'), (490, 5, 'Egypt'), (2, 4, 'Gaza')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Saint Petronius']
response in server.py code:
 [(30, 7, 'Bologna'), (20, 6, 'Bishop'), (0, 15, 'Saint_Petronius')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Pontoon_(boat)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(268, 7, 'Israel'), (861, 8, 'Israel'), (348, 10, 'Gaza_Strip'), (197, 14, 'Civil_aviation'), (293, 35, 'Yasser_Arafat_International_Airport'), (782, 24, 'National_aviation_authority'), (79, 11, 'State_of_Palestine'), (94, 7, 'Airport'), (1011, 3, 'Bus'), (888, 8, 'Security')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(32, 5, 'Paris'), (60, 6, 'France'), (9, 6, 'France'), (118, 16, 'Paris_Saint-Germain_F.C.'), (102, 4, 'RC_Lens'), (137, 5, 'AS_Nancy'), (109, 6, 'FC_Nantes')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Dulbecco', 'Dulbecco']
response in server.py code:
 [(88, 7, 'Liguria'), (117, 7, 'Imperia'), (21, 9, 'Catanzaro'), (187, 19, 'University_of_Turin'), (32, 14, 'Southern_Italy'), (150, 11, 'High_school'), (0, 8, 'Renato_Dulbecco'), (126, 8, 'Renato_Dulbecco')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(9, 6, 'Nassau,_Bahamas'), (0, 7, 'The_Bahamas'), (33, 5, 'Hotel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(95, 36, 'IBM'), (132, 3, 'IBM'), (407, 3, 'IBM'), (187, 3, 'Content_management_system')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lawrence Lindsey', 'Alan Greenspan']
response in server.py code:
 [(765, 11, 'Eurodollar'), (53, 7, 'Chicago'), (689, 10, 'Eurodollar'), (506, 10, 'Eurodollar'), (0, 4, 'United_States'), (2055, 4, 'United_States'), (287, 7, 'Chicago'), (2470, 4, 'United_States'), (2010, 4, 'United_States'), (1776, 4, 'United_States'), (72, 4, 'United_States'), (339, 7, 'Chicago'), (39, 7, 'Chicago'), (815, 4, 'United_States'), (2495, 3, 'Federal_Reserve_System'), (2365, 3, 'Federal_Reserve_System'), (2040, 4, 'CNBC'), (944, 6, 'France'), (2210, 3, 'Federal_Reserve_System'), (1900, 29, 'Federal_Open_Market_Committee'), (2801, 11, 'Eurodollar'), (2419, 4, 'Federal_Open_Market_Committee'), (2223, 14, 'Alan_Greenspan'), (2846, 11, 'Eurodollar'), (1955, 15, 'Federal_Reserve_System'), (1848, 15, 'Federal_Reserve_System'), (220, 45, 'Institute_for_Supply_Management'), (650, 8, 'Japan'), (1980, 16, 'Lawrence_B._Lindsey'), (1183, 15, 'Federal_Reserve_System')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(25, 5, 'Tottenham_Hotspur_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Andreas Seppi']
response in server.py code:
 [(130, 13, 'Andreas_Seppi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['David Robinson', 'Chen Shui-bian']
response in server.py code:
 [(1101, 9, 'Indonesia'), (2264, 13, 'United_States'), (1969, 9, 'Singapore'), (1076, 11, 'Philippines'), (1371, 11, 'South_Korea'), (552, 27, 'International_Monetary_Fund'), (2428, 5, 'China'), (1358, 8, 'Malaysia'), (147, 4, 'Asia'), (1089, 6, 'Taiwan'), (112, 9, 'Hong_Kong'), (2128, 14, 'Bloomberg_Television'), (1242, 14, 'Chen_Shui-bian'), (2673, 37, 'Hong_Kong_General_Chamber_of_Commerce'), (883, 14, 'David_Robinson_(basketball)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'James_Hendler'), (16, 8, 'Film_director')]
given spans fix. original text:  dressesusa
original word:  dressesusa dressesusa
new split:  dresses  and  usa
[(0, 7), (7, 10)]
{0: 0, 7: 1}
{10: 1, 7: 0}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['William Cohen']
response in server.py code:
 [(637, 4, 'Oman'), (540, 5, 'Qatar'), (612, 20, 'United_Arab_Emirates'), (657, 12, 'Saudi_Arabia'), (83, 13, 'William_Cohen'), (1203, 4, 'United_Nations'), (298, 4, 'Iraq'), (450, 7, 'Bahrain'), (146, 4, 'United_States'), (286, 4, 'Iran'), (186, 32, 'Missile_defense_systems_of_various_nations'), (37, 4, 'Persian_Gulf'), (1211, 9, 'International_sanctions')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Stickroth', 'Wosz', 'Kirsten', 'Ramelow', 'Carl']
response in server.py code:
 [(251, 13, 'SV_Werder_Bremen'), (168, 16, 'Bayer_04_Leverkusen'), (42, 4, 'Bonn'), (279, 11, 'TSV_1860_München'), (466, 13, 'F.C._Hansa_Rostock'), (434, 7, 'FC_Schalke_04'), (202, 7, 'Carsten_Ramelow'), (127, 6, 'VfL_Bochum'), (9, 6, 'Germany'), (137, 9, 'Thomas_Stickroth'), (93, 6, 'Germany'), (157, 4, 'Dariusz_Wosz'), (268, 4, 'Marco_Bode'), (390, 8, 'SC_Freiburg'), (188, 7, 'Ulf_Kirsten'), (341, 9, 'Karlsruher_SC'), (377, 6, 'Dundee_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['His']
response in server.py code:
 [(38, 8, 'Residency_(medicine)'), (155, 3, 'Bon_Jovi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(9, 6, 'Cheating_in_video_games')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(119, 3, 'Federal_Reserve_System'), (206, 3, 'Federal_Reserve_System'), (4, 15, 'Federal_Reserve_System')]
given spans fix. original text:  Douglas & Lomason shares rise on merger. FARMINGTON HILLS, Mich. 1996-08-30 Shares of Douglas & Lomason Co were up 4-1/2 at 30-5/8 Friday afternoon after Thursday's announcement that the vehicle seat maker had agreed to be acquired by Magna International Inc for $ 31 a share, or $ 135 million. Magna was up 1/8 to 48-1/4 on the New York Stock Exchange. Douglas & Lomason has 4.45 million common shares outstanding, some of which are option shares to be purchased at exercise prices less than the $ 31 offered price. The acquisition will beef up Markham, Ontario-based Magna's North American car and truck seating business, allowing it to better compete with Johnson Controls Inc and Lear Corp. Family-controlled Douglas & Lomason, which had 1995 revenue of $ 561 million, was finding it more difficult to compete for new seating contracts from vehicle makers, said James Hoey, chief financial officer. "Unfortunately, in the auto industry these days, a $ 500 million company is not a big company anymore," Hoey said. "This merger makes us much more competitive." He added that Douglas & Lomason's top executives have been asked to stay on with Magna after the merger, though their future roles have not yet been defined. Douglas & Lomason's profits were hurt in the past year by model changeovers, which had reduced production at some important customers, but are now recovering, analysts said. The company earned $ 11.2 million on sales of $ 299 million in the first six months of 1996, up from year-earlier earnings of $ 4.7 million on sales of $ 285.7 million. Ford plans to cut its roster of 2,300 tier-one suppliers-- those it deals with directly-- in half over the next five years. "The deal really levels the seating field somewhat," said John Casesa of Schroder Wertheim & Co. "It should give Magna the critical mass to be a bigger player in that market." Magna's traditional strength has been instrument panels, door panels and other interior components. Magna, Johnson Controls and Lear have been working to build up their capabilties to supply complete interiors to automakers, including seats, instrument panels, door panels carpeting and headliners.
original word:  Mich. Mich.
new split:  Mich  and  .
[(0, 7), (8, 9), (10, 17), (18, 24), (25, 29), (30, 32), (33, 39), (39, 40), (41, 51), (52, 57), (57, 58), (59, 63), (63, 64)]
{0: 0, 33: 6, 39: 7, 8: 1, 41: 8, 10: 2, 18: 3, 52: 9, 25: 4, 57: 10, 59: 11, 30: 5, 63: 12}
{32: 5, 64: 12, 7: 0, 40: 7, 9: 1, 39: 6, 17: 2, 51: 8, 24: 3, 57: 9, 58: 10, 29: 4, 63: 11}
given spans fix. original text:  Douglas & Lomason shares rise on merger. FARMINGTON HILLS, Mich. 1996-08-30 Shares of Douglas & Lomason Co were up 4-1/2 at 30-5/8 Friday afternoon after Thursday's announcement that the vehicle seat maker had agreed to be acquired by Magna International Inc for $ 31 a share, or $ 135 million. Magna was up 1/8 to 48-1/4 on the New York Stock Exchange. Douglas & Lomason has 4.45 million common shares outstanding, some of which are option shares to be purchased at exercise prices less than the $ 31 offered price. The acquisition will beef up Markham, Ontario-based Magna's North American car and truck seating business, allowing it to better compete with Johnson Controls Inc and Lear Corp. Family-controlled Douglas & Lomason, which had 1995 revenue of $ 561 million, was finding it more difficult to compete for new seating contracts from vehicle makers, said James Hoey, chief financial officer. "Unfortunately, in the auto industry these days, a $ 500 million company is not a big company anymore," Hoey said. "This merger makes us much more competitive." He added that Douglas & Lomason's top executives have been asked to stay on with Magna after the merger, though their future roles have not yet been defined. Douglas & Lomason's profits were hurt in the past year by model changeovers, which had reduced production at some important customers, but are now recovering, analysts said. The company earned $ 11.2 million on sales of $ 299 million in the first six months of 1996, up from year-earlier earnings of $ 4.7 million on sales of $ 285.7 million. Ford plans to cut its roster of 2,300 tier-one suppliers-- those it deals with directly-- in half over the next five years. "The deal really levels the seating field somewhat," said John Casesa of Schroder Wertheim & Co. "It should give Magna the critical mass to be a bigger player in that market." Magna's traditional strength has been instrument panels, door panels and other interior components. Magna, Johnson Controls and Lear have been working to build up their capabilties to supply complete interiors to automakers, including seats, instrument panels, door panels carpeting and headliners.
original word:  Corp. Corp.
new split:  Corp  and  .
[(0, 7), (8, 9), (10, 17), (18, 24), (25, 29), (30, 32), (33, 39), (39, 40), (41, 51), (52, 57), (57, 58), (59, 63), (63, 64), (65, 75), (76, 82), (83, 85), (86, 93), (94, 95), (96, 103), (104, 106), (107, 111), (112, 114), (115, 120), (121, 123), (124, 130), (131, 137), (138, 147), (148, 153), (154, 162), (162, 164), (165, 177), (178, 182), (183, 186), (187, 194), (195, 199), (200, 205), (206, 209), (210, 216), (217, 219), (220, 222), (223, 231), (232, 234), (235, 240), (241, 254), (255, 258), (259, 262), (263, 264), (265, 267), (268, 269), (270, 275), (275, 276), (277, 279), (280, 281), (282, 285), (286, 293), (293, 294), (295, 300), (301, 304), (305, 307), (308, 311), (312, 314), (315, 321), (322, 324), (325, 328), (329, 332), (333, 337), (338, 343), (344, 352), (352, 353), (354, 361), (362, 363), (364, 371), (372, 375), (376, 380), (381, 388), (389, 395), (396, 402), (403, 414), (414, 415), (416, 420), (421, 423), (424, 429), (430, 433), (434, 440), (441, 447), (448, 450), (451, 453), (454, 463), (464, 466), (467, 475), (476, 482), (483, 487), (488, 492), (493, 496), (497, 498), (499, 501), (502, 509), (510, 515), (515, 516), (517, 520), (521, 532), (533, 537), (538, 542), (543, 545), (546, 553), (553, 554), (555, 568), (569, 574), (574, 576), (577, 582), (583, 591), (592, 595), (596, 599), (600, 605), (606, 613), (614, 622), (622, 623), (624, 632), (633, 635), (636, 638), (639, 645), (646, 653), (654, 658), (659, 666), (667, 675), (676, 679), (680, 683), (684, 688), (689, 693), (693, 694)]
{0: 0, 259: 45, 517: 99, 263: 46, 8: 1, 265: 47, 10: 2, 268: 48, 270: 49, 600: 113, 18: 3, 275: 50, 277: 51, 280: 52, 25: 4, 282: 53, 30: 5, 543: 103, 33: 6, 546: 104, 293: 55, 295: 56, 41: 8, 555: 106, 301: 57, 223: 40, 305: 58, 52: 9, 606: 114, 521: 100, 312: 60, 57: 10, 659: 123, 315: 61, 574: 108, 63: 12, 65: 13, 322: 62, 325: 63, 583: 110, 329: 64, 76: 14, 333: 65, 592: 111, 693: 129, 338: 66, 83: 15, 596: 112, 86: 16, 569: 107, 344: 67, 94: 17, 352: 68, 354: 69, 59: 11, 614: 115, 104: 19, 362: 70, 107: 20, 364: 71, 96: 18, 112: 21, 488: 92, 115: 22, 372: 72, 376: 73, 121: 23, 124: 24, 381: 74, 533: 101, 476: 90, 131: 25, 389: 75, 646: 121, 577: 109, 138: 26, 396: 76, 654: 122, 403: 77, 148: 27, 622: 116, 235: 42, 154: 28, 667: 124, 538: 102, 414: 78, 416: 79, 624: 117, 162: 29, 676: 125, 165: 30, 497: 94, 424: 81, 684: 127, 430: 82, 689: 128, 178: 31, 286: 54, 183: 32, 441: 84, 187: 33, 448: 85, 195: 34, 308: 59, 454: 87, 200: 35, 680: 126, 206: 36, 515: 98, 464: 88, 210: 37, 467: 89, 633: 118, 217: 38, 220: 39, 421: 80, 483: 91, 232: 41, 636: 119, 39: 7, 493: 93, 451: 86, 434: 83, 241: 43, 499: 95, 502: 96, 553: 105, 639: 120, 510: 97, 255: 44}
{51: 8, 258: 44, 515: 97, 516: 98, 262: 45, 7: 0, 264: 46, 9: 1, 267: 47, 269: 48, 17: 2, 275: 49, 276: 50, 279: 51, 24: 3, 281: 52, 29: 4, 542: 102, 32: 5, 545: 103, 475: 89, 293: 54, 294: 55, 39: 6, 40: 7, 553: 104, 554: 105, 300: 56, 93: 16, 304: 57, 520: 99, 307: 58, 311: 59, 568: 106, 57: 9, 314: 60, 574: 107, 63: 11, 64: 12, 321: 61, 324: 62, 694: 129, 582: 109, 328: 63, 599: 112, 75: 13, 332: 64, 591: 110, 337: 65, 82: 14, 595: 111, 85: 15, 343: 66, 58: 10, 95: 17, 352: 67, 353: 68, 613: 114, 103: 18, 361: 69, 106: 19, 363: 70, 658: 122, 622: 115, 111: 20, 114: 21, 371: 71, 375: 72, 120: 22, 532: 100, 123: 23, 380: 73, 638: 119, 576: 108, 130: 24, 388: 74, 645: 120, 137: 25, 395: 75, 450: 85, 402: 76, 147: 26, 537: 101, 153: 27, 666: 123, 623: 116, 414: 77, 415: 78, 653: 121, 496: 93, 162: 28, 675: 124, 164: 29, 423: 80, 683: 126, 429: 81, 285: 53, 688: 127, 433: 82, 693: 128, 182: 31, 440: 83, 186: 32, 447: 84, 194: 33, 487: 91, 453: 86, 199: 34, 177: 30, 205: 35, 632: 117, 463: 87, 209: 36, 466: 88, 216: 37, 420: 79, 219: 38, 222: 39, 482: 90, 635: 118, 231: 40, 234: 41, 679: 125, 492: 92, 240: 42, 498: 94, 501: 95, 605: 113, 509: 96, 254: 43}
given spans fix. original text:  Douglas & Lomason shares rise on merger. FARMINGTON HILLS, Mich. 1996-08-30 Shares of Douglas & Lomason Co were up 4-1/2 at 30-5/8 Friday afternoon after Thursday's announcement that the vehicle seat maker had agreed to be acquired by Magna International Inc for $ 31 a share, or $ 135 million. Magna was up 1/8 to 48-1/4 on the New York Stock Exchange. Douglas & Lomason has 4.45 million common shares outstanding, some of which are option shares to be purchased at exercise prices less than the $ 31 offered price. The acquisition will beef up Markham, Ontario-based Magna's North American car and truck seating business, allowing it to better compete with Johnson Controls Inc and Lear Corp. Family-controlled Douglas & Lomason, which had 1995 revenue of $ 561 million, was finding it more difficult to compete for new seating contracts from vehicle makers, said James Hoey, chief financial officer. "Unfortunately, in the auto industry these days, a $ 500 million company is not a big company anymore," Hoey said. "This merger makes us much more competitive." He added that Douglas & Lomason's top executives have been asked to stay on with Magna after the merger, though their future roles have not yet been defined. Douglas & Lomason's profits were hurt in the past year by model changeovers, which had reduced production at some important customers, but are now recovering, analysts said. The company earned $ 11.2 million on sales of $ 299 million in the first six months of 1996, up from year-earlier earnings of $ 4.7 million on sales of $ 285.7 million. Ford plans to cut its roster of 2,300 tier-one suppliers-- those it deals with directly-- in half over the next five years. "The deal really levels the seating field somewhat," said John Casesa of Schroder Wertheim & Co. "It should give Magna the critical mass to be a bigger player in that market." Magna's traditional strength has been instrument panels, door panels and other interior components. Magna, Johnson Controls and Lear have been working to build up their capabilties to supply complete interiors to automakers, including seats, instrument panels, door panels carpeting and headliners.
original word:  Co. Co.
new split:  Co  and  .
[(0, 7), (8, 9), (10, 17), (18, 24), (25, 29), (30, 32), (33, 39), (39, 40), (41, 51), (52, 57), (57, 58), (59, 63), (63, 64), (65, 75), (76, 82), (83, 85), (86, 93), (94, 95), (96, 103), (104, 106), (107, 111), (112, 114), (115, 120), (121, 123), (124, 130), (131, 137), (138, 147), (148, 153), (154, 162), (162, 164), (165, 177), (178, 182), (183, 186), (187, 194), (195, 199), (200, 205), (206, 209), (210, 216), (217, 219), (220, 222), (223, 231), (232, 234), (235, 240), (241, 254), (255, 258), (259, 262), (263, 264), (265, 267), (268, 269), (270, 275), (275, 276), (277, 279), (280, 281), (282, 285), (286, 293), (293, 294), (295, 300), (301, 304), (305, 307), (308, 311), (312, 314), (315, 321), (322, 324), (325, 328), (329, 332), (333, 337), (338, 343), (344, 352), (352, 353), (354, 361), (362, 363), (364, 371), (372, 375), (376, 380), (381, 388), (389, 395), (396, 402), (403, 414), (414, 415), (416, 420), (421, 423), (424, 429), (430, 433), (434, 440), (441, 447), (448, 450), (451, 453), (454, 463), (464, 466), (467, 475), (476, 482), (483, 487), (488, 492), (493, 496), (497, 498), (499, 501), (502, 509), (510, 515), (515, 516), (517, 520), (521, 532), (533, 537), (538, 542), (543, 545), (546, 553), (553, 554), (555, 568), (569, 574), (574, 576), (577, 582), (583, 591), (592, 595), (596, 599), (600, 605), (606, 613), (614, 622), (622, 623), (624, 632), (633, 635), (636, 638), (639, 645), (646, 653), (654, 658), (659, 666), (667, 675), (676, 679), (680, 683), (684, 688), (689, 693), (693, 694), (695, 712), (713, 720), (721, 722), (723, 730), (730, 731), (732, 737), (738, 741), (742, 746), (747, 754), (755, 757), (758, 759), (760, 763), (764, 771), (771, 772), (773, 776), (777, 784), (785, 787), (788, 792), (793, 802), (803, 805), (806, 813), (814, 817), (818, 821), (822, 829), (830, 839), (840, 844), (845, 852), (853, 859), (859, 860), (861, 865), (866, 871), (872, 876), (876, 877), (878, 883), (884, 893), (894, 901), (901, 902), (903, 904), (904, 917), (917, 918), (919, 921), (922, 925), (926, 930), (931, 939), (940, 945), (946, 950), (950, 951), (952, 953), (954, 955), (956, 959), (960, 967), (968, 975), (976, 978), (979, 982), (983, 984), (985, 988), (989, 996), (997, 1004), (1004, 1005), (1005, 1006), (1007, 1011), (1012, 1016), (1016, 1017), (1018, 1019), (1019, 1023), (1024, 1030), (1031, 1036), (1037, 1039), (1040, 1044), (1045, 1049), (1050, 1061), (1061, 1062), (1062, 1063), (1064, 1066), (1067, 1072), (1073, 1077), (1078, 1085), (1086, 1087), (1088, 1095), (1095, 1097), (1098, 1101), (1102, 1112), (1113, 1117), (1118, 1122), (1123, 1128), (1129, 1131), (1132, 1136), (1137, 1139), (1140, 1144), (1145, 1150), (1151, 1156), (1157, 1160), (1161, 1167), (1167, 1168), (1169, 1175), (1176, 1181), (1182, 1188), (1189, 1194), (1195, 1199), (1200, 1203), (1204, 1207), (1208, 1212), (1213, 1220), (1220, 1221), (1222, 1229), (1230, 1231), (1232, 1239), (1239, 1241), (1242, 1249), (1250, 1254), (1255, 1259), (1260, 1262), (1263, 1266), (1267, 1271), (1272, 1276), (1277, 1279), (1280, 1285), (1286, 1297), (1297, 1298), (1299, 1304), (1305, 1308), (1309, 1316), (1317, 1327), (1328, 1330), (1331, 1335), (1336, 1345), (1346, 1355), (1355, 1356), (1357, 1360), (1361, 1364), (1365, 1368), (1369, 1379), (1379, 1380), (1381, 1389), (1390, 1394), (1394, 1395), (1396, 1399), (1400, 1407), (1408, 1414), (1415, 1416), (1417, 1421), (1422, 1429), (1430, 1432), (1433, 1438), (1439, 1441), (1442, 1443), (1444, 1447), (1448, 1455), (1456, 1458), (1459, 1462), (1463, 1468), (1469, 1472), (1473, 1479), (1480, 1482), (1483, 1487), (1487, 1488), (1489, 1491), (1492, 1496), (1497, 1509), (1510, 1518), (1519, 1521), (1522, 1523), (1524, 1527), (1528, 1535), (1536, 1538), (1539, 1544), (1545, 1547), (1548, 1549), (1550, 1555), (1556, 1563), (1563, 1564), (1565, 1569), (1570, 1575), (1576, 1578), (1579, 1582), (1583, 1586), (1587, 1593), (1594, 1596), (1597, 1602), (1603, 1611), (1612, 1621), (1621, 1623), (1624, 1629), (1630, 1632), (1633, 1638), (1639, 1643), (1644, 1652), (1652, 1654), (1655, 1657), (1658, 1662), (1663, 1667), (1668, 1671), (1672, 1676), (1677, 1681), (1682, 1687), (1687, 1688), (1689, 1690), (1690, 1693), (1694, 1698), (1699, 1705), (1706, 1712), (1713, 1716), (1717, 1724), (1725, 1730), (1731, 1739), (1739, 1740), (1740, 1741), (1742, 1746), (1747, 1751), (1752, 1758), (1759, 1761), (1762, 1770), (1771, 1779), (1780, 1781), (1782, 1784), (1784, 1785)]
{0: 0, 1024: 195, 1031: 196, 8: 1, 10: 2, 1037: 197, 1040: 198, 18: 3, 1539: 295, 1045: 199, 25: 4, 1050: 200, 30: 5, 33: 6, 1061: 201, 1062: 202, 39: 7, 1064: 203, 41: 8, 1067: 204, 1073: 205, 52: 9, 1078: 206, 1545: 296, 57: 10, 59: 11, 1086: 207, 63: 12, 1088: 208, 65: 13, 1095: 209, 1098: 210, 76: 14, 1102: 211, 83: 15, 86: 16, 1113: 212, 94: 17, 96: 18, 1123: 214, 104: 19, 1129: 215, 107: 20, 1132: 216, 112: 21, 1137: 217, 115: 22, 1140: 218, 1145: 219, 124: 24, 1151: 220, 131: 25, 1157: 221, 1161: 222, 138: 26, 1167: 223, 1169: 224, 148: 27, 1176: 225, 154: 28, 1182: 226, 162: 29, 165: 30, 1267: 243, 1195: 228, 1200: 229, 178: 31, 1204: 230, 183: 32, 1208: 231, 1396: 266, 187: 33, 1213: 232, 195: 34, 1220: 233, 1222: 234, 200: 35, 1570: 302, 206: 36, 1232: 236, 376: 73, 210: 37, 1230: 235, 1239: 237, 217: 38, 1242: 238, 220: 39, 223: 40, 1250: 239, 1255: 240, 232: 41, 235: 42, 1260: 241, 1263: 242, 241: 43, 1747: 338, 1272: 244, 1713: 331, 1277: 245, 255: 44, 1280: 246, 259: 45, 1286: 247, 263: 46, 265: 47, 268: 48, 270: 49, 1297: 248, 1299: 249, 277: 51, 280: 52, 1305: 250, 282: 53, 1309: 251, 286: 54, 1317: 252, 295: 56, 301: 57, 1328: 253, 305: 58, 1331: 254, 308: 59, 312: 60, 315: 61, 1579: 304, 322: 62, 325: 63, 329: 64, 1355: 257, 1357: 258, 693: 129, 338: 66, 1365: 260, 344: 67, 1369: 261, 352: 68, 354: 69, 1379: 262, 1381: 263, 362: 70, 364: 71, 1390: 264, 1394: 265, 372: 72, 1400: 267, 381: 74, 1408: 268, 1771: 342, 389: 75, 1415: 269, 1417: 270, 396: 76, 1422: 271, 403: 77, 1430: 272, 1433: 273, 414: 78, 1439: 274, 416: 79, 1442: 275, 1444: 276, 421: 80, 1448: 277, 430: 82, 1456: 278, 434: 83, 1459: 279, 1463: 280, 441: 84, 1469: 281, 448: 85, 1473: 282, 451: 86, 1782: 344, 454: 87, 1480: 283, 1483: 284, 1487: 285, 464: 88, 1489: 286, 467: 89, 1492: 287, 1497: 288, 476: 90, 483: 91, 1510: 289, 488: 92, 493: 93, 1519: 290, 424: 81, 1522: 291, 499: 95, 1524: 292, 502: 96, 1528: 293, 510: 97, 1536: 294, 515: 98, 517: 99, 521: 100, 1548: 297, 1550: 298, 600: 113, 1556: 299, 533: 101, 538: 102, 1563: 300, 1565: 301, 543: 103, 546: 104, 1576: 303, 553: 105, 555: 106, 1583: 305, 1587: 306, 1118: 213, 569: 107, 1594: 307, 1597: 308, 574: 108, 577: 109, 1603: 309, 583: 110, 1612: 310, 592: 111, 596: 112, 1621: 311, 1624: 312, 606: 114, 1633: 314, 614: 115, 1639: 315, 1644: 316, 622: 116, 624: 117, 275: 50, 1652: 317, 1655: 318, 633: 118, 1658: 319, 636: 119, 639: 120, 1784: 345, 1668: 321, 646: 121, 1672: 322, 1677: 323, 654: 122, 1682: 324, 659: 123, 1687: 325, 1689: 326, 1690: 327, 667: 124, 1694: 328, 1699: 329, 676: 125, 680: 126, 1706: 330, 684: 127, 689: 128, 1717: 332, 695: 130, 1762: 341, 1725: 333, 1731: 334, 713: 131, 1739: 335, 1740: 336, 1742: 337, 721: 132, 723: 133, 121: 23, 1752: 339, 730: 134, 732: 135, 293: 55, 738: 136, 742: 137, 747: 138, 755: 139, 1780: 343, 758: 140, 760: 141, 1663: 320, 764: 142, 771: 143, 773: 144, 777: 145, 785: 146, 788: 147, 793: 148, 803: 149, 806: 150, 814: 151, 818: 152, 822: 153, 1630: 313, 830: 154, 840: 155, 845: 156, 1336: 255, 853: 157, 859: 158, 861: 159, 866: 160, 872: 161, 876: 162, 878: 163, 884: 164, 894: 165, 901: 166, 903: 167, 904: 168, 1346: 256, 917: 169, 919: 170, 922: 171, 926: 172, 931: 173, 497: 94, 940: 174, 946: 175, 950: 176, 952: 177, 954: 178, 956: 179, 960: 180, 968: 181, 333: 65, 976: 182, 979: 183, 983: 184, 1759: 340, 985: 185, 989: 186, 1189: 227, 997: 187, 1361: 259, 1004: 188, 1005: 189, 1007: 190, 1012: 191, 1016: 192, 1018: 193, 1019: 194}
{1030: 195, 7: 0, 9: 1, 1036: 196, 1039: 197, 17: 2, 1044: 198, 24: 3, 1049: 199, 29: 4, 32: 5, 1712: 330, 1061: 200, 1062: 201, 39: 6, 40: 7, 1066: 203, 1072: 204, 1544: 295, 1229: 234, 51: 8, 1077: 205, 57: 9, 58: 10, 1085: 206, 63: 11, 64: 12, 1095: 208, 1097: 209, 75: 13, 1101: 210, 82: 14, 85: 15, 1112: 211, 93: 16, 95: 17, 1122: 213, 103: 18, 1128: 214, 106: 19, 1131: 215, 111: 20, 1136: 216, 114: 21, 1139: 217, 447: 84, 120: 22, 123: 23, 1150: 219, 130: 24, 1156: 220, 1160: 221, 137: 25, 1167: 222, 1168: 223, 147: 26, 1175: 224, 153: 27, 1181: 225, 162: 28, 164: 29, 1194: 227, 199: 34, 1199: 228, 177: 30, 1203: 229, 182: 31, 1207: 230, 186: 32, 1212: 231, 194: 33, 1220: 232, 1221: 233, 545: 103, 375: 72, 205: 35, 1231: 235, 209: 36, 1239: 236, 216: 37, 1241: 237, 219: 38, 222: 39, 1249: 238, 1254: 239, 231: 40, 234: 41, 1063: 202, 1746: 337, 1262: 241, 240: 42, 1266: 242, 1781: 343, 1271: 243, 1276: 244, 1578: 303, 254: 43, 1279: 245, 258: 44, 1285: 246, 262: 45, 264: 46, 267: 47, 269: 48, 1297: 247, 1298: 248, 275: 49, 276: 50, 279: 51, 1304: 249, 281: 52, 1308: 250, 285: 53, 1316: 251, 293: 54, 294: 55, 300: 56, 1327: 252, 304: 57, 1330: 253, 307: 58, 311: 59, 314: 60, 321: 61, 324: 62, 1761: 340, 328: 63, 1355: 256, 1356: 257, 1360: 258, 337: 65, 1364: 259, 343: 66, 1368: 260, 352: 67, 353: 68, 1379: 261, 1380: 262, 361: 69, 363: 70, 1389: 263, 1394: 264, 1395: 265, 1399: 266, 1087: 207, 380: 73, 1770: 341, 1407: 267, 1259: 240, 388: 74, 1414: 268, 1416: 269, 395: 75, 1421: 270, 402: 76, 1429: 271, 1432: 272, 414: 77, 415: 78, 1441: 274, 1443: 275, 420: 79, 423: 80, 429: 81, 1455: 277, 433: 82, 1458: 278, 1438: 273, 1462: 279, 440: 83, 1468: 280, 757: 139, 1472: 281, 450: 85, 453: 86, 1479: 282, 1482: 283, 1487: 284, 1488: 285, 466: 88, 1491: 286, 1496: 287, 475: 89, 482: 90, 1509: 288, 487: 91, 1447: 276, 492: 92, 1518: 289, 496: 93, 1521: 290, 498: 94, 1523: 291, 501: 95, 1527: 292, 509: 96, 1535: 293, 1538: 294, 515: 97, 516: 98, 520: 99, 1547: 296, 1549: 297, 1555: 298, 532: 100, 537: 101, 1563: 299, 1564: 300, 542: 102, 1569: 301, 1575: 302, 553: 104, 554: 105, 1582: 304, 1117: 212, 1586: 305, 568: 106, 1593: 306, 1596: 307, 574: 107, 576: 108, 1602: 308, 582: 109, 1611: 309, 591: 110, 595: 111, 1621: 310, 463: 87, 599: 112, 605: 113, 1632: 313, 613: 114, 1638: 314, 1623: 311, 1643: 315, 622: 115, 623: 116, 1652: 316, 1654: 317, 632: 117, 1657: 318, 635: 118, 638: 119, 1667: 320, 645: 120, 1671: 321, 1676: 322, 653: 121, 1681: 323, 658: 122, 1687: 324, 1688: 325, 666: 123, 1693: 327, 1698: 328, 675: 124, 679: 125, 1705: 329, 683: 126, 688: 127, 1716: 331, 693: 128, 694: 129, 1724: 332, 1730: 333, 712: 130, 1739: 334, 1740: 335, 1741: 336, 720: 131, 1144: 218, 722: 132, 1751: 338, 730: 133, 731: 134, 1758: 339, 737: 135, 741: 136, 746: 137, 754: 138, 1779: 342, 1662: 319, 759: 140, 1784: 344, 1785: 345, 763: 141, 771: 142, 772: 143, 776: 144, 784: 145, 787: 146, 792: 147, 1629: 312, 802: 148, 805: 149, 813: 150, 817: 151, 821: 152, 829: 153, 839: 154, 1335: 254, 844: 155, 852: 156, 859: 157, 860: 158, 1690: 326, 865: 159, 871: 160, 876: 161, 877: 162, 883: 163, 893: 164, 901: 165, 902: 166, 1345: 255, 904: 167, 371: 71, 917: 168, 918: 169, 921: 170, 925: 171, 930: 172, 939: 173, 945: 174, 950: 175, 951: 176, 953: 177, 955: 178, 959: 179, 967: 180, 332: 64, 975: 181, 978: 182, 982: 183, 984: 184, 1188: 226, 988: 185, 996: 186, 1004: 187, 1005: 188, 1006: 189, 1011: 190, 1016: 191, 1017: 192, 1019: 193, 1023: 194}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mich', 'James Hoey']
response in server.py code:
 [(329, 23, 'New_York_Stock_Exchange'), (659, 20, 'Johnson_Controls'), (235, 23, 'Magna_International'), (1972, 16, 'Johnson_Controls'), (569, 5, 'Magna_International'), (295, 5, 'Magna_International'), (1565, 4, 'Ford_Motor_Company'), (41, 16, 'Farmington_Hills,_Michigan'), (546, 7, 'Markham,_Ontario'), (1965, 5, 'Magna_International'), (577, 14, 'North_America'), (1865, 5, 'Magna_International'), (1802, 5, 'Magna_International'), (1007, 4, 'Jim_Hoey'), (1145, 5, 'Magna_International'), (1993, 4, 'Lear_Corporation'), (866, 10, 'Jim_Hoey'), (59, 4, 'Mich_Dulce')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Lance_Armstrong'), (35, 4, 'Moon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(14, 2, 'United_Kingdom')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Foote']
response in server.py code:
 [(74, 8, 'Portland,_Oregon'), (56, 5, 'Andrew_Hull_Foote')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(409, 8, 'Citibank'), (79, 4, 'HSBC'), (437, 5, 'Japan'), (22, 8, 'Shanghai'), (419, 9, 'Hong_Kong'), (445, 21, 'The_Bank_of_Tokyo-Mitsubishi_UFJ'), (287, 6, 'Pudong'), (2, 18, 'Xinhua_News_Agency'), (404, 2, 'United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Enrico Fermi', 'Luria']
response in server.py code:
 [(149, 19, 'Columbia_University'), (17, 9, 'Physicist'), (112, 22, 'Rockefeller_Foundation'), (27, 12, 'Enrico_Fermi'), (75, 18, 'Sapienza_University_of_Rome'), (299, 21, 'Vanderbilt_University'), (244, 29, 'Cold_Spring_Harbor_Laboratory'), (195, 7, 'Hershey,_Pennsylvania'), (135, 10, 'Fellow'), (95, 5, 'Salvador_Luria'), (59, 3, 'Bon_Jovi')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Goran Ivanisevic', 'Mark Woodforde', 'Yevgeny Kafelnikov', 'Jim Courier']
response in server.py code:
 [(260, 11, 'Jim_Courier'), (192, 14, 'Mark_Woodforde'), (247, 6, 'Russia'), (227, 18, 'Yevgeny_Kafelnikov'), (208, 9, 'Australia'), (160, 16, 'Goran_Ivanišević'), (55, 7, 'Germany'), (178, 7, 'Croatia'), (273, 4, 'United_States'), (47, 6, 'Munich'), (9, 14, 'Grand_Slam_Cup'), (115, 14, 'Grand_Slam_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(268, 3, 'Magyar_Távirati_Iroda'), (76, 9, 'Hungary'), (1024, 13, 'The_Holocaust'), (568, 7, 'Hungarian_forint'), (824, 14, 'Welfare'), (214, 9, 'Communism'), (122, 16, 'History_of_the_Jews_in_Hungary'), (398, 15, 'Nationalization'), (1302, 7, 'Holy_See')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Wiesel', 'Richard Williamson']
response in server.py code:
 [(95, 18, 'Richard_Williamson_(bishop)'), (131, 23, 'Society_of_St._Pius_X'), (9, 6, 'Elie_Wiesel'), (31, 7, 'Holy_See'), (88, 6, 'Bishop'), (117, 6, 'Member_of_Parliament')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(213, 7, 'Madeira')]
given spans fix. original text:  UK meals / feeds follow Chicago higher, trade slow. LONDON 1996-08-30 UK meals and feeds sellers marked up high protein soymeal by around 1.50 stg a tonne on Friday following gains in Chicago at Thursday's close. Trade was very quiet with only one deal reported when spot high protein soymeal fetched 215 stg a tonne ex-store on the south coast. "I would n't get too excited about this one becuase I think it's for all of five tonnes, which when you think about just about sums up the state of the market at the moment," said a trader.-- Jim Ballantyne, London Newsroom+44 171 542 8062
original word:  Newsroom+44 Newsroom+44
new split:  Newsroom  and  +44
[(0, 2), (3, 8), (9, 10), (11, 16), (17, 23), (24, 31), (32, 38), (38, 39), (40, 45), (46, 50), (50, 51), (52, 58), (59, 69), (70, 72), (73, 78), (79, 82), (83, 88), (89, 96), (97, 103), (104, 106), (107, 111), (112, 119), (120, 127), (128, 130), (131, 137), (138, 142), (143, 146), (147, 148), (149, 154), (155, 157), (158, 164), (165, 174), (175, 180), (181, 183), (184, 191), (192, 194), (195, 203), (203, 205), (206, 211), (211, 212), (213, 218), (219, 222), (223, 227), (228, 233), (234, 238), (239, 243), (244, 247), (248, 252), (253, 261), (262, 266), (267, 271), (272, 276), (277, 284), (285, 292), (293, 300), (301, 304), (305, 308), (309, 310), (311, 316), (317, 325), (326, 328), (329, 332), (333, 338), (339, 344), (344, 345), (346, 347), (347, 348), (349, 354), (355, 358), (359, 362), (363, 366), (367, 374), (375, 380), (381, 385), (386, 389), (390, 397), (398, 399), (400, 405), (406, 408), (408, 410), (411, 414), (415, 418), (419, 421), (422, 426), (427, 433), (433, 434), (435, 440), (441, 445), (446, 449), (450, 455), (456, 461), (462, 466), (467, 472), (473, 477), (478, 480), (481, 484), (485, 490), (491, 493), (494, 497), (498, 504), (505, 507), (508, 511), (512, 518), (518, 519), (519, 520), (521, 525), (526, 527), (528, 535), (535, 537), (538, 541), (542, 552), (552, 553), (554, 560), (561, 569), (569, 572)]
{0: 0, 512: 102, 3: 1, 262: 49, 467: 92, 9: 2, 11: 3, 526: 106, 272: 51, 17: 4, 277: 52, 535: 108, 24: 5, 538: 109, 285: 53, 542: 110, 32: 6, 521: 105, 293: 54, 38: 7, 561: 113, 40: 8, 554: 112, 519: 104, 301: 55, 46: 9, 305: 56, 50: 10, 52: 11, 309: 57, 311: 58, 462: 91, 569: 114, 59: 12, 70: 13, 317: 59, 267: 50, 326: 60, 329: 61, 333: 62, 79: 15, 339: 63, 344: 64, 89: 17, 346: 65, 347: 66, 349: 67, 97: 18, 355: 68, 359: 69, 104: 19, 363: 70, 367: 71, 112: 21, 375: 72, 120: 22, 381: 73, 128: 23, 386: 74, 131: 24, 390: 75, 138: 25, 398: 76, 143: 26, 400: 77, 147: 27, 149: 28, 406: 78, 408: 79, 155: 29, 158: 30, 415: 81, 411: 80, 165: 31, 422: 83, 427: 84, 175: 32, 433: 85, 435: 86, 181: 33, 73: 14, 184: 34, 441: 87, 446: 88, 192: 35, 450: 89, 195: 36, 456: 90, 518: 103, 203: 37, 206: 38, 211: 39, 213: 40, 473: 93, 219: 41, 478: 94, 223: 42, 107: 20, 481: 95, 419: 82, 228: 43, 485: 96, 234: 44, 491: 97, 494: 98, 239: 45, 552: 111, 498: 99, 83: 16, 244: 46, 528: 107, 248: 47, 505: 100, 508: 101, 253: 48}
{2: 0, 261: 48, 518: 102, 519: 103, 8: 1, 10: 2, 525: 105, 271: 50, 16: 3, 88: 16, 276: 51, 23: 4, 537: 108, 284: 52, 541: 109, 410: 79, 31: 5, 560: 112, 292: 53, 38: 6, 39: 7, 552: 110, 553: 111, 300: 54, 45: 8, 304: 55, 520: 104, 50: 9, 51: 10, 308: 56, 310: 57, 527: 106, 58: 11, 316: 58, 266: 49, 69: 12, 328: 60, 332: 61, 78: 14, 82: 15, 569: 113, 344: 63, 345: 64, 347: 65, 348: 66, 96: 17, 354: 67, 358: 68, 103: 18, 572: 114, 106: 19, 366: 70, 111: 20, 374: 71, 119: 21, 380: 72, 362: 69, 127: 22, 385: 73, 130: 23, 389: 74, 137: 24, 535: 107, 397: 75, 142: 25, 399: 76, 146: 26, 148: 27, 405: 77, 408: 78, 154: 28, 157: 29, 414: 80, 325: 59, 418: 81, 164: 30, 421: 82, 426: 83, 174: 31, 72: 13, 434: 85, 180: 32, 183: 33, 440: 86, 445: 87, 191: 34, 449: 88, 194: 35, 455: 89, 203: 36, 205: 37, 461: 90, 433: 84, 466: 91, 211: 38, 212: 39, 472: 92, 218: 40, 493: 97, 477: 93, 222: 41, 480: 94, 227: 42, 484: 95, 233: 43, 490: 96, 338: 62, 238: 44, 497: 98, 243: 45, 247: 46, 504: 99, 507: 100, 252: 47, 511: 101}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Jim Ballantyne']
response in server.py code:
 [(52, 6, 'London'), (184, 7, 'Chicago'), (24, 7, 'Chicago'), (70, 2, 'United_Kingdom'), (0, 2, 'United_Kingdom'), (538, 14, 'Jim_Ballantyne')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Kennedy']
response in server.py code:
 [(0, 7, 'John_F._Kennedy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 20, 'Cass_County,_Missouri')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(71, 25, 'Edison_Electric_Institute')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(29, 3, 'Agence_France-Presse'), (333, 16, 'Florida'), (456, 6, 'Brunei'), (2, 19, 'Bandar_Seri_Begawan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['pink']
response in server.py code:
 [(5, 8, 'Sapphire'), (14, 7, 'Pendant')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ray Kurzweil']
response in server.py code:
 [(28, 13, 'New_York_City'), (122, 7, 'Austria'), (53, 6, 'Queens'), (188, 22, 'Unitarian_Universalism'), (91, 7, 'Parent'), (0, 12, 'Ray_Kurzweil')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['WEAH', 'Jorge Costa', 'Vitor Baia', 'Rui Correia', 'Paulinho Santos', 'Sergio Conceicao', 'Oceano Cruz', 'Fernando Couto', 'Helder Cristovao', 'Dimas Teixeira', 'Carlos Secretario', 'Rui Barros', 'Jose Barroso', 'Luis Figo', 'Paulo Bento', 'Jose Taira', 'Antonio Folha', 'Joao Vieira Pinto', 'Paulo Alves', 'Rui Costa', 'Jorge Cadete']
response in server.py code:
 [(1007, 10, 'Rui_Barros'), (1220, 9, 'Rui_Costa'), (52, 6, 'Lisbon'), (846, 14, 'Fernando_Couto'), (1072, 11, 'Paulo_Bento'), (679, 10, 'Vítor_Baía'), (1049, 9, 'Luís_Figo'), (9, 4, 'George_Weah'), (367, 8, 'A.C._Milan'), (822, 11, 'Oceano_da_Cruz'), (971, 11, 'Real_Madrid_C.F.'), (1209, 8, 'Sporting_Clube_de_Portugal'), (1093, 5, 'Spain'), (1124, 5, 'Spain'), (1144, 13, 'António_Folha'), (835, 8, 'Sporting_Clube_de_Portugal'), (984, 5, 'Spain'), (910, 5, 'Spain'), (702, 5, 'Spain'), (744, 15, 'Paulinho_Santos'), (1231, 10, 'ACF_Fiorentina'), (874, 16, 'Hélder_Cristóvão'), (320, 5, 'Jorge_Costa'), (1186, 7, 'S.L._Benfica'), (1251, 12, 'Jorge_Cadete'), (1265, 14, 'Celtic_F.C.'), (1101, 10, 'José_Taira'), (918, 14, 'Dimas_Teixeira'), (934, 8, 'Juventus_F.C.'), (769, 16, 'Sérgio_Conceição'), (952, 17, 'Carlos_Secretário'), (944, 5, 'Italy'), (617, 10, 'Portugal'), (1167, 17, 'João_Vieira_Pinto'), (1196, 11, 'Paulo_Alves'), (787, 5, 'F.C._Porto'), (216, 11, 'Jorge_Costa'), (710, 11, 'Rui_Correia'), (1019, 5, 'F.C._Porto'), (1041, 5, 'F.C._Porto'), (633, 7, 'Germany'), (1159, 5, 'F.C._Porto'), (814, 5, 'F.C._Porto'), (761, 5, 'F.C._Porto'), (1027, 12, 'José_Manuel_Barroso'), (1060, 9, 'FC_Barcelona'), (723, 5, 'S.C._Braga'), (862, 9, 'FC_Barcelona'), (70, 8, 'Portugal'), (89, 5, 'F.C._Porto'), (1243, 5, 'Italy'), (691, 9, 'FC_Barcelona'), (1085, 6, 'Oviedo'), (291, 8, 'Liberia'), (405, 27, 'Euroleague_Basketball'), (161, 9, 'FIFA_World_Cup'), (33, 8, 'Portugal'), (576, 7, 'Germany'), (454, 8, 'Portugal_national_football_team'), (468, 8, 'Europe'), (148, 7, 'Germany'), (1113, 9, 'Salamanca'), (1281, 8, 'Scotland'), (548, 7, 'Ukraine_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Benjamin Netanyahu', 'David Bar-Illan', 'Osama bin Laden']
response in server.py code:
 [(283, 18, 'Benjamin_Netanyahu'), (205, 4, 'United_States'), (65, 6, 'Israel'), (767, 5, 'Saudi_Arabia'), (745, 15, 'Osama_bin_Laden'), (1121, 25, 'University_of_Connecticut'), (711, 11, 'Afghanistan'), (698, 5, 'Sudan'), (323, 15, 'David_Bar-Illan'), (407, 9, 'Terrorism'), (860, 11, 'East_Africa'), (680, 11, 'Airstrike'), (844, 9, 'Diplomatic_mission'), (921, 8, 'Activism'), (1397, 13, 'Tour_operator'), (162, 17, 'Islamic_terrorism'), (452, 19, 'Preemptive_war'), (1229, 15, 'Security_guard'), (1052, 9, 'Strategy'), (21, 8, 'Security'), (911, 6, 'Islam'), (111, 21, 'International_airport'), (1285, 14, 'Presidency_of_George_W._Bush')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Wiesel', 'Wiesel']
response in server.py code:
 [(9, 7, 'Romania'), (44, 7, 'Hungary'), (182, 6, 'Sighetu_Marmației'), (34, 6, 'Sighetu_Marmației'), (171, 7, 'Ghetto'), (96, 6, 'Elie_Wiesel'), (190, 6, 'Elie_Wiesel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(28, 14, 'Public_housing')]
given spans fix. original text:  Datron Corp said it agreed to merge with GGFH Inc, a Florida-based company formed by the four top officers of the company. According to terms of the proposed transaction, each share of Datron common stock, excluding those shares owned by the four officers, will be bought for six dlrs a share, it said. Datrons officers hold about 73 pct of the total 896,000 Datron common shares outstanding. Upon completion of the proposed transaction, the officers of Datron would own 100 pct of the company. The merger is subject to GGHFs receiving financing for the plan, Datron said. Shareholders of Datron will be asked to approve the plan at their annual meeting to be held in June or July, and the merger is expected to be completed by July 31, it said.
original word:  Florida-based Florida-based
new split:  Florida  and  -based
[(0, 6), (7, 11), (12, 16), (17, 19), (20, 26), (27, 29), (30, 35), (36, 40), (41, 45), (46, 49), (49, 50), (51, 52), (53, 60), (60, 66)]
{0: 0, 36: 7, 49: 10, 7: 1, 41: 8, 12: 2, 46: 9, 17: 3, 51: 11, 20: 4, 53: 12, 27: 5, 60: 13, 30: 6}
{66: 13, 35: 6, 6: 0, 40: 7, 11: 1, 45: 8, 16: 2, 49: 9, 50: 10, 19: 3, 52: 11, 26: 4, 60: 12, 29: 5}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(53, 7, 'Florida')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Saddam', 'Hussein']
response in server.py code:
 [(51, 6, 'London'), (269, 7, 'United_Kingdom'), (160, 6, 'London'), (1128, 6, 'London'), (17, 8, 'Sudan'), (95, 8, 'Sudan'), (527, 6, 'Saddam_Hussein'), (0, 5, 'Iraq'), (913, 4, 'Iraq'), (1018, 8, 'Khartoum'), (75, 6, 'Iraq'), (457, 6, 'Iraq'), (1095, 6, 'Cyprus'), (549, 17, 'Interior_ministry'), (360, 8, 'London_Stansted_Airport'), (701, 7, 'England'), (535, 7, 'Saddam_Hussein')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Steve']
response in server.py code:
 [(78, 8, 'Stanford_University'), (19, 5, 'Steve_Jobs'), (44, 5, 'Apple_Inc.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(343, 59, 'London_International_Financial_Futures_and_Options_Exchange'), (25, 6, 'London'), (2197, 9, 'Eurobond'), (229, 4, 'United_States'), (786, 5, 'London_International_Financial_Futures_and_Options_Exchange'), (2292, 4, 'United_States'), (1577, 22, 'Chicago_Board_of_Trade'), (2332, 4, 'United_States'), (1251, 5, 'London_International_Financial_Futures_and_Options_Exchange'), (2175, 20, 'Tokyo_Stock_Exchange'), (2427, 8, 'Japan'), (950, 4, 'United_States'), (404, 5, 'London_International_Financial_Futures_and_Options_Exchange'), (2003, 5, 'Tokyo'), (2098, 5, 'London_International_Financial_Futures_and_Options_Exchange'), (1164, 10, 'United_States_Treasury_security'), (1350, 13, 'United_States_Department_of_the_Treasury'), (101, 8, 'Europe'), (1324, 13, 'United_States'), (1719, 5, 'Japan'), (2523, 8, 'Europe'), (1864, 3, 'Bank_of_Japan'), (573, 15, 'United_States_Treasury_security'), (477, 7, 'United_Kingdom'), (1079, 5, 'Italy'), (1012, 5, 'Paris'), (2473, 9, 'Norway'), (861, 6, 'France'), (1549, 8, 'United_States_Department_of_the_Treasury'), (2605, 21, 'Kansai_Electric_Power_Company'), (130, 7, 'Germany'), (2631, 28, 'Kansai_International_Airport'), (1515, 10, 'Labour_Day'), (2297, 10, 'Labour_Day'), (2545, 4, 'Ibadan_Airport'), (2447, 4, 'Ibadan_Airport'), (2354, 12, 'The_Treasury_(New_South_Wales)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(97, 7, 'Alabama')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(15, 9, 'Wholesale'), (35, 7, 'Arizona'), (25, 6, 'Retail')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Marvin Lee Minsky', 'Henry']
response in server.py code:
 [(135, 13, 'New_York_City'), (172, 32, 'Ethical_Culture_Fieldston_School'), (103, 8, 'Activism'), (213, 28, 'The_Bronx_High_School_of_Science'), (45, 6, 'Father'), (33, 11, 'Ophthalmology'), (84, 6, 'Fannie_Mae'), (0, 17, 'Marvin_Minsky'), (76, 6, 'Mother')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Davor Suker', 'Ronaldo', 'Pedrag Mijatovic', 'Luis Figo', 'Raul Gonzalez', 'Juan Pizzi', 'Fernando Redondo', 'Giovanni', 'Victor Sanchez', 'Guillermo Amor', 'Jose Amavisca', 'Roger Garcia', 'Manolo Sanchis', 'Gheorghe Popescu', 'Roberto Carlos', 'Fernando Hierro', 'Luis Milla', 'Fernando Sanz', 'Carlos Secretario', 'Sergi Barjuan', 'Rafael Alkorta', 'Albert Ferrer', 'Miguel Nadal', 'Laurent Blanc']
response in server.py code:
 [(52, 6, 'Madrid'), (867, 16, 'Fernando_Redondo'), (1201, 13, 'Sergi_Barjuán'), (851, 10, 'Juan_Antonio_Pizzi'), (819, 9, 'Luís_Figo'), (1021, 14, 'Roberto_Carlos_(footballer)'), (1296, 13, 'Laurent_Blanc'), (142, 11, 'Real_Madrid_C.F.'), (922, 14, 'Guillermo_Amor'), (183, 11, 'Real_Madrid_C.F.'), (238, 11, 'Real_Madrid_C.F.'), (105, 7, 'Spain'), (1061, 15, 'Fernando_Hierro'), (1102, 10, 'Luis_Milla'), (770, 11, 'Davor_Šuker'), (744, 11, 'Real_Madrid_C.F.'), (27, 11, 'Real_Madrid_C.F.'), (1118, 12, 'Luis_Enrique_Martínez_García'), (833, 13, 'Raúl_(footballer)'), (1240, 13, 'Albert_Ferrer'), (961, 12, 'Roger_García_Junyent'), (599, 11, 'Real_Madrid_C.F.'), (942, 13, 'José_Emilio_Amavisca'), (546, 11, 'Real_Madrid_C.F.'), (568, 11, 'Real_Madrid_C.F.'), (517, 11, 'Real_Madrid_C.F.'), (786, 7, 'Ronaldo'), (529, 11, 'Real_Madrid_C.F.'), (660, 11, 'Real_Madrid_C.F.'), (999, 16, 'Gheorghe_Popescu'), (902, 14, 'Víctor_Sánchez'), (979, 14, 'Manuel_Sanchís_Hontiyuelo'), (1278, 12, 'Miguel_Ángel_Nadal'), (1220, 14, 'Rafael_Alkorta'), (798, 16, 'Predrag_Mijatović'), (1178, 17, 'Carlos_Secretário'), (41, 9, 'Barcelona'), (257, 9, 'FC_Barcelona'), (888, 8, 'Giovanni_Silva_de_Oliveira'), (201, 9, 'FC_Barcelona'), (158, 9, 'FC_Barcelona'), (635, 9, 'FC_Barcelona'), (756, 9, 'FC_Barcelona'), (580, 9, 'FC_Barcelona'), (1136, 13, 'Fernando_Sanz'), (706, 9, 'Barcelona'), (696, 9, 'Barcelona'), (70, 12, 'William_Hill_(bookmaker)'), (677, 9, 'FC_Barcelona'), (650, 9, 'Barcelona')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(58, 15, 'United_Airlines'), (227, 28, "O'Hare_International_Airport"), (867, 13, 'Baggage_claim'), (89, 8, 'Airport_terminal'), (831, 9, 'Concourse'), (170, 8, 'Security')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Renato Dulbecco']
response in server.py code:
 [(11, 5, 'Japan'), (138, 9, 'San_Diego'), (239, 5, 'Basel'), (53, 16, 'Kyoto_University'), (120, 14, 'Salk_Institute_for_Biological_Studies'), (169, 15, 'Renato_Dulbecco'), (205, 30, 'Basel_Institute_for_Immunology')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['gordon bennett']
response in server.py code:
 [(0, 14, 'Gordon_Bennett_(artist)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(4, 14, 'Banque_de_France'), (311, 4, 'Bank')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(3, 12, 'Thanksgiving')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Homme', 'Grohl']
response in server.py code:
 [(27, 5, 'Dave_Grohl'), (20, 5, 'Josh_Homme')]
given spans fix. original text:  condos in florida
original word:  condos condos
new split:  condo  and  s
[(0, 5), (5, 6)]
{0: 0, 5: 1}
{5: 0, 6: 1}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(10, 7, 'Florida'), (0, 5, 'Condominium')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Frank Bruno', 'Mike Tyson', 'Oliver McCall']
response in server.py code:
 [(39, 6, 'London'), (91, 11, 'Frank_Bruno'), (1098, 13, 'Oliver_McCall'), (1332, 5, 'Frank_Bruno'), (1009, 5, 'Frank_Bruno'), (559, 5, 'Frank_Bruno'), (140, 7, 'United_Kingdom'), (1303, 8, 'United_States'), (223, 5, 'Frank_Bruno'), (583, 7, 'United_Kingdom'), (1246, 5, 'Frank_Bruno'), (1089, 8, 'United_States'), (1312, 5, 'Mike_Tyson'), (806, 5, 'Frank_Bruno'), (365, 10, 'Mike_Tyson'), (308, 6, 'United_Kingdom'), (1321, 9, 'Las_Vegas'), (329, 20, 'World_Boxing_Council'), (1195, 6, 'United_Kingdom'), (1432, 6, 'United_Kingdom'), (351, 3, 'World_Boxing_Council'), (1146, 7, 'Wembley')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Daniel Yergin']
response in server.py code:
 [(48, 40, 'Cambridge_Energy_Research_Associates'), (20, 13, 'Daniel_Yergin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Roger McNamee', 'John Schreiber']
response in server.py code:
 [(508, 11, 'Time_Warner'), (887, 6, 'Boston'), (2465, 13, 'Merrill_Lynch'), (1921, 18, 'Capital_Cities_Communications'), (2665, 3, 'NBC'), (2036, 4, 'Time_(magazine)'), (1592, 20, 'Sanford_Bernstein'), (2682, 10, 'Washington,_D.C.'), (3974, 7, 'Comcast'), (1883, 6, 'The_Walt_Disney_Company'), (2128, 13, 'Roger_McNamee'), (2045, 6, 'Warner_Music_Group'), (2698, 14, 'John_Schreiber')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 18, 'Peterborough_Petes'), (19, 12, 'Minor_ice_hockey')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Berners-Lee']
response in server.py code:
 [(0, 11, 'Tim_Berners-Lee'), (187, 17, 'Research'), (136, 7, 'Entrepreneurship'), (151, 25, 'World_Wide_Web_Foundation'), (19, 8, 'Film_director'), (35, 25, 'World_Wide_Web_Consortium'), (245, 59, 'MIT_Computer_Science_and_Artificial_Intelligence_Laboratory')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(58, 6, 'Madrid'), (356, 7, 'Spain'), (76, 7, 'Spain'), (249, 8, 'El_Mundo_(Spain)'), (236, 6, 'Madrid'), (133, 25, 'Santiago_Bernabéu_Stadium')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Gennady Konyakhin']
response in server.py code:
 [(506, 6, 'Russia'), (44, 7, 'Russia'), (1235, 12, 'Embezzlement'), (394, 7, 'Siberia'), (241, 7, 'Gazprom_Neft'), (948, 15, 'Contract_killing'), (364, 8, 'Kemerovo'), (783, 11, 'Coal_mining'), (1324, 3, 'American_Mafia'), (721, 12, 'Petroleum'), (596, 16, 'Boris_Berezovsky'), (1266, 17, 'Gennady_Konyakhin'), (741, 4, 'Coal'), (587, 5, 'Business_magnate'), (1355, 5, 'Trial'), (1123, 17, 'Leninsk-Kuznetsky_(city)'), (1218, 9, 'Tax_noncompliance'), (992, 8, 'Organized_crime'), (159, 15, 'Organized_crime'), (1193, 5, 'Mayor')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(59, 28, 'Royal_Aircraft_Establishment'), (91, 11, 'Farnborough,_Hampshire')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(177, 17, 'Industrial_Valley')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(73, 9, 'Nashville,_Tennessee'), (123, 2, 'Kentucky')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Paris')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 26, 'Culpeper_National_Cemetery')]
given spans fix. original text:  Soccer - McCarthy names team to play Liechtenstein. DUBLIN 1996-08-30 Irish soccer manager Mick McCarthy on Friday announced the team to play Liechtenstein in Saturday's World Cup qualifying match. Birmingham's Gary Breen was selected ahead of Phil Babb in defence, while 18-year-old Ian Harte makes his international competitive debut. Keith O'Neill of Norwich City joins Niall Quinn up front. The team is as follows : Given, Breen, Staunton, Irwin, McAteer, Harte, McLoughlin, Houghton, Townsend, Quinn, O'Neill.-- Dublin Newsroom+353 1 676 9779
original word:  O'Neill. O'Neill.
new split:  O'Neill  and  .
[(0, 6), (7, 8), (9, 17), (18, 23), (24, 28), (29, 31), (32, 36), (37, 50), (50, 51), (52, 58), (59, 69), (70, 75), (76, 82), (83, 90), (91, 95), (96, 104), (105, 107), (108, 114), (115, 124), (125, 128), (129, 133), (134, 136), (137, 141), (142, 155), (156, 158), (159, 167), (167, 169), (170, 175), (176, 179), (180, 190), (191, 196), (196, 197), (198, 208), (208, 210), (211, 215), (216, 221), (222, 225), (226, 234), (235, 240), (241, 243), (244, 248), (249, 253), (254, 256), (257, 264), (264, 265), (266, 271), (272, 283), (284, 287), (288, 293), (294, 299), (300, 303), (304, 317), (318, 329), (330, 335), (335, 336), (337, 342), (343, 350), (351, 353), (354, 361), (362, 366), (367, 372), (373, 378), (379, 384), (385, 387), (388, 393), (393, 394), (395, 398), (399, 403), (404, 406), (407, 409), (410, 417), (418, 419), (420, 425), (425, 426), (427, 432), (432, 433), (434, 442), (442, 443), (444, 449), (449, 450), (451, 458), (458, 459), (460, 465), (465, 466), (467, 477), (477, 478), (479, 487), (487, 488), (489, 497), (497, 498), (499, 504), (504, 505), (506, 513), (513, 514)]
{0: 0, 257: 43, 513: 93, 7: 1, 264: 44, 9: 2, 266: 45, 272: 46, 18: 3, 24: 4, 284: 47, 29: 5, 32: 6, 176: 28, 37: 7, 294: 49, 300: 50, 304: 51, 50: 8, 52: 9, 393: 65, 59: 10, 318: 52, 70: 11, 330: 53, 241: 39, 76: 12, 335: 54, 337: 55, 83: 13, 343: 56, 91: 14, 351: 57, 96: 15, 354: 58, 105: 16, 362: 59, 108: 17, 367: 60, 115: 18, 373: 61, 379: 62, 125: 19, 129: 20, 388: 64, 134: 21, 449: 79, 137: 22, 395: 66, 142: 23, 399: 67, 404: 68, 407: 69, 410: 70, 156: 24, 159: 25, 497: 89, 418: 71, 420: 72, 167: 26, 425: 73, 170: 27, 427: 74, 432: 75, 434: 76, 499: 90, 180: 29, 442: 77, 444: 78, 191: 30, 288: 48, 451: 80, 196: 31, 198: 32, 458: 81, 460: 82, 208: 33, 465: 83, 467: 84, 216: 35, 477: 85, 222: 36, 479: 86, 226: 37, 487: 87, 489: 88, 235: 38, 385: 63, 211: 34, 244: 40, 504: 91, 249: 41, 506: 92, 254: 42}
{256: 42, 384: 62, 514: 93, 6: 0, 513: 92, 8: 1, 265: 44, 271: 45, 17: 2, 23: 3, 283: 46, 28: 4, 31: 5, 36: 6, 293: 48, 299: 49, 303: 50, 504: 90, 264: 43, 50: 7, 51: 8, 58: 9, 317: 51, 69: 10, 329: 52, 75: 11, 335: 53, 336: 54, 82: 12, 342: 55, 90: 13, 350: 56, 95: 14, 353: 57, 443: 77, 104: 15, 361: 58, 107: 16, 366: 59, 114: 17, 372: 60, 378: 61, 124: 18, 128: 19, 387: 63, 133: 20, 136: 21, 393: 64, 394: 65, 141: 22, 398: 66, 403: 67, 406: 68, 409: 69, 155: 23, 158: 24, 417: 70, 419: 71, 167: 25, 169: 26, 426: 73, 498: 89, 175: 27, 432: 74, 433: 75, 179: 28, 442: 76, 287: 47, 190: 29, 449: 78, 450: 79, 196: 30, 197: 31, 458: 80, 459: 81, 208: 32, 465: 82, 210: 33, 215: 34, 477: 84, 478: 85, 225: 36, 487: 86, 488: 87, 234: 37, 466: 83, 240: 38, 497: 88, 221: 35, 243: 39, 425: 72, 248: 40, 505: 91, 253: 41}
given spans fix. original text:  Soccer - McCarthy names team to play Liechtenstein. DUBLIN 1996-08-30 Irish soccer manager Mick McCarthy on Friday announced the team to play Liechtenstein in Saturday's World Cup qualifying match. Birmingham's Gary Breen was selected ahead of Phil Babb in defence, while 18-year-old Ian Harte makes his international competitive debut. Keith O'Neill of Norwich City joins Niall Quinn up front. The team is as follows : Given, Breen, Staunton, Irwin, McAteer, Harte, McLoughlin, Houghton, Townsend, Quinn, O'Neill.-- Dublin Newsroom+353 1 676 9779
original word:  Newsroom+353 Newsroom+353
new split:  Newsroom  and  +353
[(0, 6), (7, 8), (9, 17), (18, 23), (24, 28), (29, 31), (32, 36), (37, 50), (50, 51), (52, 58), (59, 69), (70, 75), (76, 82), (83, 90), (91, 95), (96, 104), (105, 107), (108, 114), (115, 124), (125, 128), (129, 133), (134, 136), (137, 141), (142, 155), (156, 158), (159, 167), (167, 169), (170, 175), (176, 179), (180, 190), (191, 196), (196, 197), (198, 208), (208, 210), (211, 215), (216, 221), (222, 225), (226, 234), (235, 240), (241, 243), (244, 248), (249, 253), (254, 256), (257, 264), (264, 265), (266, 271), (272, 283), (284, 287), (288, 293), (294, 299), (300, 303), (304, 317), (318, 329), (330, 335), (335, 336), (337, 342), (343, 350), (351, 353), (354, 361), (362, 366), (367, 372), (373, 378), (379, 384), (385, 387), (388, 393), (393, 394), (395, 398), (399, 403), (404, 406), (407, 409), (410, 417), (418, 419), (420, 425), (425, 426), (427, 432), (432, 433), (434, 442), (442, 443), (444, 449), (449, 450), (451, 458), (458, 459), (460, 465), (465, 466), (467, 477), (477, 478), (479, 487), (487, 488), (489, 497), (497, 498), (499, 504), (504, 505), (506, 513), (513, 514), (514, 516), (517, 523), (524, 532), (532, 536)]
{0: 0, 257: 43, 514: 94, 513: 93, 7: 1, 264: 44, 9: 2, 266: 45, 524: 96, 272: 46, 18: 3, 532: 97, 24: 4, 284: 47, 29: 5, 517: 95, 32: 6, 176: 28, 37: 7, 294: 49, 300: 50, 304: 51, 50: 8, 52: 9, 393: 65, 59: 10, 318: 52, 70: 11, 330: 53, 241: 39, 76: 12, 335: 54, 337: 55, 83: 13, 343: 56, 91: 14, 351: 57, 96: 15, 354: 58, 105: 16, 362: 59, 108: 17, 367: 60, 115: 18, 373: 61, 379: 62, 125: 19, 129: 20, 388: 64, 134: 21, 449: 79, 137: 22, 395: 66, 142: 23, 399: 67, 404: 68, 407: 69, 410: 70, 156: 24, 159: 25, 497: 89, 418: 71, 420: 72, 167: 26, 425: 73, 170: 27, 427: 74, 432: 75, 434: 76, 499: 90, 180: 29, 442: 77, 444: 78, 191: 30, 288: 48, 451: 80, 196: 31, 198: 32, 458: 81, 460: 82, 208: 33, 465: 83, 467: 84, 216: 35, 477: 85, 222: 36, 479: 86, 226: 37, 487: 87, 489: 88, 235: 38, 385: 63, 211: 34, 244: 40, 504: 91, 249: 41, 506: 92, 254: 42}
{256: 42, 384: 62, 514: 93, 516: 94, 6: 0, 513: 92, 8: 1, 265: 44, 523: 95, 271: 45, 17: 2, 532: 96, 23: 3, 536: 97, 283: 46, 28: 4, 31: 5, 36: 6, 293: 48, 299: 49, 303: 50, 504: 90, 264: 43, 50: 7, 51: 8, 58: 9, 317: 51, 69: 10, 329: 52, 75: 11, 335: 53, 336: 54, 82: 12, 342: 55, 90: 13, 350: 56, 95: 14, 353: 57, 443: 77, 104: 15, 361: 58, 107: 16, 366: 59, 114: 17, 372: 60, 378: 61, 124: 18, 128: 19, 387: 63, 133: 20, 136: 21, 393: 64, 394: 65, 141: 22, 398: 66, 403: 67, 406: 68, 409: 69, 155: 23, 158: 24, 417: 70, 419: 71, 167: 25, 169: 26, 426: 73, 498: 89, 175: 27, 432: 74, 433: 75, 179: 28, 442: 76, 287: 47, 190: 29, 449: 78, 450: 79, 196: 30, 197: 31, 458: 80, 459: 81, 208: 32, 465: 82, 210: 33, 215: 34, 477: 84, 478: 85, 225: 36, 487: 86, 488: 87, 234: 37, 466: 83, 240: 38, 497: 88, 221: 35, 243: 39, 425: 72, 248: 40, 505: 91, 253: 41}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['McCarthy', 'Mick McCarthy', 'Gary Breen', 'Phil Babb', 'Ian Harte', 'Niall Quinn', 'Given', 'Irwin', 'McAteer']
response in server.py code:
 [(211, 10, 'Gary_Breen'), (499, 5, 'Niall_Quinn'), (244, 9, 'Phil_Babb'), (427, 5, 'Gary_Breen'), (373, 11, 'Niall_Quinn'), (91, 13, 'Mick_McCarthy'), (52, 6, 'Dublin'), (451, 7, 'Jason_McAteer'), (420, 5, 'Shay_Given'), (284, 9, 'Ian_Harte'), (142, 13, 'Liechtenstein_national_football_team'), (460, 5, 'Ian_Harte'), (354, 12, 'Norwich_City_F.C.'), (337, 13, "Keith_O'Neill_(footballer)"), (170, 9, 'FIFA_World_Cup'), (9, 8, 'Mick_McCarthy'), (70, 5, 'Republic_of_Ireland'), (198, 10, 'Birmingham_City_F.C.'), (37, 13, 'Liechtenstein_national_football_team'), (444, 5, 'Denis_Irwin'), (434, 8, 'Steve_Staunton'), (489, 8, 'Andy_Townsend'), (506, 7, "Martin_O'Neill"), (479, 8, 'Ray_Houghton'), (467, 10, 'Alan_McLoughlin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Johanna Larsson']
response in server.py code:
 [(97, 15, 'Johanna_Larsson_(tennis)'), (118, 9, 'Australia')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(164, 4, 'American_Association_for_the_Advancement_of_Science'), (76, 24, 'British_Computer_Society'), (106, 49, 'Institute_of_Electrical_and_Electronics_Engineers'), (22, 48, 'Association_for_the_Advancement_of_Artificial_Intelligence'), (8, 6, 'Fellow')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(43, 6, 'Madrid'), (462, 16, 'Racing_de_Santander'), (557, 10, 'Celta_de_Vigo'), (210, 11, 'Real_Madrid_C.F.'), (333, 15, 'Atlético_Madrid'), (497, 14, 'Rayo_Vallecano'), (613, 8, 'RCD_Espanyol'), (367, 15, 'Athletic_Bilbao'), (78, 7, 'Spain'), (665, 8, 'Sporting_Clube_de_Portugal'), (304, 10, 'Real_Betis'), (752, 7, 'Sevilla_FC'), (530, 8, 'Valencia_CF'), (401, 13, 'Real_Sociedad'), (9, 7, 'Spain'), (241, 9, 'FC_Barcelona'), (586, 8, 'CD_Tenerife'), (433, 10, 'Real_Valladolid'), (640, 6, 'Real_Oviedo'), (778, 10, 'SD_Compostela'), (834, 11, 'CF_Extremadura'), (725, 8, 'Real_Zaragoza')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Brian Lara', 'Carl Hooper', 'Jimmy Adams', 'Ali Bacher', 'Clive Lloyd', 'Joel Garner', 'David Richardson']
response in server.py code:
 [(545, 11, 'Jimmy_Adams'), (903, 11, 'Joel_Garner'), (292, 10, 'Brian_Lara'), (321, 11, 'Carl_Hooper'), (872, 11, 'Clive_Lloyd'), (711, 10, 'Ali_Bacher'), (1172, 12, 'Johannesburg'), (151, 12, 'South_Africa'), (1144, 16, 'Sports_marketing'), (167, 7, 'Cricket'), (734, 21, 'South_Africa_national_cricket_team'), (281, 7, 'Batting_(cricket)'), (678, 25, 'West_Indies_Cricket_Board'), (1096, 12, 'Wicket-keeper'), (1044, 11, 'Sponsor_(commercial)'), (91, 11, 'West_Indies_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Toni Morrison']
response in server.py code:
 [(30, 17, 'Howard_University'), (133, 18, 'Cornell_University'), (8, 13, 'Toni_Morrison')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(1748, 6, 'Brazil'), (1531, 6, 'Brazil'), (211, 6, 'Brazil'), (2185, 6, 'Brazil')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(24, 16, 'Three_Days_Grace')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(107, 7, 'Chicago'), (4, 22, 'Isle_of_Wight_Festival'), (75, 9, 'Woodstock')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 2, 'Hu_Jintao')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(96, 7, 'Nigeria'), (0, 8, 'Nigeria'), (50, 5, 'Lagos'), (497, 3, 'Uyo'), (282, 22, 'News_Agency_of_Nigeria')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(140, 6, 'Boston'), (81, 7, 'Harvard_University'), (157, 10, 'Ivy_League'), (124, 8, 'College'), (173, 19, 'Stanford_University'), (89, 8, 'Student'), (21, 8, 'Founding_Fathers_of_the_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['ARMANDO', 'Javier Clemente', 'Armando', 'Jose Luis Caminero']
response in server.py code:
 [(58, 6, 'Madrid'), (327, 15, 'Atlético_Madrid'), (88, 15, 'Javier_Clemente'), (353, 18, 'José_Luis_Caminero'), (76, 5, 'Spain'), (9, 5, 'Spain_national_football_team'), (188, 9, 'FIFA_World_Cup'), (41, 9, 'FIFA_World_Cup'), (216, 10, 'Yugoslavia_national_football_team'), (298, 7, 'Armando_Riveiro')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Moritz Leuenberger']
response in server.py code:
 [(159, 13, 'Nuclear_power'), (526, 13, 'Radioactive_waste'), (1102, 11, 'Electricity'), (907, 18, 'Moritz_Leuenberger'), (4, 5, 'Switzerland'), (212, 20, 'Hydroelectricity'), (605, 14, 'Power_station'), (244, 25, 'Environmentalist'), (1205, 14, 'Infrastructure'), (1256, 14, 'Liberalization'), (1454, 10, 'Tax_break'), (784, 7, 'Cabinet_(government)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Levi-Montalcini', 'her']
response in server.py code:
 [(25, 9, 'Assistant_referee_(association_football)'), (21, 3, 'Elizabeth_II'), (0, 15, 'Rita_Levi-Montalcini')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Taha Yassin Ramadan']
response in server.py code:
 [(872, 14, 'Iran–Iraq_War'), (61, 4, 'Iraq'), (909, 4, 'United_Nations'), (1479, 38, 'Organisation_of_Islamic_Cooperation'), (712, 6, 'Tehran'), (1441, 13, 'Gulf_War'), (172, 7, 'Iran'), (1359, 19, 'Taha_Yassin_Ramadan'), (1158, 7, 'Baghdad'), (45, 10, 'Trade_fair'), (976, 16, 'Prisoner_of_war'), (559, 10, 'Commerce'), (381, 19, 'Kermanshah_Province'), (284, 10, 'Delegation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(114, 5, 'Spain'), (147, 3, 'Creative_Commons')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mannie Fresh', 'Jermaine Dupri']
response in server.py code:
 [(35, 14, 'Jermaine_Dupri'), (18, 12, 'Mannie_Fresh'), (0, 9, 'Metro_Chicago')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Steve']
response in server.py code:
 [(47, 9, 'Microsoft'), (30, 8, 'Stanford_University'), (9, 5, 'Steve_Jobs'), (81, 7, 'Microsoft_Windows')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(539, 12, 'Johannesburg'), (43, 12, 'Johannesburg'), (192, 31, 'Gold_Fields')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(394, 7, 'United_States'), (19, 8, 'Voice_of_America'), (888, 5, 'Texas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(81, 21, 'University_of_Glasgow'), (29, 16, 'Regius_Professor')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['WEAH', 'Joao Havelange', 'George Weah', 'Jorge Costa']
response in server.py code:
 [(1008, 4, 'George_Weah'), (794, 4, 'George_Weah'), (142, 11, 'George_Weah'), (1263, 4, 'George_Weah'), (39, 4, 'George_Weah'), (435, 8, 'Liberia'), (518, 9, 'João_Havelange'), (338, 4, 'George_Weah'), (1257, 4, 'George_Weah'), (75, 14, 'João_Havelange'), (133, 8, 'A.C._Milan'), (416, 4, 'FIFA'), (45, 4, 'Rome'), (274, 7, 'Italy'), (694, 6, 'Lisbon'), (61, 4, 'FIFA'), (292, 20, 'La_Gazzetta_dello_Sport'), (1341, 6, 'Norway'), (1039, 5, 'Jorge_Costa'), (9, 4, 'FIFA'), (836, 8, 'Europe'), (830, 4, 'UEFA'), (1150, 5, 'Jorge_Costa'), (724, 5, 'Jorge_Costa'), (236, 11, 'Jorge_Costa'), (1114, 5, 'Jorge_Costa'), (1328, 9, 'Rosenborg_BK'), (1301, 5, 'A.C._Milan'), (389, 5, 'Jorge_Costa'), (222, 5, 'F.C._Porto'), (958, 27, 'Euroleague_Basketball'), (1381, 8, 'Italy')]
given spans fix. original text:  saturns size\
original word:  size\ size\
new split:  size  and  \
[(0, 7), (8, 12), (12, 13)]
{0: 0, 8: 1, 12: 2}
{12: 1, 13: 2, 7: 0}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Saturn_Corporation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Elizabeth Blackburn', 'her']
response in server.py code:
 [(285, 2, 'United_States'), (40, 3, 'Elizabeth_II'), (16, 19, 'Elizabeth_Blackburn')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Shoko Asahara']
response in server.py code:
 [(292, 13, 'Shoko_Asahara'), (1049, 11, 'Prosecutor'), (110, 9, 'Nerve_agent'), (133, 5, 'Tokyo'), (328, 14, 'Aum_Shinrikyo'), (781, 20, 'Tokyo_District_Court'), (514, 7, 'Gas_chamber'), (72, 4, 'Cult'), (590, 7, 'Defense_(legal)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(18, 22, 'Digital_Equipment_Corporation')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Jackie', 'Jacquelin']
response in server.py code:
 [(63, 7, 'Twitter'), (21, 7, 'Twitter'), (0, 5, 'Yahoo!'), (44, 3, 'John_F._Kennedy'), (8, 6, 'Jackie_Jackson'), (107, 9, 'Jacquelin_Holzman')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Hsieh']
response in server.py code:
 [(59, 5, 'Hsieh_Su-wei')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Nagoum Yamassoum']
response in server.py code:
 [(200, 16, 'Nagoum_Yamassoum'), (89, 4, 'Chad'), (50, 9, "N'Djamena"), (0, 4, 'Chad'), (105, 20, "University_of_N'Djamena")]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ralph Nader', 'Dorothy Byrne']
response in server.py code:
 [(2068, 6, 'Oregon'), (101, 11, 'Ralph_Nader'), (469, 7, 'United_States'), (1390, 7, 'Florida'), (4003, 11, 'Sierra_Club'), (1081, 11, 'White_House'), (4314, 11, 'Gainesville,_Florida'), (2286, 8, 'Portland,_Oregon'), (4289, 21, 'University_of_Florida'), (88, 10, 'Washington,_D.C.'), (3463, 13, 'Dorothy_Byrne'), (3514, 11, 'Green_Party_of_the_United_States'), (815, 4, 'Noni_juice')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(30, 7, 'Belfast'), (201, 23, 'University_of_Edinburgh'), (73, 21, 'University_of_Glasgow'), (12, 14, 'Grammar_school')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(299, 7, 'Reuters'), (52, 6, 'Vienna'), (179, 8, 'Austria'), (409, 7, 'Austria'), (17, 17, 'Manchester_United_F.C.'), (540, 17, 'Manchester_United_F.C.'), (43, 7, 'Austria'), (74, 17, 'Manchester_United_F.C.'), (442, 12, 'SK_Rapid_Wien'), (220, 7, 'United_Kingdom'), (248, 8, 'Mercedes-Benz')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Walter Bothe', 'Frédéric Joliot-Curie']
response in server.py code:
 [(159, 5, 'Paris'), (28, 6, 'France'), (39, 7, 'Germany'), (124, 21, 'Frédéric_Joliot-Curie'), (70, 12, 'Walther_Bothe')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Nicolae Ceausescu']
response in server.py code:
 [(145, 7, 'Romania'), (945, 17, 'Nicolae_Ceaușescu'), (192, 5, 'Sheep'), (491, 7, 'Vampire'), (984, 8, 'Dictator'), (474, 12, 'Transylvania'), (247, 9, 'Livestock'), (26, 6, 'Cattle'), (971, 9, 'Communism'), (598, 9, 'Kilogram'), (61, 4, 'Bear'), (443, 7, 'Dracula'), (1218, 17, 'Apuseni_Mountains'), (75, 8, 'Peasant'), (913, 6, 'Weaning'), (753, 9, 'Hibernation'), (866, 10, 'Omnivore'), (408, 8, 'Military_reserve_force')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(249, 4, 'New_Jersey'), (234, 13, 'Atlantic_City,_New_Jersey'), (307, 13, 'Atlantic_City,_New_Jersey')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['ray rice']
response in server.py code:
 [(47, 8, 'Ray_Rice')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(174, 7, 'England_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Yeltsin', 'Lebed', 'Viktor Chernomyrdin', 'Boris Yeltsin', 'Alexander Lebed', 'Aslan Maskhadov']
response in server.py code:
 [(94, 19, 'Viktor_Chernomyrdin'), (144, 13, 'Boris_Yeltsin'), (522, 8, 'Chechnya'), (356, 12, 'Viktor_Chernomyrdin'), (220, 15, 'Alexander_Lebed'), (291, 5, 'Alexander_Lebed'), (828, 8, 'Chechnya'), (1235, 5, 'Alexander_Lebed'), (1174, 6, 'Russia'), (340, 8, 'Interfax'), (263, 8, 'Interfax'), (53, 6, 'Moscow'), (0, 7, 'Boris_Yeltsin'), (453, 7, 'Boris_Yeltsin'), (71, 7, 'Russia'), (1132, 7, 'Boris_Yeltsin'), (486, 7, 'Boris_Yeltsin'), (23, 8, 'Chechnya'), (1422, 7, 'Boris_Yeltsin'), (1609, 5, 'Alexander_Lebed'), (474, 5, 'Alexander_Lebed'), (1374, 5, 'Alexander_Lebed'), (307, 8, 'Chechnya'), (1468, 7, 'Boris_Yeltsin'), (253, 8, 'Chechnya'), (838, 5, 'Alexander_Lebed'), (694, 15, 'Aslan_Maskhadov'), (1570, 5, 'Alexander_Lebed'), (1519, 12, 'Viktor_Chernomyrdin'), (1308, 8, 'Chechnya'), (1012, 8, 'Chechnya'), (1206, 9, 'Information_Telegraph_Agency_of_Russia'), (1038, 18, 'Russia'), (17, 5, 'Alexander_Lebed'), (1643, 8, 'Chechnya'), (186, 6, 'Moscow'), (984, 6, 'Moscow')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mohamed al-Dura', 'Khalid Arif']
response in server.py code:
 [(25, 3, 'Agence_France-Presse'), (9, 7, 'Lebanon'), (731, 7, 'Lebanon'), (330, 6, 'Beirut'), (230, 7, 'Algeria'), (1318, 9, 'Jerusalem'), (708, 5, 'Sidon'), (966, 11, 'Khalid_Mahmud_Arif'), (448, 15, 'Muhammad_al-Durrah_incident'), (198, 28, 'Palestinian_National_Council'), (308, 5, 'Piet_Souer')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(12, 8, 'Antique')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(57, 7, 'United_Kingdom'), (157, 15, 'Bank_of_England'), (320, 28, 'Financial_Services_Authority'), (215, 8, 'United_States_Department_of_the_Treasury'), (0, 5, 'Gordon_Brown'), (16, 10, 'Chancellor_(education)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(17, 6, 'Africa'), (0, 5, 'Childbirth')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(115, 9, 'St._Louis'), (29, 21, 'Boy_Scouts_of_America'), (90, 21, 'Washington_University_in_St._Louis'), (9, 9, 'Scout_(Scouting)'), (65, 11, 'Eagle_Scout_(Boy_Scouts_of_America)'), (180, 6, 'Fellow')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Kennet Andersson', 'Igor Kolyvanov', 'Ramon Vega', 'Dietmar Beiersdorfer', 'Daniele Carnasciali', 'Lorenzo Amoruso', 'Fausto Pizzi', 'Pierluigi Casiraghi', 'Pavel Nedved', 'Paolo Negro', 'Abel Balbo', 'Marco Delvecchio', 'Francesco Totti', 'George Weah', 'Roberto Baggio', 'Dejan Savicevic', 'Oliver Bierhoff', 'Roberto Ayala', 'Eugenio Corini', 'Mario Stanic', 'Daniel Bravo', 'Fabio Cannavaro', 'Nestor Sensini', 'Filippo Inzaghi', 'Dimas', 'Alessandro Del Piero', 'Alen Boksic', 'Roberto Mancini', 'Pierre Laigle', 'Marcelo Otero', 'Ivan Zamorano']
response in server.py code:
 [(1894, 15, 'Oliver_Bierhoff'), (1367, 12, 'Pavel_Nedvěd'), (1523, 8, 'A.C._Milan'), (2903, 15, 'Roberto_Mancini'), (1142, 7, 'A.S._Roma'), (2986, 14, 'Inter_Milan'), (496, 8, 'A.C._Milan'), (54, 4, 'Rome'), (2757, 20, 'Alessandro_Del_Piero'), (1971, 6, 'S.S.C._Napoli'), (1779, 14, 'Roberto_Baggio'), (3269, 5, 'Inter_Milan'), (807, 10, 'ACF_Fiorentina'), (2788, 11, 'Alen_Bokšić'), (2633, 9, 'U.C._Sampdoria'), (70, 7, 'Italy'), (635, 5, 'Inter_Milan'), (929, 15, 'Lorenzo_Amoruso'), (1933, 6, 'S.S.C._Napoli'), (3191, 5, 'Inter_Milan'), (9, 7, 'Italy'), (2682, 8, 'Juventus_F.C.'), (624, 6, 'S.S.C._Napoli'), (2873, 9, 'U.C._Sampdoria'), (2649, 8, 'Juventus_F.C.'), (1538, 7, 'Udinese_Calcio'), (842, 10, 'ACF_Fiorentina'), (1267, 7, 'Italy'), (298, 7, 'Italy'), (1496, 15, 'Francesco_Totti'), (2593, 15, 'Filippo_Inzaghi'), (1393, 11, 'Paolo_Negro'), (2218, 5, 'Parma_F.C.'), (1129, 5, 'S.S._Lazio'), (2251, 5, 'Parma_F.C.'), (1724, 11, 'George_Weah'), (1869, 7, 'Udinese_Calcio'), (730, 8, 'A.C._Reggiana_1919'), (2297, 12, 'Mario_Stanić'), (706, 10, 'Ramon_Vega'), (2576, 8, 'Atalanta_B.C.'), (534, 8, 'A.C._Reggiana_1919'), (3345, 7, 'Chile'), (1463, 10, 'Abel_Balbo'), (825, 7, 'A.C._Perugia_Calcio'), (3361, 13, 'Iván_Zamorano'), (1044, 7, 'A.C._Perugia_Calcio'), (2071, 9, 'Argentina'), (2972, 7, 'Vicenza_Calcio'), (2492, 15, 'Fabio_Cannavaro'), (1475, 16, 'Marco_Delvecchio'), (2538, 14, 'Roberto_Sensini'), (2939, 6, 'France'), (365, 14, 'Igor_Kolyvanov'), (553, 8, 'Cagliari_Calcio'), (228, 7, 'Vicenza_Calcio'), (2440, 5, 'Parma_F.C.'), (518, 8, 'Cagliari_Calcio'), (2957, 13, 'Pierre_Laigle'), (2528, 9, 'Argentina'), (1608, 18, 'UEFA_Champions_League'), (1290, 5, 'S.S._Lazio'), (3301, 6, 'France'), (2202, 14, 'Eugenio_Corini'), (2448, 6, 'France'), (336, 16, 'Kennet_Andersson'), (3096, 7, 'Vicenza_Calcio'), (176, 7, 'Bologna_F.C._1909'), (190, 8, 'S.S.D._Piacenza_Calcio_1919'), (905, 19, 'Daniele_Carnasciali'), (78, 7, 'Serie_A'), (169, 3, 'Greenwich_Mean_Time'), (1412, 4, 'A.S._Roma'), (251, 7, 'Bologna_F.C._1909'), (391, 7, 'Bologna_F.C._1909'), (2090, 13, 'Roberto_Ayala'), (2414, 8, 'Cagliari_Calcio'), (1329, 19, 'Pierluigi_Casiraghi'), (439, 8, 'S.S.D._Piacenza_Calcio_1919'), (1763, 5, 'A.C._Milan'), (1279, 9, 'UEFA_Europa_League'), (1946, 6, 'Hellas_Verona_F.C.'), (1453, 9, 'Argentina'), (2466, 12, 'Daniel_Bravo'), (3112, 9, 'Uruguay'), (1560, 5, 'A.C._Milan'), (785, 20, 'Dietmar_Beiersdorfer'), (1350, 5, 'Czech_Republic'), (1855, 5, 'A.C._Milan'), (2724, 10, 'Portugal'), (2105, 6, 'Hellas_Verona_F.C.'), (1657, 9, 'Rosenborg_BK'), (1812, 15, 'Dejan_Savićević'), (1227, 4, 'Rome'), (3122, 13, 'Marcelo_Otero'), (1707, 8, 'Liberia_national_football_team'), (2025, 6, 'Hellas_Verona_F.C.'), (1115, 12, 'Fausto_Pizzi'), (1879, 6, 'Germany'), (691, 5, 'Switzerland'), (357, 7, 'Russia'), (330, 5, 'Sweden'), (778, 6, 'Germany'), (2744, 5, 'Dimas_Teixeira'), (1642, 9, 'Norway'), (1800, 11, 'Montenegro'), (1067, 5, 'Croatia'), (2280, 5, 'Croatia'), (1170, 5, 'Rome')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Alan Shepard', 'John Glenn', 'Gus Grissom', 'Edward White', 'Roger Chaffee', 'Neil Armstrong', 'Buzz Aldrin', 'Sally Ride', 'Norman Thagard', 'Shannon Lucid', 'Story Musgrave']
response in server.py code:
 [(330, 9, 'Apollo_11'), (525, 13, 'Space_Shuttle'), (710, 22, 'Hubble_Space_Telescope'), (568, 10, 'Sally_Ride'), (963, 3, 'Mir'), (345, 14, 'Neil_Armstrong'), (132, 10, 'John_Glenn'), (367, 11, 'Buzz_Aldrin'), (837, 14, 'Norman_Thagard'), (444, 16, 'Soyuz_(spacecraft)'), (275, 10, 'Spacecraft'), (1068, 13, 'Shannon_Lucid'), (639, 10, 'Space_Shuttle_Challenger'), (65, 12, 'Alan_Shepard'), (263, 8, 'Apollo_1'), (297, 10, 'Launch_pad'), (172, 5, 'Orbit'), (901, 6, 'Rocket'), (1207, 14, 'Story_Musgrave'), (200, 11, 'Gus_Grissom'), (989, 8, 'Space_Shuttle_Atlantis'), (216, 12, 'Edward_Higgins_White'), (1284, 9, 'Space_Shuttle_Discovery'), (390, 4, 'Moon'), (498, 8, 'Space_Shuttle_Columbia'), (239, 13, 'Roger_B._Chaffee')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ron Ellis', 'Harper Williams', 'Dejan Koturovic', 'Zoran Savic']
response in server.py code:
 [(392, 14, 'Virtus_Pallacanestro_Bologna'), (32, 8, 'Brussels'), (347, 8, 'Belgrade'), (464, 15, 'Dejan_Koturović'), (140, 7, 'Belgium'), (408, 5, 'Italy'), (492, 11, 'Zoran_Savić'), (172, 5, 'Spain'), (453, 8, 'FK_Partizan'), (117, 9, 'Charleroi'), (13, 10, 'Euroleague_Basketball'), (282, 15, 'Harper_Williams'), (129, 9, 'R._Charleroi_S.C.'), (208, 9, 'R._Charleroi_S.C.'), (377, 10, 'Yugoslavia'), (358, 17, 'FK_Partizan'), (268, 11, 'Estudiantes_de_La_Plata'), (64, 10, 'Euroleague_Basketball'), (152, 18, 'CB_Estudiantes'), (238, 9, 'Ron_Ellis')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(58, 3, 'World_of_Warcraft')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(67, 6, 'Boston'), (40, 14, "Dunkin'_Donuts")]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Steve', 'Bill', 'Sergey', 'Larry']
response in server.py code:
 [(13, 6, 'Sergey_Brin'), (0, 5, 'Steve_Jobs')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lebed', 'Alexander Lebed', 'Aslan Maskhadov', 'Boris Yeltsin', 'Viktor Chernomyrdin']
response in server.py code:
 [(687, 8, 'Chechnya'), (59, 6, 'Russia'), (1150, 13, 'Boris_Yeltsin'), (1289, 19, 'Viktor_Chernomyrdin'), (868, 8, 'Chechnya'), (398, 16, 'Chechnya'), (1078, 8, 'Chechnya'), (998, 8, 'Chechnya'), (1198, 8, 'Chechnya'), (96, 15, 'Alexander_Lebed'), (1367, 5, 'Alexander_Lebed'), (598, 5, 'Alexander_Lebed'), (1172, 5, 'Alexander_Lebed'), (792, 5, 'Alexander_Lebed'), (550, 5, 'Alexander_Lebed'), (417, 5, 'Alexander_Lebed'), (1031, 6, 'Russia'), (77, 7, 'Russia'), (146, 15, 'Aslan_Maskhadov'), (1329, 7, 'Boris_Yeltsin'), (224, 8, 'Chechnya'), (616, 9, 'Aslan_Maskhadov'), (451, 9, 'Aslan_Maskhadov'), (0, 5, 'Alexander_Lebed'), (371, 18, 'Russia'), (47, 10, 'Khasavyurt'), (7, 8, 'Chechnya'), (970, 6, 'Moscow')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(121, 5, 'Italy'), (140, 8, 'Juventus_F.C.'), (41, 14, 'Agnelli'), (184, 7, 'Country_music')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Wilhelm Röntgen']
response in server.py code:
 [(45, 21, 'Utrecht_University'), (9, 15, 'Wilhelm_Röntgen'), (148, 7, 'Wilhelm_Röntgen'), (131, 7, 'Student')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 15, 'Dutchess_County,_New_York')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(244, 33, 'Space_Telescope_Science_Institute'), (954, 14, 'Viking_program'), (617, 5, 'Earth'), (190, 15, 'Space_observatory'), (306, 22, 'Hubble_Space_Telescope'), (95, 5, 'Texas'), (600, 10, 'Tropical_cyclone'), (157, 4, 'Mars'), (785, 9, 'Greenland_ice_sheet'), (404, 3, 'Ice'), (4, 11, 'Astronomer'), (363, 7, 'Mars'), (749, 10, 'Evaporation'), (812, 18, 'Planum_Boreum'), (1441, 10, 'Phenomenon'), (767, 14, 'Carbon_dioxide'), (61, 7, 'Cyclone')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['EYLES', 'Rodney Eyles', 'Mark Cairns', 'Peter Nicol', 'Simon Parke']
response in server.py code:
 [(398, 5, 'Rodney_Eyles'), (426, 11, 'Peter_Nicol'), (504, 5, 'Peter_Nicol'), (650, 5, 'Peter_Nicol'), (463, 11, 'Simon_Parke'), (94, 12, 'Rodney_Eyles'), (441, 8, 'Scotland'), (52, 6, 'Mumbai'), (60, 5, 'India'), (314, 10, 'Australia'), (9, 5, 'Rodney_Eyles'), (359, 11, 'Mark_Cairns_(squash_player)'), (348, 10, 'England'), (478, 7, 'England'), (260, 10, 'World_Open_chess_tournament')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ken Allen']
response in server.py code:
 [(19, 14, 'Belgrade,_Maine')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Rubin']
response in server.py code:
 [(85, 19, 'American_Recordings_(album)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['John Kornblum', 'Alija Izetbegovic']
response in server.py code:
 [(932, 51, 'Organization_for_Security_and_Co-operation_in_Europe'), (312, 4, 'United_States'), (762, 3, 'Party_of_Democratic_Action'), (560, 4, 'United_States'), (233, 4, 'United_States'), (374, 3, 'Party_of_Democratic_Action'), (440, 17, 'Alija_Izetbegović'), (39, 8, 'Sarajevo'), (985, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (734, 26, 'Party_of_Democratic_Action'), (1172, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (706, 6, 'Bosnia_and_Herzegovina'), (1114, 3, 'Party_of_Democratic_Action'), (59, 6, 'Bosnia_and_Herzegovina'), (346, 13, 'John_C._Kornblum'), (7, 6, 'Islam'), (75, 6, 'Islam'), (422, 7, 'Bosnia_and_Herzegovina'), (272, 7, 'Bosnia_and_Herzegovina'), (913, 4, 'Serbia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(29, 3, 'Agence_France-Presse'), (751, 19, 'Brunei'), (2438, 4, 'Iran'), (2, 19, 'Bandar_Seri_Begawan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Gianni Agnelli']
response in server.py code:
 [(113, 5, 'Italy'), (156, 6, 'Europe'), (0, 14, 'Gianni_Agnelli'), (102, 7, 'Company'), (70, 7, 'Company'), (34, 4, 'Fiat')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Albert Lutuli', 'Robert F. Kennedy']
response in server.py code:
 [(38, 13, 'United_States'), (9, 13, 'Albert_Lutuli'), (60, 17, 'Robert_F._Kennedy'), (96, 12, 'South_Africa'), (52, 7, 'United_States_Senate')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(150, 29, 'Merrill_Lynch'), (298, 25, 'Luxembourg_Stock_Exchange'), (0, 16, 'Eastman_Kodak')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(95, 11, 'The_Sea_Inside'), (113, 14, 'The_Sea_Inside'), (38, 5, 'Agora_(film)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['P.W . Botha']
response in server.py code:
 [(130, 10, 'P._W._Botha'), (721, 12, 'Johannesburg'), (645, 25, 'African_National_Congress'), (940, 7, 'Amnesty'), (1152, 17, 'Contempt_of_court'), (48, 10, 'Prosecutor'), (340, 50, 'Truth_and_Reconciliation_Commission_(South_Africa)'), (194, 10, 'Dominant_minority'), (1282, 4, 'South_African_rand')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Peter Nicol', 'Simon Parke', 'Rodney Eyles', 'Mark Cairns']
response in server.py code:
 [(158, 11, 'Peter_Nicol'), (225, 12, 'Rodney_Eyles'), (301, 5, 'Peter_Nicol'), (309, 5, 'Rodney_Eyles'), (255, 11, 'Mark_Cairns_(squash_player)'), (186, 11, 'Simon_Parke'), (239, 9, 'Australia'), (51, 6, 'Mumbai'), (171, 8, 'Scotland'), (59, 5, 'India'), (268, 7, 'England'), (199, 7, 'England')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Alberto Contador']
response in server.py code:
 [(29, 16, 'Alberto_Contador'), (15, 6, 'France')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Madonna']
response in server.py code:
 [(17, 7, 'Madonna_(entertainer)'), (48, 10, 'First_Lady')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(229, 6, 'Tanjug'), (51, 8, 'Belgrade'), (747, 6, 'Tanjug'), (376, 6, 'Tanjug'), (71, 8, 'Belgrade'), (390, 8, 'Belgrade'), (933, 8, 'Belgrade'), (0, 8, 'Belgrade'), (729, 8, 'Belgrade'), (579, 9, 'Batajnica_Air_Base'), (468, 6, 'Surčin'), (335, 9, 'Batajnica_Air_Base'), (764, 9, 'Batajnica_Air_Base'), (208, 8, 'Yugoslavia'), (590, 8, 'Aćimović')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ["Sandra Day O'Connor"]
response in server.py code:
 [(18, 6, 'London'), (6, 8, 'BBC_News'), (776, 19, "Sandra_Day_O'Connor"), (1115, 10, 'Washington,_D.C.'), (541, 21, 'Supreme_Court_of_Florida'), (63, 16, 'Supreme_Court_of_the_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(10, 9, 'Wholesale')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Alfred Nobel']
response in server.py code:
 [(44, 9, 'Stockholm'), (55, 6, 'Sweden'), (80, 9, 'Engineer'), (0, 12, 'Alfred_Nobel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Levi-Montalcini', 'Viktor Hamburger', 'her', 'her']
response in server.py code:
 [(86, 9, 'St._Louis'), (61, 21, 'Washington_University_in_St._Louis'), (122, 9, 'Professor'), (249, 3, 'Elizabeth_II'), (288, 3, 'Elizabeth_II'), (294, 18, 'Research_associate'), (132, 16, 'Viktor_Hamburger'), (19, 15, 'Rita_Levi-Montalcini'), (270, 9, 'Viktor_Hamburger')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 22, 'East_Ridge_High_School_(Kentucky)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Christopher Clark', 'Francis Tombs', 'Rolls', 'Rolls', 'Rolls', 'Rolls']
response in server.py code:
 [(46, 15, 'Rolls-Royce_Group_PLC'), (915, 13, 'Francis_Tombs,_Baron_Tombs'), (147, 17, 'Chris_Clark_(historian)'), (1071, 5, 'Rolls-Royce_Group_PLC'), (1574, 5, 'Rolls-Royce_Group_PLC'), (953, 5, 'Rolls-Royce_Group_PLC')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(87, 13, 'Brain_tumor'), (506, 9, 'Cancer'), (118, 13, 'Breast_cancer'), (1096, 12, 'Congenital_disorder'), (529, 7, 'Tissue_(biology)'), (145, 11, 'Bleeding'), (327, 8, 'Thailand'), (251, 7, 'Bangkok'), (297, 13, 'Radiosurgery'), (1147, 11, 'Capillary'), (972, 9, 'Consciousness'), (655, 9, 'Radiation_therapy'), (1117, 8, 'Thrombus'), (691, 18, 'Linear_particle_accelerator'), (555, 17, '3D_computer_graphics')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Nelson Mandela', 'Mangosuthu Buthelezi']
response in server.py code:
 [(778, 7, 'Reuters'), (54, 12, 'South_Africa'), (433, 13, 'KwaZulu-Natal'), (157, 12, 'South_Africa'), (929, 13, 'KwaZulu-Natal'), (46, 6, 'Durban'), (338, 3, 'African_National_Congress'), (1378, 20, 'Mangosuthu_Buthelezi'), (294, 14, 'Nelson_Mandela'), (311, 25, 'African_National_Congress'), (1401, 21, 'Inkatha_Freedom_Party'), (1359, 3, 'African_National_Congress'), (684, 8, 'Umkomaas'), (31, 4, 'Zulu_language'), (181, 4, 'Zulu_language'), (418, 11, 'Izingolweni'), (1367, 4, 'Zulu_language')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(37, 17, 'Ambassador_Bridge')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(12, 9, 'The_Times'), (36, 6, 'Greece'), (0, 7, 'The_Sun_(United_Kingdom)'), (66, 4, 'Euro')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Alexander Lukashenko', 'Semyon Sharetsky']
response in server.py code:
 [(1036, 7, 'Reuters'), (282, 7, 'Reuters'), (1918, 6, 'Russia'), (119, 20, 'Alexander_Lukashenko'), (497, 10, 'Alexander_Lukashenko'), (1293, 12, 'Soviet_Union'), (1243, 6, 'Russia'), (999, 10, 'Alexander_Lukashenko'), (845, 10, 'Alexander_Lukashenko'), (82, 7, 'Belarus'), (56, 5, 'Minsk'), (1696, 10, 'Alexander_Lukashenko'), (1116, 10, 'Alexander_Lukashenko'), (239, 7, 'Belarus'), (1939, 10, 'Alexander_Lukashenko'), (4, 7, 'Belarus'), (1979, 10, 'Alexander_Lukashenko'), (203, 6, 'Soviet_Union'), (2133, 13, 'United_States'), (1896, 6, 'Moscow'), (524, 8, 'Europe'), (1726, 6, 'Moscow'), (627, 9, 'Syamyon_Sharetski'), (1417, 9, 'Syamyon_Sharetski'), (877, 9, 'Syamyon_Sharetski'), (259, 16, 'Syamyon_Sharetski')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Sarnia'), (20, 5, 'Commonwealth_of_Nations')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(20, 7, 'Detroit')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Orso Mario Corbino', 'Benito Mussolini']
response in server.py code:
 [(201, 9, 'Professor'), (71, 5, 'Italy'), (146, 9, 'Professor'), (156, 18, 'Orso_Mario_Corbino'), (256, 20, 'Institute_of_Physics'), (294, 16, 'Benito_Mussolini'), (188, 10, 'University'), (284, 6, 'Member_of_Parliament'), (107, 21, 'Education_minister'), (240, 8, 'Film_director'), (313, 7, 'Cabinet_(government)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(53, 4, 'Jena'), (69, 8, 'Music_education'), (153, 5, 'Carl_Zeiss_AG'), (15, 12, 'Schott_AG'), (0, 9, 'Richard_Adolf_Zsigmondy')]
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Phan Van Khai', 'Le Duc Anh']
response in server.py code:
 [(348, 7, 'Vietnam'), (1387, 13, 'Hydropower'), (91, 13, 'Phan_Văn_Khải'), (784, 10, 'Lê_Đức_Anh'), (1359, 9, 'Reservoir'), (1288, 7, 'Drought'), (536, 15, 'Self-criticism'), (128, 11, 'Electricity'), (647, 18, 'Project_accounting'), (625, 6, 'Call_for_bids'), (193, 11, 'Bureaucracy'), (73, 14, 'Prime_minister'), (59, 8, 'Monopoly')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Vaclav Havel', 'Madeleine Albright', 'Madeleine Albright', 'Marie Korbelova', 'Josef Zieleniec']
response in server.py code:
 [(1705, 7, 'Reuters'), (267, 5, 'Václav_Havel'), (629, 5, 'Václav_Havel'), (1716, 8, 'Madeleine_Albright'), (321, 18, 'Madeleine_Albright'), (149, 18, 'Madeleine_Albright'), (849, 5, 'Václav_Havel'), (620, 7, 'Reuters'), (1909, 8, 'Madeleine_Albright'), (591, 5, 'Václav_Havel'), (1361, 8, 'Madeleine_Albright'), (736, 8, 'Madeleine_Albright'), (204, 13, 'United_States'), (98, 12, 'Václav_Havel'), (1126, 8, 'Madeleine_Albright'), (179, 5, 'Czech_Republic'), (485, 13, 'United_States'), (1206, 4, 'United_States'), (962, 15, 'Madeleine_Albright'), (1684, 15, 'Josef_Zieleniec'), (947, 8, 'Madeleine_Albright'), (397, 8, 'United_States'), (1229, 14, 'United_Nations'), (82, 5, 'Czech_Republic'), (1042, 13, 'United_States'), (64, 6, 'Prague'), (27, 8, 'Madeleine_Albright'), (712, 6, 'Prague'), (1840, 14, 'United_Nations'), (1330, 4, 'NATO'), (1159, 6, 'Europe'), (1647, 6, 'Europe'), (983, 12, 'Czechoslovakia'), (1245, 5, 'Czech_Republic'), (1753, 4, 'NATO'), (14, 5, 'Czech_Republic'), (1662, 2, 'United_States'), (1886, 17, 'Mladá_fronta_DNES'), (1816, 5, 'Czech_Republic'), (692, 9, 'Communism'), (1066, 10, 'Communism'), (1575, 14, 'Transatlantic_relations'), (0, 5, 'Václav_Havel'), (2037, 6, 'Czech_Republic')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Angelique Kerber', 'Timea Babos']
response in server.py code:
 [(28, 11, 'Tímea_Babos'), (6, 16, 'Angelique_Kerber')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Clapton', 'Beck']
response in server.py code:
 [(82, 4, 'Beck'), (73, 7, 'Eric_Clapton'), (92, 4, 'Jimmy_Page')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(65, 10, 'Tajikistan'), (303, 10, 'Tajikistan'), (828, 8, 'Dushanbe'), (1424, 24, 'United_Nations'), (250, 5, 'Pamir_Mountains'), (54, 9, 'Tavildara'), (1118, 10, 'Tajikistan'), (1160, 5, 'China'), (1144, 11, 'Afghanistan'), (778, 9, 'Tavildara'), (158, 9, 'Tavildara'), (87, 5, 'Tajikistan'), (738, 9, 'Tavildara'), (2242, 6, 'Moscow'), (0, 5, 'Tajikistan'), (502, 9, 'Tavildara'), (1277, 7, 'Islam'), (186, 7, 'Islam'), (1460, 9, 'Tavildara')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(66, 29, 'Glasgow_Caledonian_University'), (42, 8, 'Lecturer'), (117, 5, 'Music_education'), (131, 15, 'Open_University'), (18, 5, 'Gordon_Brown')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Tonegawa']
response in server.py code:
 [(69, 9, 'San_Diego'), (41, 24, 'University_of_California'), (0, 8, 'Susumu_Tonegawa'), (18, 3, 'Bon_Jovi')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lawton Chiles']
response in server.py code:
 [(145, 13, 'Lawton_Chiles'), (501, 6, 'Lawton_Chiles'), (373, 6, 'Lawton_Chiles'), (4, 28, 'United_States_Senate_Committee_on_the_Budget'), (435, 6, 'United_States_Senate')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Antonio Guterres', 'Jose Maria Aznar']
response in server.py code:
 [(82, 5, 'Spain'), (66, 8, 'Portugal'), (454, 6, 'Lisbon'), (348, 16, 'António_Guterres'), (1232, 14, 'European_Union'), (610, 16, 'José_María_Aznar'), (933, 13, 'Hydropower'), (134, 15, 'Water_resources'), (735, 12, 'Water_supply'), (160, 17, 'Iberian_Peninsula'), (1496, 16, 'Illegal_drug_trade'), (1469, 19, 'Illegal_immigration'), (330, 14, 'Prime_minister')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Emil Constantinescu', 'Marko Bela']
response in server.py code:
 [(588, 10, 'Béla_Markó'), (566, 7, 'Romania'), (320, 19, 'Emil_Constantinescu'), (435, 7, 'Romania'), (42, 9, 'Bucharest'), (681, 6, 'Oradea'), (454, 14, 'Emil_Constantinescu'), (636, 9, 'Timișoara'), (692, 5, 'Sibiu'), (274, 4, 'Democratic_Union_of_Hungarians_in_Romania'), (675, 4, 'Arad,_Romania'), (500, 4, 'Democratic_Union_of_Hungarians_in_Romania'), (214, 23, 'Social_Democratic_Union_(Serbia)'), (0, 13, 'Romanian_Radio_Broadcasting_Company'), (246, 26, 'Democratic_Union_of_Hungarians_in_Romania'), (63, 13, 'Romanian_Radio_Broadcasting_Company'), (100, 21, 'Democratic_National_Convention')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(79, 7, 'Republic_of_Ireland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Josef Zieleniec', 'Vaclav Klaus', 'Margaret Thatcher']
response in server.py code:
 [(488, 7, 'Reuters'), (1178, 5, 'Václav_Klaus'), (650, 12, 'Václav_Klaus'), (1499, 5, 'Václav_Klaus'), (1294, 5, 'Václav_Klaus'), (248, 15, 'Josef_Zieleniec'), (948, 17, 'Margaret_Thatcher'), (876, 5, 'Václav_Klaus'), (1384, 5, 'Czech_Republic'), (925, 7, 'United_Kingdom'), (990, 5, 'Czech_Republic'), (1218, 14, 'Post-communism'), (51, 6, 'Prague'), (752, 5, 'Czech_Republic'), (1046, 9, 'Josef_Zieleniec'), (428, 9, 'Josef_Zieleniec'), (770, 4, 'Brno'), (0, 5, 'Czech_Republic'), (1654, 16, 'Social_Democratic_Party_of_Germany'), (613, 3, 'Mirek_Topolánek'), (142, 3, 'Mirek_Topolánek'), (230, 3, 'Mirek_Topolánek'), (854, 3, 'Mirek_Topolánek'), (1452, 3, 'Mirek_Topolánek')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(336, 4, 'Florida'), (323, 11, 'Tallahassee,_Florida'), (2896, 17, 'Electoral_College_(United_States)'), (679, 24, 'Florida_District_Courts_of_Appeal'), (593, 13, 'Supreme_Court_of_the_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Florida'), (29, 6, 'River')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Dariusz Rosati', 'Slobodan Milosevic']
response in server.py code:
 [(89, 14, 'Dariusz_Rosati'), (695, 6, 'Dariusz_Rosati'), (277, 6, 'Dariusz_Rosati'), (730, 18, 'Slobodan_Milošević'), (63, 6, 'Poland'), (777, 8, 'Belgrade'), (483, 30, 'Serbia_and_Montenegro'), (815, 6, 'Poland'), (1046, 6, 'Poland'), (966, 4, 'United_Nations'), (548, 10, 'Yugoslavia'), (45, 6, 'Warsaw'), (803, 10, 'Montenegro'), (33, 10, 'Yugoslavia'), (1003, 8, 'Belgrade'), (0, 6, 'Poland'), (115, 10, 'Yugoslavia'), (753, 8, 'Yugoslavia'), (712, 7, 'Serbia'), (874, 10, 'Yugoslavia'), (441, 16, 'Foreign_minister'), (234, 3, 'Polish_Press_Agency'), (565, 5, 'Poland'), (1031, 13, 'Army_of_Republika_Srpska')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(14, 10, 'Apartment'), (0, 5, 'Bayou'), (6, 7, 'Garden')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Kurzweil', 'Marvin Minsky', 'him', 'Kurzweil', 'Frank Rosenblatt']
response in server.py code:
 [(99, 3, 'Massachusetts_Institute_of_Technology'), (9, 11, 'High_school'), (53, 13, 'Marvin_Minsky'), (118, 8, 'Ray_Kurzweil'), (22, 8, 'Ray_Kurzweil'), (160, 7, 'Cornell_University'), (140, 16, 'Frank_Rosenblatt'), (92, 3, 'Fidel_Castro')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Fert']
response in server.py code:
 [(60, 5, 'Paris'), (32, 24, 'École_Normale_Supérieure'), (213, 19, 'University_of_Paris'), (180, 25, 'University_of_Paris-Sud'), (0, 4, 'Albert_Fert')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ozaki']
response in server.py code:
 [(184, 5, 'Japan'), (237, 5, 'Japan'), (100, 5, 'Japan'), (93, 5, 'Osaka'), (116, 5, 'Yukio_Ozaki')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Pope John Paul II']
response in server.py code:
 [(49, 9, 'Nicaragua'), (224, 7, 'Managua'), (1089, 6, 'Mexico'), (1337, 6, 'Cancer'), (549, 10, 'Sandinista_National_Liberation_Front'), (1321, 8, 'Diabetes_mellitus'), (785, 17, 'Pope_John_Paul_II'), (825, 15, 'Hurricane_Mitch'), (395, 10, 'Shortwave_radio'), (1103, 15, 'Central_America'), (744, 18, 'Types_of_volcanic_eruptions'), (578, 6, 'Contras'), (1211, 43, 'National_Autonomous_University_of_Nicaragua'), (165, 9, 'American_Civil_War')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Seal']
response in server.py code:
 [(35, 5, 'Las_Vegas'), (0, 5, 'Heidi'), (22, 4, 'Seal_(musician)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Elie Baup']
response in server.py code:
 [(45, 9, 'Élie_Baup'), (29, 9, 'Olympique_de_Marseille')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Dariusz Rosati', "Alfonse D'Amato"]
response in server.py code:
 [(299, 14, 'Dariusz_Rosati'), (1448, 6, 'Dariusz_Rosati'), (481, 6, 'Poland'), (1435, 6, 'Dariusz_Rosati'), (613, 6, 'Dariusz_Rosati'), (935, 6, 'Poland'), (1069, 6, 'Dariusz_Rosati'), (414, 6, 'Poland'), (1042, 6, 'Poland'), (1198, 5, 'Switzerland'), (524, 11, 'Switzerland'), (877, 5, 'Switzerland'), (784, 6, 'Poland'), (64, 6, 'Warsaw'), (1625, 11, 'Switzerland'), (644, 11, 'Switzerland'), (438, 5, 'Switzerland'), (2001, 5, 'Switzerland'), (1167, 11, 'Switzerland'), (1932, 6, 'Dariusz_Rosati'), (823, 6, 'Poland'), (1515, 11, 'Switzerland'), (0, 6, 'Poland'), (2243, 5, 'Switzerland'), (1011, 6, 'Germany'), (2398, 5, 'Switzerland'), (109, 5, 'Switzerland'), (2278, 5, 'Switzerland'), (162, 6, 'Poland'), (82, 6, 'Poland'), (2350, 6, 'Jews'), (2428, 6, 'Jews'), (31, 5, 'Switzerland'), (1979, 6, 'Jews'), (971, 4, 'Jews'), (1063, 4, 'Jews'), (1156, 6, 'Warsaw'), (1289, 13, 'World_War_II'), (267, 13, 'World_War_II'), (682, 15, "Al_D'Amato"), (169, 4, 'Jews'), (2128, 9, 'The_Holocaust'), (1792, 6, 'Poland'), (190, 9, 'The_Holocaust'), (2183, 3, 'Free_Democratic_Party_(Germany)'), (724, 29, 'United_States_Senate_Committee_on_Banking,_Housing,_and_Urban_Affairs'), (1006, 4, 'Nazism')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Yeltsin', 'Boris Yeltsin', 'Sergei Yastrzhembsky', 'Naina Yeltsin', 'Naina Yeltsin', 'Naina Yeltsin']
response in server.py code:
 [(86, 13, 'Boris_Yeltsin'), (480, 13, 'Boris_Yeltsin'), (50, 6, 'Moscow'), (593, 13, 'Boris_Yeltsin'), (574, 7, 'Boris_Yeltsin'), (314, 7, 'Boris_Yeltsin'), (224, 13, 'Boris_Yeltsin'), (735, 7, 'Boris_Yeltsin'), (0, 7, 'Boris_Yeltsin'), (410, 7, 'Boris_Yeltsin'), (367, 7, 'Russia'), (154, 8, 'Interfax'), (40, 8, 'Interfax'), (624, 6, 'Moscow'), (68, 7, 'Russia'), (192, 20, 'Sergey_Yastrzhembsky'), (1032, 6, 'Moscow'), (938, 7, 'Boris_Yeltsin'), (284, 7, 'Russia'), (439, 6, 'Moscow'), (1004, 8, 'Barvikha'), (553, 13, 'Sergey_Yastrzhembsky'), (633, 25, 'Central_Clinical_Hospital'), (1143, 6, 'Moscow'), (919, 13, 'Sergey_Yastrzhembsky'), (20, 5, 'Naina_Yeltsina'), (117, 5, 'Naina_Yeltsina')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(3, 5, 'Italy'), (106, 10, 'University'), (39, 10, 'University'), (13, 6, 'Rector_(academia)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(26, 5, 'Pepsi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Hulse']
response in server.py code:
 [(18, 13, 'New_York_City'), (82, 12, 'Cooper_Union'), (112, 35, 'University_of_Massachusetts_Amherst'), (45, 28, 'The_Bronx_High_School_of_Science'), (0, 5, 'Rob_Hulse')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Scherer', 'Scherer', 'Scherer']
response in server.py code:
 [(414, 7, 'Georgia_(U.S._state)'), (1166, 7, 'Georgia_(U.S._state)'), (1612, 13, 'Georgia_Power'), (1209, 13, 'Georgia_Power'), (713, 13, 'Georgia_Power'), (1240, 12, 'Vogtle_Electric_Generating_Plant'), (992, 13, 'Georgia_Power'), (26, 33, 'Georgia_Public_Service_Commission'), (1025, 7, 'Fernando_Scherer'), (1574, 7, 'Fernando_Scherer'), (1106, 7, 'Fernando_Scherer')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Brooke Shields']
response in server.py code:
 [(35, 5, 'Defamation'), (85, 14, 'Brooke_Shields'), (339, 18, 'The_Mail_on_Sunday'), (615, 25, 'DMG_Media'), (44, 7, 'Damages'), (782, 10, 'Retraction'), (311, 20, 'Cannes_Film_Festival'), (515, 12, "Nice_Côte_d'Azur_Airport"), (1084, 15, 'Substance_abuse'), (545, 13, 'National_Police_(France)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(23, 20, 'Equity_International')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(89, 6, 'Denver'), (106, 6, 'Aurora,_Illinois')]
given spans fix. original text:  INTERVIEW-ZYWIEC SEES NO BIG 97 NET RISE. Steven Silber WARSAW 1996-12-06 Polish brewer Zywiec's 1996 profit slump may last into next year due in part to hefty depreciation charges, but recent high investment should help the firm defend its 10-percent market share, the firm's chief executive said. Company President Jean van Boxmeer told Reuters in an interview on Friday that the firm, whose net profit fell 77 percent in the first 10 months of 1996 despite a 30-percent rise in sales, might only post slightly better profits in 1997 before having a chance to make a more significant turnaround. So far this year Zywiec, whose full name is Zaklady Piwowarskie w Zywcu SA, has netted six million zlotys on sales of 224 million zlotys. It has produced 1.5 million hectolitres. Van Boxmeer would not say how much higher 1997 profits or market share could be but said sales of leading Polish brewers should rise as the country's young urban professionals gradually switch from vodka to beer. "The perspective on growth is such that reasonably we can think that somewhere between 65 and 80 litres per year is certainly reachable," van Boxmeer said on Polish per-capita beer consumption, currently around 40 litres. He said the 65-80-litre level could be reached in the next ten years and make Poland, with its 40-million population, Europe's third largest beer market after Germany and Britain. Van Boxmeer said Poland's top five brewers, which produce about 55 percent of the country's beer, could all raise market share as some of the numerous small brewers fall to competition from the large brewers with foreign investors. Zywiec is 31.8-percent owned by Heineken while Carlsberg has the same amount in Okocim. Earlier this year South African Breweries Ltd (SAB) bought strategic stakes in the unlisted Lech and Tychy brewers, which together hold more than 20 percent of the market, and Australia's Brewpole BV has a controlling stake in Poland's larges t brewery, Elbrewery Company Ltd. (EB). Van Boxmeer said the tough competition had prevented Zywiec from raising prices in line with inflation, which had added to the pressure on the firm's margins. He said advertising costs would also increase in the fight for market share. But he said the company's investment of more than $ 100 million already this decade, largely in production, would help position it to compete with such competitors as brewers from the neighbouring Czech Republic. Some analysts say cheaper but high-quality Czech imports could invade Poland once tariffs for CEFTA countries are lifted in 1998, but van Boxmeer says such a threat might be exaggerated despite the Czech beer market's overcapacity. "I think Polish consumers in general are quite proud of their beers-- and I'm speaking about all the brands-- and as we make good beers... I think that this fidelity to our beers is a factor which can limit the Czech beers," he said. Van Boxmeer said Zywiec had its eye on Okocim, which has said it would start producing Carlsberg beer next year, but that Zywiec's potential production of Heineken was a medium-term possibility rather than a short-term one. He said his firm would be better off concentrating on its leading brand, Zywiec Full Light, which accounts for 85 percent of sales and is the country's largest-selling brand. "You will not win the war of the Polish beer market with imported international brands," van Boxmeer said, adding that Heineken would remain an up-market import in Poland. Van Boxmeer also said Zywiec would be boosted by its recent shedding of soft drinks which only accounted for about three percent of the firm's overall sales and for which 7.6 million zlotys in provisions had already been made.-- Warsaw Newsroom+48 22 653 9700
original word:  Newsroom+48 Newsroom+48
new split:  Newsroom  and  +48
[(0, 16), (17, 21), (22, 24), (25, 28), (29, 31), (32, 35), (36, 40), (40, 41), (42, 48), (49, 55), (56, 62), (63, 73), (74, 80), (81, 87), (88, 94), (94, 96), (97, 101), (102, 108), (109, 114), (115, 118), (119, 123), (124, 128), (129, 133), (134, 138), (139, 142), (143, 145), (146, 150), (151, 153), (154, 159), (160, 172), (173, 180), (180, 181), (182, 185), (186, 192), (193, 197), (198, 208), (209, 215), (216, 220), (221, 224), (225, 229), (230, 236), (237, 240), (241, 251), (252, 258), (259, 264), (264, 265), (266, 269), (270, 274), (274, 276), (277, 282), (283, 292), (293, 297), (297, 298), (299, 306), (307, 316), (317, 321), (322, 325), (326, 333), (334, 338), (339, 346), (347, 349), (350, 352), (353, 362), (363, 365), (366, 372), (373, 377), (378, 381), (382, 386), (386, 387), (388, 393), (394, 397), (398, 404), (405, 409), (410, 412), (413, 420), (421, 423), (424, 427), (428, 433), (434, 436), (437, 443), (444, 446), (447, 451), (452, 459), (460, 461), (462, 472), (473, 477), (478, 480), (481, 486), (486, 487), (488, 493), (494, 498), (499, 503), (504, 512), (513, 519), (520, 527), (528, 530), (531, 535), (536, 542), (543, 549), (550, 551), (552, 558), (559, 561), (562, 566), (567, 568), (569, 573), (574, 585), (586, 596), (596, 597), (598, 600), (601, 604), (605, 609), (610, 614), (615, 621), (621, 622), (623, 628), (629, 633), (634, 638), (639, 641), (642, 649), (650, 661), (662, 663), (664, 669), (670, 672), (672, 673), (674, 677), (678, 684), (685, 688), (689, 696), (697, 703), (704, 706), (707, 712), (713, 715), (716, 719), (720, 727), (728, 734), (734, 735), (736, 738), (739, 742), (743, 751), (752, 755), (756, 763), (764, 775), (775, 776), (777, 780), (781, 788), (789, 794), (795, 798), (799, 802), (803, 806), (807, 811), (812, 818), (819, 823), (824, 831), (832, 834), (835, 841), (842, 847), (848, 853), (854, 856), (857, 860), (861, 865), (866, 871), (872, 874), (875, 882), (883, 889), (890, 897), (898, 904), (905, 909), (910, 912), (913, 916), (917, 924), (924, 926), (927, 932), (933, 938), (939, 952), (953, 962), (963, 969), (970, 974), (975, 980), (981, 983), (984, 988), (988, 989), (990, 991), (991, 994), (995, 1006), (1007, 1009), (1010, 1016), (1017, 1019), (1020, 1024), (1025, 1029), (1030, 1040), (1041, 1043), (1044, 1047), (1048, 1053), (1054, 1058), (1059, 1068), (1069, 1076), (1077, 1079), (1080, 1083), (1084, 1086), (1087, 1093), (1094, 1097), (1098, 1102), (1103, 1105), (1106, 1115), (1116, 1125), (1125, 1126), (1126, 1127), (1128, 1131), (1132, 1139), (1140, 1144), (1145, 1147), (1148, 1154), (1155, 1165), (1166, 1170), (1171, 1182), (1182, 1183), (1184, 1193), (1194, 1200), (1201, 1203), (1204, 1210), (1210, 1211), (1212, 1214), (1215, 1219), (1220, 1223), (1224, 1235), (1236, 1241), (1242, 1247), (1248, 1250), (1251, 1258), (1259, 1261), (1262, 1265), (1266, 1270), (1271, 1274), (1275, 1280), (1281, 1284), (1285, 1289), (1290, 1296), (1296, 1297), (1298, 1302), (1303, 1306), (1307, 1317), (1318, 1328), (1328, 1329), (1330, 1336), (1336, 1338), (1339, 1344), (1345, 1352), (1353, 1357), (1358, 1364), (1365, 1370), (1371, 1378), (1379, 1382), (1383, 1390), (1390, 1391), (1392, 1395), (1396, 1403), (1404, 1408), (1409, 1415), (1415, 1417), (1418, 1421), (1422, 1426), (1427, 1434), (1434, 1435), (1436, 1441), (1442, 1449), (1450, 1455), (1456, 1458), (1459, 1466), (1467, 1469), (1470, 1473), (1474, 1481), (1481, 1483), (1484, 1488), (1488, 1489), (1490, 1495), (1496, 1499), (1500, 1505), (1506, 1512), (1513, 1518), (1519, 1521), (1522, 1526), (1527, 1529), (1530, 1533), (1534, 1542), (1543, 1548), (1549, 1556), (1557, 1561), (1562, 1564), (1565, 1576), (1577, 1581), (1582, 1585), (1586, 1591), (1592, 1599), (1600, 1604), (1605, 1612), (1613, 1622), (1622, 1623), (1624, 1630), (1631, 1633), (1634, 1646), (1647, 1652), (1653, 1655), (1656, 1664), (1665, 1670), (1671, 1680), (1681, 1684), (1685, 1688), (1689, 1693), (1694, 1700), (1701, 1703), (1704, 1710), (1710, 1711), (1712, 1719), (1720, 1724), (1725, 1729), (1730, 1735), (1736, 1743), (1744, 1753), (1754, 1757), (1758, 1759), (1759, 1762), (1762, 1763), (1764, 1770), (1771, 1780), (1781, 1787), (1788, 1790), (1791, 1794), (1795, 1803), (1804, 1808), (1809, 1812), (1813, 1818), (1819, 1826), (1826, 1827), (1828, 1833), (1834, 1842), (1843, 1847), (1848, 1852), (1853, 1857), (1858, 1860), (1861, 1868), (1869, 1871), (1872, 1875), (1876, 1882), (1882, 1883), (1884, 1887), (1888, 1897), (1897, 1899), (1900, 1908), (1909, 1911), (1912, 1915), (1916, 1917), (1918, 1929), (1930, 1935), (1936, 1938), (1939, 1945), (1945, 1947), (1948, 1954), (1955, 1956), (1957, 1964), (1964, 1965), (1966, 1975), (1976, 1983), (1984, 1988), (1989, 1990), (1990, 1992), (1992, 1993), (1993, 1994), (1995, 1998), (1999, 2006), (2007, 2011), (2012, 2015), (2016, 2021), (2022, 2033), (2034, 2037), (2038, 2047), (2048, 2054), (2055, 2059), (2060, 2067), (2068, 2074), (2075, 2077), (2078, 2082), (2083, 2087), (2088, 2097), (2097, 2098), (2099, 2104), (2105, 2108), (2109, 2114), (2115, 2117), (2118, 2121), (2122, 2130), (2131, 2133), (2134, 2137), (2138, 2142), (2142, 2144), (2145, 2152), (2152, 2153), (2154, 2156), (2157, 2161), (2162, 2173), (2174, 2179), (2180, 2185), (2186, 2190), (2191, 2199), (2200, 2202), (2203, 2206), (2207, 2212), (2213, 2216), (2217, 2223), (2224, 2229), (2229, 2230), (2231, 2234), (2235, 2237), (2238, 2242), (2243, 2246), (2247, 2254), (2254, 2256), (2257, 2267), (2268, 2270), (2271, 2275), (2276, 2280), (2281, 2282), (2283, 2286), (2287, 2294), (2295, 2302), (2303, 2307), (2308, 2314), (2314, 2315), (2316, 2323), (2324, 2326), (2327, 2337), (2337, 2338), (2339, 2344), (2345, 2349), (2350, 2358), (2359, 2361), (2362, 2364), (2365, 2372), (2373, 2377), (2378, 2382), (2383, 2394), (2395, 2397), (2398, 2405), (2406, 2410), (2411, 2414), (2415, 2427), (2428, 2433), (2434, 2442), (2442, 2443), (2444, 2448), (2449, 2457), (2458, 2461), (2462, 2469), (2470, 2473), (2474, 2486), (2487, 2492), (2493, 2500), (2501, 2506), (2507, 2513), (2514, 2520), (2521, 2525), (2526, 2533), (2534, 2537), (2538, 2543), (2544, 2553), (2554, 2557), (2558, 2564), (2565, 2567), (2568, 2572), (2572, 2573), (2574, 2577), (2578, 2581), (2582, 2589), (2590, 2594), (2595, 2599), (2600, 2601), (2602, 2608), (2609, 2614), (2615, 2617), (2618, 2629), (2630, 2637), (2638, 2641), (2642, 2647), (2648, 2652), (2653, 2659), (2659, 2661), (2662, 2674), (2674, 2675), (2676, 2677), (2677, 2678), (2679, 2684), (2685, 2691), (2692, 2701), (2702, 2704), (2705, 2712), (2713, 2716), (2717, 2722), (2723, 2728), (2729, 2731), (2732, 2737), (2738, 2743), (2743, 2745), (2746, 2749), (2750, 2751), (2751, 2753), (2754, 2762), (2763, 2768), (2769, 2772), (2773, 2776), (2777, 2783), (2783, 2785), (2786, 2789), (2790, 2792), (2793, 2795), (2796, 2800), (2801, 2805), (2806, 2811), (2811, 2814), (2815, 2816), (2817, 2822), (2823, 2827), (2828, 2832), (2833, 2841), (2842, 2844), (2845, 2848), (2849, 2854), (2855, 2857), (2858, 2859), (2860, 2866), (2867, 2872), (2873, 2876), (2877, 2882), (2883, 2886), (2887, 2892), (2893, 2898), (2898, 2899), (2899, 2900), (2901, 2903), (2904, 2908), (2908, 2909), (2910, 2913), (2914, 2921), (2922, 2926), (2927, 2933), (2934, 2937), (2938, 2941), (2942, 2945), (2946, 2948), (2949, 2955), (2955, 2956), (2957, 2962), (2963, 2966), (2967, 2971), (2972, 2974), (2975, 2980), (2981, 2986), (2987, 2996), (2997, 3006), (3007, 3011), (3012, 3016), (3017, 3021), (3021, 3022), (3023, 3026), (3027, 3031), (3032, 3038), (3038, 3040), (3041, 3050), (3051, 3061), (3062, 3064), (3065, 3073), (3074, 3077), (3078, 3079), (3080, 3091), (3092, 3103), (3104, 3110), (3111, 3115), (3116, 3117), (3118, 3128), (3129, 3132), (3132, 3133), (3134, 3136), (3137, 3141), (3142, 3145), (3146, 3150), (3151, 3156), (3157, 3159), (3160, 3166), (3167, 3170), (3171, 3184), (3185, 3187), (3188, 3191), (3192, 3199), (3200, 3205), (3205, 3206), (3207, 3213), (3214, 3218), (3219, 3224), (3224, 3225), (3226, 3231), (3232, 3240), (3241, 3244), (3245, 3247), (3248, 3255), (3256, 3258), (3259, 3264), (3265, 3268), (3269, 3271), (3272, 3275), (3276, 3283), (3283, 3285), (3286, 3301), (3302, 3307), (3307, 3308), (3309, 3310), (3310, 3313), (3314, 3318), (3319, 3322), (3323, 3326), (3327, 3330), (3331, 3334), (3335, 3337), (3338, 3341), (3342, 3348), (3349, 3353), (3354, 3360), (3361, 3365), (3366, 3374), (3375, 3388), (3389, 3395), (3395, 3396), (3396, 3397), (3398, 3401), (3402, 3409), (3410, 3414), (3414, 3415), (3416, 3422), (3423, 3427), (3428, 3436), (3437, 3442), (3443, 3449), (3450, 3452), (3453, 3462), (3463, 3469), (3470, 3472), (3473, 3479), (3479, 3480), (3481, 3484), (3485, 3492), (3493, 3497), (3498, 3502), (3503, 3509), (3510, 3515), (3516, 3518), (3519, 3526), (3527, 3529), (3530, 3533), (3534, 3540), (3541, 3549), (3550, 3552), (3553, 3557), (3558, 3564), (3565, 3570), (3571, 3575), (3576, 3585), (3586, 3589), (3590, 3595), (3596, 3601), (3602, 3609), (3610, 3612), (3613, 3616), (3617, 3621), (3621, 3623), (3624, 3631), (3632, 3637), (3638, 3641), (3642, 3645), (3646, 3651), (3652, 3655), (3656, 3663), (3664, 3670), (3671, 3673), (3674, 3684), (3685, 3688), (3689, 3696), (3697, 3701), (3702, 3707), (3707, 3709), (3710, 3716), (3717, 3725), (3725, 3728)]
{0: 0, 2048: 375, 2055: 376, 2060: 377, 17: 1, 2068: 378, 22: 2, 25: 3, 2075: 379, 29: 4, 2078: 380, 32: 5, 2083: 381, 36: 6, 3078: 570, 40: 7, 42: 8, 49: 9, 2099: 384, 350: 61, 56: 10, 2105: 385, 2109: 386, 63: 11, 2115: 387, 2118: 388, 74: 12, 81: 13, 2131: 390, 2134: 391, 697: 128, 88: 14, 2138: 392, 94: 15, 97: 16, 102: 17, 2152: 395, 2154: 396, 109: 18, 2162: 398, 115: 19, 119: 20, 3092: 572, 124: 21, 819: 151, 129: 22, 363: 63, 2180: 400, 134: 23, 2186: 401, 139: 24, 143: 25, 146: 26, 151: 27, 2200: 403, 154: 28, 2203: 404, 2207: 405, 160: 29, 2213: 406, 2217: 407, 173: 30, 2224: 408, 180: 31, 2229: 409, 182: 32, 2231: 410, 186: 33, 2235: 411, 2238: 412, 193: 34, 2243: 413, 198: 35, 2247: 414, 2254: 415, 209: 36, 216: 37, 2268: 417, 221: 38, 2271: 418, 225: 39, 2276: 419, 230: 40, 2281: 420, 2283: 421, 237: 41, 2287: 422, 2088: 382, 2295: 423, 252: 43, 2303: 424, 259: 44, 2308: 425, 264: 45, 2314: 426, 2316: 427, 386: 68, 270: 47, 274: 48, 2324: 428, 277: 49, 2327: 429, 283: 50, 2337: 430, 2339: 431, 293: 51, 2097: 383, 297: 52, 299: 53, 2350: 433, 307: 54, 2359: 434, 2362: 435, 317: 55, 322: 56, 2373: 437, 326: 57, 2378: 438, 334: 58, 2383: 439, 339: 59, 3470: 642, 2395: 440, 2398: 441, 353: 62, 2406: 442, 3132: 578, 2411: 443, 366: 64, 2415: 444, 373: 65, 378: 66, 2428: 445, 382: 67, 2434: 446, 388: 69, 2442: 447, 2444: 448, 398: 71, 2449: 449, 405: 72, 2458: 450, 410: 73, 2462: 451, 3142: 581, 2470: 452, 424: 76, 2474: 453, 428: 77, 413: 74, 434: 78, 437: 79, 2487: 454, 444: 80, 2122: 389, 447: 81, 452: 82, 2501: 456, 2507: 457, 460: 83, 462: 84, 2514: 458, 473: 85, 3151: 583, 478: 86, 421: 75, 481: 87, 486: 88, 488: 89, 2538: 462, 494: 90, 2544: 463, 499: 91, 504: 92, 835: 154, 1450: 265, 2558: 465, 513: 93, 2565: 466, 520: 94, 2572: 468, 2574: 469, 528: 95, 2578: 470, 531: 96, 2582: 471, 536: 97, 2590: 472, 543: 98, 2595: 473, 550: 99, 2600: 474, 2602: 475, 775: 142, 559: 101, 2609: 476, 562: 102, 2142: 393, 2615: 477, 569: 104, 2618: 478, 574: 105, 2630: 479, 2145: 394, 586: 106, 2638: 480, 2642: 481, 596: 107, 598: 108, 2648: 482, 601: 109, 605: 110, 610: 111, 2659: 484, 2662: 485, 615: 112, 621: 113, 2493: 455, 2674: 486, 2676: 487, 2677: 488, 2679: 489, 634: 116, 2685: 490, 639: 117, 642: 118, 2692: 491, 650: 119, 2702: 492, 2157: 397, 2705: 493, 662: 120, 664: 121, 2713: 494, 2717: 495, 670: 122, 672: 123, 674: 124, 2723: 496, 678: 125, 2729: 497, 2732: 498, 685: 126, 689: 127, 2738: 499, 2743: 500, 3188: 589, 2746: 501, 2750: 502, 2751: 503, 704: 129, 2754: 504, 707: 130, 713: 131, 2763: 505, 716: 132, 720: 133, 2769: 506, 2773: 507, 728: 134, 2777: 508, 734: 135, 2783: 509, 736: 136, 2786: 510, 739: 137, 2790: 511, 743: 138, 2793: 512, 807: 149, 2796: 513, 752: 139, 2801: 514, 756: 140, 2174: 399, 2806: 515, 2811: 516, 764: 141, 2815: 517, 2817: 518, 2823: 519, 777: 143, 2828: 520, 781: 144, 2833: 521, 789: 145, 2521: 459, 2842: 522, 795: 146, 2845: 523, 799: 147, 2849: 524, 803: 148, 2855: 525, 2858: 526, 812: 150, 2867: 528, 2526: 460, 824: 152, 2873: 529, 2877: 530, 832: 153, 2883: 531, 2887: 532, 842: 155, 2893: 533, 848: 156, 2898: 534, 2899: 535, 3214: 594, 854: 157, 2904: 537, 857: 158, 2191: 402, 2908: 538, 861: 159, 2910: 539, 2914: 540, 2534: 461, 872: 161, 2922: 541, 875: 162, 2927: 542, 3219: 595, 984: 179, 2934: 543, 2938: 544, 2942: 545, 2946: 546, 2949: 547, 905: 166, 2955: 548, 2957: 549, 910: 167, 913: 168, 2963: 550, 917: 169, 2967: 551, 924: 170, 2975: 553, 347: 60, 2981: 554, 2987: 555, 2997: 556, 953: 174, 3007: 557, 1184: 216, 963: 175, 3012: 558, 3017: 559, 970: 176, 3021: 560, 3023: 561, 3027: 562, 981: 178, 3032: 563, 988: 180, 2554: 464, 3038: 564, 991: 182, 3041: 565, 995: 183, 3051: 566, 1007: 184, 1010: 185, 3062: 567, 3065: 568, 1020: 187, 2901: 536, 1025: 188, 3074: 569, 1030: 189, 3080: 571, 1041: 190, 1044: 191, 1048: 192, 1054: 193, 3104: 573, 1059: 194, 3111: 574, 3116: 575, 1069: 195, 3118: 576, 2568: 467, 1077: 196, 1080: 197, 3129: 577, 1084: 198, 3134: 579, 1087: 199, 3137: 580, 1094: 200, 1098: 201, 866: 160, 1103: 202, 1106: 203, 3157: 584, 3160: 585, 1116: 204, 3167: 586, 3171: 587, 1125: 205, 1126: 206, 1128: 207, 1132: 208, 3185: 588, 1140: 209, 3192: 590, 1145: 210, 1148: 211, 3200: 591, 1155: 212, 3205: 592, 3207: 593, 1166: 213, 1171: 214, 3224: 596, 3226: 597, 1562: 287, 1182: 215, 3232: 598, 3241: 599, 1194: 217, 3245: 600, 3613: 668, 3248: 601, 1201: 218, 883: 163, 1204: 219, 3256: 602, 1210: 220, 3259: 603, 1212: 221, 1215: 222, 3265: 604, 1220: 223, 3269: 605, 3272: 606, 3276: 607, 3283: 608, 1236: 225, 3286: 609, 1242: 226, 890: 164, 1248: 227, 1251: 228, 3302: 610, 2257: 416, 1259: 229, 3309: 612, 1262: 230, 552: 100, 1266: 231, 1271: 232, 1275: 233, 3327: 617, 1281: 234, 3331: 618, 1285: 235, 3335: 619, 1290: 236, 898: 165, 3342: 621, 1296: 237, 1298: 238, 3349: 622, 1303: 239, 3354: 623, 1307: 240, 3361: 624, 1318: 241, 3375: 626, 1328: 242, 1330: 243, 1336: 244, 1339: 245, 3389: 627, 1345: 246, 3395: 628, 3396: 629, 3398: 630, 1353: 247, 3402: 631, 567: 103, 1358: 248, 3410: 632, 1365: 249, 3414: 633, 3416: 634, 1371: 250, 3423: 635, 1379: 251, 3428: 636, 1383: 252, 3146: 582, 3437: 637, 1390: 253, 1392: 254, 3443: 638, 1396: 255, 3646: 675, 3450: 639, 1404: 256, 3453: 640, 1409: 257, 3307: 611, 1415: 258, 1418: 259, 1422: 260, 3473: 643, 1427: 261, 3310: 613, 3479: 644, 3481: 645, 1434: 262, 1436: 263, 3485: 646, 1442: 264, 3493: 647, 241: 42, 1948: 356, 3498: 648, 3314: 614, 3503: 649, 1456: 266, 1459: 267, 3510: 650, 1467: 268, 3516: 651, 1470: 269, 3519: 652, 1474: 270, 3527: 653, 1481: 271, 3530: 654, 3319: 615, 1484: 272, 3534: 655, 1488: 273, 1490: 274, 3541: 656, 1496: 275, 1500: 276, 3550: 657, 933: 172, 3553: 658, 1506: 277, 3323: 616, 3558: 659, 1513: 278, 3565: 660, 1519: 279, 1522: 280, 3571: 661, 1527: 281, 3576: 662, 1530: 282, 1534: 283, 3586: 663, 939: 173, 3590: 664, 1543: 284, 3596: 665, 1549: 285, 3602: 666, 1557: 286, 3610: 667, 1565: 288, 3617: 669, 3621: 670, 3624: 671, 1577: 289, 1582: 290, 2653: 483, 3632: 672, 1586: 291, 3638: 673, 1592: 292, 3642: 674, 266: 46, 394: 70, 1600: 293, 3652: 676, 1605: 294, 3656: 677, 1613: 295, 3664: 678, 1622: 296, 3671: 679, 1624: 297, 3674: 680, 1631: 298, 1634: 299, 3685: 681, 3689: 682, 1647: 300, 3697: 683, 1653: 301, 3702: 684, 1656: 302, 3707: 685, 3710: 686, 1665: 303, 3717: 687, 1671: 304, 3725: 688, 1681: 305, 1685: 306, 1689: 307, 623: 114, 1694: 308, 1701: 309, 1704: 310, 1710: 311, 1712: 312, 1720: 313, 1725: 314, 629: 115, 1730: 315, 1736: 316, 1744: 317, 1754: 318, 975: 177, 1758: 319, 1759: 320, 1762: 321, 1764: 322, 3366: 625, 1771: 323, 1781: 324, 2345: 432, 1788: 325, 1791: 326, 1795: 327, 1804: 328, 1809: 329, 1813: 330, 1819: 331, 1826: 332, 1828: 333, 1834: 334, 1843: 335, 990: 181, 1848: 336, 1853: 337, 1858: 338, 1861: 339, 1869: 340, 1872: 341, 1017: 186, 1876: 342, 2972: 552, 3463: 641, 1882: 343, 1884: 344, 1888: 345, 1897: 346, 1900: 347, 2365: 436, 1909: 348, 1912: 349, 1916: 350, 1918: 351, 2860: 527, 1930: 352, 1936: 353, 1939: 354, 1945: 355, 3338: 620, 1224: 224, 1955: 357, 1957: 358, 1964: 359, 1966: 360, 1976: 361, 1984: 362, 1989: 363, 1990: 364, 1992: 365, 1993: 366, 1995: 367, 1999: 368, 927: 171, 2007: 369, 2012: 370, 2016: 371, 2022: 372, 2034: 373, 2038: 374}
{2054: 375, 2059: 376, 16: 0, 2067: 377, 21: 1, 24: 2, 2074: 378, 28: 3, 346: 59, 31: 4, 2082: 380, 35: 5, 2087: 381, 40: 6, 41: 7, 349: 60, 48: 8, 2097: 382, 2098: 383, 55: 9, 2104: 384, 2108: 385, 62: 10, 2114: 386, 2117: 387, 73: 11, 80: 12, 2130: 389, 2133: 390, 87: 13, 2137: 391, 94: 14, 96: 15, 101: 16, 2152: 394, 2153: 395, 108: 17, 2161: 397, 114: 18, 3091: 571, 118: 19, 123: 20, 2173: 398, 128: 21, 2179: 399, 133: 22, 2185: 400, 138: 23, 142: 24, 145: 25, 150: 26, 2199: 402, 153: 27, 2202: 403, 2206: 404, 159: 28, 2212: 405, 2216: 406, 172: 29, 2223: 407, 180: 30, 2229: 408, 2230: 409, 185: 32, 2234: 410, 2237: 411, 192: 33, 2242: 412, 197: 34, 2246: 413, 2254: 414, 208: 35, 215: 36, 2267: 416, 220: 37, 2270: 417, 224: 38, 2275: 418, 229: 39, 2280: 419, 2282: 420, 236: 40, 2286: 421, 240: 41, 2294: 422, 251: 42, 3077: 569, 2302: 423, 258: 43, 2307: 424, 264: 44, 265: 45, 2314: 425, 2315: 426, 269: 46, 274: 47, 2323: 427, 276: 48, 2326: 428, 282: 49, 2337: 429, 2338: 430, 292: 50, 2344: 431, 297: 51, 298: 52, 2349: 432, 306: 53, 2358: 433, 2361: 434, 735: 135, 316: 54, 321: 55, 2372: 436, 325: 56, 2377: 437, 333: 57, 2382: 438, 3469: 641, 338: 58, 2394: 439, 2397: 440, 352: 61, 2405: 441, 362: 62, 365: 63, 2414: 443, 372: 64, 377: 65, 2427: 444, 381: 66, 2433: 445, 386: 67, 387: 68, 393: 69, 2442: 446, 2443: 447, 397: 70, 2448: 448, 404: 71, 409: 72, 2457: 449, 412: 73, 2461: 450, 3141: 580, 420: 74, 2469: 451, 423: 75, 2473: 452, 427: 76, 433: 77, 436: 78, 2486: 453, 2121: 388, 443: 79, 2492: 454, 446: 80, 451: 81, 2500: 455, 2506: 456, 459: 82, 461: 83, 2513: 457, 3150: 582, 472: 84, 477: 85, 480: 86, 763: 140, 2533: 460, 486: 87, 487: 88, 2537: 461, 493: 89, 2543: 462, 498: 90, 1449: 264, 2553: 463, 2557: 464, 512: 92, 2564: 465, 2567: 466, 2572: 467, 2573: 468, 527: 94, 2577: 469, 530: 95, 2581: 470, 535: 96, 2589: 471, 542: 97, 2594: 472, 549: 98, 2599: 473, 2601: 474, 558: 100, 2608: 475, 561: 101, 2142: 392, 566: 102, 568: 103, 2617: 477, 573: 104, 3509: 649, 2144: 393, 2629: 478, 585: 105, 2637: 479, 2641: 480, 596: 106, 597: 107, 2647: 481, 600: 108, 604: 109, 609: 110, 2659: 483, 2661: 484, 614: 111, 621: 112, 622: 113, 2674: 485, 2675: 486, 628: 114, 2677: 487, 2678: 488, 633: 115, 2684: 489, 703: 128, 638: 116, 641: 117, 2691: 490, 2156: 396, 2701: 491, 2704: 492, 661: 119, 663: 120, 2712: 493, 2716: 494, 669: 121, 672: 122, 673: 123, 2722: 495, 677: 124, 2728: 496, 2731: 497, 684: 125, 688: 126, 2737: 498, 3187: 588, 2743: 499, 696: 127, 2745: 500, 2749: 501, 2751: 502, 2753: 503, 706: 129, 3365: 624, 712: 130, 2762: 504, 715: 131, 719: 132, 2768: 505, 2772: 506, 727: 133, 2776: 507, 734: 134, 2783: 508, 2785: 509, 738: 136, 2789: 510, 742: 137, 2792: 511, 2795: 512, 751: 138, 2800: 513, 755: 139, 2805: 514, 2811: 515, 2814: 516, 2816: 517, 811: 149, 2822: 518, 775: 141, 776: 142, 2827: 519, 780: 143, 2832: 520, 2520: 458, 788: 144, 2841: 521, 794: 145, 2844: 522, 798: 146, 2848: 523, 802: 147, 2854: 524, 2857: 525, 2859: 526, 818: 150, 2525: 459, 2866: 527, 823: 151, 2872: 528, 2876: 529, 831: 152, 2882: 530, 2886: 531, 841: 154, 1847: 335, 2892: 532, 3213: 593, 2898: 533, 2899: 534, 2900: 535, 2190: 401, 983: 178, 2903: 536, 856: 157, 2908: 537, 2909: 538, 2913: 539, 871: 160, 2921: 540, 874: 161, 3218: 594, 2926: 541, 882: 162, 2933: 542, 2937: 543, 2941: 544, 2945: 545, 2948: 546, 904: 165, 2955: 547, 2956: 548, 834: 153, 1097: 200, 2962: 549, 916: 168, 2966: 550, 2971: 551, 924: 169, 2974: 552, 2980: 553, 2986: 554, 2077: 379, 2996: 555, 952: 173, 1183: 215, 3006: 556, 962: 174, 3011: 557, 3016: 558, 969: 175, 503: 91, 3021: 559, 3022: 560, 3026: 561, 980: 177, 3031: 562, 847: 155, 988: 179, 989: 180, 3038: 563, 991: 181, 3040: 564, 994: 182, 3050: 565, 1006: 183, 1009: 184, 3061: 566, 3064: 567, 1019: 186, 853: 156, 1024: 187, 3073: 568, 1029: 188, 3079: 570, 1040: 189, 1043: 190, 1047: 191, 1053: 192, 3103: 572, 1058: 193, 3110: 573, 860: 158, 3115: 574, 1068: 194, 3117: 575, 1076: 195, 1079: 196, 3128: 576, 1083: 197, 3132: 577, 3133: 578, 1086: 198, 181: 31, 3136: 579, 1093: 199, 865: 159, 3145: 581, 1102: 201, 1105: 202, 3156: 583, 3159: 584, 1115: 203, 3258: 602, 3166: 585, 3170: 586, 1125: 204, 1126: 205, 1127: 206, 1131: 207, 3184: 587, 1139: 208, 3191: 589, 1144: 209, 1147: 210, 3199: 590, 1154: 211, 3205: 591, 3206: 592, 1165: 212, 1170: 213, 3609: 666, 3224: 595, 3225: 596, 1182: 214, 3231: 597, 3240: 598, 1193: 216, 1223: 223, 3244: 599, 3247: 600, 1200: 217, 1203: 218, 3255: 601, 1210: 219, 1211: 220, 1214: 221, 3264: 603, 1219: 222, 3268: 604, 3271: 605, 3275: 606, 1235: 224, 3285: 608, 889: 163, 1241: 225, 1247: 226, 2256: 415, 1250: 227, 3301: 609, 519: 93, 1258: 228, 551: 99, 3308: 611, 1261: 229, 3310: 612, 3313: 613, 3283: 607, 3318: 614, 1274: 232, 3326: 616, 1280: 233, 3330: 617, 1284: 234, 3334: 618, 897: 164, 1289: 235, 3341: 620, 1296: 236, 1297: 237, 3348: 621, 1302: 238, 3353: 622, 1306: 239, 3360: 623, 1317: 240, 3374: 625, 1328: 241, 1329: 242, 1336: 243, 1338: 244, 3388: 626, 1344: 245, 3395: 627, 3396: 628, 2614: 476, 1352: 246, 3401: 630, 1357: 247, 909: 166, 3409: 631, 1364: 248, 3414: 632, 3415: 633, 1370: 249, 3422: 634, 912: 167, 1378: 250, 3427: 635, 1382: 251, 3436: 636, 1390: 252, 1391: 253, 3442: 637, 1395: 254, 3449: 638, 1403: 255, 3452: 639, 1408: 256, 3307: 610, 3462: 640, 1415: 257, 1417: 258, 1421: 259, 3472: 642, 1426: 260, 3479: 643, 3480: 644, 1434: 261, 1435: 262, 3484: 645, 1441: 263, 3492: 646, 1265: 230, 3497: 647, 3502: 648, 1455: 265, 1458: 266, 2410: 442, 926: 170, 3322: 615, 1466: 267, 3515: 650, 1469: 268, 3518: 651, 1473: 269, 1270: 231, 3526: 652, 1481: 270, 1483: 271, 3533: 654, 1488: 272, 1489: 273, 3540: 655, 1495: 274, 932: 171, 1499: 275, 3549: 656, 3552: 657, 1505: 276, 3557: 658, 1512: 277, 3564: 659, 1518: 278, 1521: 279, 3570: 660, 1526: 280, 3575: 661, 1529: 281, 1533: 282, 3585: 662, 3529: 653, 3589: 663, 1542: 283, 3595: 664, 1548: 284, 938: 172, 3601: 665, 1556: 285, 1561: 286, 3612: 667, 3616: 668, 3621: 669, 3623: 670, 1576: 288, 2652: 482, 1581: 289, 3631: 671, 1585: 290, 3637: 672, 1591: 291, 3641: 673, 3645: 674, 1599: 292, 3651: 675, 1604: 293, 3655: 676, 1612: 294, 3663: 677, 1622: 295, 1623: 296, 3673: 679, 1630: 297, 1633: 298, 3684: 680, 3688: 681, 1646: 299, 3696: 682, 1652: 300, 3701: 683, 1655: 301, 3707: 684, 3709: 685, 1664: 302, 3716: 686, 1670: 303, 3670: 678, 3725: 687, 1897: 345, 1680: 304, 806: 148, 1684: 305, 1688: 306, 1693: 307, 1700: 308, 1703: 309, 1710: 310, 1711: 311, 1719: 312, 1724: 313, 1729: 314, 1735: 315, 1743: 316, 974: 176, 1753: 317, 1757: 318, 1759: 319, 1762: 320, 1763: 321, 1770: 322, 1780: 323, 1787: 324, 1790: 325, 1794: 326, 1803: 327, 1808: 328, 1812: 329, 1818: 330, 1826: 331, 1827: 332, 1833: 333, 1842: 334, 649: 118, 1852: 336, 1857: 337, 1860: 338, 1868: 339, 1871: 340, 1875: 341, 1882: 342, 1883: 343, 1887: 344, 3728: 688, 2364: 435, 1899: 346, 1908: 347, 1911: 348, 1915: 349, 3337: 619, 1917: 350, 1564: 287, 1929: 351, 1935: 352, 1938: 353, 1945: 354, 1947: 355, 3397: 629, 1954: 356, 1956: 357, 1964: 358, 1965: 359, 1975: 360, 1983: 361, 1988: 362, 1990: 363, 1992: 364, 1993: 365, 1994: 366, 1998: 367, 1016: 185, 2006: 368, 2011: 369, 2015: 370, 2021: 371, 2033: 372, 2037: 373, 2047: 374}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(339, 7, 'Reuters'), (3473, 6, 'Poland'), (2514, 6, 'Poland'), (1409, 6, 'Poland'), (1939, 6, 'Poland'), (2487, 5, 'Czech_Republic'), (1671, 9, 'Carlsberg_Group'), (1371, 7, 'Germany'), (1290, 6, 'Poland'), (1383, 7, 'United_Kingdom'), (2428, 14, 'Czech_Republic'), (2642, 5, 'Czech_Republic'), (2887, 5, 'Czech_Republic'), (3065, 8, 'Heineken'), (56, 6, 'Warsaw'), (1148, 6, 'Poland'), (1888, 9, 'Australia'), (883, 6, 'Poland'), (2997, 9, 'Carlsberg_Group'), (1656, 8, 'Heineken'), (1330, 6, 'Europe'), (2685, 6, 'Poland'), (1759, 3, 'South_African_Breweries'), (3342, 6, 'Poland'), (3428, 8, 'Heineken'), (3207, 6, 'Żywiec_Brewery'), (1704, 6, 'Okocim'), (1624, 6, 'Żywiec_Brewery'), (3032, 6, 'Żywiec_Brewery'), (2048, 6, 'Żywiec_Brewery'), (1813, 5, 'Tychy'), (615, 6, 'Żywiec_Brewery'), (2927, 6, 'Żywiec_Brewery'), (3503, 6, 'Żywiec_Brewery'), (74, 6, 'Poland'), (88, 6, 'Żywiec_Brewery'), (2949, 6, 'Okocim'), (2538, 5, 'Central_European_Free_Trade_Agreement'), (3402, 7, 'Boxmeer'), (2582, 7, 'Boxmeer'), (1132, 7, 'Boxmeer'), (1804, 4, 'Lech_(river)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(2, 5, 'Cairo'), (53, 5, 'Syria'), (9, 5, 'Egypt'), (500, 9, 'Jerusalem'), (317, 4, 'Iraq'), (474, 9, 'Palestinian_territories'), (485, 10, 'Gaza_Strip'), (16, 2, 'Associated_Press'), (110, 9, 'President')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(18, 3, 'Agence_France-Presse'), (106, 4, 'Iran'), (2, 9, 'Jerusalem'), (2212, 19, 'Ministry_of_Defense_(Israel)'), (877, 6, 'Moscow')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(78, 6, 'London'), (192, 6, 'School'), (148, 14, 'Grammar_school'), (87, 14, 'Emanuel_School')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Steve King']
response in server.py code:
 [(18, 10, 'Steve_King')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['her', 'Maria Goeppert']
response in server.py code:
 [(235, 9, 'San_Diego'), (109, 22, 'Sarah_Lawrence_College'), (174, 14, 'Professors_in_the_United_States'), (207, 24, 'University_of_California'), (145, 14, 'Maria_Goeppert-Mayer'), (41, 3, 'Elizabeth_II')]
response in server.py code:
 []
given spans fix. original text:  The RAF was a terrorist group led by Baader and Meinhof that killed Schleyer.﻿
original word:  Schleyer.﻿ Schleyer.﻿
new split:  Schleyer  and  .﻿
[(0, 3), (4, 7), (8, 11), (12, 13), (14, 23), (24, 29), (30, 33), (34, 36), (37, 43), (44, 47), (48, 55), (56, 60), (61, 67), (68, 76), (76, 78)]
{0: 0, 34: 7, 4: 1, 37: 8, 8: 2, 12: 3, 44: 9, 14: 4, 48: 10, 56: 11, 76: 14, 24: 5, 68: 13, 61: 12, 30: 6}
{33: 6, 3: 0, 36: 7, 7: 1, 43: 8, 76: 13, 13: 3, 78: 14, 47: 9, 11: 2, 67: 12, 23: 4, 55: 10, 60: 11, 29: 5}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Baader', 'Meinhof', 'Schleyer']
response in server.py code:
 [(48, 7, 'Ulrike_Meinhof'), (68, 8, 'Hanns_Martin_Schleyer'), (37, 6, 'Andreas_Baader'), (4, 3, 'Royal_Air_Force')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(17, 3, 'British_Motor_Corporation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['anthony', 'fiore']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Vaclav Havel']
response in server.py code:
 [(287, 5, 'Václav_Havel'), (736, 5, 'Václav_Havel'), (134, 12, 'Václav_Havel'), (1030, 5, 'Václav_Havel'), (933, 5, 'Václav_Havel'), (118, 5, 'Czech_Republic'), (49, 6, 'Prague'), (0, 5, 'Václav_Havel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lebed', 'Alexander Lebed', 'Aslan Maskhadov']
response in server.py code:
 [(47, 6, 'Russia'), (84, 15, 'Alexander_Lebed'), (250, 5, 'Alexander_Lebed'), (65, 7, 'Russia'), (271, 8, 'Chechnya'), (451, 5, 'Alexander_Lebed'), (139, 15, 'Aslan_Maskhadov'), (0, 5, 'Alexander_Lebed'), (104, 7, 'Chechnya'), (461, 9, 'Aslan_Maskhadov'), (35, 10, 'Khasavyurt'), (7, 8, 'Chechnya')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Berners-Lee']
response in server.py code:
 [(93, 6, 'Geneva'), (0, 11, 'Tim_Berners-Lee'), (51, 4, 'CERN'), (25, 22, 'Independent_contractor'), (211, 11, 'Research')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(15, 13, 'United_States'), (37, 3, 'Agence_France-Presse'), (66, 7, 'Florida'), (2, 11, 'Tallahassee,_Florida')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(41, 6, 'ITunes_Store'), (0, 12, 'Google_Play'), (64, 8, 'Techland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Pauli', 'Max Born']
response in server.py code:
 [(147, 10, 'Copenhagen'), (26, 23, 'University_of_Göttingen'), (256, 21, 'University_of_Hamburg'), (70, 8, 'Max_Born'), (240, 8, 'Lecturer'), (182, 20, 'Niels_Bohr_Institute'), (0, 5, 'Wolfgang_Pauli'), (110, 33, 'Niels_Bohr_Institute'), (57, 9, 'Personal_assistant')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Michael Smith', 'Reagan', 'Reagan', 'Reagan']
response in server.py code:
 [(1851, 5, 'Japan'), (1960, 5, 'Tokyo'), (1808, 5, 'Japan'), (1123, 5, 'Japan'), (2222, 13, 'United_States'), (958, 6, 'Ronald_Reagan'), (1188, 6, 'Ronald_Reagan'), (1815, 6, 'Ronald_Reagan'), (336, 25, 'Office_of_the_United_States_Trade_Representative'), (363, 13, 'Michael_Smith_(Irish_politician)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Furniture')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(316, 7, 'Reuters'), (48, 6, 'London'), (165, 4, 'United_States'), (70, 2, 'United_Kingdom'), (73, 23, 'Abu_Dhabi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ivankov', 'Lavrentyeva']
response in server.py code:
 [(246, 8, 'Interfax'), (46, 6, 'Moscow'), (219, 8, 'Interfax'), (594, 8, 'Interfax'), (0, 7, 'Russia'), (66, 6, 'Moscow'), (422, 6, 'Moscow'), (547, 11, 'Yekaterina_Lavrentyeva'), (501, 7, 'Ivan_Ivankov')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(221, 18, 'Corporation'), (99, 9, 'Democracy'), (115, 12, 'Dictatorship'), (66, 7, 'Country'), (19, 6, 'Leadership'), (2, 9, 'President'), (31, 7, 'Country'), (140, 9, 'President'), (186, 7, 'Leadership'), (87, 8, 'Republic')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(10, 7, 'YouTube'), (27, 10, 'Family_Guy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mario Capecchi']
response in server.py code:
 [(117, 13, 'United_States'), (187, 6, 'Germany'), (39, 6, 'Verona'), (143, 21, 'Impressionism'), (131, 8, 'Daughter'), (194, 13, 'Archaeology'), (88, 6, 'Airman'), (0, 14, 'Mario_Capecchi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Sebastian Coe']
response in server.py code:
 [(115, 13, 'Sebastian_Coe'), (96, 12, '1908_Summer_Olympics')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(248, 6, 'Manila')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(5, 4, 'University-preparatory_school')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(37, 6, 'London'), (29, 6, 'London'), (102, 6, 'London'), (285, 7, 'Jakarta')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Petofi', 'Petofi', 'Petofi', 'Petofi', 'Petofi', 'Petofi', 'Petofi']
response in server.py code:
 [(2330, 8, 'Budapest'), (1556, 7, 'Hungary'), (44, 8, 'Budapest'), (1565, 6, 'Poland'), (488, 6, 'Vienna'), (1788, 6, 'France'), (1943, 9, 'Hungary'), (1657, 6, 'France'), (1004, 8, 'Budapest'), (154, 23, 'Budapest_Stock_Exchange'), (2306, 6, 'Sándor_Petőfi'), (690, 6, 'France'), (1924, 6, 'Sándor_Petőfi'), (2215, 6, 'Sándor_Petőfi'), (1973, 6, 'Sándor_Petőfi'), (1580, 14, 'Czech_Republic'), (2150, 6, 'Sándor_Petőfi'), (2196, 9, 'Kecskemét'), (2089, 6, 'Sándor_Petőfi'), (2063, 6, 'Sándor_Petőfi'), (852, 6, 'Michael_Frater'), (1110, 6, 'Michael_Frater'), (727, 6, 'Michael_Frater'), (1298, 6, 'Michael_Frater'), (321, 3, 'Bovine_spongiform_encephalopathy'), (179, 3, 'Bovine_spongiform_encephalopathy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(161, 15, 'Chancellor_(education)'), (103, 10, 'University'), (44, 21, 'Academic_institution'), (221, 9, 'President'), (10, 6, 'Rector_(academia)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Romania'), (51, 9, 'Bucharest'), (76, 24, 'National_Bank_of_Romania'), (102, 3, 'Bulgarian_National_Radio'), (373, 3, 'Bulgarian_National_Radio')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Marcus Bentley']
response in server.py code:
 [(40, 14, 'Marcus_Bentley')]
given spans fix. original text:  Kroto was educated at Bolton School and went to Sheffield University in 1958. At Sheffield, Kroto obtained a first class honours BSc degree in Chemistry and a PhD in Molecular Spectroscopy.
original word:  Sheffield Sheffield
new split:  Sheffiel  and  d
[(0, 5), (6, 9), (10, 18), (19, 21), (22, 28), (29, 35), (36, 39), (40, 44), (45, 47), (48, 57), (58, 68), (69, 71), (72, 76), (76, 77), (78, 80), (81, 89), (89, 90)]
{0: 0, 36: 6, 69: 11, 6: 1, 81: 15, 40: 7, 10: 2, 76: 13, 45: 8, 78: 14, 48: 9, 72: 12, 19: 3, 22: 4, 89: 16, 58: 10, 29: 5}
{80: 14, 35: 5, 68: 10, 5: 0, 39: 6, 9: 1, 71: 11, 44: 7, 77: 13, 47: 8, 76: 12, 18: 2, 21: 3, 89: 15, 57: 9, 90: 16, 28: 4}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Kroto', 'Kroto']
response in server.py code:
 [(0, 5, 'Harry_Kroto'), (92, 5, 'Harry_Kroto'), (48, 20, 'University_of_Sheffield'), (22, 13, 'Bolton_School')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(6, 5, 'Beach')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(26, 6, 'London'), (18, 6, 'London'), (99, 6, 'London'), (270, 7, 'Jakarta'), (0, 6, 'Telkom_(South_Africa)'), (44, 27, 'Telkom_Indonesia'), (73, 6, 'Telkom_(South_Africa)')]
given spans fix. original text:   &LR; (ART ADV: Photo _ NYT8 _ is being sent to NYT photo clients. Graphic is being sent to NYT graphics clients. Nonsubscribers can make one-time purchases by calling 888-603-1036 or 888-346-9867.) &QL; &UR; By LAURENCE ZUCKERMAN &QC; &LR; &QL; &UR; c.2000 N.Y. Times News Service &QC; &LR; &QL;    Booking Your Ticket:   _ Fly nonstop. The fewer connections you make, the lower the chance that you will suffer a delay.   _ Pick airports with care. If you have to connect, choose the least-congested airport possible; some airports, like Chicago O'Hare and La Guardia in New York, experience chronic delays. Take into consideration the weather and the season; an airport in the South might have fewer winter snowstorms but more spring and summer thunderstorms.   _ Check times between connecting flights. Airlines often book tight connections and do not take responsibility if you miss yours. Assume each leg of your flight will arrive late, and book connections that allow ample time.   _ Check on-time records. The Transportation Department requires major domestic airlines to make the on-time record for every flight available to consumers. You can check online at www.dot.gov/airconsumer. That site also reports each airline's on-time record for the previous month.   _ Travel on off-peak days and at off-peak times. Saturday is usually the least-traveled day of the week; so are major holidays. Monday mornings and Friday afternoons are peak travel times for business travelers. Flights leaving earlier in the day are less likely to be delayed, because of the cascading effect that disruptions have on airline schedules.   _ Use smaller airports. Instead of Los Angeles International, for example, consider flying into Burbank or John Wayne Airport in Orange County, Calif., or use Westchester County Airport instead of JFK in New York.   _ Avoid electronic tickets. Though they are convenient and more secure than an easily lost paper ticket, they are not transferable between most airlines if you need to switch carriers because of delays.   _ Watch for labor disruptions. Check newspapers and Web sites like www.thenewfoundlandgroup.com to identify airlines experiencing labor strife, which often increases cancellations and delays.   _ Leave a number. Make sure the airline you book with has a phone number at which you can be notified of delays or cancellations.   _ Use a travel agent. A good one can be a great ally in the event of a problem _ and may save you time and money.   Day of Departure:   _ Be informed. Check your flight's status before heading to the airport. Automated telephone services or airline Web sites often provide more up-to-date information than do ticket agents. The Federal Aviation Administration's Web site, www.fly.faa.gov, has real-time information on operations at the biggest airports.   _ Pack defensively. Take along a change of clothes and a toothbrush in your carry-on bag. If traveling with an infant, take 24 hours' worth of diapers and extra formula. When possible, avoid checking luggage, in case you need to switch flights or carriers. Ship your gifts ahead.   _ Educate yourself. Find out what your airline promises to do for passengers in the event of a delay. Print out a copy of the policy from the airline's Web site, and carry it with you _ in case the airline representatives need a reminder.   If a Flight Is Delayed:   _ Keep your cool. Becoming angry at airline personnel is counterproductive. Sympathy for their plight will sometimes produce results.   _ Don't stand in line. To get on another flight, it is often more effective to call the airline from the airport than to wait at the ticket counter. Carry a cell phone; if delays are widespread, public telephones may be in demand.   _ Check the competition. If another airline has seats to your destination, ask your airline to endorse your ticket to the other line.   _ Get what you paid for. If you paid full fare or are a high-mileage frequent flier, let the airline know. Your odds of getting a seat on the next flight out will increase, or the airline might pay for your hotel, if you are delayed overnight.   _ Consider driving. If the last leg of your flight is a 200-mile hop, renting a car might be a better choice than waiting out a delay.   Getting Even:   _ Write a letter. The airlines have pledged to respond to consumer complaints within 60 days. They almost always offer a refund, reimbursement of expenses, a discount on your next ticket _ or all three. Be sure to save the relevant paperwork.   _ Make it a federal case. Send a copy of your letter to Washington. Complaints are charged against each airline in the Transportation Department's monthly Air Travel Consumer Report and serve as a basis for rule making and enforcement action. Write to:   Aviation Consumer Protection Div. (C-75)   Department of Transportation   400 Seventh St. S.W.   Washington, DC 20590  

original word:  Calif. Calif.
new split:  Calif  and  .
[(1, 2), (2, 4), (4, 5), (6, 7), (7, 10), (11, 14), (14, 15), (16, 21), (22, 23), (24, 28), (29, 30), (31, 33), (34, 39), (40, 44), (45, 47), (48, 51), (52, 57), (58, 65), (65, 66), (67, 74), (75, 77), (78, 83), (84, 88), (89, 91), (92, 95), (96, 104), (105, 112), (112, 113), (114, 128), (129, 132), (133, 137), (138, 146), (147, 156), (157, 159), (160, 167), (168, 180), (181, 183), (184, 196), (196, 197), (197, 198), (199, 200), (200, 202), (202, 203), (204, 205), (205, 207), (207, 208), (209, 211), (212, 220), (221, 230), (231, 232), (232, 234), (234, 235), (236, 237), (237, 239), (239, 240), (241, 242), (242, 244), (244, 245), (246, 247), (247, 249), (249, 250), (251, 257), (258, 262), (263, 268), (269, 273), (274, 281), (282, 283), (283, 285), (285, 286), (287, 288), (288, 290), (290, 291), (292, 293), (293, 295), (295, 296), (300, 307), (308, 312), (313, 319), (319, 320), (323, 324), (325, 328), (329, 336), (336, 337), (338, 341), (342, 347), (348, 359), (360, 363), (364, 368), (368, 369), (370, 373), (374, 379), (380, 383), (384, 390), (391, 395), (396, 399), (400, 404), (405, 411), (412, 413), (414, 419), (419, 420), (423, 424), (425, 429), (430, 438), (439, 443), (444, 448), (448, 449), (450, 452), (453, 456), (457, 461), (462, 464), (465, 472), (472, 473), (474, 480), (481, 484), (485, 500), (501, 508), (509, 517), (517, 518), (519, 523), (524, 532), (532, 533), (534, 538), (539, 546), (547, 553), (554, 557), (558, 560), (561, 568), (569, 571), (572, 575), (576, 580), (580, 581), (582, 592), (593, 600), (601, 607), (607, 608), (609, 613), (614, 618), (619, 632), (633, 636), (637, 644), (645, 648), (649, 652), (653, 659), (659, 660), (661, 663), (664, 671), (672, 674), (675, 678), (679, 684), (685, 690), (691, 695), (696, 701), (702, 708), (709, 719), (720, 723), (724, 728), (729, 735), (736, 739), (740, 746), (747, 760), (760, 761), (764, 765), (766, 771), (772, 777), (778, 785), (786, 796), (797, 804), (804, 805), (806, 814), (815, 820), (821, 825), (826, 831), (832, 843), (844, 847), (848, 850), (851, 854), (855, 859), (860, 874), (875, 877), (878, 881), (882, 886), (887, 892), (892, 893), (894, 900), (901, 905), (906, 909), (910, 912), (913, 917), (918, 924), (925, 929), (930, 936), (937, 941), (941, 942), (943, 946), (947, 951), (952, 963), (964, 968), (969, 974), (975, 980), (981, 985), (985, 986), (989, 990), (991, 996), (997, 1004), (1005, 1012), (1012, 1013), (1014, 1017), (1018, 1032), (1033, 1043), (1044, 1052), (1053, 1058), (1059, 1067), (1068, 1076), (1077, 1079), (1080, 1084), (1085, 1088), (1089, 1096), (1097, 1103), (1104, 1107), (1108, 1113), (1114, 1120), (1121, 1130), (1131, 1133), (1134, 1143), (1143, 1144), (1145, 1148), (1149, 1152), (1153, 1158), (1159, 1165), (1166, 1168), (1169, 1192), (1192, 1193), (1194, 1198), (1199, 1203), (1204, 1208), (1209, 1216), (1217, 1221), (1222, 1229), (1229, 1231), (1232, 1239), (1240, 1246), (1247, 1250), (1251, 1254), (1255, 1263), (1264, 1269), (1269, 1270), (1273, 1274), (1275, 1281), (1282, 1284), (1285, 1293), (1294, 1298), (1299, 1302), (1303, 1305), (1306, 1314), (1315, 1320), (1320, 1321), (1322, 1330), (1331, 1333), (1334, 1341), (1342, 1345), (1346, 1360), (1361, 1364), (1365, 1367), (1368, 1371), (1372, 1376), (1376, 1377), (1378, 1380), (1381, 1384), (1385, 1390), (1391, 1399), (1399, 1400), (1401, 1407), (1408, 1416), (1417, 1420), (1421, 1427), (1428, 1438), (1439, 1442), (1443, 1447), (1448, 1454), (1455, 1460), (1461, 1464), (1465, 1473), (1474, 1483), (1483, 1484), (1485, 1492), (1493, 1500), (1501, 1508), (1509, 1511), (1512, 1515), (1516, 1519), (1520, 1523), (1524, 1528), (1529, 1535), (1536, 1538), (1539, 1541), (1542, 1549), (1549, 1550), (1551, 1558), (1559, 1561), (1562, 1565), (1566, 1575), (1576, 1582), (1583, 1587), (1588, 1599), (1600, 1604), (1605, 1607), (1608, 1615), (1616, 1625), (1625, 1626), (1629, 1630), (1631, 1634), (1635, 1642), (1643, 1651), (1651, 1652), (1653, 1660), (1661, 1663), (1664, 1667), (1668, 1675), (1676, 1689), (1689, 1690), (1691, 1694), (1695, 1702), (1702, 1703), (1704, 1712), (1713, 1719), (1720, 1724), (1725, 1732), (1733, 1735), (1736, 1740), (1741, 1746), (1747, 1754), (1755, 1757), (1758, 1764), (1765, 1771), (1771, 1772), (1773, 1778), (1778, 1779)]
{1536: 293, 1: 0, 2: 1, 1524: 291, 4: 2, 517: 117, 6: 3, 7: 4, 1033: 208, 11: 5, 524: 119, 1149: 226, 14: 6, 1551: 297, 16: 7, 1539: 294, 532: 120, 22: 8, 89: 23, 24: 9, 1501: 286, 539: 122, 29: 10, 1566: 300, 31: 11, 34: 12, 547: 123, 1306: 253, 1542: 295, 40: 13, 860: 177, 554: 124, 519: 118, 1068: 212, 45: 14, 558: 125, 1583: 302, 48: 15, 561: 126, 1229: 238, 52: 16, 1077: 213, 1080: 214, 569: 127, 58: 17, 1631: 310, 572: 128, 1085: 215, 576: 129, 65: 18, 1741: 329, 67: 19, 580: 130, 1605: 305, 582: 131, 1121: 221, 1608: 306, 1097: 217, 75: 20, 1562: 299, 78: 21, 1549: 296, 1104: 218, 593: 132, 84: 22, 601: 133, 1114: 220, 92: 24, 1629: 309, 607: 134, 96: 25, 609: 135, 1635: 311, 614: 136, 105: 26, 1282: 248, 619: 137, 786: 165, 1134: 223, 112: 27, 114: 28, 1651: 313, 1194: 232, 1143: 224, 633: 138, 637: 139, 1044: 209, 1664: 316, 129: 29, 1131: 222, 1668: 317, 133: 30, 1159: 228, 649: 141, 138: 31, 1303: 252, 1676: 318, 653: 142, 1166: 229, 1169: 230, 659: 143, 661: 144, 664: 145, 1689: 319, 1576: 301, 1691: 320, 1733: 327, 157: 33, 197: 39, 160: 34, 1778: 336, 675: 147, 1625: 308, 679: 148, 168: 35, 534: 121, 1702: 322, 685: 149, 285: 68, 1713: 324, 1474: 282, 691: 150, 1204: 234, 181: 36, 1529: 292, 969: 197, 696: 151, 1209: 235, 287: 69, 1725: 326, 702: 152, 1653: 314, 1217: 236, 1643: 312, 196: 38, 709: 153, 1222: 237, 199: 40, 200: 41, 202: 42, 1399: 270, 204: 43, 205: 44, 207: 45, 720: 154, 209: 46, 1059: 211, 212: 47, 1145: 225, 1240: 240, 804: 167, 1372: 264, 1755: 331, 221: 48, 1720: 325, 1247: 241, 736: 157, 1232: 239, 1251: 242, 740: 158, 1765: 333, 231: 49, 232: 50, 892: 182, 234: 51, 747: 159, 236: 52, 237: 53, 239: 54, 1264: 244, 241: 55, 242: 56, 1747: 330, 244: 57, 1269: 245, 246: 58, 247: 59, 760: 160, 724: 155, 251: 61, 764: 161, 766: 162, 1493: 285, 1408: 272, 258: 62, 1600: 304, 772: 163, 1285: 249, 263: 63, 778: 164, 1509: 287, 269: 64, 1294: 250, 274: 65, 1299: 251, 729: 156, 282: 66, 283: 67, 797: 166, 645: 140, 288: 70, 290: 71, 1315: 254, 292: 72, 293: 73, 806: 168, 295: 74, 1320: 255, 1322: 256, 300: 75, 815: 169, 1255: 243, 1331: 257, 308: 76, 821: 170, 1334: 258, 313: 77, 826: 171, 1342: 259, 319: 78, 832: 172, 1346: 260, 323: 79, 325: 80, 1153: 227, 329: 81, 844: 173, 336: 82, 1361: 261, 338: 83, 851: 175, 1365: 262, 342: 84, 855: 176, 1368: 263, 1273: 246, 348: 85, 997: 203, 1376: 265, 1378: 266, 1199: 233, 1381: 267, 360: 86, 1385: 268, 875: 178, 364: 87, 878: 179, 1391: 269, 368: 88, 370: 89, 147: 32, 374: 90, 887: 181, 1758: 332, 1401: 271, 380: 91, 882: 180, 894: 183, 384: 92, 848: 174, 1771: 334, 901: 184, 1559: 298, 391: 93, 1417: 273, 906: 185, 1455: 279, 396: 94, 1421: 274, 910: 186, 1773: 335, 400: 95, 913: 187, 1428: 275, 405: 96, 918: 188, 1616: 307, 184: 37, 412: 97, 925: 189, 414: 98, 1439: 276, 930: 190, 419: 99, 423: 100, 1448: 278, 425: 101, 1736: 328, 941: 192, 430: 102, 943: 193, 947: 194, 1461: 280, 439: 103, 952: 195, 1465: 281, 1695: 321, 444: 104, 1053: 210, 448: 105, 672: 146, 450: 106, 964: 196, 453: 107, 1089: 216, 457: 108, 1483: 283, 1485: 284, 462: 109, 975: 198, 465: 110, 1661: 315, 1443: 277, 981: 199, 249: 60, 472: 111, 985: 200, 474: 112, 989: 201, 991: 202, 481: 113, 1275: 247, 485: 114, 1512: 288, 1704: 323, 1516: 289, 1005: 204, 1520: 290, 1192: 231, 1012: 205, 501: 115, 1014: 206, 937: 191, 1588: 303, 1108: 219, 1018: 207, 509: 116}
{2: 0, 4: 1, 5: 2, 518: 117, 7: 3, 1032: 207, 10: 4, 523: 118, 1538: 293, 14: 5, 15: 6, 88: 22, 1043: 208, 532: 119, 21: 7, 1558: 297, 23: 8, 1561: 298, 538: 121, 28: 9, 1565: 299, 30: 10, 517: 116, 33: 11, 546: 122, 859: 176, 1740: 328, 39: 12, 553: 123, 1067: 211, 44: 13, 557: 124, 1582: 301, 47: 14, 560: 125, 1587: 302, 1229: 237, 51: 15, 1076: 212, 1079: 213, 568: 126, 57: 16, 571: 127, 1084: 214, 575: 128, 1088: 215, 65: 17, 66: 18, 1724: 325, 580: 129, 581: 130, 1607: 305, 1096: 216, 74: 19, 183: 36, 1281: 247, 77: 20, 1103: 217, 592: 131, 83: 21, 1550: 296, 600: 132, 1113: 219, 1626: 308, 91: 23, 1630: 309, 607: 133, 608: 134, 1634: 310, 1719: 324, 613: 135, 785: 164, 104: 25, 941: 191, 618: 136, 1133: 222, 1231: 238, 112: 26, 113: 27, 1651: 312, 1652: 313, 1143: 223, 632: 137, 1058: 210, 636: 138, 1130: 221, 533: 120, 128: 28, 1667: 316, 132: 29, 1158: 227, 1473: 281, 648: 140, 137: 30, 1675: 317, 652: 141, 1165: 228, 1168: 229, 146: 31, 659: 142, 660: 143, 663: 144, 708: 152, 1690: 319, 156: 32, 1694: 320, 159: 33, 674: 146, 1508: 286, 1642: 311, 678: 147, 167: 34, 1192: 230, 1052: 209, 1735: 327, 684: 148, 1198: 232, 1712: 323, 968: 196, 690: 149, 1203: 233, 180: 35, 695: 150, 1208: 234, 1604: 304, 671: 145, 701: 151, 1732: 326, 1216: 235, 1454: 278, 196: 37, 197: 38, 198: 39, 893: 182, 200: 40, 1575: 300, 202: 41, 203: 42, 1541: 294, 205: 43, 719: 153, 208: 45, 1144: 224, 1746: 329, 211: 46, 1239: 239, 728: 155, 1314: 253, 1371: 263, 207: 44, 220: 47, 1757: 331, 1246: 240, 805: 167, 1754: 330, 1250: 241, 739: 157, 1764: 332, 230: 48, 232: 49, 1148: 225, 746: 158, 235: 51, 1772: 334, 237: 52, 239: 53, 240: 54, 1320: 254, 242: 55, 723: 154, 244: 56, 245: 57, 1270: 245, 247: 58, 760: 159, 761: 160, 250: 60, 1407: 271, 765: 161, 1778: 335, 257: 61, 771: 162, 1284: 248, 262: 62, 777: 163, 268: 63, 1293: 249, 1703: 322, 273: 64, 1298: 250, 1302: 251, 985: 199, 281: 65, 283: 66, 796: 165, 285: 67, 286: 68, 288: 69, 290: 70, 291: 71, 804: 166, 293: 72, 295: 73, 296: 74, 1321: 255, 95: 24, 1263: 243, 814: 168, 1330: 256, 307: 75, 820: 169, 1333: 257, 312: 76, 825: 170, 735: 156, 1341: 258, 1492: 284, 319: 77, 320: 78, 1345: 259, 1221: 236, 324: 79, 1625: 307, 328: 80, 843: 172, 847: 173, 336: 81, 337: 82, 850: 174, 1364: 261, 341: 83, 854: 175, 1367: 262, 996: 202, 347: 84, 881: 179, 1376: 264, 1377: 265, 1380: 266, 1254: 242, 1663: 315, 359: 85, 1384: 267, 1120: 220, 874: 177, 363: 86, 877: 178, 1390: 268, 368: 87, 369: 88, 373: 89, 886: 180, 1399: 269, 1400: 270, 379: 90, 892: 181, 234: 50, 383: 91, 831: 171, 1771: 333, 900: 183, 390: 92, 1416: 272, 905: 184, 395: 93, 1420: 273, 909: 185, 1305: 252, 399: 94, 912: 186, 644: 139, 1427: 274, 404: 95, 917: 187, 1689: 318, 1599: 303, 411: 96, 924: 188, 413: 97, 1438: 275, 929: 189, 1442: 276, 419: 98, 420: 99, 1447: 277, 424: 100, 429: 101, 942: 192, 946: 193, 1523: 290, 1460: 279, 438: 102, 951: 194, 1464: 280, 1012: 204, 1152: 226, 443: 103, 1549: 295, 1269: 244, 448: 104, 449: 105, 963: 195, 452: 106, 1660: 314, 456: 107, 1483: 282, 1484: 283, 461: 108, 974: 197, 464: 109, 980: 198, 249: 59, 472: 110, 473: 111, 986: 200, 1615: 306, 1500: 285, 1274: 246, 990: 201, 480: 112, 1360: 260, 484: 113, 1702: 321, 1511: 287, 1779: 336, 1515: 288, 1004: 203, 1519: 289, 936: 190, 1107: 218, 500: 114, 1013: 205, 1193: 231, 1528: 291, 1017: 206, 508: 115, 1535: 292}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(1773, 5, 'California'), (1664, 25, 'Los_Angeles_International_Airport'), (1725, 7, 'Burbank,_California'), (1758, 13, 'Orange_County,_California'), (539, 14, "O'Hare_International_Airport"), (572, 8, 'New_York_City'), (1018, 25, 'United_States_Department_of_Transportation'), (1736, 18, 'John_Wayne_Airport'), (4586, 10, 'Washington,_D.C.'), (1826, 3, 'John_F._Kennedy_International_Airport'), (2704, 31, 'Federal_Aviation_Administration'), (558, 10, 'LaGuardia_Airport'), (1788, 26, 'Westchester_County_Airport'), (679, 5, 'Southern_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['James Stewart']
response in server.py code:
 [(29, 3, 'Agence_France-Presse'), (41, 13, 'United_States'), (354, 11, 'White_House'), (2, 19, 'Bandar_Seri_Begawan'), (335, 13, 'James_Stewart')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Eliot', 'Eliot', 'Henri Bergson', 'Alain-Fournier']
response in server.py code:
 [(74, 5, 'Paris'), (135, 8, 'Sorbonne'), (207, 14, 'Alain-Fournier'), (32, 7, 'Harvard_University'), (172, 13, 'Henri_Bergson'), (145, 5, 'T._S._Eliot'), (59, 5, 'T._S._Eliot'), (19, 9, 'Assistant_referee_(association_football)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(79, 23, 'New_York_Stock_Exchange'), (303, 6, 'NASDAQ'), (333, 4, 'New_York_Stock_Exchange'), (426, 4, 'United_States'), (339, 7, 'Philips'), (464, 7, 'Philips'), (116, 7, 'Philips'), (203, 5, 'Netherlands'), (377, 8, 'New_York_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(27, 6, 'Spain'), (34, 6, 'Manila')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['wilson']
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(177, 7, 'Belfast'), (19, 10, 'Northern_Ireland'), (41, 7, 'Belfast'), (698, 7, 'United_Kingdom'), (711, 16, 'Northern_Ireland'), (126, 21, 'Provisional_Irish_Republican_Army')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(226, 8, 'Colombia'), (28, 9, 'Colombia'), (344, 7, 'Reuters'), (58, 8, 'Colombia'), (483, 6, 'Bogotá'), (50, 6, 'Bogotá'), (445, 14, 'Casa_de_Nariño'), (322, 16, 'Municipal_police')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(57, 22, 'University_of_Maryland,_College_Park'), (40, 9, 'Professor'), (188, 30, 'Stanford_University_School_of_Engineering'), (0, 7, 'James_Hendler'), (97, 8, 'Executive_director')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Chevron_Corporation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(229, 22, 'Toronto_Stock_Exchange'), (98, 22, 'Toronto_Stock_Exchange'), (343, 21, 'Toronto-Dominion_Bank')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(26, 7, 'Georgia_(U.S._state)'), (17, 8, 'Toddler'), (0, 12, 'Martial_arts')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(49, 9, 'Montclair,_New_Jersey'), (59, 4, 'New_Jersey')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ian Lang']
response in server.py code:
 [(232, 7, 'United_Kingdom'), (491, 7, 'United_Kingdom'), (663, 7, 'United_Kingdom'), (89, 7, 'United_Kingdom'), (0, 7, 'United_Kingdom'), (67, 6, 'London'), (1664, 15, 'British_Airways'), (1014, 4, 'United_States'), (1962, 15, 'British_Airways'), (1111, 6, 'London'), (2091, 15, 'British_Airways'), (507, 13, 'United_States'), (1445, 6, 'Europe'), (33, 8, 'United_States'), (1453, 8, 'United_States'), (2017, 5, 'US_Airways'), (1358, 15, 'British_Airways'), (1007, 2, 'United_Kingdom'), (2351, 15, 'British_Airways'), (1378, 8, 'United_States'), (187, 19, 'British_Airways'), (1405, 15, 'London_Heathrow_Airport'), (2369, 8, 'United_States'), (211, 17, 'American_Airlines'), (2111, 8, 'United_States'), (2165, 6, 'London'), (617, 4, 'Ian_Lang,_Baron_Lang_of_Monkton'), (242, 33, 'Competition_Commission'), (363, 8, 'Ian_Lang,_Baron_Lang_of_Monkton'), (2515, 4, 'Ian_Lang,_Baron_Lang_of_Monkton'), (673, 22, 'Office_of_Fair_Trading'), (2175, 17, 'Dallas/Fort_Worth_International_Airport'), (2319, 20, 'Office_of_Fair_Trading'), (2557, 22, 'Office_of_Fair_Trading'), (535, 14, 'Transatlantic_relations'), (967, 14, 'Transatlantic_crossing'), (155, 14, 'Transatlantic_relations'), (2054, 14, 'Transatlantic_relations'), (909, 2, 'British_Airways'), (334, 18, 'Ministry_of_Trade_and_Industry_(Norway)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ronny Brunswijk', 'Desi Bouterse']
response in server.py code:
 [(62, 7, 'Suriname'), (99, 10, 'Suriname'), (330, 11, 'Netherlands'), (32, 7, 'Suriname'), (50, 10, 'Paramaribo'), (457, 10, 'Paramaribo'), (127, 15, 'Ronnie_Brunswijk'), (469, 9, 'Ronnie_Brunswijk'), (820, 13, 'Dési_Bouterse'), (226, 9, 'Ronnie_Brunswijk'), (616, 9, 'Ronnie_Brunswijk'), (425, 6, 'Moengo'), (351, 9, 'Ronnie_Brunswijk'), (756, 9, 'Ronnie_Brunswijk'), (532, 5, 'Pinas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(4, 27, 'College_of_William_&_Mary'), (235, 10, 'Head_teacher'), (110, 12, 'High_school'), (158, 17, "St._Paul's_School_(Concord,_New_Hampshire)"), (148, 6, 'Rector_(ecclesiastical)'), (44, 10, 'Chancellor_(education)'), (207, 6, 'Rector_(ecclesiastical)'), (179, 13, 'New_Hampshire')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Al Gore']
response in server.py code:
 [(2073, 7, 'Seattle'), (863, 7, 'Al_Gore'), (513, 17, 'Miami-Dade_County,_Florida'), (667, 17, 'Palm_Beach_County,_Florida'), (600, 9, 'Democratic_Party_(United_States)'), (30, 10, 'Washington,_D.C.'), (1925, 16, 'Washington_State_University')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(209, 7, 'Reuters'), (443, 6, 'Brazil'), (608, 9, 'São_Paulo'), (194, 8, 'Brasília'), (630, 17, 'Rio_Grande_do_Sul'), (619, 6, 'Paraná_(state)'), (884, 5, 'Hércules_Brito_Ruas'), (534, 5, 'Hércules_Brito_Ruas'), (108, 20, 'Ministry_of_Agriculture_(Pakistan)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(65, 9, 'Salt_Lake_City'), (40, 7, 'Houston'), (50, 3, 'Fes')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lutuli']
response in server.py code:
 [(8, 6, 'Albert_Lutuli'), (26, 25, 'African_National_Congress'), (135, 25, 'African_National_Congress')]
given spans fix. original text:  Med oil products mostly lower as Elf strike ends. LONDON 1996-12-06 Mediterranean oil products were steady to mostly lower on Friday after Elf refinery workers voted to end their nine-day strike. Gas oil erased Thursday's gains, plunging $ 5.50 a tonne in line with the screen. Volume was very thin and market remained long, with premiums down $ 1 at about high cif quotes+$0.50 basis Genoa. "The sharp moves on the screen make everyone nervous," a trader said. Trades were discussed in 0.2, 0.5 and one percent heating oil into Syria and Lebanon and there were fresh inquiries from France and Spain for low sulphur diesel. Interest remains focussed on a tender by India for a second purchase of high speed diesel for January delivery. Fuel oil lost ground sharply with weaker crude, but also suffered from some pricing pressure. High sulphur cracked fuel lost about $ 3 to $ 109-111 fob Med with several cargoes threatening to overhang the market. The chance of material heading north, talked earlier this week, may be in jeopardy now since American fuel oil is expected to head transatlantic following outages at two coking units in the U.S. Up to 165,000 tonnes of fuel will have to find a new home and with the arbitrage from the U.S. to Europe open Rotterdam is a prime candidate. Low sulphur prices were lower with cif Med pegged in the mid to low $ 140s. Gasoline prices fell after striking Elf refinery workers voted to go back to work, traders said. But an open arbitrage to the U.S. and tight Italian supplies after Elf scooped up Med material over the last week, continued to underpin prices into next week.
original word:  U.S. U.S.
new split:  U.S  and  .
[(0, 3), (4, 7), (8, 16), (17, 23), (24, 29), (30, 32), (33, 36), (37, 43), (44, 48), (48, 49), (50, 56), (57, 67), (68, 81), (82, 85), (86, 94), (95, 99), (100, 106), (107, 109), (110, 116), (117, 122), (123, 125), (126, 132), (133, 138), (139, 142), (143, 151), (152, 159), (160, 165), (166, 168), (169, 172), (173, 178), (179, 187), (188, 194), (194, 195), (196, 199), (200, 203), (204, 210), (211, 219), (219, 221), (222, 227), (227, 228), (229, 237), (238, 239), (240, 244), (245, 246), (247, 252), (253, 255), (256, 260), (261, 265), (266, 269), (270, 276), (276, 277), (278, 284), (285, 288), (289, 293), (294, 298), (299, 302), (303, 309), (310, 318), (319, 323), (323, 324), (325, 329), (330, 338), (339, 343), (344, 345), (346, 347), (348, 350), (351, 356), (357, 361), (362, 365), (366, 373), (373, 374), (374, 378), (379, 384), (385, 390), (390, 391), (392, 393), (393, 396), (397, 402), (403, 408), (409, 411), (412, 415), (416, 422), (423, 427), (428, 436), (437, 444), (444, 445), (445, 446), (447, 448), (449, 455), (456, 460), (460, 461), (462, 468), (469, 473), (474, 483), (484, 486), (487, 490), (490, 491), (492, 495), (496, 499), (500, 503), (504, 511), (512, 519), (520, 523), (524, 528), (529, 534), (535, 538), (539, 546), (547, 550), (551, 556), (557, 561), (562, 567), (568, 577), (578, 582), (583, 589), (590, 593), (594, 599), (600, 603), (604, 607), (608, 615), (616, 622), (622, 623), (624, 632), (633, 640), (641, 649), (650, 652), (653, 654), (655, 661), (662, 664), (665, 670), (671, 674), (675, 676), (677, 683), (684, 692), (693, 695), (696, 700), (701, 706), (707, 713), (714, 717), (718, 725), (726, 734), (734, 735), (736, 740), (741, 744), (745, 749), (750, 756), (757, 764), (765, 769), (770, 776), (777, 782), (782, 783), (784, 787), (788, 792), (793, 801), (802, 806), (807, 811), (812, 819), (820, 828), (828, 829), (830, 834), (835, 842), (843, 850), (851, 855), (856, 860), (861, 866), (867, 868), (869, 870), (871, 873), (874, 875), (876, 883), (884, 887), (888, 891), (892, 896), (897, 904), (905, 912), (913, 924), (925, 927), (928, 936), (937, 940), (941, 947), (947, 948), (949, 952), (953, 959), (960, 962), (963, 971), (972, 979), (980, 985), (985, 986), (987, 993), (994, 1001), (1002, 1006), (1007, 1011), (1011, 1012), (1013, 1016), (1017, 1019), (1020, 1022), (1023, 1031), (1032, 1035), (1036, 1041), (1042, 1050), (1051, 1055), (1056, 1059), (1060, 1062), (1063, 1071), (1072, 1074), (1075, 1079), (1080, 1093), (1094, 1103), (1104, 1111), (1112, 1114), (1115, 1118), (1119, 1125), (1126, 1131), (1132, 1134), (1135, 1138), (1139, 1142), (1142, 1143)]
{0: 0, 512: 101, 4: 1, 8: 2, 524: 103, 17: 3, 1042: 198, 535: 105, 24: 4, 539: 106, 30: 5, 1056: 200, 33: 6, 547: 107, 1060: 201, 37: 7, 551: 108, 44: 8, 557: 109, 48: 9, 520: 102, 50: 10, 1075: 204, 568: 111, 57: 11, 1119: 210, 928: 176, 949: 180, 578: 112, 68: 12, 1094: 206, 583: 113, 1036: 197, 590: 114, 1104: 207, 82: 13, 782: 149, 86: 14, 600: 116, 1115: 209, 604: 117, 95: 15, 608: 118, 100: 16, 1126: 211, 529: 104, 616: 119, 107: 17, 1132: 212, 110: 18, 1135: 213, 624: 121, 1139: 214, 117: 19, 788: 151, 1112: 208, 633: 122, 123: 20, 874: 167, 126: 21, 641: 123, 133: 22, 650: 124, 139: 23, 653: 125, 655: 126, 622: 120, 662: 127, 152: 25, 665: 128, 671: 129, 160: 26, 675: 130, 677: 131, 166: 27, 169: 28, 684: 132, 173: 29, 179: 30, 693: 133, 696: 134, 188: 31, 701: 135, 194: 32, 707: 136, 196: 33, 1142: 215, 200: 34, 972: 184, 714: 137, 204: 35, 718: 138, 856: 162, 211: 36, 726: 139, 219: 37, 734: 140, 736: 141, 227: 39, 741: 142, 745: 143, 1063: 202, 750: 144, 240: 42, 757: 145, 229: 40, 247: 44, 765: 146, 256: 46, 770: 147, 261: 47, 897: 172, 777: 148, 266: 48, 270: 49, 784: 150, 276: 50, 278: 51, 793: 152, 1011: 191, 285: 52, 289: 53, 802: 153, 294: 54, 807: 154, 299: 55, 812: 155, 562: 110, 303: 56, 820: 156, 222: 38, 310: 57, 905: 173, 828: 157, 830: 158, 319: 58, 323: 59, 325: 60, 330: 61, 843: 160, 1051: 199, 1080: 205, 851: 161, 344: 63, 346: 64, 143: 24, 348: 65, 861: 163, 351: 66, 867: 164, 357: 67, 871: 166, 362: 68, 876: 168, 366: 69, 1032: 196, 884: 169, 373: 70, 374: 71, 888: 170, 379: 72, 892: 171, 1002: 189, 385: 73, 390: 74, 392: 75, 393: 76, 397: 77, 913: 174, 403: 78, 238: 41, 409: 79, 1007: 190, 412: 80, 925: 175, 416: 81, 423: 82, 937: 177, 428: 83, 941: 178, 947: 179, 437: 84, 953: 181, 444: 85, 445: 86, 447: 87, 960: 182, 449: 88, 963: 183, 1072: 203, 456: 89, 460: 90, 462: 91, 245: 43, 980: 185, 469: 92, 985: 186, 474: 93, 987: 187, 994: 188, 484: 94, 487: 95, 490: 96, 492: 97, 594: 115, 253: 45, 496: 98, 339: 62, 500: 99, 1013: 192, 869: 165, 504: 100, 1017: 193, 835: 159, 1020: 194, 1023: 195}
{3: 0, 7: 1, 523: 102, 16: 2, 1041: 197, 534: 104, 23: 3, 538: 105, 1143: 215, 1114: 208, 29: 4, 1055: 199, 32: 5, 546: 106, 1059: 200, 36: 6, 550: 107, 43: 7, 556: 108, 1071: 202, 48: 8, 561: 109, 1074: 203, 1118: 209, 567: 110, 56: 10, 948: 179, 577: 111, 67: 11, 1093: 205, 582: 112, 589: 113, 1103: 206, 1134: 212, 81: 12, 855: 161, 85: 13, 599: 115, 868: 164, 1111: 207, 603: 116, 94: 14, 607: 117, 528: 103, 99: 15, 1125: 210, 615: 118, 106: 16, 1131: 211, 109: 17, 622: 119, 623: 120, 1138: 213, 116: 18, 1142: 214, 873: 166, 632: 121, 122: 19, 125: 20, 640: 122, 132: 21, 649: 123, 138: 22, 652: 124, 194: 31, 142: 23, 661: 126, 151: 24, 664: 127, 1050: 198, 670: 128, 159: 25, 674: 129, 676: 130, 165: 26, 168: 27, 683: 131, 172: 28, 519: 101, 178: 29, 692: 132, 695: 133, 187: 30, 700: 134, 706: 135, 195: 32, 228: 39, 199: 33, 713: 136, 203: 34, 717: 137, 210: 35, 725: 138, 219: 36, 221: 37, 734: 139, 735: 140, 227: 38, 740: 141, 1062: 201, 744: 142, 749: 143, 239: 41, 756: 144, 246: 43, 1031: 195, 764: 145, 255: 45, 769: 146, 260: 46, 776: 147, 265: 47, 269: 48, 782: 148, 783: 149, 787: 150, 276: 49, 277: 50, 985: 185, 792: 151, 284: 51, 288: 52, 801: 152, 896: 171, 293: 53, 806: 153, 49: 9, 298: 54, 811: 154, 302: 55, 819: 155, 309: 56, 828: 156, 829: 157, 318: 57, 1001: 188, 834: 158, 323: 58, 324: 59, 329: 60, 842: 159, 1079: 204, 338: 61, 654: 125, 343: 62, 345: 63, 347: 64, 860: 162, 350: 65, 866: 163, 356: 66, 870: 165, 361: 67, 875: 167, 365: 68, 1035: 196, 883: 168, 373: 69, 374: 70, 887: 169, 378: 71, 891: 170, 384: 72, 390: 73, 391: 74, 904: 172, 393: 75, 396: 76, 1011: 190, 237: 40, 912: 173, 402: 77, 408: 78, 411: 79, 924: 174, 415: 80, 422: 81, 936: 176, 427: 82, 940: 177, 947: 178, 436: 83, 952: 180, 244: 42, 927: 175, 444: 84, 445: 85, 446: 86, 959: 181, 448: 87, 962: 182, 455: 88, 971: 183, 460: 89, 461: 90, 979: 184, 468: 91, 473: 92, 986: 186, 993: 187, 483: 93, 486: 94, 593: 114, 252: 44, 490: 95, 491: 96, 850: 160, 1006: 189, 495: 97, 499: 98, 1012: 191, 503: 99, 1016: 192, 1019: 193, 1022: 194, 511: 100}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(50, 6, 'London'), (1042, 8, 'United_States'), (1234, 4, 'United_States'), (1488, 4, 'United_States'), (594, 5, 'Spain'), (583, 6, 'France'), (1254, 9, 'Rotterdam'), (1242, 6, 'Europe'), (539, 7, 'Lebanon'), (1139, 3, 'United_States'), (1503, 7, 'Italy'), (665, 5, 'India'), (529, 5, 'Syria'), (139, 3, 'Elf_Aquitaine'), (33, 3, 'Elf_Aquitaine'), (1398, 3, 'Elf_Aquitaine'), (1526, 3, 'Elf_Aquitaine'), (385, 5, 'Genoa')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Norodom Sihanouk', 'Norodom Ranariddh', 'Hun Sen']
response in server.py code:
 [(48, 10, 'Phnom_Penh'), (86, 16, 'Norodom_Sihanouk'), (421, 8, 'Norodom_Sihanouk'), (0, 9, 'Cambodia'), (1052, 7, 'Hun_Sen'), (836, 8, 'Norodom_Sihanouk'), (70, 8, 'Cambodia'), (1030, 17, 'Norodom_Ranariddh'), (323, 6, 'France'), (899, 3, 'Koalisyon_ng_Nagkakaisang_Pilipino'), (435, 13, 'Supreme_Court_of_the_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(116, 36, 'National_Venture_Capital_Association')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Recipe'), (12, 7, 'Cheddar')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(218, 4, 'Ohio'), (44, 4, 'Ohio'), (208, 8, 'Columbus,_Ohio')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(11, 12, 'Online_poker')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(71, 7, 'Twitter')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Rita Levi-Montalcini', 'Rita Levi-Montalcini']
response in server.py code:
 [(0, 20, 'Rita_Levi-Montalcini'), (131, 20, 'Rita_Levi-Montalcini'), (48, 14, 'Nobel_Peace_Prize')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(35, 6, 'London'), (807, 7, 'Cardiff'), (175, 7, 'United_Kingdom'), (918, 8, 'Scotland'), (26, 7, 'United_Kingdom'), (301, 7, 'England'), (317, 10, 'Manchester'), (265, 19, 'Sale_Grammar_School'), (1239, 11, 'Lanarkshire'), (725, 5, 'Wales')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(802, 12, 'South_Korea'), (696, 9, 'Singapore'), (615, 12, 'South_Korea'), (482, 9, 'Singapore'), (880, 5, 'Seoul'), (505, 10, 'Australia'), (245, 15, 'Southeast_Asia'), (1335, 9, 'Hong_Kong'), (61, 9, 'Hong_Kong'), (0, 8, 'Far_East'), (82, 8, 'Far_East'), (595, 6, 'London'), (1188, 10, 'Indonesia'), (1470, 27, 'International_Monetary_Fund'), (2195, 8, 'New_York_City'), (2013, 8, 'New_York_City'), (1100, 7, 'South_Korea'), (1363, 8, 'New_York_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Bob Anderson']
response in server.py code:
 [(91, 12, 'Bob_Anderson_(darts_player)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(7, 4, 'Beetroot'), (0, 6, 'Pickled_cucumber')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Indiana')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(312, 5, 'Avnet'), (0, 9, 'Avnet'), (33, 34, 'U.S._Securities_and_Exchange_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'Baseball_cap')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['her']
response in server.py code:
 [(108, 17, 'Pasteur_Institute'), (13, 3, 'Elizabeth_II'), (49, 34, 'National_Institutes_of_Health')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(3, 6, 'Agusta')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mona Eltahawy', 'Muammar Gaddafi', 'Mohammed Idris']
response in server.py code:
 [(1172, 7, 'Reuters'), (197, 15, 'Muammar_Gaddafi'), (1388, 7, 'Muammar_Gaddafi'), (343, 5, 'Libya'), (1755, 7, 'Muammar_Gaddafi'), (1662, 7, 'Muammar_Gaddafi'), (55, 7, 'Tripoli'), (949, 7, 'Muammar_Gaddafi'), (971, 14, 'Idris_of_Libya'), (582, 7, 'Tripoli'), (112, 7, 'Tripoli'), (1507, 5, 'Egypt'), (1851, 8, 'Sudan'), (0, 7, 'Tripoli'), (306, 14, 'United_Nations'), (1566, 8, 'Benghazi'), (817, 5, 'Ghana'), (41, 13, 'Mona_Eltahawy'), (443, 6, 'Pan_American_World_Airways'), (74, 7, 'Libya'), (1864, 8, 'Egypt'), (806, 6, 'Guinea'), (799, 5, 'Niger'), (1223, 7, 'Libya'), (462, 9, 'Lockerbie'), (776, 7, 'Africa'), (473, 8, 'Scotland'), (706, 12, "Martyrs'_Square,_Tripoli")]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 3, 'MSN')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(61, 34, 'U.S._Securities_and_Exchange_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(24, 14, 'Zac_Brown_Band')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['John Major', 'John Gorst']
response in server.py code:
 [(50, 6, 'London'), (91, 10, 'John_Major'), (748, 5, 'John_Major'), (436, 5, 'John_Major'), (454, 14, 'Downing_Street'), (68, 7, 'United_Kingdom'), (475, 5, 'John_Eldon_Gorst'), (157, 10, 'John_Eldon_Gorst'), (863, 5, 'John_Eldon_Gorst'), (300, 5, 'John_Eldon_Gorst'), (729, 5, 'John_Eldon_Gorst'), (1001, 16, 'House_of_Commons_of_the_United_Kingdom'), (794, 16, 'House_of_Commons_of_the_United_Kingdom'), (1077, 5, 'John_Eldon_Gorst'), (0, 5, 'Major'), (137, 12, 'Conservative_Party_(UK)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Tonegawa']
response in server.py code:
 [(74, 5, 'Tokyo'), (21, 6, 'Nagoya'), (29, 5, 'Japan'), (52, 18, 'Hibiya_High_School'), (0, 8, 'Susumu_Tonegawa')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Clinton', 'Bob Dole', 'Ross Perot', 'Clinton', 'Hugh Johnson', 'Clinton', 'Clinton', 'Ronald Reagan', 'Walter Mondale', 'George Bush', 'Clinton', 'Geraghty', 'Clinton', 'Geraghty', 'Clintons', 'Geraghty', 'Geraghty']
response in server.py code:
 [(4698, 15, 'S&P_500'), (3896, 8, 'Bill_Clinton'), (3690, 4, 'Bob_Dole'), (1850, 4, 'Bob_Dole'), (233, 8, 'Bob_Dole'), (4803, 23, 'American_Stock_Exchange'), (1519, 4, 'Bob_Dole'), (2716, 7, 'Bill_Clinton'), (4488, 9, 'Dow_Jones_Industrial_Average'), (1650, 7, 'Bill_Clinton'), (4587, 6, 'NASDAQ'), (860, 4, 'Bob_Dole'), (2648, 11, 'George_W._Bush'), (2563, 11, 'White_House'), (1835, 7, 'Bill_Clinton'), (1900, 11, 'White_House'), (3729, 7, 'Bill_Clinton'), (224, 7, 'Bill_Clinton'), (848, 7, 'Bill_Clinton'), (3383, 9, 'Dow_Jones_Industrial_Average'), (2599, 14, 'Walter_Mondale'), (2590, 8, 'Democratic_Party_(United_States)'), (2500, 13, 'Ronald_Reagan'), (1012, 11, 'New_York_Stock_Exchange'), (71, 8, 'New_York_City'), (583, 15, 'Federal_Reserve_System'), (246, 10, 'Ross_Perot'), (4123, 11, 'New_York_Stock_Exchange'), (2876, 8, 'United_States_Department_of_the_Treasury'), (2155, 11, 'New_York_Stock_Exchange'), (4458, 8, 'Shane_Geraghty'), (95, 11, 'Wall_Street'), (2187, 10, 'Washington,_D.C.'), (2855, 11, 'New_York_Stock_Exchange'), (3855, 10, 'Whitewater_controversy'), (4097, 8, 'Shane_Geraghty'), (938, 12, 'Hugh_Samuel_Johnson'), (18, 11, 'New_York_Stock_Exchange'), (3014, 7, 'Hugh_Johnson_(wine_writer)'), (3616, 8, 'Shane_Geraghty'), (3751, 8, 'Shane_Geraghty')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 14, 'VocalTec')]
given spans fix. original text:  Public Service Co of Colorado said it has reached a preliminary agreement to resolve a territorial dispute with Union Rural Electric Association of Brighton, Colo. The company said, . The company said, "The tentative agreement protects UnionUnion's boundaries and also would set in motion a vote of UnionUnion's membership, which could lead to acquisition of Union by Public Service Co.." Union provides electrical service to about 14,000 members in cities and rural areas north of Denver. The company said the settlement, which is pending before the Colorado Public Utilities Commission, is under review by the Tri-State Generation and Transmission Association, which supplies power to Union, and is subject to approval by the Public Service Colorado board and UnionUnion's membership. It also will be discussed with the Colorado Rural Electric Association. It said legislation that would halt the acquisition of electric utility service territories by annexation will remain active in the Colorado House of Representatives until Union and Public Service assure legislators they are in agreement. Reuter
original word:  Co.. Co..
new split:  Co  and  ..
[(0, 6), (7, 14), (15, 17), (18, 20), (21, 29), (30, 34), (35, 37), (38, 41), (42, 49), (50, 51), (52, 63), (64, 73), (74, 76), (77, 84), (85, 86), (87, 98), (99, 106), (107, 111), (112, 117), (118, 123), (124, 132), (133, 144), (145, 147), (148, 156), (156, 157), (158, 162), (162, 163), (164, 167), (168, 175), (176, 180), (180, 181), (182, 183), (184, 187), (188, 195), (196, 200), (200, 201), (202, 203), (203, 206), (207, 216), (217, 226), (227, 235), (236, 246), (246, 248), (249, 259), (260, 263), (264, 268), (269, 274), (275, 278), (279, 281), (282, 288), (289, 290), (291, 295), (296, 298), (299, 309), (309, 311), (312, 322), (322, 323), (324, 329), (330, 335), (336, 340), (341, 343), (344, 355), (356, 358), (359, 364), (365, 367), (368, 374), (375, 382), (383, 385), (385, 387)]
{0: 0, 385: 68, 260: 44, 133: 21, 7: 1, 264: 45, 269: 46, 15: 2, 145: 22, 18: 3, 275: 47, 148: 23, 21: 4, 279: 48, 324: 57, 282: 49, 156: 24, 30: 5, 289: 50, 162: 26, 35: 6, 164: 27, 38: 7, 168: 28, 291: 51, 42: 8, 299: 53, 330: 58, 176: 29, 368: 65, 50: 9, 52: 10, 158: 25, 182: 31, 184: 32, 180: 30, 188: 33, 202: 36, 309: 54, 64: 11, 322: 56, 196: 34, 118: 19, 200: 35, 74: 12, 203: 37, 77: 13, 207: 38, 336: 59, 312: 55, 227: 40, 85: 14, 87: 15, 344: 61, 217: 39, 99: 16, 356: 62, 359: 63, 107: 17, 236: 41, 365: 64, 112: 18, 296: 52, 246: 42, 375: 66, 249: 43, 383: 67, 124: 20, 341: 60}
{311: 54, 259: 43, 132: 20, 6: 0, 263: 44, 226: 39, 290: 50, 268: 45, 14: 1, 144: 21, 17: 2, 274: 46, 147: 22, 20: 3, 278: 47, 281: 48, 367: 64, 156: 23, 29: 4, 329: 57, 288: 49, 295: 51, 162: 25, 163: 26, 37: 6, 167: 27, 41: 7, 298: 52, 175: 28, 385: 67, 49: 8, 51: 9, 180: 29, 181: 30, 201: 35, 187: 32, 63: 10, 322: 55, 195: 33, 309: 53, 200: 34, 73: 11, 203: 36, 76: 12, 34: 5, 206: 37, 335: 58, 84: 13, 86: 14, 343: 60, 216: 38, 387: 68, 323: 56, 98: 15, 355: 61, 374: 65, 358: 62, 106: 16, 235: 40, 364: 63, 111: 17, 157: 24, 117: 18, 246: 41, 248: 42, 340: 59, 123: 19, 183: 31, 382: 66}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(482, 6, 'Denver'), (991, 33, 'Colorado_House_of_Representatives'), (551, 36, 'Colorado_Public_Utilities_Commission'), (687, 5, 'Union_(American_Civil_War)'), (1041, 14, 'Public_service'), (389, 5, 'Union_(American_Civil_War)'), (359, 5, 'Union_(American_Civil_War)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(18, 8, "St._John's,_Newfoundland_and_Labrador"), (34, 5, 'Aspen,_Colorado'), (0, 14, 'Greek_festival')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Larry Fitzgerald']
response in server.py code:
 [(44, 16, 'Larry_Fitzgerald'), (17, 17, 'Arizona_Cardinals')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['arvid']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(22, 6, 'Conway,_Arkansas')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lawrence Lindsey', 'Reaser']
response in server.py code:
 [(645, 7, 'Chicago'), (907, 7, 'Midwestern_United_States'), (143, 7, 'Midwestern_United_States'), (1501, 3, 'Federal_Reserve_System'), (61, 10, 'Washington,_D.C.'), (3233, 4, 'CNBC'), (1445, 3, 'Florida'), (2751, 4, 'Federal_Open_Market_Committee'), (4219, 3, 'Federal_Reserve_System'), (2757, 29, 'Federal_Open_Market_Committee'), (1431, 12, 'Jacksonville,_Florida'), (3271, 16, 'Lawrence_B._Lindsey'), (279, 19, 'United_States_Department_of_Commerce'), (1200, 15, 'Federal_Reserve_System'), (3246, 15, 'Federal_Reserve_System'), (1953, 19, 'United_States_Department_of_Commerce'), (2978, 4, 'Federal_Open_Market_Committee'), (1832, 9, 'Dow_Jones_Industrial_Average'), (3707, 22, 'University_of_Michigan'), (1676, 8, 'United_States_Department_of_the_Treasury'), (2562, 12, 'Philadelphia'), (2542, 11, 'First_Union'), (3432, 7, 'Lawrence_B._Lindsey'), (1480, 11, 'New_York_Stock_Exchange'), (3848, 6, 'Elizabeth_Reaser')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['William Golding']
response in server.py code:
 [(28, 7, 'Newquay'), (37, 8, 'Cornwall'), (0, 15, 'William_Golding'), (100, 11, 'Marlborough_College'), (113, 9, 'Wiltshire'), (165, 26, 'Marlborough_Royal_Free_Grammar_School'), (134, 6, 'Father')]
given spans fix. original text:  Electronic Data bags flight data contract. LONDON 1996-12-06 Information technology firm Electronic Data Systems said on Friday it had bagged a contract for the first air traffic control project being funded under the Private Finance Initiative. In a statement, EDS said the contract would be in the region of 50 million stg. The contract involved upgrading the flight data processing system at the Oceanic Control Centre in Prestwick in south west Scotland for National Air Traffic Services Ltd (NATS), subsidiary of the Civil Aviation Authority. The system is responsible for the control of aircraft flying transatlantic routes from Europe and North America. The system, which would use satellite technology, is scheduled to enter service in 2000.-- London Newsroom+44-171-542 7717
original word:  Newsroom+44-171-542 Newsroom+44-171-542
new split:  Newsroom  and  +44-171-542
[(0, 10), (11, 15), (16, 20), (21, 27), (28, 32), (33, 41), (41, 42), (43, 49), (50, 60), (61, 72), (73, 83), (84, 88), (89, 99), (100, 104), (105, 112), (113, 117), (118, 120), (121, 127), (128, 130), (131, 134), (135, 141), (142, 143), (144, 152), (153, 156), (157, 160), (161, 166), (167, 170), (171, 178), (179, 186), (187, 194), (195, 200), (201, 207), (208, 213), (214, 217), (218, 225), (226, 233), (234, 244), (244, 245), (246, 248), (249, 250), (251, 260), (260, 261), (262, 265), (266, 270), (271, 274), (275, 283), (284, 289), (290, 292), (293, 295), (296, 299), (300, 306), (307, 309), (310, 312), (313, 320), (321, 324), (324, 325), (326, 329), (330, 338), (339, 347), (348, 357), (358, 361), (362, 368), (369, 373), (374, 384), (385, 391), (392, 394), (395, 398), (399, 406), (407, 414), (415, 421), (422, 424), (425, 434), (435, 437), (438, 443), (444, 448), (449, 457), (458, 461), (462, 470), (471, 474), (475, 482), (483, 491), (492, 495), (496, 497), (497, 501), (501, 502), (502, 503), (504, 514), (515, 517), (518, 521), (522, 527), (528, 536), (537, 546), (546, 547), (548, 551), (552, 558), (559, 561), (562, 573), (574, 577), (578, 581), (582, 589), (590, 592), (593, 601), (602, 608), (609, 622), (623, 629), (630, 634), (635, 641), (642, 645), (646, 651), (652, 659), (659, 660), (661, 664), (665, 671), (671, 672), (673, 678), (679, 684), (685, 688), (689, 698), (699, 709), (709, 710), (711, 713), (714, 723), (724, 726), (727, 732), (733, 740), (741, 743), (744, 749), (749, 751), (752, 758), (759, 767), (767, 778)]
{0: 0, 515: 87, 260: 41, 179: 28, 262: 42, 665: 112, 266: 43, 11: 1, 271: 44, 16: 2, 275: 45, 21: 3, 537: 91, 28: 4, 33: 5, 290: 47, 548: 93, 293: 48, 296: 49, 41: 6, 43: 7, 300: 50, 562: 96, 559: 95, 50: 8, 307: 51, 310: 52, 313: 53, 61: 9, 574: 97, 321: 54, 522: 89, 324: 55, 326: 56, 113: 15, 73: 10, 330: 57, 744: 126, 590: 100, 593: 101, 339: 58, 84: 11, 89: 12, 602: 102, 348: 59, 528: 90, 699: 118, 100: 13, 358: 60, 105: 14, 362: 61, 711: 120, 623: 104, 749: 127, 369: 62, 118: 16, 609: 103, 121: 17, 635: 106, 128: 18, 385: 64, 642: 107, 131: 19, 646: 108, 135: 20, 392: 65, 752: 128, 395: 66, 652: 109, 578: 98, 142: 21, 399: 67, 144: 22, 659: 110, 661: 111, 407: 68, 153: 23, 157: 24, 415: 69, 161: 25, 727: 123, 582: 99, 422: 70, 167: 26, 284: 46, 171: 27, 671: 113, 689: 117, 435: 72, 438: 73, 187: 29, 444: 74, 714: 121, 449: 75, 195: 30, 374: 63, 552: 94, 201: 31, 458: 76, 759: 129, 546: 92, 462: 77, 208: 32, 724: 122, 214: 33, 471: 78, 218: 34, 475: 79, 733: 124, 673: 114, 226: 35, 483: 80, 741: 125, 685: 116, 709: 119, 502: 85, 234: 36, 679: 115, 492: 81, 630: 105, 496: 82, 497: 83, 518: 88, 244: 37, 501: 84, 246: 38, 425: 71, 504: 86, 249: 39, 251: 40, 767: 130}
{514: 86, 260: 40, 261: 41, 265: 42, 10: 0, 629: 104, 270: 43, 15: 1, 274: 44, 20: 2, 536: 90, 27: 3, 517: 87, 32: 4, 289: 46, 546: 91, 547: 92, 292: 47, 295: 48, 41: 5, 42: 6, 299: 49, 434: 71, 558: 94, 726: 122, 49: 7, 306: 50, 309: 51, 521: 88, 312: 52, 60: 8, 573: 96, 320: 53, 577: 97, 324: 54, 325: 55, 72: 9, 329: 56, 778: 130, 589: 99, 592: 100, 338: 57, 83: 10, 88: 11, 601: 101, 347: 58, 698: 117, 608: 102, 99: 12, 357: 59, 104: 13, 361: 60, 622: 103, 112: 14, 117: 15, 120: 16, 634: 105, 127: 17, 384: 63, 641: 106, 130: 18, 645: 107, 134: 19, 391: 64, 394: 65, 651: 108, 141: 20, 398: 66, 143: 21, 664: 111, 659: 109, 660: 110, 406: 67, 152: 22, 751: 127, 156: 23, 414: 68, 581: 98, 160: 24, 368: 61, 283: 45, 421: 69, 166: 25, 424: 70, 551: 93, 170: 26, 684: 115, 688: 116, 178: 27, 437: 72, 758: 128, 713: 120, 186: 28, 443: 73, 671: 112, 373: 62, 448: 74, 672: 113, 194: 29, 245: 37, 709: 118, 710: 119, 200: 30, 457: 75, 461: 76, 207: 31, 561: 95, 213: 32, 470: 77, 527: 89, 217: 33, 474: 78, 732: 123, 225: 34, 482: 79, 740: 124, 678: 114, 743: 125, 233: 35, 491: 80, 749: 126, 495: 81, 497: 82, 723: 121, 244: 36, 501: 83, 502: 84, 503: 85, 248: 38, 250: 39, 767: 129}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(43, 6, 'London'), (635, 6, 'Europe'), (0, 15, 'Electronic_Data_Systems'), (89, 23, 'Electronic_Data_Systems'), (449, 8, 'Scotland'), (497, 4, 'NATS_Holdings'), (425, 9, 'Prestwick'), (646, 13, 'North_America'), (262, 3, 'Electronic_Data_Systems'), (522, 24, 'National_aviation_authority')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(21, 10, 'Marblehead,_Massachusetts')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(298, 5, 'Tokyo'), (799, 6, 'Boeing'), (738, 6, 'Boeing'), (22, 18, 'Boeing'), (989, 6, 'Boeing'), (541, 41, 'National_Transportation_Safety_Board'), (181, 21, 'Ministry_of_Transport')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(240, 12, 'West_Germany'), (392, 12, 'Ministry_(collective_executive)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(17, 6, 'Amazon_Kindle')]
given spans fix. original text:  Mexican avocados not expected in U.S. Maggie McNeil WASHINGTON 1996-08-30 U.S. Agriculture Department officials said Friday that Mexican avocados-- which are restricted from entering the continental United States-- will not likely be entering U.S. markets any time soon, even if the controversial ban were lifted today. "The opportunity to import (Mexican avocados) probably wo n't become possible for another year," said Paul Drazek, senior trade advisor to Agriculture Secretary Dan Glickman. "We could lift the ban tomorrow, but that would not mean anything immediately," said Drazek. "We probably would not see avacados come in until next season, next November." The Agriculture Department proposed more than a year ago to significantly ease an 82-year ban on Mexican avocados. Under the administration's proposal, the borders to the Mexican produce would be opened into 19 Northern and Northeastern states from November through February. The plan has raised a storm of protest from U.S. avocado growers, who are largely concentrated in California. California growers have charged that removing the restrictions, even on a limited basis, would endanger the $ 1 billion U.S. industry if potentially harmful Mexican insects were brought into the country along with the avocados. Mexican officials contend that there is no scientific basis for the ban, and that it is illegal under international trading rules of the World Trade Organisation. Proponents of the plan discount the worries of the U.S. growers and say the plan has enough safeguards built into it to eliminate any significant threat to American producers. Under the proposal, only imports of export-quality avocados growing in approved orchards in Michoacan, Mexico, the country's main avocado area, would be allowed. Mexican growers and distributors would have to abide by strict rules established by the Mexican and U.S. agriculture agencies. The California Avocado Commission-- which has spearheaded the opposition to lifting the ban-- said new data the group submitted to the Agriculture Department last spring shows the department underestimated the pest problem in Mexico and have urged that the agency reopen its study of the issue. The administration is still studying the new data, and officials have said that if experts think the information is significant, the agency could reopen its investigation. But U.S. avocado industry sources said that while they may have delayed the plan for a while, they ultimately do not expect the administration to change its position. "From a common-sense view, the department should reconsider this plan, but due to politics they will probably go ahead with this," said Tom Bellamore of the California avocado group. Administration officials said they want to get the issue resolved as quickly as possible, but said there is no timetable they are working under. "It's a very complicated issue," said the Agriculture Department's Drazek. "We'll get it resolved as quickly as we can, based on the best available science."
original word:  U.S. U.S.
new split:  U.S  and  .
[(0, 7), (8, 16), (17, 20), (21, 29), (30, 32), (33, 36), (36, 37)]
{0: 0, 17: 2, 36: 6, 21: 3, 33: 5, 8: 1, 30: 4}
{16: 1, 32: 4, 20: 2, 37: 6, 7: 0, 36: 5, 29: 3}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Dan Glickman']
response in server.py code:
 [(348, 7, 'Mexico'), (1723, 6, 'Mexico'), (1210, 7, 'Mexico'), (838, 7, 'Mexico'), (1882, 4, 'United_States'), (1782, 7, 'Mexico'), (1041, 10, 'California'), (1495, 4, 'United_States'), (2380, 4, 'United_States'), (243, 4, 'United_States'), (1173, 4, 'United_States'), (987, 4, 'United_States'), (1281, 7, 'Mexico'), (129, 7, 'Mexico'), (764, 7, 'Mexico'), (199, 13, 'United_States'), (0, 7, 'Mexico'), (1870, 7, 'Mexico'), (33, 3, 'United_States'), (2135, 6, 'Mexico'), (1053, 10, 'California'), (1712, 9, 'Michoacán'), (1600, 8, 'United_States'), (52, 10, 'Washington,_D.C.'), (1418, 24, 'World_Trade_Organization'), (2700, 10, 'California'), (671, 22, 'United_States_Department_of_Agriculture'), (2044, 22, 'United_States_Department_of_Agriculture'), (481, 12, 'Dan_Glickman'), (74, 27, 'United_States_Department_of_Agriculture'), (1913, 29, 'California_Avocado_Commission'), (2913, 22, 'United_States_Department_of_Agriculture')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(113, 8, 'Canada'), (85, 6, 'Canada'), (197, 16, 'Vancouver_Island'), (36, 30, 'Blackpool'), (122, 7, 'Citizenship')]
given spans fix. original text:  australian gold- lotion
original word:  gold- gold-
new split:  gold  and  -
[(0, 10), (11, 15), (15, 16)]
{0: 0, 11: 1, 15: 2}
{16: 2, 10: 0, 15: 1}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'Australia'), (11, 4, 'Gold')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Sherwin Campbell', 'Shivnarine Chanderpaul']
response in server.py code:
 [(283, 16, 'Sherwin_Campbell'), (63, 9, 'Melbourne'), (310, 22, 'Shivnarine_Chanderpaul'), (153, 11, 'West_Indies_cricket_team'), (223, 11, 'West_Indies_cricket_team'), (169, 9, 'Australia_national_cricket_team'), (0, 4, 'Radio_Televizija_Republike_Srpske'), (112, 12, 'World_Series')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(10, 20, 'Prison_officer')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 4, 'Iowa')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(42, 34, 'U.S._Securities_and_Exchange_Commission'), (322, 13, 'Helen_of_Troy_Limited')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Jessica Simpson', 'Jessica Simpson']
response in server.py code:
 [(64, 7, 'Jessica_Simpson'), (0, 15, 'Jessica_Simpson'), (33, 15, 'Jessica_Simpson')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Bernardin', 'Joseph Bernardin']
response in server.py code:
 [(131, 4, 'United_States'), (50, 7, 'Chicago'), (2504, 9, 'Joseph_Bernardin'), (0, 4, 'United_States'), (2667, 4, 'United_States'), (2406, 9, 'Joseph_Bernardin'), (2378, 9, 'Joseph_Bernardin'), (2566, 9, 'Joseph_Bernardin'), (86, 16, 'Joseph_Bernardin'), (1947, 7, 'Italy'), (69, 7, 'Chicago'), (267, 9, 'Joseph_Bernardin'), (2101, 9, 'Joseph_Bernardin'), (712, 7, 'Chicago'), (1981, 7, 'Chicago'), (2036, 11, 'Los_Angeles'), (663, 9, 'Joseph_Bernardin'), (136, 14, 'Catholic_Church'), (2602, 10, 'Cincinnati'), (14, 9, 'Joseph_Bernardin'), (1395, 9, 'Joseph_Bernardin'), (2550, 4, 'HIV/AIDS'), (2876, 18, 'Catholic_Church_in_the_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Martti Ahtisaari']
response in server.py code:
 [(35, 4, 'Oulu'), (169, 4, 'YMCA'), (9, 16, 'Martti_Ahtisaari'), (111, 11, 'High_school'), (94, 3, 'Bon_Jovi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(199, 8, 'Pakistan_national_cricket_team'), (77, 8, 'Pakistan_national_cricket_team'), (10, 8, 'Pakistan_national_cricket_team'), (57, 8, 'Pakistan'), (48, 7, 'Sialkot'), (215, 11, 'New_Zealand_national_cricket_team'), (24, 11, 'New_Zealand_national_cricket_team'), (91, 11, 'New_Zealand_national_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 25, 'David_Crockett_State_Park')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Don Mattingly', 'Joe Torre']
response in server.py code:
 [(27, 9, 'Joe_Torre'), (0, 13, 'Don_Mattingly'), (40, 10, 'Los_Angeles_Dodgers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(59, 12, 'West_Germany'), (90, 5, 'Avery_Dennison'), (53, 4, 'Lohn,_Schaffhausen')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(134, 21, 'Delhi_Development_Authority'), (172, 6, 'Detroit_Tigers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(22, 6, 'Vienna'), (153, 10, 'Bratislava'), (50, 9, 'Hungary'), (98, 11, 'Martonvásár'), (85, 4, 'Poet'), (138, 9, 'Scientist'), (30, 15, 'Austrian_Empire'), (0, 9, 'Richard_Adolf_Zsigmondy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(119, 8, 'Canada'), (786, 4, 'United_States'), (847, 8, 'Winnipeg'), (672, 8, 'Manitoba'), (50, 8, 'Winnipeg'), (731, 8, 'Manitoba'), (780, 3, 'Canada')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(34, 10, 'Birmingham'), (20, 4, 'Pope')]
given spans fix. original text:  Boatmen's deal could spark more mergers. Brad Dorfman CHICAGO 1996-08-30 The $ 9.5 billion proposed acquisition of Boatmen's Bancshares Inc. by NationsBank Corp. could spark a flurry of other mergers involving Missouri banks, which until last year were protected from outside buyers by state regulations. "NationsBank just strolled into the Midwest and bagged the biggest banking trophy in the landscape," said Michael Ancell, banking industry analyst at Edward D. Jones & Co. "Whoever wants a big market position in the Midwest has to come in and grab Mercantile or Commerce." St. Louis-based Mercantile Bancorp Inc., a bank holding company with $ 18.04 billion in assets, was seen by many analysts as the most attractive Missouri franchise in size after Boatmen's. Kansas City, Mo.-based Commerce Bancshares Inc., with $ 9.32 billion in assets, also could help a regional bank establish a strong presence in the lower Midwest, analysts added. "It focuses more attention on Mercantile, Commerce and Roosevelt," said James Weber, analyst at A.G. Edwards & Sons. Roosevelt Financial Group Inc is a $ 9.33 billion asset-St. Louis based thrift. "Now... the most coveted bank out there is Mercantile," Weber said. Mercantile and Commerce did not return phone calls seeking comment. Among those seen as having an interest in buying in Missouri are Minneapolis-based First Bank System Inc. and Norwest Corp., Ohio-based KeyCorp and Banc One Corp., and First Chicago NBD Corp. in Illinois. Representatives of First Bank, Norwest, Banc One and First Chicago said the banks do not comment on rumors of possible mergers or acquisitions. KeyCorp, contacted by phone, would not comment. With a presence in nine states and $ 41 billion in assets, Boatmen's was the prize in Missouri, where barriers to outside acquirers were brought down last year by a federal banking statute. "Boatmen's was the plum of Missouri and was the plum of the central Midwest," Weber said. Talk that the Missouri banks were seeking inflated prices from buyers was seen as a reason a deal has not occurred sooner. But NationsBank's bid, representing a premium of 40 percent for Boatmen's stock, was large enough to get the deal done. "I think Boatmen's was shopping itself, and everybody knew if you wanted to be the winning buyer here, you had to make the bid nobody would beat," Ancell said. But some analysts cautioned that other targets should not expect as large a premium. They also questioned whether NationsBank can recoup shareholder value with such a large bid for Boatmen's. "I think initially some stocks will trade up on sympathy, but the wild premium NationsBank put on this deal here, I do n't see a lot of other deals being done at this premium," said Michael Durante, analyst at McDonald & Co.
original word:  Co. Co.
new split:  Co  and  .
[(0, 7), (7, 9), (10, 14), (15, 20), (21, 26), (27, 31), (32, 39), (39, 40), (41, 45), (46, 53), (54, 61), (62, 72), (73, 76), (77, 78), (79, 82), (83, 90), (91, 99), (100, 111), (112, 114), (115, 122), (122, 124), (125, 135), (136, 140), (141, 143), (144, 155), (156, 161), (162, 167), (168, 173), (174, 175), (176, 182), (183, 185), (186, 191), (192, 199), (200, 209), (210, 218), (219, 224), (224, 225), (226, 231), (232, 237), (238, 242), (243, 247), (248, 252), (253, 262), (263, 267), (268, 275), (276, 282), (283, 285), (286, 291), (292, 303), (303, 304), (305, 306), (306, 317), (318, 322), (323, 331), (332, 336), (337, 340), (341, 348), (349, 352), (353, 359), (360, 363), (364, 371), (372, 379), (380, 386), (387, 389), (390, 393), (394, 403), (403, 404), (404, 405), (406, 410), (411, 418), (419, 425), (425, 426), (427, 434), (435, 443), (444, 451), (452, 454), (455, 461), (462, 464), (465, 470), (471, 472), (473, 475), (475, 476)]
{0: 0, 387: 63, 390: 64, 7: 1, 136: 22, 10: 2, 268: 44, 141: 23, 15: 3, 144: 24, 303: 49, 403: 66, 276: 45, 21: 4, 406: 68, 27: 5, 156: 25, 427: 72, 286: 47, 32: 6, 162: 26, 219: 35, 292: 48, 39: 7, 168: 27, 41: 8, 263: 43, 419: 70, 46: 9, 125: 21, 176: 29, 305: 50, 306: 51, 243: 40, 54: 10, 183: 30, 283: 46, 186: 31, 411: 69, 394: 65, 62: 11, 192: 32, 435: 73, 323: 53, 452: 75, 455: 76, 200: 33, 73: 12, 332: 54, 77: 13, 462: 77, 79: 14, 337: 55, 210: 34, 83: 15, 341: 56, 471: 79, 473: 80, 91: 16, 349: 57, 224: 36, 353: 58, 226: 37, 100: 17, 475: 81, 465: 78, 232: 38, 444: 74, 364: 60, 238: 39, 174: 28, 112: 18, 360: 59, 115: 19, 372: 61, 318: 52, 425: 71, 248: 41, 404: 67, 122: 20, 380: 62, 253: 42}
{386: 62, 282: 45, 389: 63, 262: 42, 7: 0, 363: 59, 9: 1, 317: 51, 267: 43, 140: 22, 14: 2, 143: 23, 303: 48, 275: 44, 20: 3, 405: 67, 26: 4, 155: 24, 90: 15, 410: 68, 31: 5, 161: 25, 418: 69, 291: 47, 39: 6, 40: 7, 425: 70, 426: 71, 135: 21, 434: 72, 173: 27, 175: 28, 304: 49, 306: 50, 53: 9, 182: 29, 393: 64, 476: 81, 185: 30, 443: 73, 61: 10, 191: 31, 352: 57, 322: 52, 451: 74, 464: 77, 454: 75, 199: 32, 72: 11, 331: 53, 76: 12, 45: 8, 78: 13, 461: 76, 336: 54, 209: 33, 82: 14, 340: 55, 470: 78, 472: 79, 218: 34, 475: 80, 348: 56, 224: 35, 225: 36, 99: 16, 114: 18, 231: 37, 124: 20, 167: 26, 237: 38, 111: 17, 359: 58, 242: 39, 371: 60, 285: 46, 247: 40, 404: 66, 122: 19, 379: 61, 252: 41, 403: 65}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Roosevelt', 'Weber', 'Weber', 'Ancell']
response in server.py code:
 [(1343, 17, 'Minneapolis'), (1761, 8, 'Missouri'), (1403, 10, 'Ohio'), (1473, 8, 'Illinois'), (1414, 7, 'KeyBank'), (1330, 8, 'Missouri'), (578, 15, 'St._Louis'), (1523, 8, 'Bank_One_Corporation'), (1514, 7, 'Norwest'), (1627, 7, 'KeyBank'), (1041, 19, 'A._G._Edwards'), (2472, 11, 'NationsBank'), (1892, 8, 'Missouri'), (1933, 7, 'Midwestern_United_States'), (920, 7, 'Midwestern_United_States'), (2082, 11, 'NationsBank'), (521, 7, 'Midwestern_United_States'), (306, 11, 'NationsBank'), (1969, 8, 'Missouri'), (1536, 13, 'First_Chicago_Bank'), (210, 8, 'Missouri'), (2629, 11, 'NationsBank'), (723, 8, 'Missouri'), (54, 7, 'Chicago'), (341, 7, 'Midwestern_United_States'), (767, 11, 'Kansas_City,_Missouri'), (1502, 10, 'First_Bank_of_Nigeria'), (975, 10, 'Mercantile_(schooner)'), (553, 10, 'Mercantile_(schooner)'), (1000, 9, 'Franklin_D._Roosevelt'), (2345, 6, 'Bobby_Ancell'), (567, 8, 'Commerce,_California'), (1185, 10, 'Commerce'), (987, 8, 'Commerce'), (1225, 8, 'Commerce'), (1210, 10, 'Mercantile_(schooner)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mullis']
response in server.py code:
 [(119, 11, 'Kansas_City,_Missouri'), (101, 14, 'Medical_school'), (85, 10, 'Biochemist'), (25, 6, 'Kary_Mullis')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Canada'), (147, 8, 'Canada'), (43, 8, 'Winnipeg'), (67, 20, 'Canadian_Wheat_Board'), (257, 11, 'Thunder_Bay'), (394, 9, 'Vancouver')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Farrakhan', 'Louis Farrakhan', 'Muammar Gaddafi']
response in server.py code:
 [(737, 15, 'Muammar_Gaddafi'), (459, 5, 'Libya'), (417, 9, 'Louis_Farrakhan'), (985, 5, 'Libya'), (642, 9, 'Louis_Farrakhan'), (560, 5, 'Libya'), (831, 9, 'Louis_Farrakhan'), (768, 9, 'Louis_Farrakhan'), (1250, 5, 'Libya'), (38, 9, 'Louis_Farrakhan'), (723, 6, 'Libya'), (397, 4, 'United_States'), (248, 5, 'Libya'), (1150, 17, 'Pan_Am_Flight_103'), (0, 4, 'United_States'), (159, 15, 'Louis_Farrakhan'), (180, 4, 'United_States'), (1111, 6, 'Libya'), (1002, 4, 'United_States'), (1232, 4, 'United_Nations'), (780, 15, 'Nation_of_Islam'), (49, 10, 'Washington,_D.C.'), (1074, 7, 'Tripoli'), (21, 5, 'Libya'), (331, 16, 'United_States_Department_of_State'), (75, 16, 'United_States_Department_of_State'), (960, 19, 'United_States_Department_of_the_Treasury'), (597, 24, 'United_States_Department_of_the_Treasury'), (866, 17, 'Million_Man_March'), (923, 10, 'Washington,_D.C.'), (1173, 9, 'Lockerbie'), (1184, 8, 'Scotland'), (358, 11, 'Glyn_Davies_(British_politician)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Linda Buck', 'her']
response in server.py code:
 [(68, 18, 'Harvard_University'), (29, 19, 'Professors_in_the_United_States'), (106, 3, 'Elizabeth_II'), (8, 10, 'Linda_B._Buck')]
given spans fix. original text:  New York timecharter fixtures - Dec 6. NEW YORK 1996-12-06 No new fixtures reported from New York.-- New York Commodities Desk+1 212 859 1640
original word:  York. York.
new split:  York  and  .
[(0, 3), (4, 8), (9, 20), (21, 29), (30, 31), (32, 35), (36, 37), (37, 38), (39, 42), (43, 47), (48, 58), (59, 61), (62, 65), (66, 74), (75, 83), (84, 88), (89, 92), (93, 97), (97, 98)]
{0: 0, 32: 5, 66: 13, 75: 14, 4: 1, 37: 7, 39: 8, 9: 2, 97: 18, 43: 9, 48: 10, 84: 15, 21: 3, 89: 16, 62: 12, 36: 6, 59: 11, 93: 17, 30: 4}
{65: 12, 83: 14, 35: 5, 37: 6, 38: 7, 97: 17, 8: 1, 42: 8, 61: 11, 47: 9, 74: 13, 98: 18, 3: 0, 20: 2, 88: 15, 58: 10, 92: 16, 29: 3, 31: 4}
given spans fix. original text:  New York timecharter fixtures - Dec 6. NEW YORK 1996-12-06 No new fixtures reported from New York.-- New York Commodities Desk+1 212 859 1640
original word:  Desk+1 Desk+1
new split:  Desk  and  +1
[(0, 3), (4, 8), (9, 20), (21, 29), (30, 31), (32, 35), (36, 37), (37, 38), (39, 42), (43, 47), (48, 58), (59, 61), (62, 65), (66, 74), (75, 83), (84, 88), (89, 92), (93, 97), (97, 98), (98, 100), (101, 104), (105, 109), (110, 121), (122, 126), (126, 128)]
{0: 0, 66: 13, 4: 1, 9: 2, 75: 14, 84: 15, 21: 3, 89: 16, 93: 17, 30: 4, 101: 20, 32: 5, 97: 18, 98: 19, 36: 6, 37: 7, 39: 8, 105: 21, 43: 9, 110: 22, 48: 10, 126: 24, 122: 23, 59: 11, 62: 12}
{128: 24, 65: 12, 3: 0, 8: 1, 74: 13, 83: 14, 20: 2, 88: 15, 92: 16, 29: 3, 31: 4, 97: 17, 98: 18, 35: 5, 100: 19, 37: 6, 38: 7, 104: 20, 42: 8, 109: 21, 47: 9, 121: 22, 58: 10, 61: 11, 126: 23}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(89, 8, 'New_York_City'), (39, 8, 'New_York_City'), (0, 8, 'New_York_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(350, 14, 'Kidder,_Peabody_&_Co.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Giang']
response in server.py code:
 [(89, 3, 'Agence_France-Presse'), (78, 5, 'Chau_Giang')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(4, 11, 'Bloomington,_Indiana'), (16, 13, 'Radio_broadcasting')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(320, 8, 'Europe'), (331, 13, 'Mediterranean_Sea'), (235, 4, 'Gulf_of_Mexico'), (42, 8, 'New_York_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(21, 26, 'Trinity_College,_Cambridge'), (152, 9, 'President')]
given spans fix. original text:  New York coal / ore / scrap fixtures - Dec 6. NEW YORK 1996-12-06 ORE - Maritime Queen 70,000 tonnes Dampier / Kaohsiung 20-30/12 $ 5.25 fio 35,000 / 30,000 China Steel.-- New York Commodities Desk+1 212 859 1640
original word:  Steel. Steel.
new split:  Steel  and  .
[(0, 3), (4, 8), (9, 13), (14, 15), (16, 19), (20, 21), (22, 27), (28, 36), (37, 38), (39, 42), (43, 44), (44, 45), (46, 49), (50, 54), (55, 65), (66, 69), (70, 71), (72, 80), (81, 86), (87, 93), (94, 100), (101, 108), (109, 110), (111, 120), (121, 129), (130, 131), (132, 136), (137, 140), (141, 147), (148, 149), (150, 156), (157, 162), (163, 168), (168, 169)]
{0: 0, 66: 15, 4: 1, 150: 30, 70: 16, 72: 17, 9: 2, 130: 25, 14: 3, 141: 28, 16: 4, 81: 18, 20: 5, 22: 6, 87: 19, 137: 27, 132: 26, 28: 7, 157: 31, 94: 20, 101: 21, 148: 29, 163: 32, 37: 8, 39: 9, 168: 33, 43: 10, 44: 11, 109: 22, 46: 12, 111: 23, 50: 13, 55: 14, 121: 24}
{65: 14, 3: 0, 69: 15, 71: 16, 8: 1, 108: 21, 140: 27, 13: 2, 15: 3, 80: 17, 19: 4, 21: 5, 86: 18, 100: 20, 27: 6, 156: 30, 93: 19, 162: 31, 36: 7, 38: 8, 129: 24, 169: 33, 42: 9, 44: 10, 45: 11, 110: 22, 49: 12, 147: 28, 131: 25, 54: 13, 120: 23, 136: 26, 168: 32, 149: 29}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(111, 9, 'Kaohsiung'), (46, 8, 'New_York_City'), (157, 11, 'China_Steel'), (0, 8, 'New_York_City'), (101, 7, 'Dampier,_Western_Australia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(10, 5, 'India')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['John Sandner', 'Leo Melamed']
response in server.py code:
 [(1156, 3, 'Chicago_Mercantile_Exchange'), (1380, 11, 'Leo_Melamed'), (4, 27, 'Chicago_Mercantile_Exchange'), (585, 3, 'Chicago_Mercantile_Exchange'), (1321, 3, 'Chicago_Mercantile_Exchange'), (715, 3, 'Chicago_Mercantile_Exchange'), (1334, 12, 'John_F._Sandner'), (300, 3, 'Chicago_Mercantile_Exchange'), (1743, 7, 'Leo_Melamed'), (203, 34, 'U.S._Securities_and_Exchange_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['jesus']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Clinton', 'Clinton', 'Scott Reed', 'Scott Reed', 'Clinton', 'Peter Knight', 'Carroll Campbell', 'Jack Kemp', 'Ross Perot']
response in server.py code:
 [(673, 7, 'Bill_Clinton'), (222, 7, 'Bill_Clinton'), (54, 5, 'California'), (343, 7, 'Bill_Clinton'), (631, 4, 'Bob_Dole'), (377, 4, 'Bob_Dole'), (968, 4, 'Bob_Dole'), (289, 4, 'Bob_Dole'), (931, 4, 'Bob_Dole'), (0, 4, 'Bob_Dole'), (888, 4, 'Bob_Dole'), (859, 16, 'Carroll_A._Campbell,_Jr.'), (947, 9, 'Jack_Kemp'), (112, 11, 'Republican_Party_(United_States)'), (1050, 10, 'Ross_Perot'), (1164, 34, 'Commission_on_Presidential_Debates'), (1283, 22, 'League_of_Women_Voters'), (839, 14, 'South_Carolina'), (1032, 5, 'Texas'), (46, 6, 'Irvine,_California'), (1066, 12, 'Reform_Party_of_the_United_States_of_America'), (653, 10, 'Scott_Elgin_Reed'), (399, 10, 'Scott_Elgin_Reed'), (698, 12, 'Peter_Knight_(folk_musician)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Neruda', 'González Videla', 'Neruda', 'him', 'Neruda']
response in server.py code:
 [(312, 10, 'Valparaíso'), (180, 5, 'Chile'), (392, 9, 'Argentina'), (220, 6, 'Pablo_Neruda'), (142, 15, 'Gabriel_González_Videla'), (21, 6, 'Pablo_Neruda'), (331, 6, 'Pablo_Neruda'), (375, 11, 'Maihue_Lake'), (102, 23, 'Communist_Party_of_Chile'), (250, 3, 'Fidel_Castro'), (356, 13, 'Mountain_pass'), (132, 9, 'President'), (86, 7, 'United_States_Senate')]
given spans fix. original text:  Clean tankers fixtures and enquiries - 2321 GMT. NEW YORK 1996-12-06 FIXTURES - WESTERN HEMISPHERE - Danila 28.5 16/12 Caribs / up W224 Mobil.-- New York Commodities Desk, 212-859-1640
original word:  Mobil. Mobil.
new split:  Mobil  and  .
[(0, 5), (6, 13), (14, 22), (23, 26), (27, 36), (37, 38), (39, 43), (44, 47), (47, 48), (49, 52), (53, 57), (58, 68), (69, 77), (78, 79), (80, 87), (88, 98), (99, 100), (101, 107), (108, 112), (113, 118), (119, 125), (126, 127), (128, 130), (131, 135), (136, 141), (141, 142)]
{0: 0, 128: 22, 131: 23, 49: 9, 6: 1, 136: 24, 44: 7, 141: 25, 14: 2, 80: 14, 78: 13, 23: 3, 88: 15, 27: 4, 69: 12, 101: 17, 99: 16, 37: 5, 39: 6, 108: 18, 47: 8, 113: 19, 53: 10, 119: 20, 58: 11, 126: 21}
{130: 22, 43: 6, 68: 11, 5: 0, 135: 23, 13: 1, 142: 25, 77: 12, 141: 24, 22: 2, 87: 14, 36: 4, 26: 3, 79: 13, 48: 8, 98: 15, 100: 16, 38: 5, 107: 17, 47: 7, 112: 18, 52: 9, 118: 19, 57: 10, 125: 20, 127: 21}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(44, 3, 'Greenwich_Mean_Time'), (136, 5, 'Mobil'), (49, 8, 'New_York_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['David Gross', 'Frank Wilczek']
response in server.py code:
 [(81, 20, 'Princeton_University'), (45, 16, 'Postgraduate_education'), (63, 13, 'Frank_Wilczek'), (9, 11, 'David_Gross')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Amber Le Bon', 'Giles Deacon']
response in server.py code:
 [(0, 12, 'Amber_Le_Bon'), (27, 12, 'Giles_Deacon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(18, 9, 'Fastener')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Purcell']
response in server.py code:
 [(372, 6, 'Canada'), (180, 11, 'RMS_Titanic'), (437, 12, 'Boston'), (358, 12, 'Newfoundland'), (266, 7, 'RMS_Titanic'), (0, 7, 'RMS_Titanic'), (873, 7, 'RMS_Titanic'), (38, 8, 'New_York_City'), (1178, 7, 'Purcell,_Oklahoma')]
given spans fix. original text:  Dirty tanker fixtures and enquiries - 2317 GMT. NEW YORK 1996-12-06 MIDEAST / RED SEA - Thai Resource 264 31/12 Ras Tanura / Red Sea W46.50 Mobil. MEDITERRANEAN - Lula I 85 25/12 Sidi Kreir / Augusta W100 Exxon. Spetses 139 17/12 Sidi Kreir / Augusta W97.50 Exxon. Mesipia 77.5 17/12 Bajaia / Fos W105 Exxon.-- New York Commodities Desk+1 212 859 1640
original word:  Exxon. Exxon.
new split:  Exxon  and  .
[(0, 5), (6, 12), (13, 21), (22, 25), (26, 35), (36, 37), (38, 42), (43, 46), (46, 47), (48, 51), (52, 56), (57, 67), (68, 75), (76, 77), (78, 81), (82, 85), (86, 87), (88, 92), (93, 101), (102, 105), (106, 111), (112, 115), (116, 122), (123, 124), (125, 128), (129, 132), (133, 139), (140, 145), (145, 146), (147, 160), (161, 162), (163, 167), (168, 169), (170, 172), (173, 178), (179, 183), (184, 189), (190, 191), (192, 199), (200, 204), (205, 210), (210, 211), (212, 219), (220, 223), (224, 229), (230, 234), (235, 240), (241, 242), (243, 250), (251, 257), (258, 263), (263, 264), (265, 272), (273, 277), (278, 283), (284, 290), (291, 292), (293, 296), (297, 301), (302, 307), (307, 308)]
{0: 0, 129: 25, 258: 50, 307: 60, 133: 26, 6: 1, 263: 51, 265: 52, 140: 27, 13: 2, 145: 28, 147: 29, 302: 59, 22: 3, 26: 4, 284: 55, 161: 30, 278: 54, 163: 31, 36: 5, 293: 57, 38: 6, 168: 32, 297: 58, 170: 33, 43: 7, 173: 34, 46: 8, 48: 9, 179: 35, 52: 10, 184: 36, 57: 11, 190: 37, 192: 38, 68: 12, 200: 39, 76: 13, 205: 40, 78: 14, 82: 15, 291: 56, 212: 42, 86: 16, 88: 17, 220: 43, 93: 18, 224: 44, 251: 49, 230: 45, 102: 19, 273: 53, 106: 20, 235: 46, 210: 41, 112: 21, 241: 47, 243: 48, 116: 22, 123: 23, 125: 24}
{128: 24, 257: 49, 132: 25, 5: 0, 263: 50, 264: 51, 307: 59, 139: 26, 12: 1, 272: 52, 145: 27, 146: 28, 21: 2, 25: 3, 283: 54, 160: 29, 162: 30, 35: 4, 292: 56, 37: 5, 167: 31, 296: 57, 169: 32, 42: 6, 172: 33, 301: 58, 46: 7, 47: 8, 178: 34, 51: 9, 308: 60, 183: 35, 56: 10, 189: 36, 191: 37, 67: 11, 199: 38, 75: 12, 204: 39, 77: 13, 81: 14, 210: 40, 211: 41, 85: 15, 87: 16, 219: 42, 92: 17, 250: 48, 223: 43, 229: 44, 101: 18, 105: 19, 234: 45, 111: 20, 240: 46, 242: 47, 115: 21, 122: 22, 124: 23, 290: 55, 277: 53}
given spans fix. original text:  Dirty tanker fixtures and enquiries - 2317 GMT. NEW YORK 1996-12-06 MIDEAST / RED SEA - Thai Resource 264 31/12 Ras Tanura / Red Sea W46.50 Mobil. MEDITERRANEAN - Lula I 85 25/12 Sidi Kreir / Augusta W100 Exxon. Spetses 139 17/12 Sidi Kreir / Augusta W97.50 Exxon. Mesipia 77.5 17/12 Bajaia / Fos W105 Exxon.-- New York Commodities Desk+1 212 859 1640
original word:  Desk+1 Desk+1
new split:  Desk  and  +1
[(0, 5), (6, 12), (13, 21), (22, 25), (26, 35), (36, 37), (38, 42), (43, 46), (46, 47), (48, 51), (52, 56), (57, 67), (68, 75), (76, 77), (78, 81), (82, 85), (86, 87), (88, 92), (93, 101), (102, 105), (106, 111), (112, 115), (116, 122), (123, 124), (125, 128), (129, 132), (133, 139), (140, 145), (145, 146), (147, 160), (161, 162), (163, 167), (168, 169), (170, 172), (173, 178), (179, 183), (184, 189), (190, 191), (192, 199), (200, 204), (205, 210), (210, 211), (212, 219), (220, 223), (224, 229), (230, 234), (235, 240), (241, 242), (243, 250), (251, 257), (258, 263), (263, 264), (265, 272), (273, 277), (278, 283), (284, 290), (291, 292), (293, 296), (297, 301), (302, 307), (307, 308), (308, 310), (311, 314), (315, 319), (320, 331), (332, 336), (336, 338)]
{0: 0, 129: 25, 258: 50, 307: 60, 133: 26, 6: 1, 263: 51, 265: 52, 140: 27, 13: 2, 320: 64, 145: 28, 147: 29, 302: 59, 22: 3, 26: 4, 284: 55, 161: 30, 278: 54, 163: 31, 36: 5, 293: 57, 38: 6, 308: 61, 168: 32, 297: 58, 170: 33, 43: 7, 173: 34, 46: 8, 48: 9, 179: 35, 52: 10, 311: 62, 184: 36, 57: 11, 315: 63, 190: 37, 192: 38, 68: 12, 200: 39, 332: 65, 76: 13, 205: 40, 78: 14, 336: 66, 82: 15, 291: 56, 212: 42, 86: 16, 88: 17, 220: 43, 93: 18, 224: 44, 251: 49, 230: 45, 102: 19, 273: 53, 106: 20, 235: 46, 210: 41, 112: 21, 241: 47, 243: 48, 116: 22, 123: 23, 125: 24}
{128: 24, 257: 49, 132: 25, 5: 0, 263: 50, 264: 51, 307: 59, 139: 26, 12: 1, 272: 52, 145: 27, 146: 28, 21: 2, 25: 3, 283: 54, 160: 29, 162: 30, 35: 4, 292: 56, 37: 5, 167: 31, 296: 57, 169: 32, 42: 6, 172: 33, 301: 58, 46: 7, 47: 8, 178: 34, 51: 9, 308: 60, 310: 61, 183: 35, 56: 10, 314: 62, 189: 36, 191: 37, 67: 11, 199: 38, 75: 12, 204: 39, 77: 13, 336: 65, 81: 14, 210: 40, 211: 41, 85: 15, 87: 16, 331: 64, 219: 42, 92: 17, 250: 48, 223: 43, 229: 44, 101: 18, 105: 19, 234: 45, 338: 66, 111: 20, 240: 46, 242: 47, 115: 21, 122: 22, 319: 63, 124: 23, 290: 55, 277: 53}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(302, 5, 'ExxonMobil'), (140, 5, 'Mobil'), (258, 5, 'ExxonMobil'), (78, 7, 'Red_Sea'), (205, 5, 'ExxonMobil'), (43, 3, 'Greenwich_Mean_Time'), (112, 10, 'Ras_Tanura'), (125, 7, 'Red_Sea'), (48, 8, 'New_York_City'), (147, 13, 'Mediterranean_Sea'), (243, 7, 'Augusta,_Georgia'), (212, 7, 'Spetses'), (192, 7, 'Augusta,_Georgia'), (293, 3, 'Marseille')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(61, 6, 'Mthatha'), (52, 5, 'Mvezo')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(57, 19, 'PlayStation_Network'), (0, 8, 'Xbox_360')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Lyrics')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Yasser Arafat', 'Benjamin Netanyahu', 'Erdmann', 'David Levy', 'Klaus Kinkel', 'Volker Ruehe', 'Yitzhak Mordechai', 'Ezer Weizman', 'Shimon Peres']
response in server.py code:
 [(1618, 4, 'Bonn'), (506, 18, 'Benjamin_Netanyahu'), (1672, 6, 'Israel'), (1924, 12, 'Shimon_Peres'), (1190, 7, 'Israel'), (1094, 6, 'Israel'), (1281, 12, 'Klaus_Kinkel'), (1215, 10, 'David_Levy_(Israeli_politician)'), (1333, 6, 'Klaus_Kinkel'), (206, 6, 'Israel'), (459, 13, 'Yasser_Arafat'), (1010, 9, 'Jerusalem'), (17, 11, 'Middle_East'), (193, 11, 'Middle_East'), (291, 9, 'Jerusalem'), (1478, 7, 'Israel'), (628, 7, 'Israel'), (1892, 9, 'Benjamin_Netanyahu'), (1815, 12, 'Ezer_Weizman'), (1624, 6, 'Germany'), (1358, 11, 'Middle_East'), (36, 4, 'Bonn'), (1648, 12, 'Volker_Rühe'), (1797, 7, 'Israel'), (1044, 4, 'Bonn'), (1262, 6, 'Germany'), (1509, 9, 'Benjamin_Netanyahu'), (723, 6, 'Germany'), (1755, 7, 'Israel'), (56, 6, 'Germany'), (80, 8, 'Israel'), (1238, 4, 'Bonn'), (250, 6, 'Jews'), (1729, 5, 'Volker_Rühe'), (1324, 4, 'David_Levy_(Israeli_politician)'), (351, 14, 'East_Jerusalem'), (1117, 6, 'Jews'), (1600, 4, 'David_Levy_(Israeli_politician)'), (0, 4, 'Bonn'), (437, 11, 'State_of_Palestine'), (982, 12, 'Arab_citizens_of_Israel'), (1059, 14, 'European_Union'), (1440, 4, 'David_Levy_(Israeli_politician)'), (257, 9, 'Palestinian_territories'), (1775, 17, 'Yitzhak_Mordechai'), (93, 12, 'State_of_Palestine'), (1142, 9, 'Palestinian_territories'), (1021, 7, 'Bernd_Erdmann'), (730, 16, 'Ministry_of_Foreign_Affairs_(Israel)'), (326, 4, 'Arab_world')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(920, 4, 'United_States'), (299, 14, 'Goldman_Sachs'), (881, 13, 'New_York_City'), (1039, 21, 'London_Stock_Exchange'), (70, 13, 'New_York_City'), (965, 8, 'Europe'), (50, 8, 'New_York_City'), (221, 8, 'Europe'), (30, 4, 'Euro'), (0, 3, 'New_York_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['His']
response in server.py code:
 [(33, 5, 'Paris'), (136, 20, 'Thessaloniki'), (48, 7, 'Italy'), (56, 6, 'Jews'), (205, 7, 'Actor')]
given spans fix. original text:  Promising new findings in the use of a controversial experimental drug called Interleukin-2 as a cure for cancer will be published in the April 9 issue of the prestigious New England Journal of Medicine, according to a Wall Street analyst who has obtained an advance copy of the magazine. Among interleukins principal U. S. makers are Cetus Corp CTUS, headquartered in Emeryville, Calif., and Immunex Corp IMNX, based in Seattle, Wash. The journal, to be released late today, contains two articles reporting high remission rates several cancer types. The journal also contains a signed editorial concluding that the new results mark a significant milestone in the search for a successful immunotherapy for cancer. Interleukin-2, also known as IL-2, is a substance naturally produced by living cells in the laboratory. The drug is controversial because it was widely praised as a promising cancer treatment in early reports on its effectiveness in late 1985, only to come under criticism a year later for its failure to live up to its promise and due to its ravaging side effects. One of the new studies, conducted by Dr. William West of Biotherapeutics Inc of Franklin, Tenn., is particularly significant because it found far fewer harsh side effects after it changed the way in which the drug is administered. In that study, researchers administered IL-2 to 48 cancer patients and found a 50-pct remission rate for kidney cancers and a 50 pct remission rate for melanoma, a type of skin cancer, according to Prudential-Bache Securities Stuart Weisbrod, who obtained the advance copy of the magazine. For rectal and colon cancer, the researchers found no remissions, but none of the 48 patients treated had side effects serious enough to be placed under intensive hospital care, according to the article. In the second study, whose principal author is Dr. Steven Rosenberg of the National Cancer Institute, researchers administered IL-2 to 157 cancer patients and found a 33 pct remission rate in cancers of the kidney, a 27 pct rate in melanomas and a 15 pct rate in cancers of the colon and rectum. In the National Cancer Institute trials, a total of four patients died, the magazine reported, confirming the harshness of the drugs side effects as originally administered. Perhaps we are at the end of the beginning of the search for successful immunotherapy for cancer, said the editorial, signed by John Durant of Philadelphias Chase Cancer Center. These observations reported by Rosenberg and West surely did not describe successful practical approaches ready for widespread applications in the therapy of cancer patients, the editorial said. On the other hand, if they reflect, as seems possible, a successful manipulation of the cellular immune system, then we may be near the end of our search for a meaningful direction in the immunuotherapy of cancer, the editorial concluded.
original word:  Calif. Calif.
new split:  Calif  and  .
[(0, 9), (10, 13), (14, 22), (23, 25), (26, 29), (30, 33), (34, 36), (37, 38), (39, 52), (53, 65), (66, 70), (71, 77), (78, 91), (92, 94), (95, 96), (97, 101), (102, 105), (106, 112), (113, 117), (118, 120), (121, 130), (131, 133), (134, 137), (138, 143), (144, 145), (146, 151), (152, 154), (155, 158), (159, 170), (171, 174), (175, 182), (183, 190), (191, 193), (194, 202), (202, 203), (204, 213), (214, 216), (217, 218), (219, 223), (224, 230), (231, 238), (239, 242), (243, 246), (247, 255), (256, 258), (259, 266), (267, 271), (272, 274), (275, 278), (279, 287), (287, 288), (289, 294), (295, 307), (308, 317), (318, 320), (321, 323), (324, 330), (331, 334), (335, 340), (341, 345), (346, 350), (350, 351), (352, 365), (366, 368), (369, 379), (379, 380), (381, 386), (386, 387)]
{0: 0, 256: 44, 386: 67, 131: 21, 134: 22, 10: 1, 267: 46, 369: 64, 194: 33, 14: 2, 144: 24, 146: 25, 259: 45, 366: 63, 23: 3, 152: 26, 26: 4, 155: 27, 30: 5, 159: 28, 289: 51, 34: 6, 37: 7, 39: 8, 171: 29, 175: 30, 308: 53, 53: 9, 183: 31, 287: 50, 138: 23, 318: 54, 191: 32, 279: 49, 321: 55, 66: 10, 324: 56, 71: 11, 275: 48, 202: 34, 331: 57, 204: 35, 78: 12, 335: 58, 352: 62, 341: 59, 214: 36, 217: 37, 346: 60, 219: 38, 92: 13, 350: 61, 95: 14, 224: 39, 97: 15, 102: 16, 231: 40, 106: 17, 295: 52, 272: 47, 239: 41, 113: 18, 243: 42, 118: 19, 247: 43, 121: 20, 379: 65, 381: 66}
{386: 66, 130: 20, 294: 51, 133: 21, 193: 32, 9: 0, 266: 45, 13: 1, 143: 23, 145: 24, 274: 47, 387: 67, 22: 2, 151: 25, 25: 3, 154: 26, 29: 4, 158: 27, 287: 49, 288: 50, 33: 5, 278: 48, 36: 6, 38: 7, 170: 28, 174: 29, 368: 63, 307: 52, 52: 8, 350: 60, 182: 30, 137: 22, 351: 61, 330: 56, 317: 53, 190: 31, 320: 54, 65: 9, 323: 55, 70: 10, 202: 33, 203: 34, 77: 11, 334: 57, 271: 46, 340: 58, 213: 35, 216: 36, 345: 59, 218: 37, 91: 12, 94: 13, 223: 38, 96: 14, 101: 15, 230: 39, 105: 16, 365: 62, 238: 40, 112: 17, 242: 41, 258: 44, 117: 18, 246: 42, 120: 19, 379: 64, 380: 65, 255: 43}
given spans fix. original text:  Promising new findings in the use of a controversial experimental drug called Interleukin-2 as a cure for cancer will be published in the April 9 issue of the prestigious New England Journal of Medicine, according to a Wall Street analyst who has obtained an advance copy of the magazine. Among interleukins principal U. S. makers are Cetus Corp CTUS, headquartered in Emeryville, Calif., and Immunex Corp IMNX, based in Seattle, Wash. The journal, to be released late today, contains two articles reporting high remission rates several cancer types. The journal also contains a signed editorial concluding that the new results mark a significant milestone in the search for a successful immunotherapy for cancer. Interleukin-2, also known as IL-2, is a substance naturally produced by living cells in the laboratory. The drug is controversial because it was widely praised as a promising cancer treatment in early reports on its effectiveness in late 1985, only to come under criticism a year later for its failure to live up to its promise and due to its ravaging side effects. One of the new studies, conducted by Dr. William West of Biotherapeutics Inc of Franklin, Tenn., is particularly significant because it found far fewer harsh side effects after it changed the way in which the drug is administered. In that study, researchers administered IL-2 to 48 cancer patients and found a 50-pct remission rate for kidney cancers and a 50 pct remission rate for melanoma, a type of skin cancer, according to Prudential-Bache Securities Stuart Weisbrod, who obtained the advance copy of the magazine. For rectal and colon cancer, the researchers found no remissions, but none of the 48 patients treated had side effects serious enough to be placed under intensive hospital care, according to the article. In the second study, whose principal author is Dr. Steven Rosenberg of the National Cancer Institute, researchers administered IL-2 to 157 cancer patients and found a 33 pct remission rate in cancers of the kidney, a 27 pct rate in melanomas and a 15 pct rate in cancers of the colon and rectum. In the National Cancer Institute trials, a total of four patients died, the magazine reported, confirming the harshness of the drugs side effects as originally administered. Perhaps we are at the end of the beginning of the search for successful immunotherapy for cancer, said the editorial, signed by John Durant of Philadelphias Chase Cancer Center. These observations reported by Rosenberg and West surely did not describe successful practical approaches ready for widespread applications in the therapy of cancer patients, the editorial said. On the other hand, if they reflect, as seems possible, a successful manipulation of the cellular immune system, then we may be near the end of our search for a meaningful direction in the immunuotherapy of cancer, the editorial concluded.
original word:  Tenn. Tenn.
new split:  Tenn  and  .
[(0, 9), (10, 13), (14, 22), (23, 25), (26, 29), (30, 33), (34, 36), (37, 38), (39, 52), (53, 65), (66, 70), (71, 77), (78, 91), (92, 94), (95, 96), (97, 101), (102, 105), (106, 112), (113, 117), (118, 120), (121, 130), (131, 133), (134, 137), (138, 143), (144, 145), (146, 151), (152, 154), (155, 158), (159, 170), (171, 174), (175, 182), (183, 190), (191, 193), (194, 202), (202, 203), (204, 213), (214, 216), (217, 218), (219, 223), (224, 230), (231, 238), (239, 242), (243, 246), (247, 255), (256, 258), (259, 266), (267, 271), (272, 274), (275, 278), (279, 287), (287, 288), (289, 294), (295, 307), (308, 317), (318, 320), (321, 323), (324, 330), (331, 334), (335, 340), (341, 345), (346, 350), (350, 351), (352, 365), (366, 368), (369, 379), (379, 380), (381, 386), (386, 387), (387, 388), (389, 392), (393, 400), (401, 405), (406, 410), (410, 411), (412, 417), (418, 420), (421, 428), (428, 429), (430, 434), (434, 435), (436, 439), (440, 447), (447, 448), (449, 451), (452, 454), (455, 463), (464, 468), (469, 474), (474, 475), (476, 484), (485, 488), (489, 497), (498, 507), (508, 512), (513, 522), (523, 528), (529, 536), (537, 543), (544, 549), (549, 550), (551, 554), (555, 562), (563, 567), (568, 576), (577, 578), (579, 585), (586, 595), (596, 606), (607, 611), (612, 615), (616, 619), (620, 627), (628, 632), (633, 634), (635, 646), (647, 656), (657, 659), (660, 663), (664, 670), (671, 674), (675, 676), (677, 687), (688, 701), (702, 705), (706, 712), (712, 713), (714, 727), (727, 728), (729, 733), (734, 739), (740, 742), (743, 747), (747, 748), (749, 751), (752, 753), (754, 763), (764, 773), (774, 782), (783, 785), (786, 792), (793, 798), (799, 801), (802, 805), (806, 816), (816, 817), (818, 821), (822, 826), (827, 829), (830, 843), (844, 851), (852, 854), (855, 858), (859, 865), (866, 873), (874, 876), (877, 878), (879, 888), (889, 895), (896, 905), (906, 908), (909, 914), (915, 922), (923, 925), (926, 929), (930, 943), (944, 946), (947, 951), (952, 956), (956, 957), (958, 962), (963, 965), (966, 970), (971, 976), (977, 986), (987, 988), (989, 993), (994, 999), (1000, 1003), (1004, 1007), (1008, 1015), (1016, 1018), (1019, 1023), (1024, 1026), (1027, 1029), (1030, 1033), (1034, 1041), (1042, 1045), (1046, 1049), (1050, 1052), (1053, 1056), (1057, 1065), (1066, 1070), (1071, 1078), (1078, 1079), (1080, 1083), (1084, 1086), (1087, 1090), (1091, 1094), (1095, 1102), (1102, 1103), (1104, 1113), (1114, 1116), (1117, 1120), (1121, 1128), (1129, 1133), (1134, 1136), (1137, 1152), (1153, 1156), (1157, 1159), (1160, 1168), (1168, 1169), (1170, 1174), (1174, 1175)]
{0: 0, 513: 94, 1091: 197, 1027: 183, 1030: 184, 10: 1, 523: 95, 14: 2, 529: 96, 1042: 186, 1046: 187, 23: 3, 537: 97, 26: 4, 1053: 189, 30: 5, 544: 98, 1057: 190, 34: 6, 37: 7, 1024: 182, 39: 8, 1066: 191, 555: 101, 1071: 192, 563: 102, 53: 9, 1078: 193, 568: 103, 95: 14, 1084: 195, 1034: 185, 1087: 196, 577: 104, 66: 10, 579: 105, 71: 11, 586: 106, 78: 12, 1104: 200, 440: 81, 596: 107, 1114: 201, 92: 13, 1117: 202, 607: 108, 97: 15, 612: 109, 102: 16, 616: 110, 1129: 204, 106: 17, 620: 111, 1134: 205, 113: 18, 628: 112, 118: 19, 121: 20, 635: 114, 1102: 199, 1153: 207, 131: 21, 1157: 208, 134: 22, 647: 115, 1160: 209, 138: 23, 194: 33, 144: 24, 657: 116, 146: 25, 660: 117, 1174: 212, 152: 26, 155: 27, 1050: 188, 159: 28, 675: 120, 677: 121, 1137: 206, 171: 29, 175: 30, 688: 122, 183: 31, 799: 141, 202: 34, 702: 123, 191: 32, 706: 124, 712: 125, 714: 126, 204: 35, 214: 36, 727: 127, 729: 128, 219: 38, 734: 129, 549: 99, 224: 39, 740: 130, 743: 131, 551: 100, 749: 133, 239: 41, 752: 134, 754: 135, 243: 42, 247: 43, 764: 136, 256: 44, 259: 45, 774: 137, 267: 46, 783: 138, 272: 47, 786: 139, 275: 48, 279: 49, 793: 140, 287: 50, 289: 51, 802: 142, 806: 143, 295: 52, 816: 144, 818: 145, 308: 53, 822: 146, 827: 147, 318: 54, 321: 55, 324: 56, 1170: 211, 331: 57, 844: 149, 335: 58, 1080: 194, 852: 150, 341: 59, 855: 151, 346: 60, 859: 152, 350: 61, 352: 62, 1168: 210, 866: 153, 633: 113, 874: 154, 231: 40, 877: 155, 366: 63, 879: 156, 369: 64, 830: 148, 889: 157, 217: 37, 379: 65, 381: 66, 896: 158, 386: 67, 387: 68, 389: 69, 1121: 203, 393: 70, 906: 159, 909: 160, 401: 71, 915: 161, 406: 72, 410: 73, 923: 162, 412: 74, 926: 163, 930: 164, 421: 76, 747: 132, 1095: 198, 428: 77, 430: 78, 944: 165, 434: 79, 947: 166, 436: 80, 952: 167, 671: 119, 956: 168, 958: 169, 447: 82, 449: 83, 963: 170, 452: 84, 966: 171, 455: 85, 971: 172, 418: 75, 464: 86, 977: 173, 469: 87, 474: 88, 987: 174, 476: 89, 989: 175, 994: 176, 485: 90, 1000: 177, 489: 91, 664: 118, 1004: 178, 1008: 179, 498: 92, 1016: 180, 1019: 181, 508: 93}
{512: 93, 1026: 182, 1029: 183, 9: 0, 522: 94, 13: 1, 528: 95, 1041: 185, 1045: 186, 22: 2, 536: 96, 25: 3, 1168: 209, 1052: 188, 29: 4, 543: 97, 1056: 189, 33: 5, 36: 6, 549: 98, 550: 99, 1065: 190, 554: 100, 434: 78, 1070: 191, 562: 101, 1175: 212, 52: 8, 94: 13, 1078: 192, 567: 102, 1083: 194, 1086: 195, 576: 103, 65: 9, 578: 104, 70: 10, 585: 105, 951: 166, 77: 11, 1102: 198, 1103: 199, 595: 106, 1113: 200, 91: 12, 1116: 201, 606: 107, 96: 14, 611: 108, 101: 15, 615: 109, 1128: 203, 105: 16, 619: 110, 1133: 204, 112: 17, 627: 111, 117: 18, 120: 19, 634: 113, 1152: 206, 130: 20, 1156: 207, 133: 21, 646: 114, 193: 32, 925: 162, 137: 22, 143: 23, 656: 115, 145: 24, 659: 116, 1174: 211, 151: 25, 1079: 193, 154: 26, 158: 27, 1136: 205, 674: 119, 676: 120, 170: 28, 174: 29, 687: 121, 182: 30, 701: 122, 190: 31, 705: 123, 712: 124, 713: 125, 202: 33, 203: 34, 632: 112, 213: 35, 727: 126, 728: 127, 218: 37, 733: 128, 223: 38, 739: 129, 38: 7, 742: 130, 747: 131, 748: 132, 238: 40, 751: 133, 753: 134, 242: 41, 246: 42, 763: 135, 255: 43, 258: 44, 773: 136, 266: 45, 782: 137, 271: 46, 785: 138, 274: 47, 1049: 187, 278: 48, 792: 139, 986: 173, 798: 140, 287: 49, 288: 50, 801: 141, 805: 142, 294: 51, 1159: 208, 816: 143, 817: 144, 307: 52, 1033: 184, 821: 145, 826: 146, 317: 53, 320: 54, 323: 55, 330: 56, 843: 148, 1120: 202, 334: 57, 851: 149, 340: 58, 854: 150, 345: 59, 858: 151, 216: 36, 350: 60, 351: 61, 865: 152, 230: 39, 1169: 210, 873: 153, 876: 154, 365: 62, 878: 155, 829: 147, 368: 63, 888: 156, 379: 64, 380: 65, 895: 157, 386: 66, 387: 67, 388: 68, 392: 69, 905: 158, 663: 117, 908: 159, 1090: 196, 400: 70, 914: 160, 405: 71, 922: 161, 411: 73, 410: 72, 929: 163, 420: 75, 1094: 197, 428: 76, 429: 77, 943: 164, 946: 165, 435: 79, 670: 118, 439: 80, 956: 167, 957: 168, 447: 81, 448: 82, 962: 169, 451: 83, 965: 170, 454: 84, 417: 74, 970: 171, 463: 85, 976: 172, 468: 86, 474: 87, 475: 88, 988: 174, 993: 175, 484: 89, 999: 176, 488: 90, 1003: 177, 1007: 178, 497: 91, 1015: 179, 1018: 180, 507: 92, 1023: 181}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['William West', 'John Durant']
response in server.py code:
 [(381, 5, 'California'), (421, 7, 'Seattle'), (369, 10, 'Emeryville,_California'), (171, 31, 'The_New_England_Journal_of_Medicine'), (1880, 25, 'National_Cancer_Institute'), (1170, 4, 'Tennessee'), (2108, 25, 'National_Cancer_Institute'), (335, 10, 'Cetus_Corporation'), (1509, 27, 'Prudential_Securities'), (2498, 4, 'Western_world'), (430, 4, 'Washington_(state)'), (219, 11, 'Wall_Street'), (2403, 11, 'John_Charles_Durant'), (2484, 9, 'Rosenberg,_Texas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(38, 9, 'Microsoft')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(278, 6, 'London'), (0, 21, 'Toronto-Dominion_Bank')]
given spans fix. original text:  mapofwales
original word:  mapofwales mapofwales
new split:  map  and  ofwales
[(0, 3), (3, 10)]
{0: 0, 3: 1}
{10: 1, 3: 0}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Charles de Gaulle', 'Christian Blanc', 'Alain Juppe']
response in server.py code:
 [(50, 5, 'Paris'), (0, 6, 'France'), (67, 6, 'France'), (1283, 11, 'Alain_Juppé'), (458, 4, 'French_Democratic_Confederation_of_Labour'), (431, 10, 'Air_France'), (740, 4, 'French_Democratic_Confederation_of_Labour'), (168, 10, 'Air_France'), (856, 5, 'Paris'), (142, 5, 'Paris'), (767, 3, 'General_Confederation_of_Labour_(France)'), (1109, 4, 'French_Democratic_Confederation_of_Labour'), (794, 10, 'Air_France'), (360, 10, 'Air_France'), (23, 10, 'Air_France'), (256, 7, 'Guinea'), (1001, 15, 'Christian_Blanc'), (381, 7, 'Conakry'), (980, 10, 'Air_France'), (821, 17, 'Charles_de_Gaulle'), (1403, 5, 'Alain_Juppé'), (1662, 5, 'Alain_Juppé'), (101, 7, 'Africa'), (504, 7, 'Africa'), (14, 7, 'Africa'), (299, 13, 'Saint-Bernard,_Isère')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Neruda', 'Jan Neruda']
response in server.py code:
 [(81, 4, 'Poet'), (43, 4, 'Poet'), (48, 10, 'Jan_Neruda'), (0, 6, 'Pablo_Neruda'), (37, 5, 'Czech_Republic'), (15, 3, 'Bon_Jovi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(663, 7, 'Reuters'), (51, 6, 'Berlin'), (423, 6, 'Berlin'), (69, 6, 'Germany'), (0, 6, 'Germany'), (337, 11, 'Netherlands'), (411, 6, 'Velten')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Edouard Saouma']
response in server.py code:
 [(285, 14, 'Edouard_Saouma'), (549, 6, 'Edouard_Saouma'), (305, 18, 'Sub-Saharan_Africa'), (391, 8, 'Far_East')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 4, 'United_States_Department_of_Agriculture'), (212, 4, 'United_States_Department_of_Agriculture'), (40, 10, 'Des_Moines,_Iowa')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(7, 6, 'Brazil')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Richard Bernstein']
response in server.py code:
 [(112, 17, 'Richard_H._Bernstein')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Pauli', 'His', 'Ernst Mach']
response in server.py code:
 [(18, 6, 'Vienna'), (149, 9, 'Physicist'), (0, 5, 'Wolfgang_Pauli'), (30, 7, 'Chemist'), (159, 10, 'Ernst_Mach'), (96, 3, 'Wilhelm_His,_Sr.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Nicole']
response in server.py code:
 [(460, 5, 'Netherlands'), (62, 11, 'Netherlands'), (1084, 7, 'Germany'), (363, 5, 'Netherlands'), (709, 6, 'Germany'), (85, 5, 'Netherlands'), (35, 5, 'Netherlands'), (691, 6, 'Berlin'), (136, 6, 'Germany'), (1211, 5, 'Netherlands'), (51, 9, 'Groningen'), (8, 6, 'Germany'), (1135, 5, 'Netherlands'), (211, 9, 'Groningen'), (326, 9, 'Groningen'), (679, 6, 'Velten')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
given spans fix. original text:  Indian copper falls, state firm may cut rates. BOMBAY 1996-08-30 Indian copper prices fell on Friday as dealers awaited an announcement relating to price cuts by state-owned producer, Hindustan Copper Ltd, traders said. Nickel extended gains while other base metals were unchanged in narrow trade, they said. Ready copper fell by 150 rupees at 12,350 rupees per quintal on fresh offerings by the stockists who expect Hindustan Copper to cut prices. Nickel rose by 500 to 39,200 rupees on thin supply and fresh buying by stainless steel makers. Tin was unchanged at 36,000 rupees, so did zinc at 6,300 rupees and lead at 4,900 rupees. Aluminium was quiet at 7,450 rupees.-- Bombay Commodities+91-22-265 9000
original word:  Commodities+91-22-265 Commodities+91-22-265
new split:  Commodities  and  +91-22-265
[(0, 6), (7, 13), (14, 19), (19, 20), (21, 26), (27, 31), (32, 35), (36, 39), (40, 45), (45, 46), (47, 53), (54, 64), (65, 71), (72, 78), (79, 85), (86, 90), (91, 93), (94, 100), (101, 103), (104, 111), (112, 119), (120, 122), (123, 135), (136, 144), (145, 147), (148, 153), (154, 158), (159, 161), (162, 173), (174, 182), (182, 183), (184, 193), (194, 200), (201, 204), (204, 205), (206, 213), (214, 218), (218, 219), (220, 226), (227, 235), (236, 241), (242, 247), (248, 253), (254, 258), (259, 265), (266, 270), (271, 280), (281, 283), (284, 290), (291, 296), (296, 297), (298, 302), (303, 307), (307, 308), (309, 314), (315, 321), (322, 326), (327, 329), (330, 333), (334, 340), (341, 343), (344, 350), (351, 357), (358, 361), (362, 369), (370, 372), (373, 378), (379, 388), (389, 391), (392, 395), (396, 405), (406, 409), (410, 416), (417, 426), (427, 433), (434, 436), (437, 440), (441, 447), (447, 448), (449, 455), (456, 460), (461, 463), (464, 467), (468, 470), (471, 477), (478, 484), (485, 487), (488, 492), (493, 499), (500, 503), (504, 509), (510, 516), (517, 519), (520, 529), (530, 535), (536, 542), (542, 543), (544, 547), (548, 551), (552, 561), (562, 564), (565, 571), (572, 578), (578, 579), (580, 582), (583, 586), (587, 591), (592, 594), (595, 600), (601, 607), (608, 611), (612, 616), (617, 619), (620, 625), (626, 632), (632, 633), (634, 643), (644, 647), (648, 653), (654, 656), (657, 662), (663, 670), (670, 672), (673, 679), (680, 691), (691, 701)]
{0: 0, 648: 118, 259: 44, 517: 92, 7: 1, 520: 93, 266: 45, 14: 2, 271: 46, 530: 94, 19: 3, 21: 4, 536: 95, 281: 47, 27: 5, 284: 48, 542: 96, 32: 6, 291: 49, 36: 7, 40: 8, 632: 115, 298: 51, 45: 9, 303: 52, 392: 69, 562: 100, 307: 53, 544: 97, 309: 54, 54: 11, 315: 55, 572: 102, 565: 101, 65: 12, 322: 56, 580: 104, 327: 57, 72: 13, 330: 58, 587: 106, 334: 59, 79: 14, 592: 107, 595: 108, 341: 60, 86: 15, 344: 61, 601: 109, 91: 16, 94: 17, 351: 62, 583: 105, 612: 111, 101: 18, 358: 63, 657: 120, 104: 19, 617: 112, 362: 64, 620: 113, 112: 20, 370: 65, 123: 22, 373: 66, 120: 21, 634: 116, 379: 67, 644: 117, 389: 68, 136: 23, 47: 10, 396: 70, 578: 103, 654: 119, 145: 24, 148: 25, 406: 71, 663: 121, 154: 26, 410: 72, 670: 122, 159: 27, 417: 73, 162: 28, 680: 124, 427: 74, 626: 114, 174: 29, 434: 75, 691: 125, 437: 76, 182: 30, 184: 31, 441: 77, 608: 110, 447: 78, 449: 79, 194: 32, 552: 99, 456: 80, 201: 33, 204: 34, 461: 81, 206: 35, 464: 82, 504: 90, 468: 83, 214: 36, 471: 84, 548: 98, 218: 37, 220: 38, 478: 85, 227: 39, 485: 86, 488: 87, 236: 40, 493: 88, 296: 50, 242: 41, 500: 89, 510: 91, 248: 42, 673: 123, 254: 43}
{258: 43, 516: 91, 6: 0, 519: 92, 265: 44, 13: 1, 270: 45, 529: 93, 19: 2, 20: 3, 46: 9, 535: 94, 280: 46, 26: 4, 283: 47, 542: 95, 31: 5, 290: 48, 35: 6, 39: 7, 296: 49, 297: 50, 561: 99, 391: 68, 45: 8, 302: 51, 547: 97, 307: 52, 308: 53, 53: 10, 564: 100, 314: 54, 571: 101, 64: 11, 321: 55, 578: 102, 579: 103, 326: 56, 71: 12, 672: 122, 329: 57, 586: 105, 333: 58, 78: 13, 591: 106, 594: 107, 122: 21, 340: 59, 85: 14, 343: 60, 600: 108, 90: 15, 93: 16, 350: 61, 607: 109, 656: 119, 679: 123, 611: 110, 100: 17, 357: 62, 103: 18, 616: 111, 361: 63, 619: 112, 111: 19, 369: 64, 372: 65, 119: 20, 632: 114, 633: 115, 378: 66, 643: 116, 388: 67, 135: 22, 395: 69, 653: 118, 144: 23, 147: 24, 405: 70, 662: 120, 153: 25, 409: 71, 647: 117, 158: 26, 416: 72, 161: 27, 582: 104, 625: 113, 551: 98, 426: 73, 173: 28, 433: 74, 691: 124, 436: 75, 670: 121, 182: 29, 183: 30, 440: 76, 543: 96, 701: 125, 447: 77, 448: 78, 193: 31, 455: 79, 200: 32, 460: 80, 503: 89, 204: 33, 205: 34, 463: 81, 467: 82, 213: 35, 470: 83, 218: 36, 219: 37, 477: 84, 226: 38, 484: 85, 487: 86, 235: 39, 492: 87, 509: 90, 241: 40, 499: 88, 247: 41, 253: 42}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(47, 6, 'Mumbai'), (65, 6, 'India'), (0, 6, 'India')]
given spans fix. original text:  Wall St speculates about Santa Fe savior. Brendan Intindola NEW YORK 1996-12-06 Homestake Mining Co tops Wall Street's list as the most likely white knight buyer for Santa Fe Pacific Gold Corp if Santa Fe rejects unsolicited suitor Newmont Mining Corp. Santa Fe is so far mum on the more than $ 2 billion stock swap takeover proposal from Newmont, announced Thursday. Wall Street, since the bid, has speculated that any deal between Newmont and Santa Fe would be a "bear hug," or a reluctantly negotiated agreement where the buyer is not necessarily a friendly suitor. Newmont said the companies have had previous contact, though declined to detail the encounters. Analysts predict Santa Fe will go to the highest bidder, and that if a rival buyer is found, Newmont may not be able to match its offer. They said the Santa Fe deal, which includes desirable Nevada mining territory, would only payoff for Newmont longer term. Newmont, in fact, will not benefit from the Santa Fe acquisition on an earnings basis for at least two years, which also limits its capacity to raise its offer. Any deal, friendly or hostile, would almost assuredly be a stock swap, which is necessary to preserve the tax-free, pooling-of-interest accounting, they said. Analysts and arbitrageurs immediately ruled out Barrick Gold Corp and Bre-X Minerals Ltd as Santa Fe saviors because they are locked in negotiations over their splitting Indonesia's Busang vast gold deposit. Placer Dome Inc too was considered unlikley because it is focusing on geographic expansion in areas that do match Santa Fe's Nevada, South America and Central Asia presence, they said. A Homestake spokesman was not immediately available to comment on speculation that it tops the list. Homestake, based in San Francisco, operates gold mines in the United States, Australia, Chile and Canada. Earnings in 1995 were $ 0.22 per share, or $ 30.3 million, on revenues of $ 746.3 million. Santa Fe is headquartered Albuquerque, N.M. and reported 1995 earnings of $ 0.30 per share, or $ 40 million, on revenues of $ 350 million. Santa Fe has mining and exploration operations in Nevada, California, Montana, Canada, Brazil, Australia, Chile, Kazakstan, Mexico and Ghana. PaineWebber analyst Marc Cohen said he lowered his rating on Newmont to neutral from attractive today because if Newmont merged with Santa Fe, investors would have to wait until the second half of 1998 to realize earnings accretion. "I think Homestake could come in as a white knight, but how much is someone willing to come in above the Newmont number. One would have to outbid by at least 15 percent, but there is going to be a (Santa Fe) deal with someone," he said. "Longer term, two to three years out, (a Newmont-Santa Fe deal) is positive, it does all the right things. But in the near-term it is, at worst, neutral," the analyst added. Newmont proposed to Santa Fe a stock-swap merger at a ratio of 0.33 Newmont shares for each Santa Fe shares. In Friday New York Stock Exchange trade, Newmonth was off 1/2 to 46-5/8 while Santa Fe added 1/4 to 15-1/8. "Newmont said it wants to discuss a friendly deal with Santa Fe, which is almost always a euphemism for ' We have more money in our pocket, '" said an arb, referring to a possible sweetened bid from Newmont. Two other arbs called Newmont's move a "a 32 cent bid" because there is no formal tender offer, only the proposal letter "mailed" to Santa Fe's board.-- Wall Street Desk, 212-859-1734.
original word:  Corp. Corp.
new split:  Corp  and  .
[(0, 4), (5, 7), (8, 18), (19, 24), (25, 30), (31, 33), (34, 40), (40, 41), (42, 49), (50, 59), (60, 63), (64, 68), (69, 79), (80, 89), (90, 96), (97, 99), (100, 104), (105, 109), (110, 116), (116, 118), (119, 123), (124, 126), (127, 130), (131, 135), (136, 142), (143, 148), (149, 155), (156, 161), (162, 165), (166, 171), (172, 174), (175, 182), (183, 187), (188, 192), (193, 195), (196, 201), (202, 204), (205, 212), (213, 224), (225, 231), (232, 239), (240, 246), (247, 251), (251, 252)]
{0: 0, 131: 23, 5: 1, 8: 2, 143: 25, 34: 6, 19: 3, 149: 26, 25: 4, 156: 27, 31: 5, 162: 28, 166: 29, 40: 7, 42: 8, 172: 30, 175: 31, 136: 24, 50: 9, 183: 32, 188: 33, 64: 11, 193: 34, 196: 35, 69: 12, 225: 39, 202: 36, 119: 20, 60: 10, 205: 37, 80: 13, 213: 38, 90: 14, 97: 15, 100: 16, 232: 40, 105: 17, 110: 18, 240: 41, 116: 19, 247: 42, 251: 43, 124: 21, 127: 22}
{130: 22, 4: 0, 7: 1, 142: 24, 18: 2, 148: 25, 24: 3, 155: 26, 30: 4, 33: 5, 165: 28, 40: 6, 41: 7, 171: 29, 174: 30, 49: 8, 182: 31, 59: 9, 63: 10, 192: 33, 96: 14, 195: 34, 68: 11, 118: 19, 161: 27, 201: 35, 204: 36, 79: 12, 212: 37, 89: 13, 135: 23, 224: 38, 99: 15, 231: 39, 104: 16, 109: 17, 239: 40, 123: 20, 116: 18, 187: 32, 246: 41, 251: 42, 252: 43, 126: 21}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Busang', 'Marc Cohen']
response in server.py code:
 [(1836, 6, 'Canada'), (2153, 6, 'Canada'), (2124, 6, 'Nevada'), (433, 7, 'Newmont_Mining_Corporation'), (1815, 9, 'Australia'), (2132, 10, 'California'), (2928, 7, 'Newmont_Mining_Corporation'), (569, 7, 'Newmont_Mining_Corporation'), (2198, 6, 'Mexico'), (903, 7, 'Newmont_Mining_Corporation'), (2169, 9, 'Australia'), (339, 7, 'Newmont_Mining_Corporation'), (3307, 7, 'Newmont_Mining_Corporation'), (2144, 7, 'Montana'), (1800, 13, 'United_States'), (2554, 7, 'Newmont_Mining_Corporation'), (924, 7, 'Newmont_Mining_Corporation'), (758, 7, 'Newmont_Mining_Corporation'), (2180, 5, 'Chile'), (3078, 7, 'Newmont_Mining_Corporation'), (2860, 7, 'Newmont_Mining_Corporation'), (1826, 5, 'Chile'), (3276, 7, 'Newmont_Mining_Corporation'), (1974, 4, 'New_Mexico'), (1292, 17, 'Barrick_Gold'), (2329, 7, 'Newmont_Mining_Corporation'), (1758, 13, 'San_Francisco'), (1961, 11, 'Albuquerque,_New_Mexico'), (1577, 6, 'Nevada'), (2277, 7, 'Newmont_Mining_Corporation'), (2161, 6, 'Brazil'), (2187, 9, 'Kazakhstan'), (1314, 18, 'Bre-X'), (2979, 23, 'New_York_Stock_Exchange'), (2209, 5, 'Ghana'), (856, 6, 'Nevada'), (1452, 15, 'Placer_Dome'), (1738, 9, 'Homestake_Mine_(South_Dakota)'), (1414, 9, 'Indonesia'), (1639, 9, 'Homestake_Mine_(South_Dakota)'), (60, 8, 'New_York_City'), (1585, 13, 'South_America'), (2647, 8, 'Santa_Fe,_New_Mexico'), (2458, 9, 'Homestake_Mine_(South_Dakota)'), (2216, 11, 'Paine_Webber'), (1935, 8, 'Santa_Fe,_New_Mexico'), (2349, 8, 'Santa_Fe,_New_Mexico'), (3418, 8, 'Santa_Fe,_New_Mexico'), (105, 11, 'New_York_Stock_Exchange'), (1566, 8, 'Santa_Fe,_New_Mexico'), (1426, 6, 'Busang_Rasefako'), (3047, 8, 'Santa_Fe,_New_Mexico'), (2952, 8, 'Santa_Fe,_New_Mexico'), (253, 8, 'Santa_Fe,_New_Mexico'), (196, 8, 'Santa_Fe,_New_Mexico'), (1336, 8, 'Santa_Fe,_New_Mexico'), (816, 8, 'Santa_Fe,_New_Mexico'), (368, 11, 'New_York_Stock_Exchange'), (25, 8, 'Santa_Fe,_New_Mexico'), (2880, 8, 'Santa_Fe,_New_Mexico'), (968, 8, 'Santa_Fe,_New_Mexico'), (1603, 12, 'Central_Asia'), (2074, 8, 'Santa_Fe,_New_Mexico'), (0, 7, 'Wall_Street'), (445, 8, 'Santa_Fe,_New_Mexico'), (3132, 8, 'Santa_Fe,_New_Mexico'), (682, 8, 'Santa_Fe,_New_Mexico'), (2236, 10, 'Marc_Cohen')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(11, 13, 'United_States')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mathieu', 'Bednarik']
response in server.py code:
 [(16, 8, 'Chuck_Bednarik'), (0, 7, 'Jérémy_Mathieu')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(32, 14, 'Professors_in_the_United_States'), (51, 8, 'Film_director'), (108, 30, 'Polytechnic_University_of_Turin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(17, 14, 'Humberto_de_Alencar_Castelo_Branco')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(112, 17, 'First_Boston'), (60, 6, 'Asarco')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(43, 8, 'Helsinki'), (0, 7, 'Martela')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['martha stewart']
response in server.py code:
 [(0, 14, 'Martha_Stewart')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(50, 4, 'New_Jersey'), (41, 7, 'Oakland,_California'), (0, 11, 'Kid_Brands')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(17, 7, 'Georgia_(U.S._state)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(134, 21, 'Delhi_Development_Authority'), (172, 6, 'Detroit_Tigers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Shuji Nakamura']
response in server.py code:
 [(241, 9, 'Tokushima,_Tokushima'), (0, 14, 'Shuji_Nakamura'), (207, 18, 'Nichia'), (34, 23, 'University_of_Tokushima')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(572, 19, 'Government_of_Canada'), (0, 26, 'Continental_Bank_of_Canada'), (521, 11, 'Continental_Airlines'), (197, 11, 'Continental_Airlines'), (943, 11, 'Continental_Airlines')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(89, 12, 'HTC_Magic'), (21, 12, 'HTC_Magic')]
given spans fix. original text:  Canadian bonds open softer, spreads to U.S. shrink. TORONTO 1996-08-30 Canadian bonds opened softer on Friday, pulled lower by a sinking U.S. market, but outperformed U.S. bonds on positive Canadian economic data, analysts said. "I think this morning's Canadian numbers were very supportive of narrower spreads, particularly the current account number," said Jim Webber, director of fixed-income research with TD Securities Inc. Canada's 8.0 percent bond due 2023 fell C$ 0.45 to C$ 101.15 to yield 7.894 percent. The U.S. 30-year benchmark fell 30/32 to yield 7.12 percent. The spread between benchmark bonds narrowed 77 basis points from 81 basis points at the close of trading on Wednesday. Statistics Canada on Friday reported Canada's current account moved to a higher-than-expected C$ 1.15 billion second quarter surplus from a C$ 1.62 billion deficit in the first quarter. It was the first surplus since the fourth quarter of 1984. The agency also reported Canada's real gross domestic product rose a weaker-than-expected 0.3 percent in the second quarter or 1.3 percent at an annualized rate. While the data provided support for Canadian bonds, both Canadian and U.S. markets weakened after the release of strong U.S. economic data, including a report showing the Chicago Purchasing Managers August index rose to 60 from 51.2 in July. "The purchasing managers ' number is extremely, extremely strong," said Webber. In other news, the Toronto Bond Traders ' Association said it is recommending that dealings in the Canadian bond market end early at 1400 EDT / 1800 GMT on Friday. The Canadian market typically closes early on holiday weekends and Canadian financial markets will be closed on Monday for Labour Day. In other prices, the 7.0 percent of 2006 fell C$ 0.28 to C$ 96.89 to yield 7.437 percent. The U.S. 10-year benchmark fell 21/32 to yield 6.95 percent. The spread between the two bonds narrowed to 49 basis points from 54 basis points at the close of trading on Thursday. The three-month cash bill traded at 4.04 percent against the U.S. three-month bill at 5.26 percent.-- Jeffrey Hodgson (416) 941-8105, e-mail : jeffrey.hodgson@reuters.com
original word:  Inc. Inc.
new split:  Inc  and  .
[(0, 8), (9, 14), (15, 19), (20, 26), (26, 27), (28, 35), (36, 38), (39, 43), (44, 50), (50, 51), (52, 59), (60, 70), (71, 79), (80, 85), (86, 92), (93, 99), (100, 102), (103, 109), (109, 110), (111, 117), (118, 123), (124, 126), (127, 128), (129, 136), (137, 141), (142, 148), (148, 149), (150, 153), (154, 166), (167, 171), (172, 177), (178, 180), (181, 189), (190, 198), (199, 207), (208, 212), (212, 213), (214, 222), (223, 227), (227, 228), (229, 230), (230, 231), (232, 237), (238, 242), (243, 250), (250, 252), (253, 261), (262, 269), (270, 274), (275, 279), (280, 290), (291, 293), (294, 302), (303, 310), (310, 311), (312, 324), (325, 328), (329, 336), (337, 344), (345, 351), (351, 352), (352, 353), (354, 358), (359, 362), (363, 369), (369, 370), (371, 379), (380, 382), (383, 395), (396, 404), (405, 409), (410, 412), (413, 423), (424, 427), (427, 428)]
{0: 0, 129: 23, 363: 64, 214: 37, 262: 47, 9: 1, 371: 66, 396: 69, 142: 25, 15: 2, 427: 74, 275: 49, 20: 3, 405: 70, 150: 27, 280: 50, 154: 28, 28: 5, 26: 4, 410: 71, 291: 51, 36: 6, 294: 52, 167: 29, 424: 73, 199: 34, 44: 8, 50: 9, 303: 53, 359: 63, 178: 31, 172: 30, 52: 10, 181: 32, 310: 54, 137: 24, 312: 55, 351: 60, 60: 11, 190: 33, 325: 56, 71: 12, 329: 57, 80: 13, 337: 58, 212: 36, 270: 48, 86: 14, 345: 59, 93: 15, 223: 38, 352: 61, 208: 35, 354: 62, 227: 39, 100: 16, 229: 40, 230: 41, 103: 17, 232: 42, 380: 67, 39: 7, 109: 18, 238: 43, 111: 19, 369: 65, 243: 44, 118: 20, 413: 72, 148: 26, 250: 45, 383: 68, 124: 21, 253: 46, 127: 22}
{128: 22, 409: 70, 43: 7, 261: 46, 8: 0, 379: 66, 395: 68, 141: 24, 14: 1, 109: 17, 358: 62, 274: 48, 19: 2, 148: 25, 149: 26, 279: 49, 153: 27, 26: 3, 27: 4, 412: 71, 427: 73, 290: 50, 35: 5, 198: 33, 38: 6, 423: 72, 382: 67, 171: 29, 428: 74, 370: 65, 302: 52, 177: 30, 50: 8, 51: 9, 180: 31, 310: 53, 311: 54, 59: 10, 189: 32, 324: 55, 70: 11, 328: 56, 207: 34, 336: 57, 99: 15, 212: 35, 213: 36, 344: 58, 79: 12, 92: 14, 250: 44, 222: 37, 293: 51, 352: 60, 353: 61, 227: 38, 228: 39, 102: 16, 230: 40, 231: 41, 351: 59, 252: 45, 362: 63, 237: 42, 110: 18, 269: 47, 369: 64, 242: 43, 117: 19, 404: 69, 136: 23, 123: 20, 166: 28, 126: 21, 85: 13}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Webber']
response in server.py code:
 [(429, 6, 'Canada'), (731, 6, 'Canada'), (190, 8, 'Canada'), (964, 6, 'Canada'), (1158, 8, 'Canada'), (253, 8, 'Canada'), (1654, 8, 'Canada'), (1522, 8, 'Canada'), (1137, 8, 'Canada'), (52, 7, 'Toronto'), (1591, 8, 'Canada'), (167, 4, 'United_States'), (39, 4, 'United_States'), (1221, 4, 'United_States'), (71, 8, 'Canada'), (1171, 4, 'United_States'), (137, 4, 'United_States'), (0, 8, 'Canada'), (1816, 4, 'United_States'), (518, 4, 'United_States'), (2053, 4, 'United_States'), (1572, 3, 'Greenwich_Mean_Time'), (694, 17, 'Statistics_Canada'), (1710, 10, 'Labour_Day')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Robert Mugabe']
response in server.py code:
 [(245, 13, 'Robert_Mugabe'), (38, 6, 'Harare'), (0, 8, 'Zimbabwe'), (56, 8, 'Zimbabwe')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(3, 7, 'Airport'), (26, 7, 'Service_(economics)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Joseph Edward Mayer']
response in server.py code:
 [(61, 13, 'United_States'), (104, 19, 'Professor'), (127, 24, 'Johns_Hopkins_University'), (23, 19, 'Joseph_Edward_Mayer')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(45, 34, 'U.S._Securities_and_Exchange_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(40, 8, 'New_York_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 26, 'Milwaukee_Journal_Sentinel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Jonathan Wright', 'Maurice Baril', 'Laurent Kabila', 'Doug Young']
response in server.py code:
 [(706, 7, 'Democratic_Republic_of_the_Congo'), (1204, 7, 'Democratic_Republic_of_the_Congo'), (256, 7, 'Rwanda'), (1064, 7, 'Rwanda'), (689, 8, 'Kinshasa'), (2803, 7, 'Democratic_Republic_of_the_Congo'), (2996, 7, 'Democratic_Republic_of_the_Congo'), (2379, 7, 'Democratic_Republic_of_the_Congo'), (3270, 4, 'United_States'), (967, 14, 'Laurent-Désiré_Kabila'), (359, 7, 'Nairobi'), (66, 7, 'Nairobi'), (1245, 8, 'Kinshasa'), (89, 8, 'Canada'), (2701, 4, 'United_Nations'), (3445, 6, 'Bukavu'), (985, 4, 'Goma'), (790, 6, 'Rwanda'), (3460, 5, 'Kindu'), (515, 4, 'Goma'), (2977, 8, 'Kinshasa'), (3511, 24, 'Médecins_Sans_Frontières'), (3279, 7, 'United_Kingdom'), (1773, 5, 'Maurice_Baril'), (2719, 16, 'United_Nations_Security_Council'), (1368, 8, 'Canada'), (1730, 6, 'Rwanda'), (319, 13, 'Maurice_Baril'), (749, 5, 'Democratic_Republic_of_the_Congo'), (3471, 9, 'Kisangani'), (944, 5, 'Maurice_Baril'), (43, 5, 'Democratic_Republic_of_the_Congo'), (195, 5, 'Democratic_Republic_of_the_Congo'), (153, 5, 'Democratic_Republic_of_the_Congo'), (3221, 5, 'Maurice_Baril'), (2666, 5, 'Democratic_Republic_of_the_Congo'), (843, 5, 'Democratic_Republic_of_the_Congo'), (1394, 10, 'Doug_Young_(politician)'), (1720, 5, 'Democratic_Republic_of_the_Congo'), (3674, 8, 'Walikale')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(90, 22, 'Premier_League'), (123, 15, 'Manchester_City_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Dario Fo', 'Mussolini']
response in server.py code:
 [(49, 13, 'Brera_Academy'), (9, 8, 'Dario_Fo'), (114, 27, 'Italian_Social_Republic'), (102, 9, 'Benito_Mussolini'), (27, 5, 'Milan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(131, 3, 'Federal_Reserve_System'), (566, 3, 'Federal_Reserve_System'), (440, 3, 'Federal_Reserve_System'), (377, 3, 'Federal_Reserve_System'), (4, 15, 'Federal_Reserve_System'), (32, 15, 'Federal_government_of_the_United_States'), (631, 6, 'Reuter')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(50, 5, 'Pepsi'), (75, 4, 'Coca-Cola')]
given spans fix. original text:  IPO FILING-- Homegate Hospitality Inc. WASHINGTON 1996-08-30 Company Name Homegate Hospitality Inc Nasdaq Stock symbol HMGT Estimated price range N / A Total shares to be offered N / A Shrs offered by company N / A Shrs outstanding after ipo N / A Lead Underwriter Bear Stearns & Co Inc Underwriters over-allotment N / A Business : Company's goal is to become a national provider of high quality extended-stay hotels in strategically selected markets located throughout the United States. Use of Proceeds : To finance the development of additional extended-stay hotels and other general corporate purposes. Financial Data in 000s : 1995 1994 - Revenue N / A N / A - Net Income N / A N / A
original word:  Inc. Inc.
new split:  Inc  and  .
[(0, 3), (4, 10), (10, 12), (13, 21), (22, 33), (34, 37), (37, 38)]
{0: 0, 34: 5, 4: 1, 37: 6, 22: 4, 10: 2, 13: 3}
{33: 4, 3: 0, 21: 3, 38: 6, 10: 1, 12: 2, 37: 5}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(474, 13, 'United_States'), (39, 10, 'Washington,_D.C.'), (99, 6, 'NASDAQ')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 11, "Mother's_Day")]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(11, 8, 'Saint_Lucia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Daniella']
response in server.py code:
 [(739, 10, 'Madagascar'), (386, 9, 'Mauritius'), (32, 10, 'Port_Louis'), (617, 10, 'Port_Louis'), (54, 9, 'Mauritius'), (531, 9, 'Mauritius'), (84, 12, 'Indian_Ocean'), (0, 9, 'Mauritius'), (208, 8, 'Daniela_Ruah')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Agustin Pichot']
response in server.py code:
 [(160, 9, 'Argentina'), (178, 14, 'Agustín_Pichot')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(79, 13, 'United_States'), (21, 5, 'Ghana'), (10, 5, 'Woman'), (38, 3, 'RCA'), (49, 6, 'Friendship')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(403, 18, 'Northwest_Airlines'), (74, 17, 'Republic_Airlines'), (4, 41, 'Transportation_Communications_International_Union')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(42, 4, 'K-On!')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Benjamin Netanyahu', 'Yasser Arafat']
response in server.py code:
 [(1103, 6, 'Israel'), (1297, 6, 'Israel'), (1622, 6, 'Israel'), (132, 18, 'Benjamin_Netanyahu'), (1671, 6, 'Israel'), (1176, 7, 'Israel'), (888, 6, 'Israel'), (12, 6, 'Israel'), (81, 6, 'Israel'), (566, 13, 'Yasser_Arafat'), (867, 7, 'Israel'), (203, 7, 'Israel'), (1419, 5, 'Syria'), (769, 7, 'Israel'), (0, 5, 'Syria'), (1630, 5, 'Syria'), (1588, 9, 'Jerusalem'), (55, 5, 'Syria'), (1457, 9, 'Benjamin_Netanyahu'), (35, 8, 'Damascus'), (544, 11, 'State_of_Palestine'), (677, 12, 'State_of_Palestine'), (642, 9, 'Palestinian_territories'), (697, 9, 'Palestinian_territories'), (711, 4, 'Gaza'), (1039, 8, 'Damascus'), (923, 4, 'Arab_world'), (1499, 4, 'Arab_world'), (968, 4, 'Arab_world'), (1429, 5, 'Arab_people'), (799, 5, 'Arab_people'), (344, 4, 'Arab_world'), (178, 5, 'Arab_people')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['obama']
response in server.py code:
 [(0, 5, 'Barack_Obama')]
given spans fix. original text:  sharingeasy
original word:  sharingeasy sharingeasy
new split:  sharing  and  easy
[(0, 7), (7, 11)]
{0: 0, 7: 1}
{11: 1, 7: 0}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'File_sharing')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(52, 7, 'Abidjan'), (0, 4, 'United_Nations'), (271, 4, 'United_Nations'), (229, 4, 'United_Nations'), (349, 6, 'Bangui'), (291, 5, 'United_Nations_High_Commissioner_for_Refugees'), (385, 11, 'Ivory_Coast'), (376, 7, 'Abidjan'), (26, 24, 'Central_African_Republic'), (75, 14, 'United_Nations'), (117, 24, 'Central_African_Republic')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Dan Rooney']
response in server.py code:
 [(0, 10, 'Dan_Rooney'), (29, 19, 'Pittsburgh_Steelers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Akira Suzuki', 'Herbert Charles Brown']
response in server.py code:
 [(178, 9, 'Professor'), (98, 17, 'Purdue_University'), (143, 22, 'Hokkaido_University'), (73, 21, 'Herbert_C._Brown'), (22, 12, 'Akira_Suzuki_(chemist)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(1710, 7, 'Córdoba,_Argentina'), (2272, 7, 'Córdoba,_Argentina'), (833, 8, 'La_Pampa_Province'), (1216, 7, 'Córdoba,_Argentina'), (681, 7, 'Córdoba,_Argentina'), (727, 8, 'Misiones_Province'), (1749, 8, 'La_Pampa_Province'), (743, 10, 'Corrientes'), (1225, 8, 'La_Pampa_Province'), (712, 10, 'Entre_Ríos_Province'), (764, 5, 'Chaco_Province'), (2323, 8, 'La_Pampa_Province'), (649, 21, 'Buenos_Aires_Province'), (780, 7, 'Taiwan'), (696, 8, 'Santa_Fe,_New_Mexico'), (2294, 5, 'Chaco_Province'), (1771, 12, 'Buenos_Aires'), (1238, 12, 'Buenos_Aires'), (3219, 8, 'Santa_Fe,_New_Mexico'), (2281, 8, 'Santa_Fe,_New_Mexico'), (1722, 8, 'Santa_Fe,_New_Mexico'), (2336, 12, 'Buenos_Aires')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Hosni Mubarak']
response in server.py code:
 [(51, 5, 'Cairo'), (372, 5, 'Cairo'), (747, 13, 'Hosni_Mubarak'), (113, 5, 'Egypt'), (0, 5, 'Egypt'), (33, 6, 'Islam'), (703, 6, "Al-Gama'a_al-Islamiyya"), (167, 13, "Al-Gama'a_al-Islamiyya"), (379, 9, 'Al_Akhbar_(Lebanon)'), (797, 7, 'Islam'), (280, 9, 'Ash_Sharqiyah_Region')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(31, 8, 'Portland,_Oregon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Hernandez']
response in server.py code:
 [(22, 16, 'Seattle_Mariners')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Abdou Diouf', 'Moustapha Niasse', 'Boutros Boutros-Ghali', 'Moustapha Niasse']
response in server.py code:
 [(49, 5, 'Dakar'), (528, 6, 'Africa'), (86, 11, 'Abdou_Diouf'), (373, 21, 'Boutros_Boutros-Ghali'), (151, 16, 'Moustapha_Niasse'), (38, 4, 'United_Nations'), (414, 13, 'United_States'), (312, 12, 'Burkina_Faso'), (334, 7, 'Africa'), (0, 7, 'Senegal'), (505, 7, 'Africa'), (588, 5, 'Abdou_Diouf'), (741, 14, 'United_Nations'), (184, 14, 'United_Nations'), (668, 16, 'Moustapha_Niasse'), (218, 5, 'Abdou_Diouf'), (66, 7, 'Senegal'), (461, 8, 'Egypt')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(21, 5, 'Paris'), (88, 11, 'France'), (73, 7, 'Officer_(armed_forces)'), (4, 4, 'Poet')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Jacques Chirac', 'Ange-Felix Patasse', 'Blaise Compaore']
response in server.py code:
 [(859, 7, 'Reuters'), (2181, 6, 'Bangui'), (1787, 12, 'France'), (2009, 6, 'Bangui'), (654, 6, 'France'), (2372, 5, 'Gabon'), (1698, 6, 'France'), (2288, 15, 'Blaise_Compaoré'), (2039, 6, 'France'), (324, 6, 'France'), (489, 6, 'France'), (2316, 6, 'Bangui'), (1525, 6, 'Bangui'), (237, 6, 'Bangui'), (2388, 4, 'Chad'), (68, 6, 'Bangui'), (1502, 6, 'France'), (3101, 4, 'Chad'), (1035, 18, 'Ange-Félix_Patassé'), (362, 6, 'Bangui'), (115, 24, 'Central_African_Republic'), (560, 14, 'Jacques_Chirac'), (2572, 7, 'Ange-Félix_Patassé'), (2784, 6, 'France'), (639, 12, 'Burkina_Faso'), (2379, 4, 'Mali'), (3012, 7, 'Ange-Félix_Patassé'), (2473, 7, 'Ange-Félix_Patassé'), (3526, 6, 'France'), (2880, 7, 'Ange-Félix_Patassé'), (2265, 12, 'Burkina_Faso'), (1297, 7, 'Ange-Félix_Patassé'), (3197, 5, 'Codos'), (3091, 5, 'Sudan'), (27, 14, 'Central_Africa'), (1875, 7, 'Ange-Félix_Patassé'), (2253, 6, 'Jacques_Chirac'), (2589, 14, 'Central_African_Republic'), (1163, 6, 'Yakoma_people'), (1885, 4, 'Baya,_Togo'), (843, 9, 'International_Red_Cross_and_Red_Crescent_Movement')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(345, 7, 'Tunisia'), (0, 7, 'Tunisia'), (266, 7, 'Tunisia'), (178, 6, "Compagnie_Française_d'Assurance_pour_le_Commerce_Extérieur"), (286, 6, 'France')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Yasser Arafat', 'Abu Ammar', 'Abu Ammar', 'Ali Ahmed']
response in server.py code:
 [(937, 6, 'Israel'), (1176, 9, 'Yasser_Arafat'), (729, 9, 'Jerusalem'), (393, 6, 'Israel'), (458, 9, 'Jerusalem'), (879, 9, 'Jerusalem'), (230, 9, 'Jerusalem'), (684, 6, 'Israel'), (1942, 9, 'Yasser_Arafat'), (0, 6, 'Israel'), (846, 7, 'Israel'), (806, 6, 'Jews'), (195, 13, 'Yasser_Arafat'), (126, 7, 'Israel'), (310, 7, 'Israel'), (1312, 6, 'Jordan'), (1402, 9, 'Jerusalem'), (421, 6, 'Jews'), (375, 6, 'Yasser_Arafat'), (1336, 7, 'Israel'), (345, 6, 'Hebrew_language'), (1588, 9, 'Jerusalem'), (1258, 7, 'Al-Aqsa_Mosque'), (1009, 19, 'East_Jerusalem'), (1189, 6, 'Yasser_Arafat'), (765, 6, 'Islam'), (999, 3, 'Palestine_Liberation_Organization'), (1672, 7, 'Israel'), (1215, 7, 'Al-Aqsa_Mosque'), (1953, 6, 'Yasser_Arafat'), (1503, 6, 'Jordan'), (242, 7, 'Al-Aqsa_Mosque'), (1702, 8, 'Israel'), (651, 12, 'State_of_Palestine'), (67, 9, 'Palestinian_territories'), (2010, 8, 'Israel'), (168, 11, 'State_of_Palestine'), (716, 9, 'West_Bank'), (353, 11, 'State_of_Palestine'), (573, 4, 'Gaza'), (1086, 12, 'State_of_Palestine'), (59, 6, 'Al-Ram'), (1873, 9, 'West_Bank'), (14, 11, 'State_of_Palestine'), (559, 9, 'West_Bank'), (1614, 12, 'State_of_Palestine'), (2104, 8, 'Kalandia'), (485, 11, 'State_of_Palestine'), (1360, 6, 'Al-Ram'), (1056, 11, 'State_of_Palestine'), (546, 5, 'Arab_people'), (1285, 5, 'Jamil'), (336, 5, 'Jamil'), (2089, 9, 'Knud_Holmboe')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(59, 8, 'Kilkenny_GAA')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(13, 6, 'Guitar')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Minnesota'), (22, 11, 'Ice_fishing')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Steve Smith']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 31, 'Orange_County_Convention_Center')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Elie Wiesel', 'His']
response in server.py code:
 [(24, 6, 'Sighetu_Marmației'), (57, 7, 'Romania'), (32, 12, 'Transylvania'), (73, 20, 'Carpathian_Mountains'), (0, 11, 'Elie_Wiesel'), (46, 9, 'Maramureș')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(183, 12, 'South_Africa'), (45, 12, 'Johannesburg'), (280, 8, 'Mahikeng'), (198, 10, 'North_West_(South_African_province)')]
response in server.py code:
 []
response in server.py code:
 []
given spans fix. original text:  PRESALE - Bay Co Bldg Auth, Mich.. AMT : 1,200,000 DATE : 09/05/96 NYC Time : 1600 CUSIP : 072261 ISSUER : Bay Co Building Authority ST : MI ISSUE : Bldg auth (law enforcement ctr) Series 1996-A TAX STAT : Exempt-REV M / SP / F : NA / NA / NA BOOK ENTRY : N ENHANCEMENTS : None BANK QUAL : Y DTD : 09/01/96 SURE BID : Y DUE : 11/1/96-11 SR MGR : 1ST CPN : 11/01/96 CALL : 11/1/05 @ 101, dtp 11/1/07 NIC DELIVERY : 45 days approx ORDERS : PAYING AGENT : Michigan National Bank, Detroit L.O. : Bodman, Longely & Dahling, Detroit F.A. : First of Michigan Corp., Detroit LAST SALE : None Year Amount Coupon Yield Price Conc. 1996 45,000 1997 50,000 1998 55,000 1999 55,000 2000 60,000 2001 65,000 2002 70,000 2003 70,000 2004 75,000 2005 80,000 2006 85,000 2007 90,000 2008 90,000 2009 95,000 2010 105,000 2011 110,000 COMPETITIVE PRE-SALE CONTRIBUTED BY J.J. KENNY K-SHEETS :
original word:  Mich.. Mich..
new split:  Mich  and  ..
[(0, 7), (8, 9), (10, 13), (14, 16), (17, 21), (22, 26), (26, 27), (28, 32), (32, 34)]
{0: 0, 17: 4, 22: 5, 32: 8, 8: 1, 10: 2, 28: 7, 26: 6, 14: 3}
{16: 3, 32: 7, 34: 8, 21: 4, 7: 0, 9: 1, 26: 5, 27: 6, 13: 2}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mich']
response in server.py code:
 [(138, 2, 'Michigan'), (519, 7, 'Detroit'), (477, 7, 'Detroit'), (559, 7, 'Detroit'), (67, 3, 'New_York_City'), (453, 22, 'Michigan_National_Bank'), (28, 4, 'Mich_Dulce')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'Mardi_Gras'), (11, 13, 'Hawker_(trade)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(14, 8, 'CBS_News')]
response in server.py code:
 []
given spans fix. original text:  WEATHER - Conditions at CIS airports - Dec 6. MOSCOW 1996-12-06 No weather-related closures of CIS airports are expected on December 7 and 8, the Russian Weather Service said on Friday.-- Moscow Newsroom+7095 941 8520
original word:  Newsroom+7095 Newsroom+7095
new split:  Newsroom  and  +7095
[(0, 7), (8, 9), (10, 20), (21, 23), (24, 27), (28, 36), (37, 38), (39, 42), (43, 44), (44, 45), (46, 52), (53, 63), (64, 66), (67, 82), (83, 91), (92, 94), (95, 98), (99, 107), (108, 111), (112, 120), (121, 123), (124, 132), (133, 134), (135, 138), (139, 140), (140, 141), (142, 145), (146, 153), (154, 161), (162, 169), (170, 174), (175, 177), (178, 185), (185, 187), (188, 194), (195, 203), (203, 208)]
{0: 0, 64: 12, 67: 13, 133: 22, 135: 23, 8: 1, 108: 18, 10: 2, 139: 24, 140: 25, 142: 26, 146: 27, 83: 14, 21: 3, 203: 36, 185: 33, 24: 4, 154: 28, 92: 15, 95: 16, 188: 34, 162: 29, 99: 17, 37: 6, 195: 35, 39: 7, 28: 5, 170: 30, 43: 8, 44: 9, 46: 10, 175: 31, 112: 19, 178: 32, 53: 11, 121: 20, 124: 21}
{66: 12, 132: 21, 134: 22, 7: 0, 194: 34, 9: 1, 138: 23, 203: 35, 140: 24, 141: 25, 208: 36, 145: 26, 82: 13, 20: 2, 23: 3, 153: 27, 91: 14, 94: 15, 161: 28, 98: 16, 27: 4, 36: 5, 38: 6, 169: 29, 42: 7, 107: 17, 44: 8, 45: 9, 174: 30, 111: 18, 177: 31, 52: 10, 187: 33, 120: 19, 185: 32, 123: 20, 63: 11}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(46, 6, 'Moscow'), (95, 3, 'Commonwealth_of_Independent_States'), (24, 3, 'Commonwealth_of_Independent_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(107, 7, 'Messina'), (22, 6, 'Modica'), (30, 6, 'Sicily'), (123, 6, 'Father'), (91, 6, 'Family'), (0, 9, 'Quasimodo'), (87, 3, 'Francis_Burdett_(1743)'), (119, 3, 'Francis_Burdett_(1743)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(182, 7, 'Reuters'), (164, 11, 'Netherlands'), (560, 11, 'Netherlands')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Israel'), (28, 10, 'Yom_Kippur_War')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(1403, 4, 'United_States'), (61, 10, 'Washington,_D.C.'), (130, 19, 'United_States_Department_of_Commerce'), (1626, 11, 'New_York_Stock_Exchange'), (1877, 17, 'Labour_and_Welfare_Bureau')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(16, 10, 'Board_game'), (0, 14, 'Battle_Masters')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['J. Hans D. Jensen', 'Eugene Wigner']
response in server.py code:
 [(102, 13, 'Eugene_Wigner'), (80, 17, 'J._Hans_D._Jensen'), (4, 5, 'Woman')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(222, 7, 'Reuters'), (633, 8, 'United_States'), (116, 10, 'Bratislava'), (44, 10, 'Bratislava'), (17, 10, 'Bratislava'), (622, 6, 'Ann_Meyers'), (643, 6, 'Ann_Meyers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(1112, 7, 'Reuters'), (1351, 6, 'London'), (330, 22, 'London_Stock_Exchange'), (320, 5, 'Tokyo')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['David Shulman', 'Clinton', 'Dick Morris', 'Clinton', 'Clinton', 'Clinton']
response in server.py code:
 [(2898, 7, 'Bill_Clinton'), (2414, 7, 'Bill_Clinton'), (2944, 7, 'Bill_Clinton'), (891, 23, 'New_York_Stock_Exchange'), (2530, 7, 'Bill_Clinton'), (2483, 11, 'Dick_Morris'), (2907, 6, 'Dick_Morris'), (3912, 5, 'Tokyo'), (3255, 28, 'New_York_Mercantile_Exchange'), (3629, 4, 'United_States'), (3726, 8, 'FTSE_100_Index'), (132, 3, 'London_Metal_Exchange'), (2877, 10, 'Democratic_Party_(United_States)'), (265, 4, 'FTSE_100_Index'), (1716, 3, 'Federal_Reserve_System'), (3534, 24, 'New_York_Cotton_Exchange'), (2851, 10, 'Republican_Party_(United_States)'), (42, 8, 'New_York_City'), (577, 6, 'Germany'), (636, 9, 'Dow_Jones_Industrial_Average'), (117, 6, 'London'), (3717, 6, 'London'), (618, 8, 'Japan'), (186, 6, 'Nikkei_225'), (1265, 13, 'Raymond_James_Financial'), (1805, 19, 'United_States_Department_of_Commerce'), (3220, 4, 'Iraq'), (948, 8, 'United_States_Department_of_the_Treasury'), (3937, 6, 'Nikkei_225'), (2804, 11, 'New_York_Stock_Exchange'), (1436, 11, 'New_York_Stock_Exchange'), (1328, 3, 'Dow_Jones_Industrial_Average'), (1611, 13, 'David_Shulman')]
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Martin Luther King', 'Paul Tillich', 'Henry Nelson Wieman']
response in server.py code:
 [(73, 17, 'Boston_University'), (197, 3, 'God'), (220, 12, 'Paul_Tillich'), (0, 18, 'Martin_Luther_King,_Jr.'), (237, 19, 'Henry_Nelson_Wieman')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Sali Berisha', 'Oscar Luigi Scalfaro']
response in server.py code:
 [(402, 7, 'Italy'), (158, 12, 'Sali_Berisha'), (44, 6, 'Tirana'), (365, 7, 'Sali_Berisha'), (643, 6, 'Tirana'), (420, 20, 'Oscar_Luigi_Scalfaro'), (65, 8, 'Albania'), (0, 8, 'Albania'), (903, 6, 'Gjoni'), (442, 4, 'Barna_Buza')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(26, 8, "Bill_Swerski's_Superfans")]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(9, 7, 'Deck_(building)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mitt Romney']
response in server.py code:
 [(41, 11, 'Mitt_Romney'), (14, 3, 'Republican_Party_(United_States)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(2184, 4, 'Asia'), (2419, 4, 'United_States'), (478, 4, 'Wuxi'), (291, 15, 'Hong_Kong'), (595, 4, 'Wuxi'), (2440, 8, 'Far_East'), (157, 5, 'China'), (1797, 5, 'China'), (2073, 5, 'China'), (2475, 16, 'Hong_Kong_Stock_Exchange'), (484, 7, 'Jiangsu'), (55, 5, 'Milan'), (911, 8, 'Malaysia'), (1079, 7, 'Italy'), (890, 9, 'Indonesia'), (1537, 3, 'Greenwich_Mean_Time'), (769, 7, 'Pirelli'), (2425, 6, 'Europe'), (1352, 7, 'Pirelli'), (1288, 7, 'Pirelli'), (72, 7, 'Italy'), (2680, 5, 'China'), (1189, 7, 'Pirelli'), (1631, 7, 'China'), (955, 7, 'Pirelli'), (232, 7, 'China'), (502, 8, 'Shanghai'), (267, 7, 'Pirelli'), (27, 7, 'China'), (1587, 7, 'Pirelli'), (2450, 13, 'CITIC_Pacific'), (901, 5, 'India'), (1233, 7, 'China'), (1129, 8, 'Crédit_Agricole_Corporate_and_Investment_Bank'), (2270, 14, 'Pirelli'), (102, 7, 'Pirelli'), (0, 7, 'Pirelli'), (825, 11, 'Far_East'), (313, 13, 'CITIC_Pacific'), (2196, 11, 'Pirelli'), (1554, 5, 'Milan'), (1838, 6, 'China_Unicom')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(4, 9, 'Horoscope'), (14, 6, 'Future'), (0, 3, 'Leo_(astrology)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['James Tobin', 'Paul Samuelson']
response in server.py code:
 [(0, 11, 'James_Tobin'), (68, 14, 'Paul_Samuelson'), (57, 7, 'Student')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Aleksander Kwasniewski', 'John Paul', 'Oscar Scalfaro', 'Dariusz Rosati']
response in server.py code:
 [(444, 6, 'Dariusz_Rosati'), (310, 5, 'Italy'), (405, 14, 'Dariusz_Rosati'), (1122, 6, 'Poland'), (45, 6, 'Warsaw'), (63, 6, 'Poland'), (962, 6, 'Poland'), (95, 22, 'Aleksander_Kwaśniewski'), (283, 11, 'Aleksander_Kwaśniewski'), (0, 6, 'Poland'), (227, 6, 'Warsaw'), (593, 6, 'Warsaw'), (1158, 11, 'Aleksander_Kwaśniewski'), (347, 14, 'Oscar_Luigi_Scalfaro'), (608, 7, 'Holy_See'), (914, 15, 'Catholic_Church'), (854, 24, 'Democratic_Left_Alliance'), (154, 9, 'Pope_John_Paul_II'), (215, 7, 'Holy_See'), (1066, 7, 'Holy_See')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 4, 'Wife')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(124, 12, 'Lucky_Charms')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(636, 7, 'Reuters'), (42, 9, 'Amsterdam'), (99, 5, 'Netherlands'), (0, 5, 'Netherlands'), (827, 5, 'Netherlands'), (1011, 9, 'Amsterdam'), (853, 6, 'Germany'), (345, 3, 'Equal_opportunity_employment'), (602, 3, 'Equal_opportunity_employment'), (743, 3, 'Equal_opportunity_employment'), (240, 3, 'Equal_opportunity_employment'), (37, 3, 'Equal_opportunity_employment'), (296, 3, 'Mitsubishi_FTO')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(18, 6, 'Segismundo_Casado')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['ralph owen brewster']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(21, 5, 'Paris'), (2, 6, 'France'), (28, 6, 'France')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Livshits', 'Livshits', 'Christopher Granville', 'Livshits']
response in server.py code:
 [(1307, 6, 'Russia'), (0, 6, 'Russia'), (925, 6, 'Moscow'), (69, 6, 'Moscow'), (564, 9, 'Information_Telegraph_Agency_of_Russia'), (87, 7, 'Russia'), (1061, 7, 'Russia'), (2690, 7, 'Norilsk'), (2098, 7, 'Norilsk'), (2741, 7, 'Russia'), (2647, 11, 'Krasnoyarsk'), (1122, 27, 'International_Monetary_Fund'), (1622, 7, 'Norilsk'), (1787, 7, 'Norilsk'), (2271, 7, 'Norilsk'), (1893, 7, 'Norilsk'), (2919, 7, 'Norilsk'), (2423, 7, 'Norilsk'), (2705, 7, 'Norilsk'), (1804, 7, 'Norilsk'), (159, 14, 'Norilsk_Nickel'), (310, 7, 'Norilsk'), (468, 7, 'Norilsk'), (2315, 7, 'Norilsk'), (1248, 6, 'Moscow'), (13, 7, 'Norilsk'), (3068, 7, 'Norilsk'), (433, 6, 'Moscow'), (863, 21, 'Christopher_Granville'), (593, 8, 'Benedikt_Livshits'), (1666, 6, 'Moscow'), (486, 8, 'Benedikt_Livshits'), (2219, 4, 'Telegraph_Agency_of_the_Soviet_Union'), (2231, 8, 'Benedikt_Livshits'), (2251, 4, 'Duma'), (1511, 10, 'Arkady_Chernyshev'), (2525, 10, 'Arkady_Chernyshev')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 17, 'Investment_Canada'), (237, 8, 'Harcourt_(publisher)'), (333, 8, 'Harcourt_(publisher)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Charles Aznavour']
response in server.py code:
 [(28, 7, 'Georgia_(U.S._state)'), (0, 16, 'Charles_Aznavour')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Flavio Cotti', 'Zelimkhan Yandarbiyev', 'Alexander Lebed', 'Aslan Maskhadov']
response in server.py code:
 [(1134, 6, 'Russia'), (1229, 6, 'Russia'), (1373, 6, 'Russia'), (1337, 6, 'Russia'), (309, 51, 'Organization_for_Security_and_Co-operation_in_Europe'), (727, 8, 'Chechnya'), (805, 8, 'Chechnya'), (1105, 8, 'Chechnya'), (432, 8, 'Chechnya'), (645, 8, 'Chechnya'), (967, 7, 'Chechnya'), (928, 7, 'Russia'), (800, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (478, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (362, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (1271, 8, 'Chechnya'), (1002, 15, 'Aslan_Maskhadov'), (540, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (947, 15, 'Alexander_Lebed'), (1294, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (0, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (201, 8, 'Chechnya'), (1563, 8, 'Chechnya'), (456, 7, 'Russia'), (1494, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (605, 5, 'Switzerland'), (851, 21, 'Zelimkhan_Yandarbiyev'), (25, 8, 'Chechnya'), (1387, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (771, 5, 'Switzerland'), (391, 12, 'Vienna'), (1780, 8, 'Chechnya'), (1860, 7, 'Russia'), (49, 4, 'Bonn'), (374, 6, 'Germany'), (1094, 5, 'Flavio_Cotti'), (275, 12, 'Flavio_Cotti'), (1885, 5, 'Flavio_Cotti'), (705, 10, 'Communist_Mazdoor_Kissan_Party')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(27, 4, 'Iowa'), (0, 11, 'Foster_care'), (12, 11, 'Regulation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(27, 18, 'Sapienza_University_of_Rome'), (10, 9, 'Professor'), (95, 18, "Commedia_dell'arte")]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(50, 7, 'Tallinn'), (112, 7, 'Estonia'), (0, 8, 'Estonia')]
given spans fix. original text:  Moodys Investors Service Inc said it affirmed the long-term debt ratings but cut the commercial paper to Prime-2 from Prime-1 of Avco Financial Services Inc, a unit of Avco Corp. Avco Financial has 2.5 billion dlrs of debt outstanding. For the paper cut, Moodys cited a higher risk profile inherent in the companys core business. Moodys said the affirmation reflected its assessment of a less diversified risk profile in the companys receivables. Affirmed were Avco Financials A-3 senior debt, Baa-2 senior subordinated debt and Baa-3 junior subordinated debt.
original word:  Corp. Corp.
new split:  Corp  and  .
[(0, 6), (7, 16), (17, 24), (25, 28), (29, 33), (34, 36), (37, 45), (46, 49), (50, 59), (60, 64), (65, 72), (73, 76), (77, 80), (81, 84), (85, 95), (96, 101), (102, 104), (105, 112), (113, 117), (118, 125), (126, 128), (129, 133), (134, 143), (144, 152), (153, 156), (156, 157), (158, 159), (160, 164), (165, 167), (168, 172), (173, 177), (177, 178)]
{0: 0, 65: 10, 177: 31, 134: 22, 7: 1, 73: 11, 160: 27, 77: 12, 144: 23, 81: 13, 85: 14, 153: 24, 25: 3, 156: 25, 29: 4, 158: 26, 165: 28, 96: 15, 34: 5, 37: 6, 102: 16, 17: 2, 129: 21, 105: 17, 173: 30, 46: 7, 113: 18, 50: 8, 118: 19, 168: 29, 60: 9, 126: 20}
{64: 9, 128: 20, 133: 21, 6: 0, 72: 10, 172: 29, 76: 11, 143: 22, 80: 12, 152: 23, 84: 13, 24: 2, 164: 27, 28: 3, 157: 25, 95: 14, 33: 4, 36: 5, 101: 15, 16: 1, 167: 28, 104: 16, 156: 24, 159: 26, 45: 6, 177: 30, 112: 17, 49: 7, 178: 31, 117: 18, 59: 8, 125: 19}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Moodys', 'Moodys']
response in server.py code:
 [(330, 6, "Moody's_Investors_Service"), (255, 6, "Moody's_Investors_Service"), (461, 4, 'Avco')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'Decorative_arts'), (26, 8, 'Painting'), (11, 5, 'Idea')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Annemarie Jorritsma']
response in server.py code:
 [(262, 9, 'Amsterdam'), (76, 5, 'Netherlands'), (51, 9, 'The_Hague'), (0, 5, 'Netherlands'), (481, 5, 'Netherlands'), (101, 19, 'Annemarie_Jorritsma'), (555, 5, 'Netherlands'), (221, 5, 'El_Al'), (797, 5, 'El_Al'), (444, 5, 'El_Al'), (30, 5, 'El_Al'), (467, 8, 'Tel_Aviv'), (757, 9, 'Annemarie_Jorritsma')]
given spans fix. original text:  ritz carlton lake las vegas
original word:  carlton carlton
new split:  carlto  and  n
[(0, 4), (5, 11), (11, 12)]
{0: 0, 11: 2, 5: 1}
{12: 2, 11: 1, 4: 0}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Giuseppe Levi', 'her', 'Benito Mussolini']
response in server.py code:
 [(114, 16, 'Benito_Mussolini'), (46, 13, 'Giuseppe_Levi'), (62, 9, 'Coach_(sport)'), (77, 3, 'Elizabeth_II')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'Cincinnati')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Madeleine Albright', 'Bill Clinton', 'Igor Ivanov', 'Boris Yeltsin']
response in server.py code:
 [(418, 7, 'Bill_Clinton'), (455, 7, 'Bill_Clinton'), (135, 18, 'Madeleine_Albright'), (785, 8, 'Madeleine_Albright'), (755, 8, 'Interfax'), (765, 8, 'Interfax'), (364, 8, 'Madeleine_Albright'), (440, 13, 'Boris_Yeltsin'), (280, 11, 'Igor_Ivanov'), (222, 8, 'Interfax'), (0, 6, 'Russia'), (618, 7, 'Russia'), (183, 12, 'Bill_Clinton'), (995, 6, 'Russia'), (50, 6, 'Moscow'), (1103, 10, 'Soviet_Union'), (68, 6, 'Russia'), (168, 4, 'United_States'), (876, 4, 'United_States'), (467, 7, 'Boris_Yeltsin'), (899, 14, 'United_Nations'), (1010, 4, 'NATO'), (1067, 6, 'Europe'), (40, 8, 'Madeleine_Albright'), (1114, 11, 'Warsaw_Pact'), (961, 4, 'NATO'), (743, 6, 'Igor_Ivanov'), (841, 10, 'Washington,_D.C.'), (302, 6, 'Moscow')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(32, 7, 'Atlanta'), (50, 7, 'Decatur,_Georgia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(25, 13, 'United_States_Postal_Service'), (12, 12, 'Calumet_City,_Illinois')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(38, 7, 'Germany'), (944, 7, 'Germany'), (1536, 6, 'Russia'), (1323, 9, 'Amsterdam'), (1130, 6, 'Russia'), (1227, 7, 'Germany'), (139, 7, 'Germany'), (1139, 8, 'Interfax'), (530, 16, 'Nagorno-Karabakh'), (811, 16, 'Nagorno-Karabakh'), (1334, 8, 'Interfax'), (1425, 51, 'Organization_for_Security_and_Co-operation_in_Europe'), (191, 16, 'Nagorno-Karabakh'), (96, 10, 'Azerbaijan'), (84, 7, 'Armenia'), (1009, 16, 'Nagorno-Karabakh'), (47, 4, 'Bonn'), (1547, 7, 'Finland'), (953, 10, 'Azerbaijan'), (1075, 7, 'Armenia'), (325, 11, 'Azerbaijan'), (1478, 4, 'Organization_for_Security_and_Co-operation_in_Europe'), (647, 6, 'Azerbaijani_people'), (1504, 11, 'OSCE_Minsk_Group'), (11, 6, 'Azerbaijani_people'), (631, 9, 'Armenians'), (586, 5, 'Azerbaijani_people'), (380, 8, 'Armenia'), (0, 9, 'Armenians')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(81, 4, 'Mesa,_Arizona'), (88, 2, 'Arizona')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lutuli', 'Lutuli']
response in server.py code:
 [(148, 16, 'Methodism'), (60, 14, 'Primary_school'), (47, 7, 'Teacher'), (28, 9, 'Head_teacher'), (120, 6, 'Albert_Lutuli'), (0, 6, 'Albert_Lutuli'), (97, 9, 'Newcastle_upon_Tyne'), (108, 5, 'KwaZulu-Natal'), (182, 8, 'Preacher_(comics)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Japan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Yeltsin', 'Boris Yeltsin', 'Yegor Stroyev', 'Mikhail Gorbachev']
response in server.py code:
 [(539, 6, 'Russia'), (90, 13, 'Boris_Yeltsin'), (777, 7, 'Boris_Yeltsin'), (368, 7, 'Boris_Yeltsin'), (236, 8, 'Interfax'), (54, 6, 'Moscow'), (575, 7, 'Boris_Yeltsin'), (1016, 7, 'Boris_Yeltsin'), (0, 7, 'Boris_Yeltsin'), (994, 9, 'Information_Telegraph_Agency_of_Russia'), (763, 12, 'Soviet_Union'), (712, 17, 'Mikhail_Gorbachev'), (72, 7, 'Russia'), (346, 13, 'Yegor_Stroyev'), (600, 7, 'Kremlin'), (24, 7, 'Government_of_Russia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Callaghan']
response in server.py code:
 [(0, 9, 'James_Callaghan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(7, 15, 'Hawaiian_Islands')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 19, 'Rocky_Mountain_News')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Onarheim']
response in server.py code:
 [(2774, 6, 'Norway'), (987, 7, 'Reuters'), (2701, 6, 'Russia'), (3064, 6, 'Norway'), (73, 6, 'Norway'), (1283, 9, 'Norway'), (2709, 11, 'Svalbard'), (1642, 9, 'Norway'), (1847, 9, 'Norway'), (1656, 7, 'Russia'), (3261, 6, 'Russia'), (2164, 7, 'Russia'), (349, 7, 'Russia'), (1258, 9, 'Pyramiden'), (2413, 6, 'Moscow'), (15, 6, 'Arctic'), (134, 6, 'Arctic'), (762, 6, 'Arctic'), (1489, 11, 'Barentsburg'), (1242, 11, 'Barentsburg'), (779, 11, 'Svalbard'), (2614, 11, 'Barentsburg'), (1984, 11, 'Barentsburg'), (63, 8, 'Longyearbyen'), (968, 8, 'Leif_Frode_Onarheim'), (1179, 8, 'Russia'), (2176, 9, 'Ukraine'), (2068, 8, 'Longyearbyen'), (234, 8, 'Longyearbyen'), (1269, 8, 'Longyearbyen'), (2478, 8, 'Longyearbyen'), (2209, 8, 'Longyearbyen'), (817, 8, 'Longyearbyen'), (1192, 10, 'Ukraine'), (1570, 7, 'Vegard_Sletten')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(47, 4, 'Kiss_(band)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['her']
response in server.py code:
 [(146, 29, 'University_of_Western_Ontario'), (46, 3, 'Elizabeth_II')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(195, 14, "Reader's_Digest")]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Vladimir Meciar']
response in server.py code:
 [(386, 8, 'Slovakia'), (120, 6, 'Slovakia'), (50, 10, 'Bratislava'), (39, 6, 'Slovakia'), (498, 15, 'Vladimír_Mečiar'), (259, 4, 'News_Agency_of_the_Slovak_Republic'), (523, 34, "People's_Party_–_Movement_for_a_Democratic_Slovakia"), (369, 7, 'Galanta'), (917, 4, 'News_Agency_of_the_Slovak_Republic')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(133, 7, 'Chelsea_F.C.'), (112, 15, 'Manchester_City_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Alcove,_New_York'), (7, 17, 'Elementary_school')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 17, 'Business_alliance')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(630, 9, 'Stockholm'), (44, 9, 'Stockholm'), (557, 7, 'Reuters'), (65, 7, 'Sweden'), (517, 8, 'Ericsson'), (0, 8, 'Ericsson'), (231, 8, 'Ericsson'), (224, 5, 'China'), (31, 5, 'China'), (202, 9, 'Guangdong'), (404, 19, 'Intelligent_Network'), (425, 2, 'Indiana')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ciechanover']
response in server.py code:
 [(144, 42, 'National_Academy_of_Sciences'), (78, 30, 'Pontifical_Academy_of_Sciences'), (31, 41, 'Israel_Academy_of_Sciences_and_Humanities'), (0, 11, 'Aaron_Ciechanover'), (17, 6, 'Member_of_Parliament')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(529, 8, 'Bulgaria'), (35, 8, 'Bulgaria'), (261, 8, 'Bulgaria'), (453, 7, 'Islam'), (45, 5, 'Sofia'), (133, 8, 'Kazanlak'), (478, 5, 'Islam'), (435, 8, 'Kazanlak'), (115, 9, 'Bulgaria'), (499, 7, 'Turkey'), (542, 10, 'Christian')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['John Shad', 'R. Foster Winans', 'Reagan']
response in server.py code:
 [(0, 34, 'U.S._Securities_and_Exchange_Commission'), (35, 9, 'John_S.R._Shad'), (409, 16, 'R._Foster_Winans'), (282, 4, 'John_S.R._Shad'), (908, 4, 'John_S.R._Shad'), (338, 4, 'John_S.R._Shad'), (897, 4, 'John_S.R._Shad'), (380, 19, 'The_Wall_Street_Journal'), (948, 3, 'U.S._Securities_and_Exchange_Commission'), (1134, 11, 'Netherlands'), (60, 8, 'United_States_Congress'), (1226, 6, 'Ronald_Reagan'), (1065, 4, 'John_S.R._Shad'), (158, 13, 'Supreme_Court_of_the_United_States')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(66, 10, 'Miami_Heat')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Donald Tsang']
response in server.py code:
 [(470, 5, 'Donald_Tsang'), (902, 5, 'Donald_Tsang'), (102, 12, 'Donald_Tsang'), (1117, 9, 'Hong_Kong'), (72, 9, 'Hong_Kong'), (1091, 9, 'Hong_Kong'), (52, 8, 'Auckland'), (536, 9, 'Hong_Kong'), (742, 9, 'Hong_Kong'), (940, 9, 'Hong_Kong'), (523, 11, 'New_Zealand'), (687, 7, 'United_Kingdom'), (698, 5, 'China'), (496, 8, 'Auckland'), (222, 7, 'China'), (1154, 10, 'Wellington'), (45, 5, 'Donald_Tsang'), (0, 2, 'Hong_Kong'), (309, 11, 'Guangdong')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(153, 6, 'Naples'), (36, 6, 'Amalfi'), (141, 8, 'Hospital'), (107, 4, 'Poet'), (19, 9, 'Quasimodo')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Travel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(799, 8, 'Budapest'), (319, 8, 'Budapest'), (54, 8, 'Budapest'), (0, 7, 'Hungary'), (74, 9, 'Hungary')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Raytheon')]
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['him', 'her']
response in server.py code:
 [(210, 18, 'Madison,_Wisconsin'), (87, 13, 'United_States'), (181, 24, 'Madison_Business_College'), (121, 3, 'Elizabeth_II'), (76, 3, 'Fidel_Castro')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Suharto', 'Wahono', 'Suharto', 'Megawati Sukarnoputri']
response in server.py code:
 [(1001, 9, 'Indonesia'), (1307, 9, 'Indonesia'), (179, 7, 'Reuters'), (159, 7, 'Reuters'), (1095, 7, 'Jakarta'), (170, 7, 'Jakarta'), (82, 10, 'Indonesia'), (1457, 21, 'Megawati_Sukarnoputri'), (1240, 7, 'Suharto'), (321, 10, 'Indonesia'), (342, 7, 'Suharto'), (723, 11, 'Philippines'), (15, 10, 'Indonesia'), (823, 30, 'Moro_National_Liberation_Front'), (1445, 3, 'Indonesian_Democratic_Party'), (1581, 8, 'Megawati_Sukarnoputri'), (468, 12, 'The_Jakarta_Post'), (969, 15, 'Media_Indonesia'), (793, 10, 'Philippines'), (1416, 27, 'Indonesian_Democratic_Party'), (1072, 11, 'South_Korea'), (314, 6, 'Kompas'), (1174, 3, 'Kia_Motors'), (1105, 13, 'Tanjung_Priok'), (855, 4, 'Moro_National_Liberation_Front'), (521, 6, 'Rudy_Gunawan'), (1326, 9, 'Republika_(Indonesian_newspaper)'), (496, 24, 'House_of_Representatives')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Les Miles']
response in server.py code:
 [(38, 9, 'Les_Miles'), (28, 3, 'Louisiana_State_University')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Greenspan', 'Greenspan', 'Alan Greenspan', 'Sidek', 'Sidek', 'Carlos Ponce']
response in server.py code:
 [(868, 6, 'Mexico'), (775, 6, 'Mexico'), (1959, 6, 'Mexico'), (1496, 6, 'Mexico'), (793, 4, 'United_States'), (634, 4, 'United_States'), (1309, 7, 'Mexico'), (363, 14, 'Alan_Greenspan'), (601, 7, 'Mexico'), (686, 9, 'Alan_Greenspan'), (189, 9, 'Alan_Greenspan'), (63, 7, 'Mexico'), (0, 6, 'Mexico'), (1317, 4, 'American_depositary_receipt'), (338, 15, 'Federal_Reserve_System'), (40, 9, 'Alan_Greenspan'), (51, 11, 'Mexico_City'), (1357, 6, 'Telmex'), (230, 3, 'Dow_Jones_Industrial_Average'), (1368, 8, 'Televisa'), (806, 8, 'United_States_Department_of_the_Treasury'), (1334, 8, 'New_York_City'), (1475, 8, 'New_York_City'), (1641, 9, 'Santander_Group'), (1903, 5, 'Ponce,_Puerto_Rico'), (1224, 5, 'Rashid_Sidek'), (486, 3, 'Mexican_Stock_Exchange'), (1143, 5, 'Rashid_Sidek'), (1606, 12, 'Carlos_Ponce')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['little']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Gerhard Stoltenberg', 'Karl Otto Poehl', 'Edouard Balladur', 'Jacques de Larosiere', 'Kiichi Miyazawa', 'Giovanni Goria', 'James Baker']
response in server.py code:
 [(301, 16, 'Édouard_Balladur'), (973, 5, 'James_Baker'), (934, 11, 'James_Baker'), (1088, 5, 'Italy'), (260, 15, 'Karl_Otto_Pöhl'), (413, 15, 'Kiichi_Miyazawa'), (215, 19, 'Gerhard_Stoltenberg'), (1076, 5, 'Paris'), (239, 10, 'Deutsche_Bundesbank'), (59, 13, 'United_States_Department_of_the_Treasury'), (896, 14, 'Giovanni_Goria'), (341, 20, 'Jacques_de_Larosière'), (113, 13, 'Group_of_Five'), (684, 14, 'G7'), (1058, 14, 'G7'), (915, 8, 'United_States_Department_of_the_Treasury'), (1000, 5, 'Giovanni_Goria')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 13, 'Sonoma_County,_California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(42, 19, 'General_Motors'), (570, 18, "Standard_&_Poor's")]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Neher', 'Sakmann']
response in server.py code:
 [(10, 7, 'Bert_Sakmann')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Brisbane'), (25, 4, 'Taps')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(40, 5, 'Tokyo')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 21, 'Environmental_Defense_Fund')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(346, 6, 'Brazil'), (1554, 6, 'Brazil'), (30, 6, 'Brazil'), (53, 14, 'Rio_de_Janeiro'), (2568, 9, 'Brazil'), (1644, 6, 'Brazil'), (1283, 6, 'Brazil'), (1089, 13, 'Latin_America'), (2402, 13, 'United_States'), (666, 6, 'Brazil'), (132, 10, 'Brazil'), (1920, 6, 'Brazil'), (2245, 10, 'Brazil'), (2697, 8, 'Saldanha_Bay')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(22, 13, 'New_York_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(48, 9, 'Nostalgia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(14, 4, 'Nile')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Lessing', 'Lessing']
response in server.py code:
 [(297, 15, 'Alfred_A._Knopf'), (291, 2, 'United_States'), (9, 7, 'Gotthold_Ephraim_Lessing'), (264, 14, 'Penguin_Group'), (186, 7, 'Gotthold_Ephraim_Lessing')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(98, 9, 'Minnesota'), (82, 6, 'Boston')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(36, 5, 'Tokyo')]
given spans fix. original text:  Daily Argentine grain fixings - Camaras Arbitrales. BUENOS AIRES 1996-12-06 Avg December 5 price fix : Buenos Aires Quequen Rosario Bahia Blanca Oats unq unq unq unq Wheat 121 130 121.3 121 Maize (Flint) 113 114 113.7 112 Maize (Dent) 113 114 113.7 112 Sorghum unq unq unq unq Millet unq unq 90 unq Soybeans 283 unq 283 unq Sunseeds 219 216 220 216-- Buenos Aires Newsroom+541 318-0655
original word:  Newsroom+541 Newsroom+541
new split:  Newsroom  and  +541
[(0, 5), (6, 15), (16, 21), (22, 29), (30, 31), (32, 39), (40, 50), (50, 51), (52, 58), (59, 64), (65, 75), (76, 79), (80, 88), (89, 90), (91, 96), (97, 100), (101, 102), (103, 109), (110, 115), (116, 123), (124, 131), (132, 137), (138, 144), (145, 149), (150, 153), (154, 157), (158, 161), (162, 165), (166, 171), (172, 175), (176, 179), (180, 185), (186, 189), (190, 195), (196, 197), (197, 202), (202, 203), (204, 207), (208, 211), (212, 217), (218, 221), (222, 227), (228, 229), (229, 233), (233, 234), (235, 238), (239, 242), (243, 248), (249, 252), (253, 260), (261, 264), (265, 268), (269, 272), (273, 276), (277, 283), (284, 287), (288, 291), (292, 294), (295, 298), (299, 307), (308, 311), (312, 315), (316, 319), (320, 323), (324, 332), (333, 336), (337, 340), (341, 344), (345, 348), (348, 350), (351, 357), (358, 363), (364, 372), (372, 376)]
{0: 0, 132: 21, 22: 3, 6: 1, 265: 51, 138: 22, 273: 53, 269: 52, 16: 2, 145: 23, 277: 54, 150: 24, 345: 68, 324: 64, 154: 25, 284: 55, 30: 4, 261: 50, 32: 5, 162: 27, 292: 57, 166: 28, 295: 58, 40: 6, 372: 73, 299: 59, 172: 29, 176: 30, 50: 7, 180: 31, 158: 26, 312: 61, 52: 8, 186: 32, 59: 9, 316: 62, 190: 33, 320: 63, 65: 10, 196: 34, 197: 35, 97: 15, 76: 11, 202: 36, 204: 37, 333: 65, 288: 56, 80: 12, 337: 66, 212: 39, 308: 60, 89: 13, 218: 40, 91: 14, 348: 69, 222: 41, 229: 43, 208: 38, 228: 42, 101: 16, 358: 71, 103: 17, 233: 44, 235: 45, 364: 72, 110: 18, 239: 46, 243: 47, 116: 19, 249: 48, 351: 70, 124: 20, 253: 49, 341: 67}
{131: 20, 260: 49, 5: 0, 264: 50, 137: 21, 268: 51, 15: 1, 144: 22, 344: 67, 323: 63, 276: 53, 21: 2, 153: 24, 179: 30, 283: 54, 29: 3, 31: 4, 161: 26, 291: 56, 165: 27, 294: 57, 39: 5, 298: 58, 171: 28, 307: 59, 175: 29, 50: 6, 51: 7, 311: 60, 185: 31, 58: 8, 287: 55, 189: 32, 319: 62, 64: 9, 195: 33, 197: 34, 202: 35, 75: 10, 332: 64, 207: 37, 336: 65, 376: 73, 211: 38, 340: 66, 203: 36, 88: 12, 217: 39, 90: 13, 79: 11, 348: 68, 221: 40, 350: 69, 357: 70, 96: 14, 272: 52, 227: 41, 100: 15, 229: 42, 102: 16, 233: 43, 234: 44, 363: 71, 109: 17, 238: 45, 157: 25, 242: 46, 115: 18, 372: 72, 248: 47, 315: 61, 123: 19, 252: 48, 149: 23}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(132, 12, 'Bahía_Blanca'), (6, 9, 'Argentina'), (124, 7, 'Rosario,_Santa_Fe'), (52, 12, 'Buenos_Aires'), (103, 12, 'Buenos_Aires')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(65, 8, 'Barbados'), (23, 10, 'Manchester')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(196, 3, 'Federal_Reserve_System'), (4, 15, 'Federal_Reserve_System')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Gordimer']
response in server.py code:
 [(35, 31, 'University_of_the_Witwatersrand'), (0, 8, 'Nadine_Gordimer'), (108, 6, 'Fellow')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(138, 12, 'Eric_Gregory_Award')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(92, 5, 'China'), (25, 5, 'China'), (53, 7, 'Beijing'), (851, 6, 'Xinhua_News_Agency'), (215, 6, 'Xinhua_News_Agency'), (317, 6, 'Yunnan'), (272, 5, 'Huize_County')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(7, 5, 'Tax'), (20, 9, 'Telephone'), (0, 6, 'Pay_to_play')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(815, 15, 'Baja_California'), (562, 15, 'Baja_California'), (928, 14, 'Gulf_of_Mexico'), (459, 14, 'Gulf_of_Mexico'), (845, 6, 'Sonora'), (0, 7, 'Mexico'), (489, 13, 'Pacific_coast'), (475, 9, 'Caribbean'), (582, 7, 'Sinaloa'), (506, 13, 'Pacific_coast'), (1218, 12, 'Quintana_Roo'), (1145, 9, 'Caribbean'), (993, 10, 'Tamaulipas'), (120, 3, 'Greenwich_Mean_Time'), (47, 11, 'Mexico_City'), (196, 7, 'Tampico'), (1030, 4, 'Gulf_of_Mexico'), (1332, 11, 'Mexico_City'), (385, 5, 'Kenda')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Texas'), (6, 13, 'United_States_Border_Patrol')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(6, 4, 'Democratic_Party_(United_States)'), (60, 2, 'Associated_Press'), (67, 5, 'Yahoo!'), (45, 3, 'Republican_Party_(United_States)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(581, 6, 'London'), (1258, 6, 'Brazil'), (1540, 5, 'Ghana'), (1529, 6, 'Brazil'), (1516, 11, 'Ivory_Coast'), (1023, 3, 'Certified_Public_Accountant'), (1471, 3, 'Certified_Public_Accountant'), (163, 3, 'Certified_Public_Accountant'), (302, 3, 'Certified_Public_Accountant')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['His', 'Fulvio']
response in server.py code:
 [(37, 8, 'Lombardy'), (218, 6, 'Writer'), (48, 18, 'Province_of_Varese'), (94, 13, 'Lake_Maggiore'), (0, 2, 'Dario_Fo'), (129, 6, 'Fulvio_Orsini')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(179, 4, 'China_Central_Television')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(312, 9, 'Singapore'), (0, 9, 'Singapore'), (38, 9, 'Singapore'), (59, 9, 'Singapore'), (16, 4, 'Thailand'), (595, 9, 'Singapore'), (78, 4, 'Thailand'), (93, 13, 'Changi_Prison'), (143, 24, 'Central_Narcotics_Bureau')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(10, 10, 'Bookselling')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(49, 14, 'Rio_de_Janeiro'), (0, 6, 'Brazil'), (75, 9, 'Brazil'), (441, 7, 'O_Globo'), (524, 7, 'O_Globo'), (252, 14, 'Rio_de_Janeiro')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Rita Levi-Montalcini']
response in server.py code:
 [(25, 5, 'Turin'), (125, 7, 'Painting'), (153, 19, 'Electrical_engineering'), (177, 13, 'Mathematician'), (31, 20, 'Rita_Levi-Montalcini')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Sheik Hassan Nasrallah']
response in server.py code:
 [(44, 22, 'Hassan_Nasrallah'), (27, 9, 'Hezbollah')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Arafat', 'Yasser Arafat']
response in server.py code:
 [(703, 6, 'Israel'), (99, 13, 'Yasser_Arafat'), (334, 9, 'Jerusalem'), (852, 6, 'Israel'), (914, 9, 'Jerusalem'), (542, 6, 'Israel'), (171, 8, 'Ramallah'), (431, 6, 'Yasser_Arafat'), (345, 7, 'Israel'), (222, 6, 'Yasser_Arafat'), (929, 7, 'Israel'), (491, 7, 'Islam'), (510, 4, 'Jews'), (738, 14, 'East_Jerusalem'), (0, 6, 'Yasser_Arafat'), (637, 19, 'East_Jerusalem'), (808, 6, 'Yasser_Arafat'), (48, 6, 'Nablus'), (311, 6, 'Nablus'), (159, 6, 'Nablus'), (77, 11, 'State_of_Palestine'), (576, 9, 'West_Bank'), (128, 9, 'Palestinian_territories'), (399, 12, 'State_of_Palestine'), (619, 12, 'State_of_Palestine'), (15, 6, 'Nablus'), (56, 9, 'Palestinian_territories'), (500, 5, 'Arab_people')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['paul crouch']
response in server.py code:
 [(0, 11, 'Paul_Crouch')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 13, 'The_Music_Man')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(229, 5, 'Chile'), (7, 6, 'Mexico'), (0, 5, 'Chile'), (930, 7, 'Chile'), (75, 6, 'Mexico'), (564, 6, 'Mexico'), (762, 5, 'Chile'), (65, 5, 'Chile'), (45, 8, 'Santiago'), (1152, 8, 'Santiago'), (751, 6, 'Mexico'), (704, 6, 'Canada'), (191, 7, 'Finance')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Scooter Braun']
response in server.py code:
 [(60, 13, 'Scooter_Braun')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Charles-Eugene Marin', 'Larry Taylor']
response in server.py code:
 [(459, 7, 'Noranda_(mining_company)'), (129, 6, 'Quebec'), (0, 6, 'Quebec'), (617, 7, 'Noranda_(mining_company)'), (763, 7, 'Noranda_(mining_company)'), (115, 12, 'Murdochville,_Quebec'), (1459, 7, 'Noranda_(mining_company)'), (313, 20, 'Charles-Eugène_Marin'), (1019, 12, 'Larry_Taylor_(gridiron_football)'), (1611, 6, 'Coffin'), (1096, 6, 'Larry_Taylor_(gridiron_football)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Michael Smith']
response in server.py code:
 [(147, 7, 'England')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Bob Young']
response in server.py code:
 [(0, 9, 'Bob_Young_(businessman)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['David Peleg', 'Eitel']
response in server.py code:
 [(430, 6, 'Israel'), (896, 6, 'Israel'), (1026, 6, 'Israel'), (722, 7, 'Israel'), (1192, 7, 'Israel'), (1519, 9, 'Jerusalem'), (862, 9, 'Jerusalem'), (1403, 7, 'Israel'), (135, 6, 'Israel'), (305, 4, 'United_Nations'), (230, 11, 'Middle_East'), (1467, 7, 'Israel'), (1368, 4, 'United_Nations'), (29, 7, 'Israel'), (1623, 6, 'Canada'), (1041, 35, 'Palestine_Liberation_Organization'), (369, 7, 'Germany'), (49, 14, 'United_Nations'), (1233, 8, 'Old_City_(Jerusalem)'), (328, 16, 'United_Nations_Security_Council'), (75, 16, 'United_Nations_Security_Council'), (796, 11, 'State_of_Palestine'), (458, 11, 'David_Peleg'), (293, 11, 'State_of_Palestine'), (160, 11, 'State_of_Palestine'), (646, 5, 'Ernst_Johann_Eitel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['michael franti']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 17, 'The_Secret_Garden')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Carlos Belo', 'Jose Ramos Horta', 'Ali Alatas', 'Helmut Kohl']
response in server.py code:
 [(399, 4, 'Oslo'), (1146, 7, 'Jakarta'), (1652, 10, 'Indonesia'), (0, 9, 'Indonesia'), (690, 9, 'Indonesia'), (1212, 7, 'Jakarta'), (659, 10, 'Ali_Alatas'), (219, 17, 'Nobel_Peace_Prize'), (1974, 4, 'Bonn'), (285, 10, 'Indonesia'), (559, 10, 'Indonesia'), (1869, 4, 'Oslo'), (1959, 11, 'Helmut_Kohl'), (2051, 9, 'Indonesia'), (1980, 4, 'Helmut_Kohl'), (544, 9, 'Australia'), (1098, 38, 'Organisation_of_Islamic_Cooperation'), (1397, 9, 'Indonesia'), (612, 11, 'José_Ramos-Horta'), (50, 4, 'Dili'), (1155, 11, 'José_Ramos-Horta'), (499, 16, 'José_Ramos-Horta'), (1495, 7, 'Jakarta'), (1677, 6, 'Norway'), (1511, 6, 'Ali_Alatas'), (952, 10, 'East_Timor'), (304, 7, 'Jakarta'), (1820, 6, 'Ali_Alatas'), (1352, 10, 'East_Timor'), (1138, 3, 'Organisation_of_Islamic_Cooperation'), (1459, 14, 'United_Nations'), (253, 4, 'Carlos_Filipe_Ximenes_Belo'), (1556, 17, 'Nobel_Peace_Prize'), (78, 13, 'East_Timor'), (1941, 6, 'Germany'), (966, 6, 'Ali_Alatas'), (160, 6, 'Norway'), (883, 11, 'José_Ramos-Horta'), (1254, 11, 'José_Ramos-Horta'), (2126, 7, 'Jakarta'), (759, 9, 'Norway'), (441, 5, 'Nobel_Prize'), (1749, 6, 'Ali_Alatas'), (28, 5, 'Nobel_Prize'), (56, 10, 'East_Timor'), (1633, 4, 'Carlos_Filipe_Ximenes_Belo'), (114, 11, 'Carlos_Filipe_Ximenes_Belo'), (131, 4, 'Dili'), (1725, 4, 'Carlos_Filipe_Ximenes_Belo'), (2004, 4, 'Carlos_Filipe_Ximenes_Belo'), (1245, 4, 'Carlos_Filipe_Ximenes_Belo'), (1373, 10, 'Portugal'), (92, 14, 'Catholic_Church'), (1875, 4, 'Carlos_Filipe_Ximenes_Belo'), (2104, 10, 'East_Timor'), (1896, 7, 'Holy_See'), (12, 4, 'Carlos_Filipe_Ximenes_Belo')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(41, 10, 'Yom_Kippur')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
given spans fix. original text:  Cheap oil feedstocks, the weakened U.S. dollar and a plant utilization rate approaching 90 pct will propel the streamlined U.S. petrochemical industry to record profits this year, with growth expected through at least 1990, major company executives predicted. This bullish outlook for chemical manufacturing and an industrywide move to shed unrelated businesses has prompted GAF Corp (GAF), privately-held Cain Chemical Inc, and other firms to aggressively seek acquisitions of petrochemical plants. Oil companies such as Ashland Oil Inc (ASH), the Kentucky-based oil refiner and marketer, are also shopping for money-making petrochemical businesses to buy. I see us poised at the threshold of a golden period, said Paul Oreffice, chairman of giant Dow Chemical Co (DOW), adding, Theres no major plant capacity being added around the world now. The whole game is bringing out new products and improving the old ones. Analysts say the chemical industrys biggest customers, automobile manufacturers and home builders that use a lot of paints and plastics, are expected to buy quantities this year. U.S. petrochemical plants are currently operating at about 90 pct capacity, reflecting tighter supply that could hike product prices by 30 to 40 pct this year, said John Dosher, managing director of Pace Consultants Inc of Houston. Demand for some products such as styrene could push profit margins up by as much as 300 pct, he said. Oreffice, speaking at a meeting of chemical engineers in Houston, said Dow would easily top the 741 mln dlrs it earned last year and predicted it would have the best year in its history. In 1985, when oil prices were still above 25 dlrs a barrel and chemical exports were adversely affected by the strong U.S. dollar, Dow had profits of 58 mln dlrs. I believe the entire chemical industry is headed for a record year or close to it, Oreffice said. GAF chairman Samuel Heyman estimated that the U.S. chemical industry would report a 20 pct gain in profits during 1987. Last year, the domestic industry earned a total of 13 billion dlrs, a 54 pct leap from 1985. The turn in the fortunes of the once-sickly chemical industry has been brought about by a combination of luck and planning, said Paces John Dosher. Dosher said last years fall in oil prices made feedstocks dramatically cheaper and at the same time the American dollar was weakening against foreign currencies. That helped boost U.S. chemical exports. Also helping to bring supply and demand into balance has been the gradual market absorption of the extra chemical manufacturing capacity created by Middle Eastern oil producers in the early 1980s. Finally, virtually all major U.S. chemical manufacturers have embarked on an extensive corporate restructuring program to mothball inefficient plants, trim the payroll and eliminate unrelated businesses. The restructuring touched off a flurry of friendly and hostile takeover attempts. GAF, which made an unsuccessful attempt in 1985 to acquire Union Carbide Corp UK, recently offered three billion dlrs for Borg Warner Corp BOR, a Chicago manufacturer of plastics and chemicals. Another industry powerhouse, W.R. Grace (GRA) has divested its retailing, restaurant and fertilizer businesses to raise cash for chemical acquisitions. But some experts worry that the chemical industry may be headed for trouble if companies continue turning their back on the manufacturing of staple petrochemical commodities, such as ethylene, in favor of more profitable specialty chemicals that are custom-designed for a small group of buyers. Companies like DuPont (DD) and Monsanto Co MTC spent the past two or three years trying to get out of the commodity chemical business in reaction to how badly the market had deteriorated, Dosher said. But I think they will eventually kill the margins on the profitable chemicals in the niche market. Some top chemical executives share the concern. The challenge for our industry is to keep from getting carried away and repeating past mistakes, GAFs Heyman cautioned. The shift from commodity chemicals may be ill-advised. Specialty businesses do not stay special long. Houston-based Cain Chemical, created this month by the Sterling investment banking group, believes it can generate 700 mln dlrs in annual sales by bucking the industry trend. Chairman Gordon Cain, who previously led a leveraged buyout of Duponts Conoco Incs chemical business, has spent 1.1 billion dlrs since January to buy seven petrochemical plants along the Texas Gulf Coast. The plants produce only basic commodity petrochemicals that are the building blocks of specialty products. This kind of commodity chemical business will never be a glamorous, high-margin business, Cain said, adding that demand is expected to grow by about three pct annually. Garo Armen, an analyst with Dean Witter Reynolds, said chemical makers have also benefitted by increasing demand for plastics as prices become more competitive with aluminum, wood and steel products. Armen estimated the upturn in the chemical business could last as long as four or five years, provided the U.S. economy continues its modest rate of growth.
original word:  Kentucky-based Kentucky-based
new split:  Kentucky  and  -based
[(0, 5), (6, 9), (10, 20), (20, 21), (22, 25), (26, 34), (35, 39), (40, 46), (47, 50), (51, 52), (53, 58), (59, 70), (71, 75), (76, 87), (88, 90), (91, 94), (95, 99), (100, 106), (107, 110), (111, 122), (123, 127), (128, 141), (142, 150), (151, 153), (154, 160), (161, 168), (169, 173), (174, 178), (178, 179), (180, 184), (185, 191), (192, 200), (201, 208), (209, 211), (212, 217), (218, 222), (222, 223), (224, 229), (230, 237), (238, 248), (249, 258), (258, 259), (260, 264), (265, 272), (273, 280), (281, 284), (285, 293), (294, 307), (308, 311), (312, 314), (315, 327), (328, 332), (333, 335), (336, 340), (341, 350), (351, 361), (362, 365), (366, 374), (375, 378), (379, 383), (384, 385), (385, 388), (388, 389), (389, 390), (391, 405), (406, 410), (411, 419), (420, 423), (423, 424), (425, 428), (429, 434), (435, 440), (441, 443), (444, 456), (457, 461), (462, 474), (475, 477), (478, 491), (492, 498), (498, 499), (500, 503), (504, 513), (514, 518), (519, 521), (522, 529), (530, 533), (534, 537), (538, 539), (539, 542), (542, 543), (543, 544), (545, 548), (549, 557), (557, 563)]
{0: 0, 384: 60, 258: 41, 260: 42, 6: 1, 519: 83, 265: 43, 10: 2, 514: 82, 222: 36, 273: 44, 530: 85, 20: 3, 22: 4, 281: 45, 26: 5, 539: 88, 285: 46, 542: 89, 543: 90, 545: 91, 35: 6, 549: 92, 294: 47, 40: 7, 557: 93, 47: 8, 351: 55, 51: 9, 308: 48, 53: 10, 312: 49, 59: 11, 522: 84, 71: 12, 328: 51, 76: 13, 333: 52, 336: 53, 341: 54, 441: 72, 88: 14, 91: 15, 95: 16, 315: 50, 100: 17, 362: 56, 107: 18, 366: 57, 111: 19, 375: 58, 379: 59, 128: 21, 385: 61, 388: 62, 389: 63, 391: 64, 142: 22, 406: 65, 151: 23, 154: 24, 411: 66, 538: 87, 161: 25, 420: 67, 423: 68, 169: 26, 534: 86, 429: 70, 174: 27, 178: 28, 435: 71, 180: 29, 201: 32, 185: 30, 444: 73, 192: 31, 457: 74, 462: 75, 209: 33, 212: 34, 218: 35, 475: 76, 478: 77, 224: 37, 123: 20, 230: 38, 492: 78, 238: 39, 498: 79, 500: 80, 425: 69, 504: 81, 249: 40}
{513: 81, 258: 40, 259: 41, 5: 0, 518: 82, 264: 42, 9: 1, 557: 92, 272: 43, 529: 84, 20: 2, 21: 3, 280: 44, 25: 4, 539: 87, 284: 45, 542: 88, 543: 89, 544: 90, 34: 5, 548: 91, 293: 46, 39: 6, 434: 70, 46: 7, 50: 8, 307: 47, 52: 9, 94: 15, 521: 83, 58: 10, 70: 11, 327: 50, 311: 48, 332: 51, 335: 52, 440: 71, 340: 53, 122: 19, 563: 93, 87: 13, 90: 14, 314: 49, 350: 54, 99: 16, 361: 55, 106: 17, 365: 56, 110: 18, 374: 57, 378: 58, 383: 59, 385: 60, 388: 61, 389: 62, 390: 63, 533: 85, 141: 21, 405: 64, 150: 22, 537: 86, 153: 23, 410: 65, 160: 24, 419: 66, 423: 67, 168: 25, 428: 69, 173: 26, 200: 31, 178: 27, 179: 28, 184: 29, 443: 72, 191: 30, 75: 12, 456: 73, 461: 74, 208: 32, 211: 33, 217: 34, 474: 75, 477: 76, 222: 35, 223: 36, 229: 37, 491: 77, 237: 38, 424: 68, 498: 78, 499: 79, 503: 80, 248: 39, 127: 20}
given spans fix. original text:  Cheap oil feedstocks, the weakened U.S. dollar and a plant utilization rate approaching 90 pct will propel the streamlined U.S. petrochemical industry to record profits this year, with growth expected through at least 1990, major company executives predicted. This bullish outlook for chemical manufacturing and an industrywide move to shed unrelated businesses has prompted GAF Corp (GAF), privately-held Cain Chemical Inc, and other firms to aggressively seek acquisitions of petrochemical plants. Oil companies such as Ashland Oil Inc (ASH), the Kentucky-based oil refiner and marketer, are also shopping for money-making petrochemical businesses to buy. I see us poised at the threshold of a golden period, said Paul Oreffice, chairman of giant Dow Chemical Co (DOW), adding, Theres no major plant capacity being added around the world now. The whole game is bringing out new products and improving the old ones. Analysts say the chemical industrys biggest customers, automobile manufacturers and home builders that use a lot of paints and plastics, are expected to buy quantities this year. U.S. petrochemical plants are currently operating at about 90 pct capacity, reflecting tighter supply that could hike product prices by 30 to 40 pct this year, said John Dosher, managing director of Pace Consultants Inc of Houston. Demand for some products such as styrene could push profit margins up by as much as 300 pct, he said. Oreffice, speaking at a meeting of chemical engineers in Houston, said Dow would easily top the 741 mln dlrs it earned last year and predicted it would have the best year in its history. In 1985, when oil prices were still above 25 dlrs a barrel and chemical exports were adversely affected by the strong U.S. dollar, Dow had profits of 58 mln dlrs. I believe the entire chemical industry is headed for a record year or close to it, Oreffice said. GAF chairman Samuel Heyman estimated that the U.S. chemical industry would report a 20 pct gain in profits during 1987. Last year, the domestic industry earned a total of 13 billion dlrs, a 54 pct leap from 1985. The turn in the fortunes of the once-sickly chemical industry has been brought about by a combination of luck and planning, said Paces John Dosher. Dosher said last years fall in oil prices made feedstocks dramatically cheaper and at the same time the American dollar was weakening against foreign currencies. That helped boost U.S. chemical exports. Also helping to bring supply and demand into balance has been the gradual market absorption of the extra chemical manufacturing capacity created by Middle Eastern oil producers in the early 1980s. Finally, virtually all major U.S. chemical manufacturers have embarked on an extensive corporate restructuring program to mothball inefficient plants, trim the payroll and eliminate unrelated businesses. The restructuring touched off a flurry of friendly and hostile takeover attempts. GAF, which made an unsuccessful attempt in 1985 to acquire Union Carbide Corp UK, recently offered three billion dlrs for Borg Warner Corp BOR, a Chicago manufacturer of plastics and chemicals. Another industry powerhouse, W.R. Grace (GRA) has divested its retailing, restaurant and fertilizer businesses to raise cash for chemical acquisitions. But some experts worry that the chemical industry may be headed for trouble if companies continue turning their back on the manufacturing of staple petrochemical commodities, such as ethylene, in favor of more profitable specialty chemicals that are custom-designed for a small group of buyers. Companies like DuPont (DD) and Monsanto Co MTC spent the past two or three years trying to get out of the commodity chemical business in reaction to how badly the market had deteriorated, Dosher said. But I think they will eventually kill the margins on the profitable chemicals in the niche market. Some top chemical executives share the concern. The challenge for our industry is to keep from getting carried away and repeating past mistakes, GAFs Heyman cautioned. The shift from commodity chemicals may be ill-advised. Specialty businesses do not stay special long. Houston-based Cain Chemical, created this month by the Sterling investment banking group, believes it can generate 700 mln dlrs in annual sales by bucking the industry trend. Chairman Gordon Cain, who previously led a leveraged buyout of Duponts Conoco Incs chemical business, has spent 1.1 billion dlrs since January to buy seven petrochemical plants along the Texas Gulf Coast. The plants produce only basic commodity petrochemicals that are the building blocks of specialty products. This kind of commodity chemical business will never be a glamorous, high-margin business, Cain said, adding that demand is expected to grow by about three pct annually. Garo Armen, an analyst with Dean Witter Reynolds, said chemical makers have also benefitted by increasing demand for plastics as prices become more competitive with aluminum, wood and steel products. Armen estimated the upturn in the chemical business could last as long as four or five years, provided the U.S. economy continues its modest rate of growth.
original word:  Houston-based Houston-based
new split:  Houston  and  -based
[(0, 5), (6, 9), (10, 20), (20, 21), (22, 25), (26, 34), (35, 39), (40, 46), (47, 50), (51, 52), (53, 58), (59, 70), (71, 75), (76, 87), (88, 90), (91, 94), (95, 99), (100, 106), (107, 110), (111, 122), (123, 127), (128, 141), (142, 150), (151, 153), (154, 160), (161, 168), (169, 173), (174, 178), (178, 179), (180, 184), (185, 191), (192, 200), (201, 208), (209, 211), (212, 217), (218, 222), (222, 223), (224, 229), (230, 237), (238, 248), (249, 258), (258, 259), (260, 264), (265, 272), (273, 280), (281, 284), (285, 293), (294, 307), (308, 311), (312, 314), (315, 327), (328, 332), (333, 335), (336, 340), (341, 350), (351, 361), (362, 365), (366, 374), (375, 378), (379, 383), (384, 385), (385, 388), (388, 389), (389, 390), (391, 405), (406, 410), (411, 419), (420, 423), (423, 424), (425, 428), (429, 434), (435, 440), (441, 443), (444, 456), (457, 461), (462, 474), (475, 477), (478, 491), (492, 498), (498, 499), (500, 503), (504, 513), (514, 518), (519, 521), (522, 529), (530, 533), (534, 537), (538, 539), (539, 542), (542, 543), (543, 544), (545, 548), (549, 557), (557, 563), (564, 567), (568, 575), (576, 579), (580, 588), (588, 589), (590, 593), (594, 598), (599, 607), (608, 611), (612, 624), (625, 638), (639, 649), (650, 652), (653, 656), (656, 657), (658, 659), (660, 663), (664, 666), (667, 673), (674, 676), (677, 680), (681, 690), (691, 693), (694, 695), (696, 702), (703, 709), (709, 710), (711, 715), (716, 720), (721, 729), (729, 730), (731, 739), (740, 742), (743, 748), (749, 752), (753, 761), (762, 764), (765, 766), (766, 769), (769, 770), (770, 771), (772, 778), (778, 779), (780, 786), (787, 789), (790, 795), (796, 801), (802, 810), (811, 816), (817, 822), (823, 829), (830, 833), (834, 839), (840, 843), (843, 844), (845, 848), (849, 854), (855, 859), (860, 862), (863, 871), (872, 875), (876, 879), (880, 888), (889, 892), (893, 902), (903, 906), (907, 910), (911, 915), (915, 916), (917, 925), (926, 929), (930, 933), (934, 942), (943, 952), (953, 960), (961, 970), (970, 971), (972, 982), (983, 996), (997, 1000), (1001, 1005), (1006, 1014), (1015, 1019), (1020, 1023), (1024, 1025), (1026, 1029), (1030, 1032), (1033, 1039), (1040, 1043), (1044, 1052), (1052, 1053), (1054, 1057), (1058, 1066), (1067, 1069), (1070, 1073), (1074, 1084), (1085, 1089), (1090, 1094), (1094, 1095), (1096, 1100), (1101, 1114), (1115, 1121), (1122, 1125), (1126, 1135), (1136, 1145), (1146, 1148), (1149, 1154), (1155, 1157), (1158, 1161), (1162, 1170), (1170, 1171), (1172, 1182), (1183, 1190), (1191, 1197), (1198, 1202), (1203, 1208), (1209, 1213), (1214, 1221), (1222, 1228), (1229, 1231), (1232, 1234), (1235, 1237), (1238, 1240), (1241, 1244), (1245, 1249), (1250, 1254), (1254, 1255), (1256, 1260), (1261, 1265), (1266, 1272), (1272, 1273), (1274, 1282), (1283, 1291), (1292, 1294), (1295, 1299), (1300, 1311), (1312, 1315), (1316, 1318), (1319, 1326), (1326, 1327), (1328, 1334), (1335, 1338), (1339, 1343), (1344, 1352), (1353, 1357), (1358, 1360), (1361, 1368), (1369, 1374), (1375, 1379), (1380, 1386), (1387, 1394), (1395, 1397), (1398, 1400), (1401, 1403), (1404, 1408), (1409, 1411), (1412, 1415), (1416, 1419), (1419, 1420), (1421, 1423), (1424, 1428), (1428, 1429), (1430, 1438), (1438, 1439), (1440, 1448), (1449, 1451), (1452, 1453), (1454, 1461), (1462, 1464), (1465, 1473), (1474, 1483), (1484, 1486), (1487, 1494), (1494, 1495), (1496, 1500), (1501, 1504), (1505, 1510), (1511, 1517), (1518, 1521), (1522, 1525), (1526, 1529), (1530, 1533), (1534, 1538), (1539, 1541), (1542, 1548), (1549, 1553), (1554, 1558), (1559, 1562), (1563, 1572), (1573, 1575), (1576, 1581), (1582, 1586), (1587, 1590), (1591, 1595), (1596, 1600), (1601, 1603), (1604, 1607), (1608, 1615), (1615, 1616), (1617, 1619), (1620, 1624), (1624, 1625), (1626, 1630), (1631, 1634), (1635, 1641), (1642, 1646), (1647, 1652), (1653, 1658), (1659, 1661), (1662, 1666), (1667, 1668), (1669, 1675), (1676, 1679), (1680, 1688), (1689, 1696), (1697, 1701), (1702, 1711), (1712, 1720), (1721, 1723), (1724, 1727), (1728, 1734), (1735, 1739), (1740, 1746), (1746, 1747), (1748, 1751), (1752, 1755), (1756, 1763), (1764, 1766), (1767, 1769), (1770, 1773), (1774, 1778), (1778, 1779), (1780, 1781), (1782, 1789), (1790, 1793), (1794, 1800), (1801, 1809), (1810, 1818), (1819, 1821), (1822, 1828), (1829, 1832), (1833, 1834), (1835, 1841), (1842, 1846), (1847, 1849), (1850, 1855), (1856, 1858), (1859, 1861), (1861, 1862), (1863, 1871), (1872, 1876), (1876, 1877), (1878, 1881), (1882, 1890), (1891, 1897), (1898, 1904), (1905, 1914), (1915, 1919), (1920, 1923), (1924, 1928), (1929, 1937), (1938, 1946), (1947, 1952), (1953, 1959), (1960, 1961), (1962, 1964), (1965, 1968), (1969, 1973), (1974, 1976), (1977, 1984), (1985, 1991), (1992, 1996), (1996, 1997), (1998, 2002), (2003, 2007), (2007, 2008), (2009, 2012), (2013, 2021), (2022, 2030), (2031, 2037), (2038, 2039), (2040, 2045), (2046, 2048), (2049, 2051), (2052, 2059), (2060, 2064), (2064, 2065), (2066, 2067), (2068, 2070), (2071, 2074), (2075, 2079), (2080, 2084), (2085, 2089), (2089, 2090), (2091, 2094), (2095, 2099), (2100, 2102), (2103, 2106), (2107, 2115), (2116, 2118), (2119, 2122), (2123, 2134), (2135, 2143), (2144, 2152), (2153, 2156), (2157, 2161), (2162, 2169), (2170, 2175), (2176, 2178), (2179, 2180), (2181, 2192), (2193, 2195), (2196, 2200), (2201, 2204), (2205, 2213), (2213, 2214), (2215, 2219), (2220, 2225), (2226, 2230), (2231, 2237), (2237, 2238), (2239, 2245), (2246, 2250), (2251, 2255), (2256, 2261), (2262, 2266), (2267, 2269), (2270, 2273), (2274, 2280), (2281, 2285), (2286, 2296), (2297, 2309), (2310, 2317), (2318, 2321), (2322, 2324), (2325, 2328), (2329, 2333), (2334, 2338), (2339, 2342), (2343, 2351), (2352, 2358), (2359, 2362), (2363, 2372), (2373, 2380), (2381, 2388), (2389, 2399), (2399, 2400), (2401, 2405), (2406, 2412), (2413, 2418), (2419, 2423), (2424, 2432), (2433, 2440), (2440, 2441), (2442, 2446), (2447, 2454), (2455, 2457), (2458, 2463), (2464, 2470), (2471, 2474), (2475, 2481), (2482, 2486), (2487, 2494), (2495, 2498), (2499, 2503), (2504, 2507), (2508, 2515), (2516, 2522), (2523, 2533), (2534, 2536), (2537, 2540), (2541, 2546), (2547, 2555), (2556, 2569), (2570, 2578), (2579, 2586), (2587, 2589), (2590, 2596), (2597, 2604), (2605, 2608), (2609, 2618), (2619, 2621), (2622, 2625), (2626, 2631), (2632, 2637), (2637, 2638), (2639, 2646), (2646, 2647), (2648, 2657), (2658, 2661), (2662, 2667), (2668, 2672), (2673, 2681), (2682, 2695), (2696, 2700), (2701, 2709), (2710, 2712), (2713, 2715), (2716, 2725), (2726, 2735), (2736, 2749), (2750, 2757), (2758, 2760), (2761, 2769), (2770, 2781), (2782, 2788), (2788, 2789), (2790, 2794), (2795, 2798), (2799, 2806), (2807, 2810), (2811, 2820), (2821, 2830), (2831, 2841), (2841, 2842), (2843, 2846), (2847, 2860), (2861, 2868), (2869, 2872), (2873, 2874), (2875, 2881), (2882, 2884), (2885, 2893), (2894, 2897), (2898, 2905), (2906, 2914), (2915, 2923), (2923, 2924), (2925, 2928), (2928, 2929), (2930, 2935), (2936, 2940), (2941, 2943), (2944, 2956), (2957, 2964), (2965, 2967), (2968, 2972), (2973, 2975), (2976, 2983), (2984, 2989), (2990, 2997), (2998, 3002), (3003, 3005), (3005, 3006), (3007, 3015), (3016, 3023), (3024, 3029), (3030, 3037), (3038, 3042), (3043, 3046), (3047, 3051), (3052, 3058), (3059, 3063), (3064, 3067), (3067, 3068), (3069, 3070), (3071, 3078), (3079, 3091), (3092, 3094), (3095, 3103), (3104, 3107), (3108, 3117), (3117, 3118), (3119, 3126), (3127, 3135), (3136, 3146), (3146, 3147), (3148, 3152), (3153, 3158), (3159, 3160), (3160, 3163), (3163, 3164), (3165, 3168), (3169, 3177), (3178, 3181), (3182, 3191), (3191, 3192), (3193, 3203), (3204, 3207), (3208, 3218), (3219, 3229), (3230, 3232), (3233, 3238), (3239, 3243), (3244, 3247), (3248, 3256), (3257, 3269), (3269, 3270), (3271, 3274), (3275, 3279), (3280, 3287), (3288, 3293), (3294, 3298), (3299, 3302), (3303, 3311), (3312, 3320), (3321, 3324), (3325, 3327), (3328, 3334), (3335, 3338), (3339, 3346), (3347, 3349), (3350, 3359), (3360, 3368), (3369, 3376), (3377, 3382), (3383, 3387), (3388, 3390), (3391, 3394), (3395, 3408), (3409, 3411), (3412, 3418), (3419, 3432), (3433, 3444), (3444, 3445), (3446, 3450), (3451, 3453), (3454, 3462), (3462, 3463), (3464, 3466), (3467, 3472), (3473, 3475), (3476, 3480), (3481, 3491), (3492, 3501), (3502, 3511), (3512, 3516), (3517, 3520), (3521, 3536), (3537, 3540), (3541, 3542), (3543, 3548), (3549, 3554), (3555, 3557), (3558, 3564), (3564, 3565), (3566, 3575), (3576, 3580), (3581, 3587), (3588, 3589), (3589, 3591), (3591, 3592), (3593, 3596), (3597, 3605), (3606, 3608), (3609, 3612), (3613, 3618), (3619, 3622), (3623, 3627), (3628, 3631), (3632, 3634), (3635, 3640), (3641, 3646), (3647, 3653), (3654, 3656), (3657, 3660), (3661, 3664), (3665, 3667), (3668, 3671), (3672, 3681), (3682, 3690), (3691, 3699), (3700, 3702), (3703, 3711), (3712, 3714), (3715, 3718), (3719, 3724), (3725, 3728), (3729, 3735), (3736, 3739), (3740, 3752), (3752, 3753), (3754, 3760), (3761, 3765), (3765, 3766), (3767, 3770), (3771, 3772), (3773, 3778), (3779, 3783), (3784, 3788), (3789, 3799), (3800, 3804), (3805, 3808), (3809, 3816), (3817, 3819), (3820, 3823), (3824, 3834), (3835, 3844), (3845, 3847), (3848, 3851), (3852, 3857), (3858, 3864), (3864, 3865), (3866, 3870), (3871, 3874), (3875, 3883), (3884, 3894), (3895, 3900), (3901, 3904), (3905, 3912), (3912, 3913), (3914, 3917), (3918, 3927), (3928, 3931), (3932, 3935), (3936, 3944), (3945, 3947), (3948, 3950), (3951, 3955), (3956, 3960), (3961, 3968), (3969, 3976), (3977, 3981), (3982, 3985), (3986, 3995), (3996, 4000), (4001, 4009), (4009, 4010), (4011, 4015), (4016, 4022), (4023, 4032), (4032, 4033), (4034, 4037), (4038, 4043), (4044, 4048), (4049, 4058), (4059, 4068), (4069, 4072), (4073, 4075), (4076, 4087), (4087, 4088), (4089, 4098), (4099, 4109), (4110, 4112), (4113, 4116), (4117, 4121), (4122, 4129), (4130, 4134), (4134, 4135), (4136, 4143), (4143, 4149)]
{0: 0, 2049: 377, 4099: 726, 2052: 378, 6: 1, 10: 2, 2060: 379, 4110: 727, 2064: 380, 4113: 728, 2066: 381, 20: 3, 4117: 729, 22: 4, 2071: 383, 26: 5, 2075: 384, 2080: 385, 4130: 731, 35: 6, 2085: 386, 4134: 732, 40: 7, 2089: 387, 2091: 388, 47: 8, 51: 9, 2100: 390, 53: 10, 2103: 391, 59: 11, 2116: 393, 71: 12, 2123: 395, 76: 13, 2135: 396, 88: 14, 91: 15, 95: 16, 2144: 397, 100: 17, 2153: 398, 107: 18, 2157: 399, 111: 19, 2162: 400, 3092: 552, 2170: 401, 123: 20, 128: 21, 1387: 244, 2181: 404, 142: 22, 2193: 405, 2196: 406, 151: 23, 2201: 407, 154: 24, 2205: 408, 161: 25, 2213: 409, 2215: 410, 169: 26, 2220: 411, 174: 27, 2226: 412, 180: 29, 2231: 413, 185: 30, 2237: 414, 2239: 415, 192: 31, 1398: 246, 2246: 416, 201: 32, 2251: 417, 2256: 418, 209: 33, 212: 34, 2262: 419, 218: 35, 2267: 420, 222: 36, 224: 37, 2274: 422, 3451: 610, 230: 38, 2281: 423, 238: 39, 3895: 691, 249: 40, 258: 41, 260: 42, 2310: 426, 2433: 446, 265: 43, 2318: 427, 273: 44, 2322: 428, 2325: 429, 281: 45, 2095: 389, 285: 46, 2334: 431, 2339: 432, 294: 47, 2343: 433, 2352: 434, 3464: 613, 308: 48, 2359: 435, 312: 49, 2363: 436, 3467: 614, 2373: 437, 328: 51, 333: 52, 336: 53, 341: 54, 2788: 500, 557: 93, 351: 55, 2401: 441, 2107: 392, 2406: 442, 362: 56, 2413: 443, 366: 57, 2399: 440, 2419: 444, 375: 58, 2424: 445, 3476: 616, 379: 59, 384: 60, 385: 61, 388: 62, 389: 63, 391: 64, 2440: 447, 2442: 448, 2447: 449, 406: 65, 2455: 450, 2458: 451, 411: 66, 2464: 452, 420: 67, 423: 68, 425: 69, 2119: 394, 429: 70, 2482: 455, 435: 71, 2487: 456, 441: 72, 444: 73, 2495: 457, 2499: 458, 2504: 459, 457: 74, 2508: 460, 462: 75, 2516: 461, 475: 76, 478: 77, 2534: 463, 2537: 464, 2471: 453, 492: 78, 2541: 465, 498: 79, 2547: 466, 500: 80, 504: 81, 2556: 467, 514: 82, 2475: 454, 519: 83, 2570: 468, 3159: 563, 530: 85, 2579: 469, 3502: 619, 534: 86, 4136: 733, 538: 87, 539: 88, 2882: 515, 2590: 471, 543: 90, 545: 91, 3163: 565, 2597: 472, 2605: 473, 2609: 474, 564: 94, 568: 95, 2619: 475, 2622: 476, 576: 96, 2626: 477, 580: 97, 2632: 478, 588: 98, 2637: 479, 590: 99, 2639: 480, 594: 100, 2646: 481, 599: 101, 2648: 482, 3566: 630, 608: 102, 2658: 483, 612: 103, 2662: 484, 2668: 485, 3858: 685, 625: 104, 2682: 487, 639: 105, 2696: 488, 650: 106, 653: 107, 656: 108, 658: 109, 660: 110, 2710: 490, 664: 111, 2713: 491, 667: 112, 2716: 492, 2068: 382, 674: 113, 677: 114, 2726: 493, 681: 115, 2736: 494, 691: 116, 694: 117, 696: 118, 2750: 495, 703: 119, 709: 120, 2758: 496, 711: 121, 2761: 497, 716: 122, 721: 123, 2770: 498, 729: 124, 731: 125, 2782: 499, 740: 126, 2790: 501, 743: 127, 2795: 502, 749: 128, 2799: 503, 753: 129, 2807: 504, 762: 130, 2811: 505, 765: 131, 766: 132, 769: 133, 770: 134, 772: 135, 2821: 506, 778: 136, 780: 137, 2831: 507, 787: 138, 790: 139, 2841: 508, 2843: 509, 796: 140, 2847: 510, 802: 141, 2523: 462, 811: 142, 3914: 695, 2861: 511, 1501: 269, 817: 143, 2869: 512, 823: 144, 2873: 513, 2875: 514, 830: 145, 834: 146, 2885: 516, 840: 147, 843: 148, 845: 149, 2894: 517, 849: 150, 2898: 518, 855: 151, 2906: 519, 860: 152, 863: 153, 2915: 520, 872: 154, 2923: 521, 876: 155, 2925: 522, 880: 156, 2930: 524, 2936: 525, 889: 157, 2941: 526, 2944: 527, 903: 159, 907: 160, 2957: 528, 911: 161, 4122: 730, 915: 162, 2965: 529, 2968: 530, 2973: 531, 926: 164, 2976: 532, 930: 165, 934: 166, 2984: 533, 2990: 534, 943: 167, 2998: 535, 953: 168, 3003: 536, 3005: 537, 3007: 538, 961: 169, 3233: 576, 3016: 539, 970: 170, 972: 171, 3024: 540, 3030: 541, 983: 172, 3038: 542, 3043: 543, 997: 173, 3047: 544, 1001: 174, 3239: 577, 3052: 545, 1006: 175, 3059: 546, 1015: 176, 3064: 547, 3067: 548, 1020: 177, 3069: 549, 3071: 550, 1024: 178, 1026: 179, 1030: 180, 3079: 551, 1033: 181, 1040: 182, 1044: 183, 3095: 553, 1052: 184, 1054: 185, 3104: 554, 1058: 186, 3108: 555, 1067: 187, 3117: 556, 1070: 188, 3119: 557, 1074: 189, 3127: 558, 1085: 190, 3136: 559, 1090: 191, 1094: 192, 1096: 193, 3146: 560, 3148: 561, 1101: 194, 1549: 279, 3153: 562, 315: 50, 3160: 564, 1115: 195, 3165: 566, 3169: 567, 1122: 196, 1126: 197, 3178: 568, 3182: 569, 1136: 198, 3191: 570, 3193: 571, 1146: 199, 1149: 200, 1155: 201, 3204: 572, 1158: 202, 3208: 573, 1162: 203, 1617: 293, 1170: 204, 3219: 574, 1172: 205, 3609: 639, 3230: 575, 1183: 206, 2928: 523, 2587: 470, 1191: 207, 3244: 578, 1198: 208, 3248: 579, 1203: 209, 542: 89, 1209: 210, 1214: 211, 3269: 581, 1222: 212, 3271: 582, 3275: 583, 1229: 213, 3280: 584, 1235: 215, 3977: 706, 1238: 216, 3288: 585, 1241: 217, 1245: 218, 3294: 586, 549: 92, 1232: 214, 1250: 219, 3299: 587, 1254: 220, 178: 28, 1256: 221, 1261: 222, 893: 158, 3312: 589, 1266: 223, 1272: 224, 3321: 590, 1274: 225, 3325: 591, 3328: 592, 1283: 226, 3335: 593, 3339: 594, 1292: 227, 1295: 228, 3347: 595, 1300: 229, 3350: 596, 1312: 230, 1316: 231, 1319: 232, 3369: 598, 1326: 233, 1328: 234, 3377: 599, 1587: 286, 2270: 421, 1335: 235, 1339: 236, 3388: 601, 3391: 602, 1344: 237, 522: 84, 3395: 603, 1353: 238, 1358: 239, 1361: 240, 3412: 605, 1369: 241, 3419: 606, 1375: 242, 1380: 243, 3433: 607, 3303: 588, 3986: 708, 1395: 245, 3444: 608, 3446: 609, 1401: 247, 2297: 425, 1404: 248, 3454: 611, 917: 163, 1409: 249, 1412: 250, 3462: 612, 1416: 251, 1419: 252, 1752: 319, 1421: 253, 1424: 254, 3473: 615, 1428: 255, 2286: 424, 1430: 256, 3481: 617, 1438: 257, 1440: 258, 3492: 618, 1449: 259, 1452: 260, 1454: 261, 1462: 262, 3512: 620, 1465: 263, 3517: 621, 3521: 622, 1474: 264, 4001: 710, 1484: 265, 1487: 266, 3537: 623, 3541: 624, 1494: 267, 3543: 625, 1496: 268, 3549: 626, 1505: 270, 3555: 627, 3558: 628, 1511: 271, 3564: 629, 1518: 272, 1522: 273, 1526: 274, 3576: 631, 1620: 294, 1530: 275, 3581: 632, 1534: 276, 1539: 277, 3588: 633, 3589: 634, 1542: 278, 3591: 635, 3593: 636, 3597: 637, 3672: 653, 1554: 280, 3606: 638, 1559: 281, 3257: 580, 1563: 282, 3613: 640, 3619: 641, 1573: 283, 3623: 642, 1576: 284, 3628: 643, 1582: 285, 3632: 644, 4143: 734, 3635: 645, 1591: 287, 3641: 646, 1596: 288, 3647: 647, 1601: 289, 1604: 290, 3654: 648, 1608: 291, 3657: 649, 3661: 650, 1615: 292, 3665: 651, 3668: 652, 1624: 295, 1626: 296, 1631: 297, 3682: 654, 1635: 298, 1642: 299, 3691: 655, 1647: 300, 3700: 656, 1653: 301, 3703: 657, 1659: 302, 1662: 303, 3712: 658, 1667: 304, 1669: 305, 3719: 660, 1676: 306, 3725: 661, 1680: 307, 3729: 662, 2329: 430, 3736: 663, 1689: 308, 3740: 664, 1697: 309, 1702: 310, 2673: 486, 3752: 665, 3754: 666, 1712: 311, 3761: 667, 3765: 668, 3767: 669, 1721: 312, 3771: 670, 1724: 313, 3773: 671, 1728: 314, 3360: 597, 3779: 672, 1735: 315, 3784: 673, 4044: 718, 1740: 316, 3789: 674, 1746: 317, 1748: 318, 3800: 675, 1756: 320, 3805: 676, 3809: 677, 1764: 321, 1767: 322, 3817: 678, 1770: 323, 3820: 679, 1774: 324, 3824: 680, 1778: 325, 1780: 326, 1782: 327, 3835: 681, 1790: 328, 1794: 329, 3845: 682, 3848: 683, 1801: 330, 3852: 684, 1810: 331, 3715: 659, 3864: 686, 3866: 687, 1819: 332, 1822: 333, 3871: 688, 3875: 689, 1829: 334, 1833: 335, 1835: 336, 3884: 690, 1842: 337, 1847: 338, 1850: 339, 3901: 692, 1856: 340, 3905: 693, 1859: 341, 1861: 342, 1863: 343, 3912: 694, 2176: 402, 3383: 600, 3918: 696, 2701: 489, 1872: 344, 1876: 345, 1878: 346, 3928: 697, 1882: 347, 3932: 698, 3936: 699, 1891: 348, 3945: 700, 1898: 349, 3948: 701, 3951: 702, 1905: 350, 3956: 703, 3961: 704, 1915: 351, 1920: 352, 3969: 705, 1924: 353, 1929: 354, 3982: 707, 1938: 355, 1947: 356, 3996: 709, 1953: 357, 2179: 403, 1960: 358, 4009: 711, 1962: 359, 4011: 712, 1965: 360, 4016: 713, 1969: 361, 1974: 362, 4023: 714, 1977: 363, 4032: 715, 1985: 364, 4034: 716, 4038: 717, 1992: 365, 1996: 366, 1998: 367, 2381: 438, 4049: 719, 2003: 368, 2007: 369, 2009: 370, 4059: 720, 2013: 371, 4069: 721, 2022: 372, 3409: 604, 4073: 722, 4076: 723, 2031: 373, 2038: 374, 4087: 724, 2040: 375, 4089: 725, 2046: 376, 2389: 439}
{2048: 376, 4098: 725, 2051: 377, 5: 0, 9: 1, 2059: 378, 4109: 726, 2064: 379, 2065: 380, 2067: 381, 20: 2, 21: 3, 2070: 382, 25: 4, 2074: 383, 2079: 384, 4129: 730, 34: 5, 2084: 385, 4134: 731, 39: 6, 2089: 386, 2090: 387, 46: 7, 4143: 733, 50: 8, 2099: 389, 52: 9, 4149: 734, 2102: 390, 58: 10, 2115: 392, 70: 11, 2122: 394, 75: 12, 2134: 395, 87: 13, 90: 14, 94: 15, 2143: 396, 4112: 727, 99: 16, 2152: 397, 106: 17, 2156: 398, 110: 18, 2161: 399, 3091: 551, 2169: 400, 122: 19, 127: 20, 2178: 402, 2180: 403, 141: 21, 2192: 404, 2195: 405, 150: 22, 4121: 729, 2200: 406, 153: 23, 2204: 407, 2757: 495, 160: 24, 2213: 408, 2214: 409, 168: 25, 2219: 410, 173: 26, 2225: 411, 178: 27, 179: 28, 2230: 412, 184: 29, 2237: 413, 2238: 414, 191: 30, 2245: 415, 200: 31, 2250: 416, 2255: 417, 208: 32, 211: 33, 2261: 418, 217: 34, 2266: 419, 2269: 420, 222: 35, 223: 36, 2273: 421, 229: 37, 2280: 422, 4135: 732, 2285: 423, 3453: 610, 248: 39, 258: 40, 259: 41, 2309: 425, 264: 42, 1751: 318, 2317: 426, 3117: 555, 272: 43, 2321: 427, 2324: 428, 2094: 388, 280: 44, 284: 45, 2333: 430, 2338: 431, 293: 46, 2342: 432, 1415: 250, 2351: 433, 307: 47, 2358: 434, 311: 48, 2362: 435, 2372: 436, 327: 50, 332: 51, 335: 52, 340: 53, 1423: 253, 2106: 391, 350: 54, 2399: 439, 2400: 440, 2405: 441, 361: 55, 2412: 442, 365: 56, 2418: 443, 374: 57, 2423: 444, 378: 58, 383: 59, 2432: 445, 385: 60, 388: 61, 389: 62, 390: 63, 2440: 446, 2441: 447, 2446: 448, 405: 64, 2454: 449, 2457: 450, 410: 65, 2463: 451, 419: 66, 2118: 393, 2470: 452, 423: 67, 424: 68, 2474: 453, 428: 69, 2481: 454, 434: 70, 2486: 455, 440: 71, 443: 72, 2494: 456, 2498: 457, 2503: 458, 456: 73, 2507: 459, 461: 74, 2515: 460, 474: 75, 477: 76, 2533: 462, 2536: 463, 491: 77, 2540: 464, 498: 78, 499: 79, 503: 80, 2555: 466, 513: 81, 518: 82, 2569: 467, 3501: 618, 529: 84, 2578: 468, 533: 85, 537: 86, 2586: 469, 539: 87, 2589: 470, 542: 88, 543: 89, 544: 90, 2596: 471, 1723: 312, 2604: 472, 557: 92, 2608: 473, 563: 93, 567: 94, 2618: 474, 2621: 475, 575: 95, 2625: 476, 579: 96, 2631: 477, 588: 97, 2637: 478, 2638: 479, 593: 99, 598: 100, 2647: 481, 607: 101, 2657: 482, 611: 102, 2661: 483, 3857: 684, 2667: 484, 2672: 485, 2681: 486, 638: 104, 2695: 487, 649: 105, 652: 106, 656: 107, 657: 108, 659: 109, 2709: 489, 663: 110, 2712: 490, 666: 111, 2715: 491, 673: 112, 676: 113, 2725: 492, 680: 114, 2735: 493, 2546: 465, 690: 115, 693: 116, 695: 117, 2749: 494, 702: 118, 709: 119, 710: 120, 2760: 496, 715: 121, 720: 122, 2769: 497, 729: 123, 730: 124, 2781: 498, 4116: 728, 739: 125, 2788: 499, 2789: 500, 742: 126, 2794: 501, 748: 127, 2798: 502, 752: 128, 2806: 503, 761: 129, 2810: 504, 2175: 401, 764: 130, 766: 131, 769: 132, 770: 133, 771: 134, 2820: 505, 3542: 624, 778: 135, 779: 136, 2830: 506, 786: 137, 789: 138, 2841: 507, 2842: 508, 795: 139, 2522: 461, 2846: 509, 801: 140, 3548: 625, 810: 141, 2860: 510, 816: 142, 2868: 511, 822: 143, 2872: 512, 2874: 513, 829: 144, 833: 145, 2884: 515, 3894: 690, 839: 146, 843: 147, 844: 148, 2893: 516, 848: 149, 2897: 517, 854: 150, 2905: 518, 859: 151, 862: 152, 2914: 519, 871: 153, 2923: 520, 2924: 521, 3218: 573, 879: 155, 2928: 522, 2929: 523, 2935: 524, 888: 156, 2940: 525, 2943: 526, 902: 158, 2881: 514, 906: 159, 2956: 527, 910: 160, 1517: 271, 915: 161, 916: 162, 2967: 529, 2972: 530, 925: 163, 2975: 531, 929: 164, 933: 165, 2983: 532, 2989: 533, 942: 166, 1861: 341, 2997: 534, 3913: 694, 952: 167, 3002: 535, 3005: 536, 3006: 537, 960: 168, 3015: 538, 970: 169, 971: 170, 3023: 539, 3029: 540, 982: 171, 3037: 541, 3042: 542, 996: 172, 3238: 576, 3046: 543, 1397: 245, 1000: 173, 3051: 544, 1005: 174, 3058: 545, 1014: 175, 3063: 546, 3067: 547, 3068: 548, 3070: 549, 1023: 177, 1025: 178, 1029: 179, 3078: 550, 1032: 180, 1039: 181, 1043: 182, 3094: 552, 1052: 183, 1053: 184, 3103: 553, 1057: 185, 3107: 554, 1066: 186, 1069: 187, 3118: 556, 1073: 188, 3126: 557, 521: 83, 1084: 189, 3135: 558, 1089: 190, 1094: 191, 1095: 192, 1548: 278, 3146: 559, 3147: 560, 1100: 193, 3152: 561, 3256: 579, 3158: 562, 3160: 563, 1114: 194, 3163: 564, 3164: 565, 3168: 566, 1121: 195, 1125: 196, 3177: 567, 3181: 568, 1135: 197, 3191: 569, 3192: 570, 1145: 198, 1148: 199, 1154: 200, 3203: 571, 1157: 201, 3207: 572, 1161: 202, 1170: 203, 1171: 204, 3229: 574, 1182: 205, 3269: 580, 3232: 575, 1190: 206, 3243: 577, 1197: 207, 3247: 578, 1202: 208, 1208: 209, 1213: 210, 1221: 211, 3270: 581, 3274: 582, 1228: 212, 3279: 583, 1234: 214, 1237: 215, 3287: 584, 1240: 216, 548: 91, 1231: 213, 1244: 217, 3293: 585, 1249: 218, 3298: 586, 1254: 219, 1255: 220, 892: 157, 1260: 221, 3311: 588, 1265: 222, 1272: 223, 1273: 224, 3324: 590, 3327: 591, 1282: 225, 3334: 592, 3338: 593, 1291: 226, 1294: 227, 3346: 594, 1299: 228, 3349: 595, 1311: 229, 1315: 230, 1318: 231, 3368: 597, 1586: 285, 1326: 232, 1327: 233, 3376: 598, 3976: 705, 1334: 234, 1338: 235, 3387: 600, 3390: 601, 1343: 236, 3394: 602, 4000: 709, 1352: 237, 1357: 238, 1360: 239, 3411: 604, 1368: 240, 3418: 605, 1374: 241, 1379: 242, 3302: 587, 3985: 707, 3432: 606, 1386: 243, 1394: 244, 3444: 607, 3445: 608, 1400: 246, 2964: 528, 3450: 609, 1403: 247, 3320: 589, 1408: 248, 1411: 249, 3462: 611, 3463: 612, 3466: 613, 1419: 251, 1420: 252, 237: 38, 3472: 614, 3475: 615, 1428: 254, 1429: 255, 3480: 616, 1438: 256, 1439: 257, 3491: 617, 1448: 258, 1451: 259, 1453: 260, 1461: 261, 3511: 619, 1464: 262, 3516: 620, 3520: 621, 1473: 263, 1483: 264, 1486: 265, 589: 98, 3536: 622, 2296: 424, 3540: 623, 1494: 266, 1495: 267, 1500: 268, 1504: 269, 1616: 292, 3554: 626, 3557: 627, 1510: 270, 3564: 628, 3565: 629, 1521: 272, 3667: 651, 1525: 273, 3575: 630, 1529: 274, 3580: 631, 1533: 275, 1538: 276, 3587: 632, 3589: 633, 3591: 634, 3592: 635, 3596: 636, 1553: 279, 3605: 637, 1558: 280, 3608: 638, 1562: 281, 3612: 639, 3618: 640, 1572: 282, 3622: 641, 1575: 283, 3627: 642, 1581: 284, 3631: 643, 3634: 644, 1590: 286, 3640: 645, 1595: 287, 3646: 646, 1600: 288, 1603: 289, 3653: 647, 1607: 290, 3656: 648, 3660: 649, 1615: 291, 3664: 650, 4009: 710, 1619: 293, 3671: 652, 1624: 294, 1625: 295, 1630: 296, 3681: 653, 1634: 297, 1641: 298, 3690: 654, 2646: 480, 1646: 299, 3699: 655, 1652: 300, 3702: 656, 1658: 301, 1661: 302, 3711: 657, 4032: 714, 1666: 303, 1668: 304, 3718: 659, 1675: 305, 3724: 660, 1679: 306, 3728: 661, 2328: 429, 3735: 662, 1688: 307, 3739: 663, 1696: 308, 624: 103, 1701: 309, 3752: 664, 3753: 665, 875: 154, 1711: 310, 3760: 666, 3765: 667, 3766: 668, 1720: 311, 3770: 669, 3359: 596, 3772: 670, 1727: 313, 3778: 671, 1734: 314, 3783: 672, 1739: 315, 3788: 673, 1746: 316, 1747: 317, 3799: 674, 1755: 319, 3804: 675, 3808: 676, 1763: 320, 1766: 321, 3816: 677, 1769: 322, 3819: 678, 1773: 323, 3823: 679, 1778: 324, 1779: 325, 1781: 326, 3834: 680, 1789: 327, 1793: 328, 3844: 681, 3847: 682, 1800: 329, 3851: 683, 3714: 658, 1809: 330, 3864: 685, 3865: 686, 1818: 331, 1821: 332, 3870: 687, 3874: 688, 1828: 333, 1832: 334, 1834: 335, 3883: 689, 1841: 336, 1846: 337, 1849: 338, 3900: 691, 1855: 339, 3904: 692, 1858: 340, 3382: 599, 1862: 342, 3912: 693, 2700: 488, 3917: 695, 1871: 343, 1876: 344, 1877: 345, 3927: 696, 1881: 346, 3931: 697, 314: 49, 3935: 698, 1890: 347, 3944: 699, 1897: 348, 3947: 700, 3950: 701, 1904: 349, 3955: 702, 4087: 723, 3960: 703, 1914: 350, 1919: 351, 3968: 704, 1923: 352, 1928: 353, 3981: 706, 1937: 354, 1946: 355, 3995: 708, 1952: 356, 1959: 357, 1961: 358, 4010: 711, 1964: 359, 4015: 712, 1968: 360, 1973: 361, 4022: 713, 1976: 362, 1984: 363, 4033: 715, 4037: 716, 1991: 364, 2380: 437, 4043: 717, 1996: 365, 1997: 366, 4048: 718, 2002: 367, 2007: 368, 2008: 369, 4058: 719, 2012: 370, 3408: 603, 1019: 176, 4068: 720, 2021: 371, 4072: 721, 4075: 722, 2030: 372, 2037: 373, 2039: 374, 4088: 724, 2388: 438, 2045: 375, 1541: 277}
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Samuel Heyman', 'W.R. Grace', 'GRA', 'Garo Armen']
response in server.py code:
 [(1319, 7, 'Houston'), (3581, 6, 'DuPont'), (1487, 7, 'Houston'), (3597, 11, 'Monsanto'), (3071, 7, 'Chicago'), (4820, 20, 'Dean_Witter_Reynolds'), (4498, 16, 'Gulf_Coast_of_the_United_States'), (385, 3, 'GAF_Materials_Corporation'), (3148, 10, 'W._R._Grace_and_Company'), (4992, 5, 'Garo_H._Armen'), (4792, 10, 'Garo_H._Armen'), (2925, 3, 'GAF_Materials_Corporation'), (4136, 7, 'Houston'), (549, 8, 'Kentucky'), (4016, 6, 'Samuel_J._Heyman'), (1891, 13, 'Samuel_J._Heyman'), (1878, 3, 'GAF_Materials_Corporation'), (766, 3, 'Dow_Chemical_Company'), (1748, 3, 'Dow_Chemical_Company'), (1501, 3, 'Dow_Jones_Industrial_Average'), (4713, 4, 'Cain_and_Abel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Marcel Proust']
response in server.py code:
 [(32, 6, 'London'), (104, 6, 'Author'), (97, 6, 'France'), (111, 13, 'Marcel_Proust'), (4, 8, 'Novel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Roberto Carlos', 'Fabio Capello', 'Luis Milla', 'Roberto Carlos', "Jacques Songo'o", 'Mauro Silva', 'John Toshack']
response in server.py code:
 [(157, 11, 'Real_Madrid_C.F.'), (67, 5, 'Spain'), (121, 14, 'Roberto_Carlos_(footballer)'), (1542, 12, 'John_Toshack'), (1106, 15, "Jacques_Songo'o"), (1407, 9, 'Brazil'), (586, 14, 'Brazil'), (509, 7, 'AJ_Auxerre'), (175, 13, 'Fabio_Capello'), (970, 14, 'Roberto_Carlos_(footballer)'), (790, 9, 'Deportivo_de_La_Coruña'), (56, 9, 'A_Coruña'), (705, 10, 'Luis_Milla'), (601, 7, 'Spain'), (1192, 6, 'Donato_Gama_da_Silva'), (423, 9, 'Deportivo_de_La_Coruña'), (1087, 9, 'Deportivo_de_La_Coruña'), (253, 7, 'Spain'), (1326, 9, 'Deportivo_de_La_Coruña'), (634, 6, 'Donato_Gama_da_Silva'), (1617, 6, 'Brazil'), (1514, 6, 'Europe'), (291, 9, 'Brazil'), (1428, 11, 'Mauro_Silva'), (1385, 4, 'FIFA'), (1574, 5, 'Mauro_Silva'), (9, 4, 'Real_Madrid_C.F.'), (642, 4, 'Real_Madrid_C.F.')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(471, 6, 'Xinhua_News_Agency'), (196, 6, 'Xinhua_News_Agency'), (231, 6, 'Xinhua_News_Agency'), (47, 7, 'Beijing'), (66, 5, 'China'), (0, 5, 'China'), (146, 6, 'Hainan'), (22, 6, 'Hainan'), (74, 13, "State_Council_of_the_People's_Republic_of_China"), (321, 8, 'Wenchang'), (271, 8, 'Wenchang')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Pope Benedict', 'John Henry Newman', 'Pope Benedict XVI']
response in server.py code:
 [(0, 13, 'Pope_Benedict_XVI'), (68, 17, 'Pope_Benedict_XVI'), (30, 17, 'John_Henry_Newman')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 26, 'World_Water_Monitoring_Day')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(234, 6, 'London'), (287, 9, 'Entourage_(TV_series)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Rubbia', 'Giorgio Napolitano']
response in server.py code:
 [(98, 18, 'Giorgio_Napolitano'), (68, 16, 'Senator_for_life'), (47, 15, 'Senate_of_the_Republic_(Italy)'), (88, 9, 'President'), (19, 6, 'Carlo_Rubbia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Kobe Bryant']
response in server.py code:
 [(31, 11, 'Kobe_Bryant'), (5, 18, 'Los_Angeles_Lakers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(7, 4, 'Soap')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(164, 14, 'Bradford_Bulls'), (62, 7, 'England'), (91, 7, 'England'), (55, 5, 'Wigan'), (0, 12, 'Rugby_league'), (15, 5, 'Wigan_Warriors'), (155, 5, 'Wigan_Warriors'), (26, 8, 'Bradford_Bulls')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(49, 7, 'Yangon'), (522, 7, 'Yangon'), (737, 7, 'Yangon'), (783, 18, 'University_of_Yangon'), (711, 6, 'Insein_Township'), (68, 7, 'Burma')]
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Marguerite Vogt', 'Renato Dulbecco']
response in server.py code:
 [(177, 6, 'London'), (105, 14, 'Salk_Institute_for_Biological_Studies'), (50, 15, 'Marguerite_Vogt'), (76, 15, 'Renato_Dulbecco'), (26, 6, 'Corporate_personhood')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Chelsea_F.C.'), (16, 6, 'FA_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(8, 11, 'Musical_instrument')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Nir Sivilia']
response in server.py code:
 [(62, 8, 'Herzliya'), (72, 6, 'Israel'), (228, 11, 'Nir_Sivilia'), (100, 8, 'Europe'), (21, 8, 'Bulgaria_national_football_team'), (9, 6, 'Israel'), (33, 8, 'Europe'), (173, 8, 'Bulgaria_national_football_team'), (163, 6, 'Israel')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Aung San Suu Kyi']
response in server.py code:
 [(1743, 7, 'Reuters'), (542, 7, 'Reuters'), (2178, 7, 'Aung_San_Suu_Kyi'), (60, 7, 'Yangon'), (2131, 7, 'Aung_San_Suu_Kyi'), (2238, 8, 'Aung_San_Suu_Kyi'), (1066, 16, 'Aung_San_Suu_Kyi'), (179, 7, 'Yangon'), (1785, 39, 'State_Peace_and_Development_Council'), (2141, 29, 'National_League_for_Democracy'), (1826, 5, 'State_Peace_and_Development_Council'), (596, 20, 'University_of_Yangon'), (209, 20, 'University_of_Yangon'), (1348, 7, 'Yangon'), (2605, 6, 'Yangon'), (2840, 7, 'Aung_San_Suu_Kyi'), (2880, 7, 'Yangon'), (136, 30, 'Yangon_Technological_University'), (89, 7, 'Burma'), (0, 7, 'Burma'), (2172, 3, 'National_League_for_Democracy'), (2256, 3, 'National_League_for_Democracy'), (472, 3, 'YIT'), (2189, 5, 'Nobel_Prize')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(158, 6, 'Zagreb'), (211, 6, 'Osijek'), (100, 17, 'Elementary_school'), (69, 6, 'Zagreb'), (145, 9, 'Gymnasium_(school)'), (16, 17, 'Elementary_school'), (37, 8, 'Sarajevo'), (191, 6, 'Father'), (129, 6, 'Prelog,_Croatia'), (187, 3, 'Bon_Jovi'), (0, 6, 'Prelog,_Croatia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['John East']
response in server.py code:
 [(1483, 4, 'Integrated_Services_Digital_Network'), (1278, 4, 'Integrated_Services_Digital_Network'), (1763, 4, 'Integrated_Services_Digital_Network'), (1120, 4, 'Integrated_Services_Digital_Network'), (1859, 4, 'Integrated_Services_Digital_Network'), (846, 4, 'Integrated_Services_Digital_Network'), (204, 4, 'Integrated_Services_Digital_Network'), (1461, 12, 'Motorola'), (877, 9, 'John_Porter_East')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'Barwon_Heads,_Victoria')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Mick McCarthy', 'Andy Townsend', 'Niall Quinn', 'Ian Harte', 'Jack Charlton']
response in server.py code:
 [(472, 5, 'Niall_Quinn'), (359, 13, 'Andy_Townsend'), (436, 11, 'Niall_Quinn'), (698, 13, 'Jack_Charlton'), (417, 10, 'Sunderland_A.F.C.'), (89, 19, 'Republic_of_Ireland'), (294, 13, 'Mick_McCarthy'), (797, 8, 'Europe'), (461, 9, 'Ian_Harte'), (60, 13, 'Liechtenstein'), (269, 5, 'Republic_of_Ireland'), (640, 7, 'Republic_of_Ireland'), (569, 5, 'Republic_of_Ireland'), (402, 13, "Keith_O'Neill_(footballer)"), (663, 6, 'Eschen'), (386, 7, 'Norwich_City_F.C.'), (52, 6, 'Eschen'), (175, 13, 'Liechtenstein'), (499, 7, 'Republic_of_Ireland'), (232, 9, 'FIFA_World_Cup'), (9, 5, 'Republic_of_Ireland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(46, 9, 'San_Mateo,_California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Bill Jordan', 'Michel Hansenne', 'Bill Brett']
response in server.py code:
 [(675, 24, 'World_Trade_Organization'), (701, 3, 'World_Trade_Organization'), (1412, 7, 'Reuters'), (402, 3, 'World_Trade_Organization'), (1970, 3, 'World_Trade_Organization'), (26, 3, 'World_Trade_Organization'), (2149, 3, 'World_Trade_Organization'), (38, 3, 'International_Labour_Organization'), (2268, 3, 'World_Trade_Organization'), (1219, 3, 'World_Trade_Organization'), (420, 3, 'International_Labour_Organization'), (2123, 3, 'World_Trade_Organization'), (1123, 3, 'World_Trade_Organization'), (152, 33, 'International_Labour_Organization'), (1800, 8, 'Malaysia'), (946, 5, 'International_Confederation_of_Free_Trade_Unions'), (1864, 3, 'International_Labour_Organization'), (1194, 5, 'International_Confederation_of_Free_Trade_Unions'), (351, 5, 'International_Confederation_of_Free_Trade_Unions'), (1095, 3, 'World_Trade_Organization'), (237, 3, 'World_Trade_Organization'), (1674, 38, 'Association_of_Southeast_Asian_Nations'), (187, 3, 'International_Labour_Organization'), (1838, 8, 'Thailand'), (1756, 3, 'International_Labour_Organization'), (1827, 9, 'Singapore'), (301, 48, 'International_Confederation_of_Free_Trade_Unions'), (2075, 5, 'International_Confederation_of_Free_Trade_Unions'), (1768, 5, 'Association_of_Southeast_Asian_Nations'), (1714, 5, 'Association_of_Southeast_Asian_Nations'), (2389, 3, 'International_Labour_Organization'), (441, 15, 'Michel_Hansenne'), (1789, 9, 'Indonesia'), (1851, 7, 'Vietnam'), (252, 9, 'Singapore'), (1814, 11, 'Philippines'), (1360, 10, 'William_Brett,_Baron_Brett'), (1781, 6, 'Brunei'), (1048, 9, 'Singapore'), (48, 9, 'Singapore'), (1107, 6, 'Jordan'), (559, 6, 'Jordan'), (910, 6, 'Jordan'), (263, 11, 'Bill_Jordan,_Baron_Jordan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(24, 19, 'Professor'), (127, 19, 'Professor'), (81, 22, 'Harvard_Medical_School'), (51, 26, 'Department_of_Biochemistry,_University_of_Oxford')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Maradona']
response in server.py code:
 [(36, 7, 'Beijing'), (16, 8, 'Diego_Maradona')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(289, 7, 'Belgium'), (265, 12, 'West_Germany'), (211, 6, 'France'), (327, 7, 'Denmark'), (308, 5, 'Spain'), (4, 13, 'European_Commission')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Andy Townsend', 'Niall Quinn', 'Ian Harte']
response in server.py code:
 [(216, 13, 'Andy_Townsend'), (258, 11, 'Niall_Quinn'), (22, 13, 'Liechtenstein_national_football_team'), (284, 9, 'Ian_Harte'), (111, 13, 'Liechtenstein_national_football_team'), (86, 19, 'Republic_of_Ireland_national_football_team'), (237, 13, "Keith_O'Neill_(footballer)"), (166, 8, 'Europe'), (149, 9, 'FIFA_World_Cup'), (43, 9, 'FIFA_World_Cup'), (9, 7, 'Republic_of_Ireland_national_football_team'), (64, 6, 'Eschen')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(87, 6, 'University_of_Windsor')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = ['Ehud Olmert', 'Wiesel', 'Wiesel']
response in server.py code:
 [(95, 11, 'Ehud_Olmert'), (48, 6, 'Kadima'), (126, 6, 'Elie_Wiesel'), (153, 6, 'Elie_Wiesel'), (80, 14, 'Prime_minister'), (69, 9, 'President')]
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(72, 6, 'India'), (334, 6, 'India'), (0, 6, 'India'), (790, 6, 'India'), (1544, 5, 'India'), (51, 9, 'Singapore'), (1391, 12, 'Rubber_Board'), (598, 7, 'Gospel_of_Matthew'), (918, 7, 'Gospel_of_Matthew'), (1490, 7, 'Gospel_of_Matthew')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 3
persons_mentions_seen = []
response in server.py code:
 [(0, 21, 'University_of_Phoenix')]
given span: Merck and Co Inc   new span: Merck and Co Inc
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = []
response in server.py code:
 [(305, 5, 'Merck_&_Co.')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = ['Robert Allenby', 'Miguel Angel Martin', 'Costantino Rocca', 'Miguel Angel Jimenez', 'Ian Woosnam', 'Jose Coceres', 'Joakim Haeggman', 'Colin Montgomerie', 'Robert Coles', 'Philip Walton', 'Peter Mitchell', 'Klas Eriksson', 'Pedro Linhart', 'Phillip Price', 'Adam Hunter', "Peter O'Malley", 'Mark Roe', 'Iain Pyman', 'David Gilford', 'Peter Hedblom', 'Stephen McAllister']
response in server.py code:
 [(598, 13, 'Philip_Walton'), (227, 19, 'Miguel_Ángel_Martín_(golfer)'), (349, 20, 'Miguel_Ángel_Jiménez'), (326, 5, 'Italy'), (829, 8, 'Mark_Roe'), (699, 13, 'Pedro_Linhart'), (187, 14, 'Robert_Allenby'), (308, 16, 'Costantino_Rocca'), (737, 13, 'Phillip_Price'), (436, 9, 'Argentina'), (541, 17, 'Colin_Montgomerie'), (678, 6, 'Sweden'), (394, 11, 'Ian_Woosnam'), (714, 5, 'Spain'), (371, 5, 'Spain'), (865, 9, 'Australia'), (805, 9, 'Australia'), (422, 12, 'José_Cóceres'), (480, 6, 'Sweden'), (635, 14, 'Peter_Mitchell_(golfer)'), (572, 12, 'Robert_Coles_(golfer)'), (789, 14, "Peter_O'Malley_(golfer)"), (248, 5, 'Spain'), (203, 9, 'Australia'), (979, 18, 'Stephen_McAllister'), (916, 13, 'David_Gilford'), (958, 6, 'Sweden'), (517, 6, 'France'), (663, 13, 'Klas_Eriksson'), (943, 13, 'Peter_Hedblom'), (463, 15, 'Joakim_Haeggman'), (268, 7, 'Robert_Allenby'), (158, 7, 'United_Kingdom'), (892, 10, 'Iain_Pyman'), (50, 7, 'England'), (764, 11, 'Adam_Hunter_(golfer)'), (7, 15, 'British_Masters'), (37, 11, 'Northampton'), (113, 15, 'British_Masters'), (613, 7, 'Republic_of_Ireland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = []
response in server.py code:
 [(15, 7, 'Theatre'), (0, 14, 'Les_Misérables')]
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = ['Yasuo Matsushita', 'Rubin', 'Rubin']
response in server.py code:
 [(3503, 7, 'Reuters'), (407, 5, 'Japan'), (2896, 5, 'Japan'), (69, 5, 'Tokyo'), (98, 5, 'Japan'), (0, 5, 'Japan'), (3156, 5, 'Tokyo'), (1941, 5, 'Japan'), (1135, 4, 'United_States'), (2248, 3, 'Bank_of_Japan'), (3139, 13, 'Credit_Suisse'), (2964, 8, 'Japan'), (852, 4, 'United_States'), (1208, 13, 'United_States'), (1518, 5, 'Tokyo'), (2651, 3, 'Bank_of_Japan'), (3018, 3, 'Bank_of_Japan'), (346, 13, 'Bank_of_Japan'), (3485, 3, 'Bank_of_Japan'), (3170, 3, 'Bank_of_Japan'), (361, 3, 'Bank_of_Japan'), (2535, 20, 'Nihon_Keizai_Shimbun'), (929, 13, 'United_States_Department_of_the_Treasury'), (1091, 5, 'Robert_Rubin'), (617, 16, 'Ministry_of_Finance_(Japan)'), (1064, 13, 'The_Sumitomo_Bank'), (961, 5, 'Robert_Rubin'), (2494, 10, 'Yasuo_Matsushita'), (2261, 10, 'Yasuo_Matsushita'), (1489, 25, 'Union_Bank_of_Switzerland'), (376, 16, 'Yasuo_Matsushita'), (1435, 8, 'Sumitomo_Group'), (1584, 10, 'Sakakibara'), (1713, 10, 'Sakakibara'), (2181, 10, 'Sakakibara'), (2085, 10, 'Sakakibara'), (761, 10, 'Sakakibara'), (1151, 10, 'Sakakibara'), (1381, 10, 'Sakakibara')]
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = []
response in server.py code:
 [(10, 25, 'Yellowstone_National_Park')]
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = []
response in server.py code:
 [(248, 3, 'AT&T_Corporation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = []
response in server.py code:
 [(47, 8, 'Boeremag')]
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = ['Lubomir Moravcik', 'Peter Dubovsky']
response in server.py code:
 [(54, 6, 'Toftir'), (307, 14, 'Peter_Dubovský'), (23, 6, 'Faroe_Islands_national_football_team'), (105, 13, 'Faroe_Islands_national_football_team'), (282, 16, 'Ľubomír_Moravčík'), (9, 8, 'Slovakia_national_football_team'), (164, 8, 'Europe'), (223, 13, 'Faroe_Islands_national_football_team'), (33, 9, 'FIFA_World_Cup'), (62, 13, 'Faroe_Islands'), (271, 8, 'Slovakia'), (87, 8, 'Slovakia'), (147, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Kubota')]
response in server.py code:
 []
given spans fix. original text:  General Electric Co Plc (GECL.L) (GEC) declined comment on rumours on the London stock market that it is planning another purchase in the U.S. Medical equipment field, in addition to its existing U.S. Subsidiary Picker International Inc. A GEC spokesman said that it is company policy not to comment on acquisition rumours. Stock Exchange traders said the rumour helped GECGEC's share price to rise 5p, to a final 206p from yesterday share price to rise 5p, to a final 206p from yesterday's closing price of 201p. Reuter
original word:  Inc. Inc.
new split:  Inc  and  .
[(0, 7), (8, 16), (17, 19), (20, 23), (24, 25), (25, 31), (31, 32), (33, 34), (34, 37), (37, 38), (39, 47), (48, 55), (56, 58), (59, 66), (67, 69), (70, 73), (74, 80), (81, 86), (87, 93), (94, 98), (99, 101), (102, 104), (105, 113), (114, 121), (122, 130), (131, 133), (134, 137), (138, 142), (143, 150), (151, 160), (161, 166), (166, 167), (168, 170), (171, 179), (180, 182), (183, 186), (187, 195), (196, 200), (201, 211), (212, 218), (219, 232), (233, 236), (236, 237)]
{0: 0, 67: 14, 196: 37, 70: 15, 161: 30, 8: 1, 201: 38, 74: 16, 151: 29, 233: 41, 143: 28, 17: 2, 131: 25, 20: 3, 87: 18, 24: 4, 25: 5, 219: 40, 94: 19, 81: 17, 33: 7, 34: 8, 99: 20, 37: 9, 102: 21, 39: 10, 31: 6, 105: 22, 171: 33, 236: 42, 48: 11, 168: 32, 114: 23, 180: 34, 187: 36, 183: 35, 56: 12, 212: 39, 122: 24, 59: 13, 138: 27, 134: 26, 166: 31}
{160: 29, 66: 13, 195: 36, 69: 14, 130: 24, 7: 0, 200: 37, 73: 15, 98: 19, 142: 27, 80: 16, 19: 2, 86: 17, 23: 3, 137: 26, 25: 4, 218: 39, 211: 38, 93: 18, 150: 28, 101: 20, 32: 6, 16: 1, 34: 7, 37: 8, 38: 9, 167: 31, 104: 21, 170: 32, 236: 41, 237: 42, 47: 10, 113: 22, 179: 33, 186: 35, 182: 34, 55: 11, 121: 23, 58: 12, 31: 5, 166: 30, 232: 40, 133: 25}
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = []
response in server.py code:
 [(196, 4, 'United_States'), (138, 4, 'United_States'), (74, 6, 'London'), (240, 3, 'General_Electric_Company_plc'), (34, 3, 'General_Electric_Company_plc'), (514, 6, 'Paul_Reuter')]
self.special_words_assertion_errors = 0
gm_idx_errors = 4
persons_mentions_seen = ['Antoine Lahd', 'Shimon Peres', 'Benjamin Netanyahu', 'Saqr']
response in server.py code:
 [(1409, 7, 'Lebanon'), (203, 7, 'Lebanon'), (582, 6, 'Israel'), (792, 7, 'Lebanon'), (759, 6, 'Israel'), (167, 6, 'Israel'), (519, 7, 'Lebanon'), (65, 6, 'Beirut'), (1898, 12, 'Shimon_Peres'), (1290, 6, 'Israel'), (333, 6, 'Israel'), (930, 6, 'Israel'), (953, 6, 'Israel'), (0, 7, 'Lebanon'), (1418, 6, 'Israel'), (1243, 8, 'Lebanon'), (1601, 8, 'Lebanon'), (980, 8, 'Lebanon'), (85, 8, 'Lebanon'), (484, 6, 'Israel'), (408, 8, 'Lebanon'), (653, 8, 'Lebanon'), (1713, 8, 'Lebanon'), (2119, 18, 'Benjamin_Netanyahu'), (1117, 8, 'Lebanon'), (1581, 6, 'Israel'), (351, 7, 'Lebanon'), (2062, 5, 'Shimon_Peres'), (1190, 6, 'Beirut'), (1061, 8, 'Lebanon'), (2186, 7, 'Lebanon'), (1789, 8, 'Lebanon'), (2565, 6, 'Israel'), (1934, 8, 'Lebanon'), (1976, 7, 'Lebanon'), (1875, 7, 'Israel'), (2268, 6, 'Beirut'), (259, 12, 'Antoine_Lahad'), (2104, 7, 'Israel'), (1920, 4, 'Antoine_Lahad'), (1862, 4, 'Antoine_Lahad'), (2527, 7, 'Israel'), (2364, 11, 'Zionism'), (285, 18, 'South_Lebanon_Army'), (2609, 7, 'Lebanon'), (874, 4, 'Antoine_Lahad'), (381, 4, 'Antoine_Lahad'), (1168, 4, 'Antoine_Lahad'), (590, 4, 'Antoine_Lahad'), (1429, 4, 'Antoine_Lahad'), (2486, 4, 'Antoine_Lahad'), (18, 11, 'Zionism'), (1517, 6, 'Islam'), (737, 6, 'Jews'), (2376, 23, 'Guardians_of_the_Cedars'), (1542, 6, 'Jews'), (1636, 3, 'South_Lebanon_Army'), (305, 3, 'South_Lebanon_Army'), (1485, 3, 'South_Lebanon_Army'), (460, 3, 'South_Lebanon_Army'), (1364, 3, 'South_Lebanon_Army'), (2001, 3, 'South_Lebanon_Army'), (2239, 3, 'South_Lebanon_Army'), (2448, 4, 'Etienne_Saqr'), (2419, 9, 'Christian')]
given spans fix. original text:  bbc/urdo
original word:  bbc/urdo bbc/urdo
new split:  bbc  and  /urdo
[(0, 3), (3, 8)]
{0: 0, 3: 1}
{8: 1, 3: 0}
given span: urdo  new span: /urdo
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(0, 3, 'BBC')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['Ijaz Ahmed']
response in server.py code:
 [(224, 7, 'England_cricket_team'), (109, 8, 'Pakistan_national_cricket_team'), (77, 7, 'England'), (270, 8, 'Pakistan_national_cricket_team'), (96, 7, 'England_cricket_team'), (284, 10, 'Ijaz_Ahmed_(cricketer)'), (10, 7, 'England_cricket_team'), (23, 8, 'Pakistan_national_cricket_team'), (65, 10, 'Birmingham'), (169, 9, 'Edgbaston_Cricket_Ground')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['Molly Corbett Broad']
response in server.py code:
 [(181, 19, 'Molly_Corbett_Broad'), (161, 9, 'Education')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(17, 7, 'Baptists'), (0, 16, 'Magnolia_Springs,_Alabama')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(72, 12, 'Philadelphia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(24, 7, 'Aintree')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(0, 13, 'Western_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Texas'), (596, 7, 'Chicago'), (119, 4, 'United_States_Department_of_Agriculture'), (48, 4, 'United_States_Department_of_Agriculture'), (54, 8, 'Amarillo,_Texas'), (96, 9, 'Texas_Panhandle'), (10, 4, 'Oklahoma')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['Olaf Ludwig', 'Giovanni Lombardi', 'Tristan Hoffman', 'Erik Breukink', 'Jesper Skibby', 'Vyacheslav Ekimov', 'Michael Andersson', 'Johan Capiot', 'Rolf Sorensen', 'Lance Armstrong', 'Marco Lietti', 'Erik Dekker', 'Maarten den Bakker']
response in server.py code:
 [(760, 15, 'Lance_Armstrong'), (528, 5, 'Italy'), (868, 11, 'Erik_Dekker'), (826, 12, 'Marco_Lietti'), (300, 5, 'Italy'), (840, 5, 'Italy'), (380, 13, 'Erik_Breukink'), (715, 13, 'Rolf_Sørensen'), (350, 11, 'Netherlands'), (601, 6, 'Sweden'), (621, 12, 'Johan_Capiot'), (281, 17, 'Giovanni_Lombardi'), (730, 7, 'Denmark'), (395, 11, 'Netherlands'), (235, 7, 'Germany'), (445, 7, 'Denmark'), (881, 11, 'Netherlands'), (222, 11, 'Olaf_Ludwig'), (463, 17, 'Viatcheslav_Ekimov'), (635, 7, 'Belgium'), (911, 6, 'Olaf_Ludwig'), (68, 11, 'Netherlands'), (926, 8, 'Erik_Breukink'), (968, 11, 'Netherlands'), (333, 15, 'Tristan_Hoffman'), (609, 7, 'HTC-Highroad'), (307, 5, 'Team_Polti'), (948, 18, 'Maarten_den_Bakker'), (482, 6, 'Russia'), (564, 5, 'Spain'), (812, 6, 'Viatcheslav_Ekimov'), (644, 9, 'Cycle_Collstrop'), (430, 13, 'Jesper_Skibby'), (363, 3, 'TVM_(cycling_team)'), (739, 8, 'Belkin_Pro_Cycling_Team'), (1012, 6, 'Jesper_Skibby'), (454, 3, 'TVM_(cycling_team)'), (783, 8, '7-Eleven_(cycling_team)'), (408, 8, 'Belkin_Pro_Cycling_Team'), (490, 8, 'Belkin_Pro_Cycling_Team'), (894, 8, 'Belkin_Pro_Cycling_Team'), (847, 12, 'MG_Maglificio'), (777, 4, 'United_States'), (244, 7, 'HTC-Highroad'), (981, 3, 'TVM_(cycling_team)'), (150, 23, 'Ronde_van_Nederland'), (182, 8, 'Roermond'), (582, 17, 'Michael_Andersson_(cyclist)'), (195, 9, 'Landgraaf'), (57, 9, 'Landgraaf'), (993, 9, 'Michael_Andersson_(footballer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(108, 10, 'The_Church_of_Jesus_Christ_of_Latter-day_Saints')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(8, 7, 'Holyoke,_Massachusetts'), (20, 11, 'Real_estate'), (36, 4, 'Sale,_Greater_Manchester')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(102, 8, 'Kirkwood,_Missouri')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['NASS']
response in server.py code:
 [(98, 4, 'United_States_Department_of_Agriculture'), (0, 4, 'United_States_Department_of_Agriculture'), (81, 3, 'Federal_Reserve_System')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['Moin Khan', 'Saqlain Mushtaq', 'A. Stewart', 'Mushtaq Ahmed', 'Mushtaq Ahmed', 'Ata-ur-Rehman', 'D. Gough', 'Waqar Younis', 'Wasim Akram', 'Waqar Younis', 'Ata-ur-Rehman', 'Saqlain Mushtaq', 'Mushtaq Ahmed', 'Aamir Sohail', 'Saeed Anwar', 'Aamir Sohail', 'Moin Khan', 'Ijaz Ahmed', 'Inzamam-ul-Haq', 'Salim Malik', 'Hollioake', 'Wasim Akram', 'Hollioake', 'Mushtaq Ahmed', 'Saqlain Mushtaq', 'Hollioake', 'Waqar Younis', 'Ata-ur-Rehman', 'Hollioake', 'Hollioake']
response in server.py code:
 [(792, 5, 'Darren_Gough'), (824, 5, 'Darren_Gough'), (881, 14, 'Inzamam-ul-Haq'), (1229, 5, 'Darren_Gough'), (915, 11, 'Saleem_Malik'), (768, 11, 'Saeed_Anwar'), (1062, 5, 'Darren_Gough'), (385, 8, 'Darren_Gough'), (801, 12, 'Aamer_Sohail'), (952, 11, 'Wasim_Akram'), (832, 9, 'Moin_Khan'), (848, 8, 'Alan_Mullally'), (1245, 8, 'Alan_Mullally'), (614, 11, 'Wasim_Akram'), (236, 13, 'Mushtaq_Ahmed'), (988, 13, 'Mushtaq_Ahmed'), (736, 12, 'Aamer_Sohail'), (816, 5, 'Robert_Croft'), (859, 10, 'Ijaz_Ahmed_(cricketer)'), (191, 9, 'Moin_Khan'), (1043, 12, 'Waqar_Younis'), (711, 13, 'Mushtaq_Ahmed'), (907, 5, 'Robert_Croft'), (415, 12, 'Waqar_Younis'), (271, 13, 'Mushtaq_Ahmed'), (1013, 15, 'Saqlain_Mushtaq'), (684, 15, 'Saqlain_Mushtaq'), (203, 15, 'Saqlain_Mushtaq'), (637, 12, 'Waqar_Younis'), (872, 5, 'Robert_Croft'), (1070, 13, 'Ata-ur-Rehman'), (1298, 5, 'Robert_Croft'), (303, 13, 'Ata-ur-Rehman'), (660, 13, 'Ata-ur-Rehman'), (135, 7, 'England_cricket_team'), (170, 7, 'England_cricket_team'), (61, 7, 'England'), (1282, 5, 'Ronnie_Irani'), (939, 9, 'Ben_Hollioake'), (975, 9, 'Adam_Hollioake'), (20, 8, 'Pakistan_national_cricket_team'), (147, 8, 'Pakistan_national_cricket_team'), (898, 6, 'Graham_Thorpe'), (10, 7, 'England_cricket_team'), (1314, 9, 'Adam_Hollioake'), (1095, 9, 'Adam_Hollioake'), (1031, 9, 'Ben_Hollioake'), (49, 10, 'Birmingham'), (1264, 7, 'Dean_Headley'), (223, 10, 'Al_Stewart'), (929, 7, 'Al_Stewart')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['Dan Marino']
response in server.py code:
 [(64, 10, 'Dan_Marino'), (50, 8, 'Miami_Dolphins')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(156, 8, 'Honduras'), (0, 8, 'Honduras')]
response in server.py code:
 []
response in server.py code:
 []
given spans fix. original text:  BALANCE - Hartford, Conn., $ 11 mln. CITY OF HARTFORD, CONNECTICUT RE : $ 25,000,000 GENERAL OBLIGATION BONDS MOODY'S : Aaa / A1 S&P : AAA / AA- Delivery Date : 12/16/1996 FSA INSURED Maturity Balance Coupon List 12/15/2000 1,250M 6.25 4.10 12/15/2001 575M 4.60 4.20 12/15/2003 265M 4.40 4.40 12/15/2004 625M 4.50 4.50 12/15/2005 55M 4.60 4.60 12/15/2006 145M 4.70 4.70 12/15/2007 850M 4.85 4.85 12/15/2008 1,200M 4.95 4.95 12/15/2009 1,240M 5.05 5.05 12/15/2010 1,250M 5.15 5.15 12/15/2011 1,240M 5.25 5.25 12/15/2012 1,200M 5.25 5.30 12/15/2013 1,135M 5.30 5.35 12/15/2014 850M 5.30 5.35 Total : 11,880M State Street Bank and Trust Company Prudential Securities Incorporated PaineWebber Incorporated First Union Capital Markets Corp. - NJ-- U.S. Municipal Desk, 212-859-1650
original word:  Conn. Conn.
new split:  Conn  and  .
[(0, 7), (8, 9), (10, 18), (18, 19), (20, 24), (24, 25)]
{0: 0, 24: 5, 18: 3, 20: 4, 8: 1, 10: 2}
{18: 2, 19: 3, 25: 5, 7: 0, 24: 4, 9: 1}
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(129, 3, "Standard_&_Poor's"), (738, 2, 'New_Jersey'), (55, 11, 'Connecticut'), (45, 8, 'Hartford,_Connecticut'), (172, 3, 'Financial_Services_Authority'), (10, 8, 'Hartford,_Connecticut')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['Antonella Bellutti', 'Marion Clignet', 'Lucy Tyler-Sharman', 'Yvonne McGregor', 'Jane Quigley', 'Andrea Collinelli', 'Anton Chantyr', 'Edouard Gritsoun', 'Philippe Ermenault', 'Jean-Michel Monin', 'Francis Moreau', 'Guido Fulst', 'Danilo Hondo', 'Felicia Ballanger', 'Annett Neumann', 'Michelle Ferris', 'Olga Slioussareva', 'Tanya Dubnicoff', 'Wendy Everson', 'Andrea Collinelli', 'Philippe Ermenault', 'Jean-Michel Monin', 'Francis Moreau', 'Florian Rousseau', 'Darryn Hill', 'Roberto Chiappa', 'Frederic Magne', 'Marty Nothstein', 'Pavel Buran', 'Marion Clignet', 'Jane Quigley', 'Yvonne McGregor', 'Lucy Tyler-Sharman', 'Antonella Bellutti']
response in server.py code:
 [(1958, 5, 'Italy'), (1080, 17, 'Félicia_Ballanger'), (1487, 5, 'Italy'), (234, 18, 'Antonella_Bellutti'), (1222, 17, 'Olga_Slyusareva'), (324, 18, 'Lucy_Tyler-Sharman'), (2291, 18, 'Lucy_Tyler-Sharman'), (254, 5, 'Italy'), (2396, 5, 'Italy'), (2376, 18, 'Antonella_Bellutti'), (1294, 15, 'Tanya_Dubnicoff'), (1346, 7, 'Germany'), (465, 6, 'Russia'), (1241, 6, 'Russia'), (1133, 7, 'Germany'), (423, 6, 'Russia'), (2234, 6, 'Russia'), (2151, 6, 'France'), (1415, 7, 'Finland'), (1845, 6, 'France'), (1737, 14, 'Francis_Moreau'), (868, 14, 'Francis_Moreau'), (1986, 6, 'France'), (1276, 6, 'Russia'), (1898, 9, 'Australia'), (1698, 18, 'Philippe_Ermenault'), (1311, 6, 'Canada'), (1827, 16, 'Florian_Rousseau'), (829, 18, 'Philippe_Ermenault'), (1204, 6, 'France'), (2359, 6, 'Russia'), (288, 14, 'Marion_Clignet'), (1998, 15, 'Marty_Nothstein'), (2311, 9, 'Australia'), (1169, 9, 'Australia'), (44, 10, 'Manchester'), (1630, 17, 'Andrea_Collinelli'), (1591, 5, 'Italy'), (344, 9, 'Australia'), (675, 17, 'Andrea_Collinelli'), (367, 15, 'Yvonne_McGregor'), (1099, 6, 'France'), (1970, 14, 'Frédéric_Magné'), (849, 17, 'Jean-Michel_Monin'), (1931, 4, 'United_States'), (2202, 3, 'United_States'), (1718, 17, 'Jean-Michel_Monin'), (2135, 14, 'Marion_Clignet'), (739, 6, 'Russia'), (1117, 14, 'Annett_Neumann'), (1873, 6, 'Latvia'), (1679, 6, 'France'), (636, 5, 'Italy'), (1435, 13, 'Wendy_Everson'), (1377, 11, 'New_Zealand'), (1520, 9, 'Lithuania'), (2450, 9, 'Lithuania'), (532, 9, 'Lithuania'), (2015, 4, 'United_States'), (810, 6, 'France'), (56, 7, 'England'), (907, 11, 'Guido_Fulst'), (898, 7, 'Germany'), (573, 7, 'Ukraine'), (2256, 15, 'Yvonne_McGregor'), (384, 7, 'United_Kingdom'), (747, 13, 'Anton_Shantyr'), (498, 4, 'United_States'), (304, 6, 'France'), (2273, 7, 'United_Kingdom'), (2026, 11, 'Pavel_Buran'), (2039, 14, 'Czech_Republic'), (1450, 7, 'United_Kingdom'), (762, 16, 'Eduard_Gritsun'), (971, 7, 'Germany'), (1941, 15, 'Roberto_Chiappa'), (1885, 11, 'Darryn_Hill'), (920, 12, 'Danilo_Hondo'), (2188, 12, 'Jane_Alexander'), (1152, 15, 'Michelle_Ferris'), (484, 12, 'Jane_Alexander')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(109, 13, 'Goldman_Sachs')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['GaGa']
response in server.py code:
 [(73, 6, 'Arizona_SB_1070'), (15, 4, 'Lady_Gaga')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['John Mills', 'Mohammed', 'Michael Frederick']
response in server.py code:
 [(677, 3, 'God'), (59, 4, 'Florida'), (366, 3, 'Greenwich_Mean_Time'), (685, 5, 'Allah'), (756, 3, 'God'), (727, 8, 'Muhammad'), (1035, 5, 'Islam'), (203, 7, 'Florida'), (1077, 7, 'Florida'), (16, 7, 'Florida'), (46, 11, 'Tallahassee,_Florida'), (1493, 21, 'Supreme_Court_of_Florida'), (261, 7, 'Florida'), (1571, 7, 'Atlanta'), (317, 5, 'John_Mills'), (1112, 18, 'Supreme_Court_of_the_United_States'), (416, 6, 'Arabic_language'), (1630, 5, 'John_Mills'), (1042, 5, 'John_Mills'), (772, 5, 'John_Mills'), (424, 5, 'John_Mills'), (1651, 17, 'Michael_Frederick'), (1210, 5, 'John_Mills'), (1406, 5, 'John_Mills'), (1841, 5, 'John_Mills'), (163, 10, 'John_Mills'), (833, 5, 'John_Mills'), (1920, 9, 'Michael_Frederick'), (1546, 21, 'United_States_courts_of_appeals'), (559, 25, 'Department_of_Corrections')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['Adam Hollioake', 'Graham Lloyd', 'Peter Martin', 'Mike Atherton', 'Nick Knight', 'Alec Stewart', 'Graham Thorpe', 'Matthew Maynard', 'Adam Hollioake', 'Ronnie Irani', 'Robert Croft', 'Darren Gough', 'Dean Headley', 'Alan Mullally', 'Aamir Sohail', 'Saeed Anwar', 'Ijaz Ahmed', 'Salim Malik', 'Inzamam-ul-Haq', 'Wasim Akram', 'Moin Khan', 'Saqlain Mushtaq', 'Mushtaq Ahmed', 'Waqar Younis', 'Ata-ur-Rehman']
response in server.py code:
 [(676, 13, 'Alan_Mullally'), (520, 13, 'Michael_Atherton'), (634, 12, 'Robert_Croft'), (648, 12, 'Darren_Gough'), (716, 11, 'Saeed_Anwar'), (558, 12, 'Alec_Stewart'), (702, 12, 'Aamer_Sohail'), (587, 15, 'Matthew_Maynard'), (770, 11, 'Wasim_Akram'), (572, 13, 'Graham_Thorpe'), (754, 14, 'Inzamam-ul-Haq'), (620, 12, 'Ronnie_Irani'), (741, 11, 'Saleem_Malik'), (793, 9, 'Moin_Khan'), (113, 7, 'England_cricket_team'), (662, 12, 'Dean_Headley'), (821, 13, 'Mushtaq_Ahmed'), (836, 12, 'Waqar_Younis'), (804, 15, 'Saqlain_Mushtaq'), (729, 10, 'Ijaz_Ahmed_(cricketer)'), (83, 8, 'Pakistan_national_cricket_team'), (33, 7, 'England_cricket_team'), (300, 12, 'Graham_Lloyd'), (64, 7, 'England'), (226, 14, 'Adam_Hollioake'), (545, 11, 'Nick_Knight'), (407, 7, 'England_cricket_team'), (207, 6, 'Surrey_County_Cricket_Club'), (184, 9, 'Edgbaston_Cricket_Ground'), (372, 8, 'Pakistan_national_cricket_team'), (10, 8, 'Pakistan_national_cricket_team'), (510, 7, 'England_cricket_team'), (604, 14, 'Adam_Hollioake'), (691, 8, 'Pakistan_national_cricket_team'), (850, 13, 'Ata-ur-Rehman'), (434, 12, 'Old_Trafford_Cricket_Ground'), (281, 10, 'Lancashire_County_Cricket_Club'), (256, 7, 'England_cricket_team'), (326, 12, 'Peter_Martin_(cricketer)'), (52, 10, 'Birmingham')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(94, 5, 'Japan'), (69, 5, 'Osaka')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['Andrea Hlavackova', 'Bethanie Mattek-Sands']
response in server.py code:
 [(176, 21, 'Bethanie_Mattek-Sands'), (149, 17, 'Andrea_Hlaváčková')]
given spans fix. original text:  New York grain freight fixtures - Dec 5. NEW YORK 1996-12-06 Mana 50,000 tonnes soybeans USG / China 10-15/12 $ 23.50 10,000 / 4,000 GeePee.-- New York Commodities Desk+1 212 859 1640
original word:  Desk+1 Desk+1
new split:  Desk  and  +1
[(0, 3), (4, 8), (9, 14), (15, 22), (23, 31), (32, 33), (34, 37), (38, 39), (39, 40), (41, 44), (45, 49), (50, 60), (61, 65), (66, 72), (73, 79), (80, 88), (89, 92), (93, 94), (95, 100), (101, 109), (110, 111), (112, 117), (118, 124), (125, 126), (127, 132), (133, 140), (140, 142), (143, 146), (147, 151), (152, 163), (164, 168), (168, 170)]
{0: 0, 66: 13, 4: 1, 133: 25, 9: 2, 140: 26, 15: 3, 80: 15, 147: 28, 23: 4, 152: 29, 89: 16, 143: 27, 93: 17, 95: 18, 32: 5, 34: 6, 164: 30, 101: 19, 38: 7, 39: 8, 168: 31, 41: 9, 45: 10, 110: 20, 125: 23, 112: 21, 50: 11, 118: 22, 73: 14, 61: 12, 127: 24}
{65: 12, 3: 0, 132: 24, 49: 10, 8: 1, 140: 25, 14: 2, 79: 14, 146: 27, 142: 26, 22: 3, 151: 28, 88: 15, 92: 16, 94: 17, 31: 4, 33: 5, 163: 29, 100: 18, 37: 6, 39: 7, 40: 8, 124: 22, 170: 31, 44: 9, 109: 19, 111: 20, 72: 13, 117: 21, 168: 30, 60: 11, 126: 23}
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(41, 8, 'New_York_City'), (95, 5, 'China'), (0, 8, 'New_York_City')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = ['Juan Gonzalez', 'Ivan Rodriguez', 'Chad Ogea', 'Mickey Rivers', 'Ruben Sierra', 'Johnny Oates', 'Roger Pavlik', 'Jeff Russell', 'Brian Giles', 'Jim Thome', 'Tino Martinez', 'Andy Pettitte', 'Mariano Duncan', 'Darryl Strawberry', 'Jim Leyritz', 'Mariano Rivera', 'Randy Velarde', 'Pete Incaviglia', 'Eddie Murray', 'Jay Buhner', 'Edgar Martinez', 'Kevin Tapani', 'Frank Thomas', 'Harold Baines', 'Robin Ventura', 'Danny Tartabull', 'Dave Telgheder', 'Mark McGwire', 'Buddy Groom', 'Todd Van Poppel', 'Tony Clark', 'Marc Newfield', 'Jose Parra', 'Bob Wickman', 'Matt Lawton', 'Mike Fetters', 'Dave Nilsson']
response in server.py code:
 [(2674, 12, 'Frank_Thomas_(designated_hitter)'), (2408, 10, 'Jay_Buhner'), (2802, 6, 'Frank_Thomas_(designated_hitter)'), (1967, 14, 'Mariano_Rivera'), (2828, 13, 'Robin_Ventura'), (2037, 13, 'Randy_Velarde'), (2810, 13, 'Harold_Baines'), (2442, 14, 'Edgar_Martínez'), (730, 12, 'Rubén_Sierra'), (4193, 12, 'Mike_Fetters'), (279, 9, 'Chad_Ogea'), (2333, 12, 'Eddie_Murray'), (188, 17, 'Cleveland_Indians'), (3649, 10, 'Todd_Van_Poppel'), (118, 14, 'Iván_Rodríguez'), (3175, 14, 'Boston_Red_Sox'), (1650, 16, 'New_York_Yankees'), (4005, 15, 'Minnesota_Twins'), (3549, 10, 'Tony_Clark'), (2869, 6, 'Harold_Baines'), (1806, 11, 'Jim_Leyritz'), (1784, 17, 'Darryl_Strawberry'), (2230, 16, 'Seattle_Mariners'), (1588, 13, 'Andy_Pettitte'), (1949, 7, 'New_York_Yankees'), (3256, 11, 'Buddy_Groom'), (489, 13, 'Mickey_Rivers'), (1530, 13, 'Tino_Martinez'), (161, 13, 'Texas_Rangers_(baseball)'), (251, 9, 'Iván_Rodríguez'), (3877, 13, 'Marc_Newfield'), (1320, 11, 'Brian_Giles'), (2203, 17, 'Baltimore_Orioles'), (1768, 14, 'Mariano_Duncan'), (3962, 7, 'Milwaukee_Brewers'), (2907, 15, 'Danny_Tartabull'), (1336, 9, 'Jim_Thome'), (3790, 3, 'Earned_run_average'), (3069, 12, 'Mark_McGwire'), (2601, 12, 'Kevin_Tapani'), (2737, 17, 'Chicago_White_Sox'), (902, 12, 'Johnny_Oates'), (3478, 15, 'Todd_Van_Poppel'), (4148, 11, 'Matt_Lawton'), (2567, 8, 'Seattle_Mariners'), (4139, 7, 'Milwaukee_Brewers'), (2119, 15, 'Pete_Incaviglia'), (2483, 7, 'Baltimore_Orioles'), (2532, 15, 'American_League'), (3625, 18, 'Kansas_City_Royals'), (3469, 7, 'Detroit'), (2514, 9, 'Chicago_White_Sox'), (1395, 9, 'Chicago_White_Sox'), (2791, 9, 'Toronto_Blue_Jays'), (2260, 10, 'Pete_Incaviglia'), (4059, 11, 'Bob_Wickman'), (422, 8, 'Juan_González_(baseball)'), (1259, 12, 'Jeff_Russell'), (3903, 10, 'José_Parra_(baseball)'), (1242, 15, 'American_League'), (69, 5, 'Texas'), (3713, 6, 'Kansas_City_Royals'), (3606, 6, 'Detroit_Tigers'), (86, 13, 'Juan_González_(baseball)'), (583, 8, 'Juan_González_(baseball)'), (347, 8, 'Juan_González_(baseball)'), (3866, 9, 'Milwaukee'), (4330, 12, 'Dave_Nilsson'), (672, 8, 'Juan_González_(baseball)'), (1676, 6, 'Los_Angeles_Angels_of_Anaheim'), (2321, 9, 'Baltimore_Orioles'), (2110, 7, 'Seattle'), (2592, 7, 'Toronto'), (3195, 9, 'Dave_Telgheder'), (314, 5, 'Texas_Rangers_(baseball)'), (4022, 9, 'Milwaukee_Brewers'), (49, 7, 'Cleveland_Indians'), (1459, 5, 'Texas_Rangers_(baseball)'), (3300, 7, 'Mark_McGwire'), (3010, 14, 'Dave_Telgheder'), (3427, 6, 'Boston_Red_Sox'), (1412, 23, 'American_League_Central'), (1127, 12, 'Roger_Pavlik'), (1369, 9, 'Cleveland_Indians'), (1358, 9, 'Cleveland_Indians'), (58, 9, 'Arlington,_Texas'), (781, 7, 'Cleveland_Indians'), (2948, 3, 'Run_batted_in'), (968, 9, 'Cleveland'), (1518, 10, 'California'), (1688, 8, 'New_York_Yankees'), (3001, 7, 'Oakland,_California'), (720, 3, 'Run_batted_in'), (4266, 9, 'Milwaukee_Brewers'), (1477, 7, 'Seattle_Mariners'), (2470, 7, 'Seattle'), (36, 7, 'Texas_Rangers_(baseball)'), (888, 5, 'Texas_Rangers_(baseball)'), (4240, 9, 'Minnesota_Twins'), (526, 5, 'Texas_Rangers_(baseball)'), (3813, 11, 'Kansas_City_Royals'), (11, 8, 'Luis_Gonzalez_(outfielder)'), (2959, 7, 'Chicago_Cubs')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(223, 15, 'Western_Digital')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(17, 10, 'Wheelchair'), (0, 12, 'Travel_literature')]
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(62, 7, 'Gazette')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 5
persons_mentions_seen = []
response in server.py code:
 [(7, 4, 'Minnesota'), (757, 7, 'Chicago'), (147, 4, 'United_States_Department_of_Agriculture'), (52, 10, 'Des_Moines,_Iowa')]
response in server.py code:
 []
given spans fix. original text:  atlantahomeinvestor
original word:  atlantahomeinvestor atlantahomeinvestor
new split:  atlanta  and  homeinvestor
[(0, 7), (7, 19)]
{0: 0, 7: 1}
{19: 1, 7: 0}
given span: home  new span: 
given span: investor  new span: homeinvestor
self.special_words_assertion_errors = 0
gm_idx_errors = 7
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Atlanta')]
self.special_words_assertion_errors = 0
gm_idx_errors = 7
persons_mentions_seen = ['Richard Kettleborough', 'Tim Munton', 'Dave Gilbert', 'Dean Jones']
response in server.py code:
 [(54, 6, 'London'), (900, 10, 'Tim_Munton'), (1053, 10, 'Dean_Jones_(cricketer)'), (828, 14, 'Leicestershire_County_Cricket_Club'), (699, 14, 'Worcestershire_County_Cricket_Club'), (279, 5, 'Essex_County_Cricket_Club'), (386, 21, 'Richard_Kettleborough'), (740, 12, 'Warwickshire_County_Cricket_Club'), (879, 12, 'Warwickshire_County_Cricket_Club'), (853, 8, 'Somerset_County_Cricket_Club'), (72, 5, 'Essex_County_Cricket_Club'), (719, 6, 'Surrey_County_Cricket_Club'), (530, 15, 'Nottinghamshire_County_Cricket_Club'), (662, 10, 'Derbyshire_County_Cricket_Club'), (336, 9, 'Yorkshire_County_Cricket_Club'), (471, 4, 'Kent_County_Cricket_Club'), (1021, 10, 'Derbyshire_County_Cricket_Club'), (82, 4, 'Kent_County_Cricket_Club'), (171, 10, 'Derbyshire_County_Cricket_Club'), (243, 7, 'England'), (186, 6, 'Surrey_County_Cricket_Club'), (922, 6, 'Surrey_County_Cricket_Club'), (1003, 12, 'Dave_Gilbert_(cricketer)'), (10, 5, 'Essex_County_Cricket_Club'), (20, 4, 'Kent_County_Cricket_Club'), (645, 15, 'Nevill_Ground'), (986, 10, 'Australia'), (1034, 10, 'Australia_national_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 7
persons_mentions_seen = []
response in server.py code:
 [(15, 8, 'Portland,_Oregon')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 7
persons_mentions_seen = []
response in server.py code:
 [(0, 13, 'West_Virginia'), (14, 11, 'Real_estate')]
given span: Goldman, Sachs and Co   new span: Goldman, Sachs and Co
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(401, 17, 'First_Boston'), (54, 34, 'U.S._Securities_and_Exchange_Commission')]
given spans fix. original text:  Man stole pigs, tipped strippers, gets 10 years. APPLETON, Wis. 1996-12-06 A farmhand used the proceeds from stolen pigs to lavish tips on dancers at strip clubs and offered one $ 3,000 to pay for breast implant surgery, authorities said Friday. In sentencing Darrel Voeks, 38, to a 10-year prison term on Thursday, Outagmie County Circuit Court Judge Dennis Luebke said he was "a thief by habit." "You are self-indulgent. You are narcissitic," Luebke said at the sentencing, adding Voeks should pay restitution of more than $ 100,000 to the farming family who had hired him. Voeks, who was already on probation for prior pig thefts, pleaded that he was trying to pay bills for his ex-wife and children. But the court heard that receipts showed much of the money went to dancers at strip clubs where he was known as a big tipper. One stripper said Voeks offered to give her $ 3,000 for breast implant surgery.
original word:  Wis. Wis.
new split:  Wis  and  .
[(0, 3), (4, 9), (10, 14), (14, 15), (16, 22), (23, 32), (32, 33), (34, 38), (39, 41), (42, 47), (47, 48), (49, 57), (57, 58), (59, 62), (62, 63)]
{0: 0, 32: 6, 34: 7, 4: 1, 39: 8, 10: 2, 14: 3, 47: 10, 16: 4, 49: 11, 23: 5, 57: 12, 59: 13, 42: 9, 62: 14}
{32: 5, 33: 6, 3: 0, 38: 7, 41: 8, 14: 2, 47: 9, 48: 10, 22: 4, 9: 1, 57: 11, 58: 12, 15: 3, 62: 13, 63: 14}
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(59, 3, 'Wisconsin'), (49, 8, 'Appleton,_Wisconsin'), (316, 15, 'Outagamie_County,_Wisconsin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(81, 4, 'IPod'), (31, 9, 'Alderwood,_Toronto')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(3, 6, 'Enzyme'), (23, 7, 'Protein')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Robert Allenby', 'Ian Woosnam', 'Colin Montgomerie', 'Robert Allenby', 'Lee Westwood', 'Costantino Rocca', 'Mark McNulty', 'Andrew Coltart', 'Wayne Riley', 'Raymond Russell', 'Paul Lawrie', 'Stephen Ames', 'Frank Nobilo', 'Paul McGinley', 'Padraig Harrington', 'Retief Goosen', 'Miguel Angel Jimenez', 'Peter Mitchell', 'Miguel Angel Martin', 'Jonathan Lomas', 'Paul Broadhurst']
response in server.py code:
 [(586, 13, 'Paul_McGinley'), (772, 19, 'Miguel_Ángel_Martín_(golfer)'), (424, 11, 'Wayne_Riley'), (487, 11, 'Paul_Lawrie'), (363, 12, 'Mark_McNulty'), (704, 20, 'Miguel_Ángel_Jiménez'), (437, 9, 'Australia'), (47, 6, 'London'), (281, 9, 'Australia'), (303, 12, 'Lee_Westwood'), (327, 16, 'Costantino_Rocca'), (345, 5, 'Italy'), (265, 14, 'Robert_Allenby'), (622, 18, 'Pádraig_Harrington'), (547, 12, 'Frank_Nobilo'), (236, 17, 'Colin_Montgomerie'), (398, 14, 'Andrew_Coltart'), (726, 5, 'Spain'), (511, 12, 'Stephen_Ames'), (197, 11, 'Ian_Woosnam'), (793, 5, 'Spain'), (812, 14, 'Jonathan_Lomas'), (459, 15, 'Raymond_Russell'), (678, 12, 'South_Africa'), (839, 15, 'Paul_Broadhurst'), (169, 7, 'United_Kingdom'), (561, 11, 'New_Zealand'), (663, 13, 'Retief_Goosen'), (745, 14, 'Peter_Mitchell_(golfer)'), (141, 14, 'Robert_Allenby'), (601, 7, 'Republic_of_Ireland'), (642, 7, 'Republic_of_Ireland'), (94, 13, 'PGA_European_Tour'), (32, 13, 'PGA_European_Tour'), (118, 15, 'British_Masters'), (377, 8, 'Zimbabwe'), (525, 8, 'Trinidad')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(175, 6, 'Mumbai'), (159, 5, 'Kurla')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(56, 12, 'South_Africa'), (46, 6, 'Tomato')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(1042, 4, 'United_States'), (1206, 7, 'Chicago'), (0, 8, 'Canada'), (34, 7, 'Chicago'), (119, 25, 'Canadian_Grain_Commission'), (985, 17, 'Statistics_Canada')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Adam Beyer']
response in server.py code:
 [(0, 10, 'Adam_Beyer')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(51, 6, 'London'), (198, 12, 'London_Irish'), (0, 11, 'Rugby_union'), (285, 5, 'London_Wasps'), (294, 8, 'Saracens_F.C.'), (170, 10, 'Harlequin_F.C.'), (80, 7, 'England'), (457, 8, 'Scotland'), (89, 8, 'Scotland'), (102, 5, 'Wales'), (36, 5, 'Wales'), (545, 10, 'Jed-Forest_RFC'), (259, 6, 'Orrell_R.U.F.C.'), (269, 4, 'Bath_Rugby'), (240, 15, 'West_Hartlepool_R.F.C.'), (559, 10, 'Watsonians_RFC'), (23, 8, 'Scotland'), (277, 4, 'Sale_Sharks'), (225, 11, 'Northampton_Saints'), (184, 10, 'Gloucester_Rugby'), (338, 8, 'Bridgend_Ravens'), (14, 7, 'England'), (319, 5, 'Wales'), (410, 7, 'Newport_RFC'), (350, 8, 'Llanelli_RFC'), (421, 10, 'Caerphilly_RFC'), (385, 8, 'Treorchy_RFC'), (494, 11, 'Boroughmuir_RFC'), (435, 7, 'Swansea_RFC'), (142, 23, 'English_National_Ice_Hockey_League'), (214, 7, 'Bristol_Rugby'), (446, 7, 'Cardiff'), (306, 9, 'Leicester_Tigers'), (372, 9, 'Ebbw_Vale_RLFC'), (509, 6, 'Hawick_RFC'), (397, 9, 'Newbridge_RFC'), (361, 7, 'Dunvant_RFC')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Donald Trump']
response in server.py code:
 [(283, 5, 'Donald_Trump'), (0, 12, 'Donald_Trump'), (293, 10, 'Interstate_Highway_System')]
given spans fix. original text:  NYMEX natgas ends sharply lower on weather outlook. NEW YORK 1996-12-06 NYMEX Henry Hub natgas futures settled significantly lower Friday, pressured early by profit taking and driven even lower late by the National Weather Service's bearish six to 10 day forecast, sources said. January ended 29.7 cents lower at $ 3.487 per million British thermal units after dipping to a low of $ 3.46. Feb settled down 22 cents at $ 3.186. Most others also were down. "Weather forecasts have been sketchy. Now the National Weather Service is calling for above-normal temperatures in more than half of the U.S.," one futures trader said. In its forecast, the NWS said it expects above-normal temperatures "over the lower 48 states" from December 12 through December 16. With more room to the downside anticipated early next week, traders said support in January was at $ 3.47, then $ 3.35. The next backstops were seen at $ 3.11 and $ 3.04, the low set on November 21. Resistance was pegged at the new contract high of $ 3.80. In the cash market, Gulf Coast prices were around $ 3.60 shortly before nomination deadlines. Midcontinent prices were similarly lower in the $ 3.40s. New York city gate gas slipped into the $ 4.40s, down almost 15 cents. NYMEX said an estimated 35,662 Hub contracts traded, down from Thursday's revised tally of 43,955. NYMEX Alberta natgas remained untraded, with January settling at $ 1.65, off 10 cents from Thursday. Physical prices for the weekend at the AECO storage hub were also down about 10 cents in the C$ 1.92-1.97 per gigajoule, or $ 1.52-1.56 per mmBtu range, pressured by unseasonably mild weather in western Canada. NYMEX Permian natgas, also untraded, ended 10 cents lower at $ 2.90. In congruence with futures, Permian cash prices for the weekend fell more than 10 cents to the high - $ 3.40s. On the KCBT, January finished 26.5 cents lower at $ 3.35 after dipping to a low of $ 3.33 earlier in the session. February was down 22 cents at the close, while other deferreds were 4.5 to nine cents lower. The East / West spread narrowed by 3.2 cents to 13.7 cents (NYMEX premium). Physical prices at Waha for the weekend lost more than 15 cents to the low-to-mid $ 3.50s as milder weather moved into the Southwest.-- H McCulloch, New York Power Desk+212-859-1628
original word:  Desk+212-859-1628 Desk+212-859-1628
new split:  Desk  and  +212-859-1628
[(0, 5), (6, 12), (13, 17), (18, 25), (26, 31), (32, 34), (35, 42), (43, 50), (50, 51), (52, 55), (56, 60), (61, 71), (72, 77), (78, 83), (84, 87), (88, 94), (95, 102), (103, 110), (111, 124), (125, 130), (131, 137), (137, 138), (139, 148), (149, 154), (155, 157), (158, 164), (165, 171), (172, 175), (176, 182), (183, 187), (188, 193), (194, 198), (199, 201), (202, 205), (206, 214), (215, 222), (223, 230), (230, 232), (233, 240), (241, 244), (245, 247), (248, 250), (251, 254), (255, 263), (263, 264), (265, 272), (273, 277), (277, 278), (279, 286), (287, 292), (293, 297), (298, 303), (304, 309), (310, 312), (313, 314), (315, 320), (321, 324), (325, 332), (333, 340), (341, 348), (349, 354), (355, 360), (361, 368), (369, 371), (372, 373), (374, 377), (378, 380), (381, 382), (383, 387), (387, 388), (389, 392), (393, 400), (401, 405), (406, 408), (409, 414), (415, 417), (418, 419), (420, 425), (425, 426), (427, 431), (432, 438), (439, 443), (444, 448), (449, 453), (453, 454), (455, 456), (456, 463), (464, 473), (474, 478), (479, 483), (484, 491), (491, 492), (493, 496), (497, 500), (501, 509), (510, 517), (518, 525), (526, 528), (529, 536), (537, 540), (541, 553), (554, 566), (567, 569), (570, 574), (575, 579), (580, 584), (585, 587), (588, 591), (592, 596), (596, 597), (597, 598), (599, 602), (603, 610), (611, 617), (618, 622), (622, 623), (624, 626), (627, 630), (631, 639), (639, 640), (641, 644), (645, 648), (649, 653), (654, 656), (657, 664), (665, 677), (678, 690), (691, 692), (692, 696), (697, 700), (701, 706), (707, 709), (710, 716), (716, 717), (718, 722), (723, 731), (732, 734), (735, 742), (743, 751), (752, 754), (754, 755), (756, 760), (761, 765), (766, 770), (771, 773), (774, 777), (778, 786), (787, 798), (799, 804), (805, 809), (810, 814), (814, 815), (816, 823), (824, 828), (829, 836), (837, 839), (840, 847), (848, 851), (852, 854), (855, 856), (857, 861), (861, 862), (863, 867), (868, 869), (870, 874), (874, 875), (876, 879), (880, 884), (885, 894), (895, 899), (900, 904), (905, 907), (908, 909), (910, 914), (915, 918), (919, 920), (921, 925), (925, 926), (927, 930), (931, 934), (935, 938), (939, 941), (942, 950), (951, 953), (953, 954), (955, 965), (966, 969), (970, 976), (977, 979), (980, 983), (984, 987), (988, 996), (997, 1001), (1002, 1004), (1005, 1006), (1007, 1011), (1011, 1012), (1013, 1015), (1016, 1019), (1020, 1024), (1025, 1031), (1031, 1032), (1033, 1037), (1038, 1043), (1044, 1050), (1051, 1055), (1056, 1062), (1063, 1064), (1065, 1069), (1070, 1077), (1078, 1084), (1085, 1095), (1096, 1105), (1105, 1106), (1107, 1119), (1120, 1126), (1127, 1131), (1132, 1141), (1142, 1147), (1148, 1150), (1151, 1154), (1155, 1156), (1157, 1162), (1162, 1163), (1164, 1167), (1168, 1172), (1173, 1177), (1178, 1182), (1183, 1186), (1187, 1194), (1195, 1199), (1200, 1203), (1204, 1205), (1206, 1211), (1211, 1212), (1213, 1217), (1218, 1224), (1225, 1227), (1228, 1233), (1233, 1234), (1235, 1240), (1241, 1245), (1246, 1248), (1249, 1258), (1259, 1265), (1266, 1269), (1270, 1279), (1280, 1286), (1286, 1287), (1288, 1292), (1293, 1297), (1298, 1306), (1306, 1308), (1309, 1316), (1317, 1322), (1323, 1325), (1326, 1332), (1332, 1333), (1334, 1339), (1340, 1347), (1348, 1354), (1355, 1363), (1364, 1372), (1372, 1373), (1374, 1378), (1379, 1386), (1387, 1395), (1396, 1398), (1399, 1400), (1401, 1405), (1405, 1406), (1407, 1410), (1411, 1413), (1414, 1419), (1420, 1424), (1425, 1433), (1433, 1434), (1435, 1443), (1444, 1450), (1451, 1454), (1455, 1458), (1459, 1466), (1467, 1469), (1470, 1473), (1474, 1478), (1479, 1486), (1487, 1490), (1491, 1495), (1496, 1500), (1501, 1505), (1506, 1511), (1512, 1514), (1515, 1520), (1521, 1523), (1524, 1527), (1528, 1529), (1529, 1530), (1531, 1540), (1541, 1544), (1545, 1554), (1554, 1555), (1556, 1558), (1559, 1560), (1561, 1570), (1571, 1574), (1575, 1580), (1581, 1586), (1586, 1587), (1588, 1597), (1598, 1600), (1601, 1613), (1614, 1618), (1619, 1626), (1627, 1629), (1630, 1637), (1638, 1644), (1644, 1645), (1646, 1651), (1652, 1659), (1660, 1666), (1666, 1667), (1668, 1672), (1673, 1681), (1681, 1682), (1683, 1688), (1689, 1691), (1692, 1697), (1698, 1703), (1704, 1706), (1707, 1708), (1709, 1713), (1713, 1714), (1715, 1717), (1718, 1728), (1729, 1733), (1734, 1741), (1741, 1742), (1743, 1750), (1751, 1755), (1756, 1762), (1763, 1766), (1767, 1770), (1771, 1778), (1779, 1783), (1784, 1788), (1789, 1793), (1794, 1796), (1797, 1802), (1803, 1805), (1806, 1809), (1810, 1814), (1815, 1816), (1817, 1818), (1819, 1824), (1824, 1825), (1826, 1828), (1829, 1832), (1833, 1837), (1837, 1838), (1839, 1846), (1847, 1855), (1856, 1860), (1861, 1866), (1867, 1872), (1873, 1875), (1876, 1877), (1878, 1882), (1883, 1888), (1889, 1896), (1897, 1899), (1900, 1901), (1902, 1905), (1906, 1908), (1909, 1910), (1911, 1915), (1916, 1923), (1924, 1926), (1927, 1930), (1931, 1938), (1938, 1939), (1940, 1948), (1949, 1952), (1953, 1957), (1958, 1960), (1961, 1966), (1967, 1969), (1970, 1973), (1974, 1979), (1979, 1980), (1981, 1986), (1987, 1992), (1993, 2002), (2003, 2007), (2008, 2011), (2012, 2014), (2015, 2019), (2020, 2025), (2026, 2031), (2031, 2032), (2033, 2036), (2037, 2041), (2042, 2043), (2044, 2048), (2049, 2055), (2056, 2064), (2065, 2067), (2068, 2071), (2072, 2077), (2078, 2080), (2081, 2085), (2086, 2091), (2092, 2093), (2093, 2098), (2099, 2106), (2106, 2107), (2107, 2108), (2109, 2117), (2118, 2124), (2125, 2127), (2128, 2132), (2133, 2136), (2137, 2140), (2141, 2148), (2149, 2153), (2154, 2158), (2159, 2163), (2164, 2166), (2167, 2172), (2173, 2175), (2176, 2179), (2180, 2190), (2191, 2192), (2193, 2198), (2199, 2201), (2202, 2208), (2209, 2216), (2217, 2222), (2223, 2227), (2228, 2231), (2232, 2242), (2242, 2244), (2245, 2246), (2247, 2256), (2256, 2257), (2258, 2261), (2262, 2266), (2267, 2272), (2273, 2277), (2277, 2290)]
{0: 0, 1025: 200, 6: 1, 1031: 201, 2056: 404, 1033: 202, 2012: 394, 13: 2, 1038: 203, 2065: 405, 18: 3, 1044: 204, 2072: 407, 26: 4, 1051: 205, 2078: 408, 32: 5, 176: 28, 35: 6, 2081: 409, 2086: 410, 1063: 207, 1065: 208, 43: 7, 2092: 411, 1979: 388, 1070: 209, 50: 8, 691: 127, 52: 9, 1078: 210, 56: 10, 2228: 438, 2106: 414, 2107: 415, 61: 11, 2118: 417, 72: 12, 2125: 418, 78: 13, 2128: 419, 1105: 213, 1107: 214, 84: 14, 2133: 420, 88: 15, 2137: 421, 2141: 422, 95: 16, 1120: 215, 310: 53, 2049: 403, 2149: 423, 103: 17, 2154: 424, 1132: 217, 111: 18, 2164: 426, 1142: 218, 2167: 427, 2068: 406, 1148: 219, 125: 19, 1151: 220, 2176: 429, 131: 20, 2180: 430, 1157: 222, 137: 21, 1162: 223, 139: 22, 1164: 224, 194: 31, 2191: 431, 1168: 225, 2193: 432, 149: 23, 1561: 303, 1829: 356, 1178: 227, 155: 24, 158: 25, 1183: 228, 880: 167, 1187: 229, 165: 26, 1949: 381, 2217: 436, 1195: 230, 172: 27, 2223: 437, 1200: 231, 1204: 232, 1206: 233, 183: 29, 2232: 439, 1396: 267, 1211: 234, 188: 30, 1213: 235, 1909: 373, 1056: 206, 1218: 236, 2245: 441, 199: 32, 1225: 237, 202: 33, 1228: 238, 206: 34, 2256: 443, 1233: 239, 2258: 444, 1571: 304, 2262: 445, 215: 35, 1241: 241, 2267: 446, 1246: 242, 223: 36, 1249: 243, 2277: 448, 230: 37, 233: 38, 1259: 244, 381: 67, 241: 39, 1266: 245, 1235: 240, 245: 40, 1270: 246, 248: 41, 1407: 271, 255: 43, 1280: 247, 1286: 248, 263: 44, 1288: 249, 265: 45, 1293: 250, 2093: 412, 273: 46, 1298: 251, 1411: 272, 277: 47, 279: 48, 1924: 376, 1306: 252, 1309: 253, 1987: 390, 287: 49, 293: 50, 732: 136, 298: 51, 1323: 255, 1326: 256, 304: 52, 2099: 413, 1332: 257, 1334: 258, 313: 54, 315: 55, 1340: 259, 321: 56, 1348: 260, 325: 57, 2273: 447, 1355: 261, 333: 58, 1364: 262, 341: 59, 1372: 263, 349: 60, 1374: 264, 355: 61, 455: 85, 401: 72, 361: 62, 1387: 266, 1085: 211, 369: 63, 372: 64, 374: 65, 1399: 268, 1401: 269, 378: 66, 1405: 270, 383: 68, 387: 69, 389: 70, 1414: 273, 393: 71, 919: 175, 1420: 274, 1425: 275, 406: 73, 409: 74, 1433: 276, 1435: 277, 415: 75, 1173: 226, 418: 76, 420: 77, 425: 78, 1451: 279, 1455: 280, 432: 80, 1096: 212, 1459: 281, 439: 81, 1467: 282, 444: 82, 1470: 283, 449: 83, 1474: 284, 453: 84, 1479: 285, 456: 86, 1379: 265, 1487: 286, 464: 87, 1491: 287, 1496: 288, 1444: 278, 474: 88, 1501: 289, 479: 89, 1506: 290, 251: 42, 484: 90, 1512: 291, 1515: 292, 493: 92, 1521: 293, 1619: 312, 1524: 294, 501: 94, 1528: 295, 1529: 296, 1531: 297, 2199: 433, 510: 95, 427: 79, 1541: 298, 518: 96, 1545: 299, 526: 97, 529: 98, 1554: 300, 1556: 301, 1559: 302, 537: 99, 541: 100, 1627: 313, 1575: 305, 554: 101, 1581: 306, 1586: 307, 1588: 308, 567: 102, 570: 103, 1598: 309, 575: 104, 1601: 310, 580: 105, 2031: 398, 585: 106, 588: 107, 1614: 311, 592: 108, 497: 93, 596: 109, 597: 110, 1861: 362, 599: 111, 603: 112, 1630: 314, 611: 113, 1638: 315, 618: 114, 1127: 216, 1644: 316, 622: 115, 624: 116, 627: 117, 1652: 318, 631: 118, 1660: 319, 639: 119, 641: 120, 1666: 320, 1668: 321, 645: 121, 649: 122, 654: 123, 1681: 323, 1683: 324, 1646: 317, 1689: 325, 2159: 425, 1692: 326, 1698: 327, 678: 126, 1704: 328, 1707: 329, 1709: 330, 1713: 331, 1715: 332, 692: 128, 1718: 333, 697: 129, 701: 130, 1729: 334, 707: 131, 710: 132, 716: 133, 1741: 336, 718: 134, 1743: 337, 723: 135, 1751: 338, 1756: 339, 735: 137, 1763: 340, 743: 138, 1900: 370, 1771: 342, 2173: 428, 752: 139, 754: 140, 1779: 343, 756: 141, 1784: 344, 761: 142, 1789: 345, 766: 143, 1794: 346, 771: 144, 1797: 347, 774: 145, 1317: 254, 778: 146, 1803: 348, 1806: 349, 2008: 393, 1810: 350, 787: 147, 1815: 351, 1817: 352, 1819: 353, 799: 148, 1824: 354, 1826: 355, 805: 149, 1833: 357, 810: 150, 2242: 440, 1837: 358, 814: 151, 1839: 359, 816: 152, 1673: 322, 824: 153, 829: 154, 1856: 361, 837: 155, 840: 156, 1847: 360, 1767: 341, 848: 157, 1873: 364, 852: 158, 1878: 366, 855: 159, 857: 160, 1883: 367, 861: 161, 863: 162, 1889: 368, 868: 163, 870: 164, 657: 124, 1897: 369, 874: 165, 876: 166, 2109: 416, 1902: 371, 1734: 335, 1906: 372, 885: 168, 1911: 374, 1916: 375, 2026: 397, 895: 169, 491: 91, 900: 170, 1927: 377, 905: 171, 1931: 378, 908: 172, 910: 173, 1938: 379, 915: 174, 1940: 380, 665: 125, 921: 176, 1007: 195, 925: 177, 2247: 442, 927: 178, 1953: 382, 931: 179, 1958: 383, 935: 180, 1961: 384, 939: 181, 942: 182, 1967: 385, 2202: 434, 1970: 386, 1974: 387, 951: 183, 953: 184, 955: 185, 1981: 389, 2037: 400, 1867: 363, 966: 186, 2209: 435, 1993: 391, 970: 187, 977: 188, 2003: 392, 980: 189, 984: 190, 988: 191, 2015: 395, 2020: 396, 997: 192, 2044: 402, 1002: 193, 1005: 194, 1155: 221, 2033: 399, 1011: 196, 1013: 197, 1016: 198, 1876: 365, 2042: 401, 1020: 199}
{1024: 199, 2048: 402, 5: 0, 1031: 200, 1032: 201, 12: 1, 1037: 202, 2064: 404, 17: 2, 1043: 203, 2071: 406, 25: 3, 1050: 204, 175: 27, 907: 171, 31: 4, 2080: 408, 34: 5, 2085: 409, 1062: 206, 1064: 207, 348: 59, 42: 6, 2055: 403, 1069: 208, 50: 7, 51: 8, 1077: 209, 55: 9, 2106: 413, 2107: 414, 60: 10, 2117: 416, 71: 11, 2124: 417, 77: 12, 2127: 418, 1105: 212, 1106: 213, 83: 13, 2132: 419, 87: 14, 2136: 420, 2140: 421, 94: 15, 1119: 214, 187: 29, 2148: 422, 1126: 215, 2153: 423, 1131: 216, 110: 17, 2067: 405, 1141: 217, 2166: 426, 1147: 218, 124: 18, 1150: 219, 2175: 428, 130: 19, 1899: 369, 1156: 221, 193: 30, 137: 20, 138: 21, 1163: 223, 2108: 415, 1167: 224, 2192: 431, 1560: 302, 148: 22, 2198: 432, 1177: 226, 154: 23, 157: 24, 1182: 227, 1733: 334, 2208: 434, 1186: 228, 164: 25, 2246: 441, 2216: 435, 1194: 229, 171: 26, 2222: 436, 1199: 230, 1203: 231, 1205: 232, 182: 28, 2231: 438, 1908: 372, 1211: 233, 1212: 234, 1217: 235, 2242: 439, 2244: 440, 198: 31, 1224: 236, 201: 32, 1227: 237, 205: 33, 717: 133, 2256: 442, 1233: 238, 1234: 239, 2261: 444, 214: 34, 1240: 240, 2266: 445, 1245: 241, 222: 35, 1248: 242, 1915: 374, 2277: 447, 230: 36, 2257: 443, 232: 37, 1258: 243, 2190: 430, 240: 38, 1265: 244, 2290: 448, 244: 39, 1269: 245, 247: 40, 250: 41, 254: 42, 1279: 246, 2091: 410, 1286: 247, 1287: 248, 264: 44, 1292: 249, 2093: 411, 272: 45, 1297: 250, 1923: 375, 277: 46, 278: 47, 1714: 331, 1306: 251, 1308: 252, 286: 48, 1755: 338, 1316: 253, 297: 50, 1322: 254, 1325: 255, 303: 51, 1332: 256, 309: 52, 312: 53, 314: 54, 1339: 258, 320: 55, 2272: 446, 1347: 259, 324: 56, 2227: 437, 454: 84, 1354: 260, 332: 57, 1363: 261, 340: 58, 1372: 262, 1373: 263, 400: 71, 354: 60, 1766: 340, 360: 61, 1084: 210, 1386: 265, 1938: 378, 368: 62, 1395: 266, 373: 64, 1398: 267, 1400: 268, 377: 65, 380: 66, 1405: 269, 382: 67, 1410: 271, 387: 68, 388: 69, 1413: 272, 392: 70, 1419: 273, 1424: 274, 405: 72, 408: 73, 1433: 275, 1434: 276, 414: 74, 417: 75, 1443: 277, 425: 77, 1450: 278, 1095: 211, 1378: 264, 1454: 279, 431: 79, 1458: 280, 1992: 390, 438: 80, 1466: 281, 443: 81, 1469: 282, 448: 82, 1473: 283, 453: 83, 1478: 284, 456: 85, 1486: 285, 463: 86, 1490: 286, 419: 76, 1495: 287, 473: 87, 1500: 288, 478: 88, 1505: 289, 483: 89, 1511: 290, 1514: 291, 491: 90, 492: 91, 1520: 292, 1523: 293, 500: 93, 1527: 294, 1529: 295, 1530: 296, 426: 78, 1540: 297, 517: 95, 1544: 298, 525: 96, 528: 97, 1554: 299, 1555: 300, 1558: 301, 536: 98, 540: 99, 602: 111, 1570: 303, 2098: 412, 1574: 304, 553: 100, 263: 43, 1580: 305, 1586: 306, 1587: 307, 566: 101, 569: 102, 1597: 308, 574: 103, 1600: 309, 579: 104, 584: 105, 587: 106, 1613: 310, 591: 107, 1618: 311, 596: 108, 597: 109, 598: 110, 1626: 312, 1629: 313, 1637: 314, 610: 112, 102: 16, 617: 113, 1644: 315, 1645: 316, 622: 114, 623: 115, 626: 116, 1651: 317, 630: 117, 1828: 355, 1659: 318, 639: 118, 640: 119, 1666: 319, 1667: 320, 644: 120, 648: 121, 653: 122, 656: 123, 1681: 322, 1682: 323, 2158: 424, 1688: 324, 1691: 325, 1697: 326, 677: 125, 1703: 327, 1706: 328, 1708: 329, 1713: 330, 690: 126, 2163: 425, 692: 127, 1717: 332, 696: 128, 700: 129, 1728: 333, 706: 130, 709: 131, 716: 132, 1741: 335, 1742: 336, 722: 134, 1750: 337, 292: 49, 731: 135, 2036: 399, 734: 136, 1762: 339, 742: 137, 2172: 427, 1770: 341, 751: 138, 754: 139, 755: 140, 1783: 343, 760: 141, 1788: 344, 765: 142, 1778: 342, 1793: 345, 770: 143, 1796: 346, 773: 144, 777: 145, 1802: 347, 2007: 392, 1154: 220, 1809: 349, 786: 146, 2179: 429, 1838: 358, 1814: 350, 1816: 351, 1818: 352, 798: 147, 1824: 353, 1825: 354, 2011: 393, 804: 148, 1832: 356, 809: 149, 1837: 357, 814: 150, 815: 151, 1672: 321, 1846: 359, 823: 152, 828: 153, 1162: 222, 1333: 257, 836: 154, 839: 155, 1866: 362, 847: 156, 1872: 363, 851: 157, 1877: 365, 854: 158, 856: 159, 1882: 366, 861: 160, 862: 161, 1888: 367, 867: 162, 869: 163, 1896: 368, 874: 164, 875: 165, 1901: 370, 879: 166, 1905: 371, 884: 167, 1910: 373, 2025: 396, 1172: 225, 1855: 360, 894: 168, 899: 169, 1926: 376, 904: 170, 1930: 377, 371: 63, 909: 172, 664: 124, 914: 173, 1939: 379, 918: 174, 2201: 433, 920: 175, 1860: 361, 2031: 397, 1948: 380, 925: 176, 926: 177, 1952: 381, 496: 92, 930: 178, 1957: 382, 934: 179, 1960: 383, 938: 180, 2077: 407, 941: 181, 1966: 384, 2043: 401, 1969: 385, 1973: 386, 950: 182, 953: 183, 954: 184, 1979: 387, 1980: 388, 1986: 389, 1805: 348, 965: 185, 1055: 205, 969: 186, 976: 187, 2002: 391, 979: 188, 983: 189, 987: 190, 2014: 394, 2019: 395, 996: 191, 1001: 192, 1004: 193, 1006: 194, 509: 94, 2032: 398, 1011: 195, 1012: 196, 1015: 197, 1406: 270, 2041: 400, 1875: 364, 1019: 198}
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(1334, 5, 'New_York_Mercantile_Exchange'), (1646, 5, 'New_York_Mercantile_Exchange'), (72, 5, 'New_York_Mercantile_Exchange'), (1235, 5, 'New_York_Mercantile_Exchange'), (2093, 5, 'New_York_Mercantile_Exchange'), (0, 5, 'New_York_Mercantile_Exchange'), (1638, 6, 'Canada'), (592, 4, 'United_States'), (78, 9, 'Henry_Hub'), (645, 3, 'National_Weather_Service'), (206, 24, 'National_Weather_Service'), (501, 24, 'National_Weather_Service'), (333, 7, 'United_Kingdom'), (1340, 7, 'Alberta'), (1033, 10, 'Gulf_Coast_of_the_United_States'), (52, 8, 'New_York_City'), (1164, 8, 'New_York_City'), (1652, 7, 'Permian'), (1743, 7, 'Permian'), (2128, 4, 'Waha')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(96, 13, 'Miami_2_Ibiza')]
given spans fix. original text:  onchildren
original word:  onchildren onchildren
new split:  on  and  children
[(0, 2), (2, 10)]
{0: 0, 2: 1}
{2: 0, 10: 1}
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(2, 8, 'Child')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Dean Saunders', 'Mark Hughes', 'Andy Melville', 'John Robinson']
response in server.py code:
 [(187, 13, 'Dean_Saunders'), (221, 11, 'Mark_Hughes'), (55, 7, 'Cardiff'), (247, 13, 'Andy_Melville'), (20, 10, 'San_Marino_national_football_team'), (85, 10, 'San_Marino_national_football_team'), (9, 5, 'Wales_national_football_team'), (137, 8, 'Europe'), (74, 5, 'Wales_national_football_team'), (34, 9, 'FIFA_World_Cup'), (120, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(296, 5, 'Atari')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(65, 4, 'United_States'), (0, 4, 'United_States'), (660, 8, 'Illinois'), (44, 9, 'St._Louis'), (858, 7, 'Chicago'), (424, 8, 'Illinois'), (116, 9, 'St._Louis'), (338, 4, 'Ohio'), (226, 8, 'Illinois'), (541, 8, 'McGregor,_Iowa')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(10, 12, 'Psychologist')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Sergei Rebrov']
response in server.py code:
 [(63, 7, 'Belfast'), (205, 13, 'Serhiy_Rebrov'), (95, 16, 'Northern_Ireland_national_football_team'), (9, 7, 'Ukraine_national_football_team'), (22, 16, 'Northern_Ireland_national_football_team'), (153, 8, 'Europe'), (82, 7, 'Ukraine_national_football_team'), (42, 9, 'FIFA_World_Cup'), (136, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(75, 3, 'Mustafa_Kemal_Atatürk')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Jerzy Urban']
response in server.py code:
 [(227, 6, 'Poland'), (354, 9, 'Stockholm'), (488, 6, 'Poland'), (316, 11, 'Jerzy_Urban'), (891, 10, 'Paris_Club'), (429, 24, 'Foreign_Policy_Institute'), (365, 5, 'Jerzy_Urban'), (1493, 5, 'Jerzy_Urban')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(45, 7, 'Chicago'), (408, 7, 'Chicago'), (0, 4, 'Chicago_Board_of_Trade'), (371, 11, 'Minneapolis'), (359, 7, 'Chicago'), (430, 9, 'St._Louis'), (187, 22, 'Chicago_Board_of_Trade'), (306, 9, 'St._Louis'), (289, 7, 'Chicago'), (237, 7, 'Chicago'), (249, 9, 'St._Louis'), (456, 6, 'Toledo,_Ohio')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(28, 14, 'Hurricane_Earl_(1998)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(12, 7, 'Cozumel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['LYNAGH', 'DWYER', 'Michael Lynagh', 'Bob Dwyer', 'Philippe Sella', 'Kyran Bracken', 'Laurent Cabannes', 'Laurent Benezech', 'Will Carling']
response in server.py code:
 [(61, 6, 'London'), (272, 6, 'Michael_Lynagh'), (578, 6, 'Michael_Lynagh'), (656, 13, 'Kyran_Bracken'), (102, 14, 'Michael_Lynagh'), (14, 6, 'Michael_Lynagh'), (501, 6, 'London'), (217, 9, 'Bob_Dwyer'), (864, 12, 'Will_Carling'), (756, 16, 'Laurent_Bénézech'), (1194, 5, 'London_Wasps'), (679, 6, 'France'), (514, 6, 'France'), (528, 14, 'Philippe_Sella'), (0, 11, 'Rugby_union'), (86, 7, 'Australia_national_rugby_union_team'), (137, 7, 'England'), (376, 8, 'Saracens_F.C.'), (735, 16, 'Laurent_Cabannes'), (700, 10, 'Harlequin_F.C.'), (1049, 20, 'Rugby_Football_Union'), (829, 10, 'Gloucester_Rugby'), (1145, 6, 'Orrell_R.U.F.C.'), (50, 9, 'Leicester'), (40, 5, 'Bob_Dwyer'), (1120, 4, 'Bath_Rugby'), (261, 9, 'Leicester_City_F.C.'), (1157, 11, 'Northampton_Saints'), (848, 7, 'England_national_football_team'), (1204, 7, 'Bristol'), (637, 7, 'England_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(164, 4, 'American_Civil_Liberties_Union')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(489, 4, 'Ford_Motor_Company'), (140, 4, 'Ford_Motor_Company'), (0, 13, 'Ford_Motor_Company')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Clinton', 'Clinton', 'Mike McCurry', 'Clinton']
response in server.py code:
 [(0, 7, 'Bill_Clinton'), (51, 10, 'Washington,_D.C.'), (83, 7, 'Bill_Clinton'), (439, 7, 'Bill_Clinton'), (399, 11, 'White_House'), (176, 11, 'White_House'), (421, 12, 'Mike_McCurry_(press_secretary)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(26, 2, 'Los_Angeles'), (10, 12, 'London_Evening_Standard')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(620, 5, 'Clyde_F.C.'), (36, 6, 'London'), (414, 9, 'East_Fife_F.C.'), (244, 12, 'St._Johnstone_F.C.'), (271, 9, 'St._Mirren_F.C.'), (523, 13, 'Stenhousemuir_F.C.'), (793, 5, 'Alloa_Athletic_F.C.'), (770, 8, 'Arbroath_F.C.'), (923, 11, 'Ross_County_F.C.'), (895, 13, 'East_Stirlingshire_F.C.'), (295, 13, 'Airdrieonians_F.C.'), (451, 10, 'Livingston_F.C.'), (193, 15, 'Greenock_Morton_F.C.'), (744, 11, 'Cowdenbeath_F.C.'), (574, 9, 'Stranraer_F.C.'), (640, 9, 'Dumbarton_F.C.'), (840, 8, 'Montrose_F.C.'), (369, 7, 'Partick_Thistle_F.C.'), (723, 6, 'Forfar_Athletic_F.C.'), (54, 8, 'Scotland'), (598, 7, 'Brechin_City_F.C.'), (9, 8, 'Scotland'), (345, 9, 'Clydebank_F.C.'), (813, 12, "Queen's_Park_F.C."), (223, 6, 'Dundee_F.C.'), (323, 7, 'Falkirk_F.C.'), (664, 7, 'Berwick_Rangers_F.C.'), (505, 3, 'Ayr_United_F.C.'), (863, 17, 'Inverness_Thistle_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Brandon Belt']
response in server.py code:
 [(21, 12, 'Brandon_Belt'), (0, 6, 'San_Francisco_Giants')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Ferruzzi']
response in server.py code:
 [(18, 5, 'Italy'), (417, 10, 'Edison_(company)'), (466, 10, 'Edison_(company)'), (709, 6, 'Europe'), (908, 10, 'Edison_(company)'), (925, 10, 'Edison_(company)'), (724, 3, 'United_States'), (1300, 10, 'Edison_(company)'), (1023, 10, 'Edison_(company)'), (514, 5, 'Milan'), (1270, 8, 'Marco_Ferruzzi')]
given spans fix. original text:  Action Performance to acquire firms. TEMPE, Ariz. 1996-12-06 Action Performance Cos Inc said Friday it has agreed to acquire Motorsport Traditions Ltd and Creative Marketing & Promotions Inc for about $ 13 million in cash and stock. The two firms to be acquired have about $ 25 million in annual revenues from the design, manufacture and sale and distribution of licensed motorsports products. The deal is expected to close by the end of the year subject to due diligence and other customary closing conditions.
original word:  Ariz. Ariz.
new split:  Ariz  and  .
[(0, 6), (7, 18), (19, 21), (22, 29), (30, 35), (35, 36), (37, 42), (42, 43), (44, 48), (48, 49)]
{0: 0, 35: 5, 19: 2, 48: 9, 37: 6, 22: 3, 7: 1, 42: 7, 44: 8, 30: 4}
{48: 8, 49: 9, 18: 1, 35: 4, 36: 5, 21: 2, 6: 0, 42: 6, 43: 7, 29: 3}
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(37, 5, 'Tempe,_Arizona'), (44, 4, 'Arizona')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(35, 6, 'London'), (873, 12, 'Chesterfield_F.C.'), (1784, 13, 'Leyton_Orient_F.C.'), (1039, 7, 'Watford_F.C.'), (1159, 10, 'Gillingham_F.C.'), (1682, 16, 'Cambridge_United_F.C.'), (853, 4, 'Bury_F.C.'), (53, 7, 'England'), (590, 6, 'Oxford_United_F.C.'), (540, 7, 'Reading_F.C.'), (828, 9, 'Brentford_F.C.'), (1905, 8, 'Rochdale_A.F.C.'), (1090, 12, 'Peterborough_United_F.C.'), (900, 8, 'Millwall_F.C.'), (1351, 7, 'Walsall_F.C.'), (1566, 11, 'Scarborough_F.C.'), (1061, 14, 'Bristol_Rovers_F.C.'), (743, 8, 'Southend_United_F.C.'), (1013, 11, 'A.F.C._Bournemouth'), (1640, 6, 'Barnet_F.C.'), (1117, 7, 'Preston_North_End_F.C.'), (491, 9, 'Port_Vale_F.C.'), (767, 8, 'Charlton_Athletic_F.C.'), (1409, 6, 'Fulham_F.C.'), (9, 7, 'England'), (1281, 7, 'Wrexham_F.C.'), (1713, 10, 'Darlington_F.C.'), (948, 9, 'Blackpool_F.C.'), (1184, 12, 'Notts_County_F.C.'), (308, 19, 'Queens_Park_Rangers_F.C.'), (690, 16, 'Sheffield_United_F.C.'), (803, 8, 'Plymouth_Argyle_F.C.'), (669, 6, 'Oldham_Athletic_A.F.C.'), (287, 6, 'Bolton_Wanderers_F.C.'), (198, 5, 'Stoke_City_F.C.'), (1259, 7, 'Wycombe_Wanderers_F.C.'), (721, 7, 'Grimsby_Town_F.C.'), (1518, 10, 'Scunthorpe_United_F.C.'), (1661, 6, 'Exeter_City_F.C.'), (415, 10, 'Portsmouth_F.C.'), (641, 13, 'West_Bromwich_Albion_F.C.'), (1592, 11, 'Northampton_Town_F.C.'), (1835, 8, 'Hereford_United_F.C.'), (264, 8, 'Tranmere_Rovers_F.C.'), (923, 10, 'Shrewsbury_Town_F.C.'), (1303, 9, 'Stockport_County_F.C.'), (1880, 10, 'Colchester_United_F.C.'), (1449, 10, 'Hartlepool_United_F.C.'), (515, 10, 'Birmingham_City_F.C.'), (1812, 8, 'Brighton_&_Hove_Albion_F.C.'), (563, 12, 'Huddersfield_Town_F.C.'), (1238, 5, 'Luton_Town_F.C.'), (342, 13, 'Wolverhampton_Wanderers_F.C.'), (1738, 7, 'Chester_City_F.C.'), (991, 7, 'Burnley_F.C.'), (242, 7, 'Norwich_City_F.C.'), (1211, 12, 'Bristol_City_F.C.'), (1474, 7, 'Torquay_United_F.C.'), (219, 8, 'Barnsley_F.C.'), (1327, 9, 'Rotherham_United_F.C.'), (462, 14, 'Crystal_Palace_F.C.'), (440, 7, 'Ipswich_Town_F.C.'), (1139, 5, 'Crewe_Alexandra_F.C.'), (1496, 7, 'Cardiff_City_F.C.'), (1543, 8, 'Carlisle_United_F.C.'), (370, 7, 'Swindon_Town_F.C.'), (1928, 9, 'Mansfield_Town_F.C.'), (611, 15, 'Manchester_City_F.C.'), (392, 8, 'Bradford_City_A.F.C.'), (1858, 7, 'Swansea_City_A.F.C.'), (1760, 9, 'Doncaster_Rovers_F.C.'), (1388, 5, 'Wigan_Athletic_F.C.'), (1430, 4, 'Hull_City_A.F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(37, 20, 'Education_Bureau')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(507, 21, 'London_Metal_Exchange'), (432, 33, 'International_Chamber_of_Commerce')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(93, 7, 'United_States'), (63, 5, 'Cisco_Systems'), (55, 4, 'Border_Gateway_Protocol'), (46, 4, 'Border_Gateway_Protocol'), (73, 7, 'Juniper')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Cornwell', 'Rieck']
response in server.py code:
 [(117, 13, 'United_States'), (262, 13, 'United_States'), (1291, 11, 'Rottweiler'), (1550, 8, 'Doberman_Pinscher'), (33, 8, 'United_States'), (546, 4, 'Ohio'), (47, 7, 'Chicago'), (1567, 11, 'Rottweiler'), (536, 8, 'Columbus,_Ohio'), (1304, 16, 'German_Shepherd'), (1342, 10, 'Dalmatian_(dog)'), (1322, 15, 'Cocker_Spaniel'), (583, 39, 'American_Veterinary_Medical_Association'), (1599, 5, 'Matthew_Rieck')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Fiore']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(220, 12, 'St._Johnstone_F.C.'), (279, 5, 'Clyde_F.C.'), (197, 9, 'East_Fife_F.C.'), (482, 11, 'Ross_County_F.C.'), (153, 9, 'St._Mirren_F.C.'), (115, 15, 'Greenock_Morton_F.C.'), (427, 13, 'East_Stirlingshire_F.C.'), (463, 5, 'Alloa_Athletic_F.C.'), (350, 13, 'Stenhousemuir_F.C.'), (416, 8, 'Arbroath_F.C.'), (34, 7, 'Glasgow'), (235, 13, 'Airdrieonians_F.C.'), (402, 11, 'Cowdenbeath_F.C.'), (326, 10, 'Livingston_F.C.'), (471, 8, 'Montrose_F.C.'), (64, 8, 'Scotland'), (143, 7, 'Partick_Thistle_F.C.'), (9, 8, 'Scotland'), (366, 9, 'Stranraer_F.C.'), (176, 6, 'Dundee_F.C.'), (304, 9, 'Dumbarton_F.C.'), (511, 6, 'Forfar_Athletic_F.C.'), (209, 9, 'Clydebank_F.C.'), (496, 12, "Queen's_Park_F.C."), (133, 7, 'Falkirk_F.C.'), (316, 7, 'Brechin_City_F.C.'), (269, 7, 'Berwick_Rangers_F.C.'), (263, 3, 'Ayr_United_F.C.'), (443, 17, 'Inverness_Thistle_F.C.')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(29, 9, 'BranchOut'), (4, 8, 'Facebook'), (62, 5, 'ACCEL/Exchange')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(7, 4, 'Minnesota'), (46, 4, 'United_States_Department_of_Agriculture'), (206, 7, 'Chicago'), (142, 4, 'United_States_Department_of_Agriculture'), (52, 10, 'Des_Moines,_Iowa')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Lawton Chiles']
response in server.py code:
 [(140, 13, 'Lawton_Chiles'), (419, 6, 'Lawton_Chiles'), (4, 23, 'United_States_Senate_Committee_on_the_Budget')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = []
response in server.py code:
 [(833, 13, 'Leyton_Orient_F.C.'), (33, 6, 'London'), (719, 16, 'Cambridge_United_F.C.'), (548, 12, 'Chesterfield_F.C.'), (525, 7, 'Watford_F.C.'), (495, 4, 'Bury_F.C.'), (535, 10, 'Gillingham_F.C.'), (373, 19, 'Queens_Park_Rangers_F.C.'), (874, 8, 'Rochdale_A.F.C.'), (246, 6, 'Oxford_United_F.C.'), (234, 9, 'Port_Vale_F.C.'), (824, 6, 'Barnet_F.C.'), (144, 10, 'Portsmouth_F.C.'), (923, 6, 'Exeter_City_F.C.'), (885, 11, 'Scarborough_F.C.'), (604, 12, 'Notts_County_F.C.'), (265, 5, 'Stoke_City_F.C.'), (395, 6, 'Bolton_Wanderers_F.C.'), (427, 7, 'Wycombe_Wanderers_F.C.'), (437, 11, 'A.F.C._Bournemouth'), (662, 7, 'Walsall_F.C.'), (583, 8, 'Millwall_F.C.'), (255, 7, 'Reading_F.C.'), (466, 14, 'Bristol_Rovers_F.C.'), (748, 10, 'Colchester_United_F.C.'), (123, 8, 'Tranmere_Rovers_F.C.'), (761, 8, 'Hereford_United_F.C.'), (273, 8, 'Southend_United_F.C.'), (451, 12, 'Peterborough_United_F.C.'), (415, 9, 'Blackpool_F.C.'), (199, 13, 'Wolverhampton_Wanderers_F.C.'), (706, 10, 'Scunthorpe_United_F.C.'), (797, 6, 'Fulham_F.C.'), (784, 10, 'Darlington_F.C.'), (9, 7, 'England'), (672, 7, 'Wrexham_F.C.'), (626, 10, 'Shrewsbury_Town_F.C.'), (319, 8, 'Barnsley_F.C.'), (62, 7, 'England'), (189, 7, 'Norwich_City_F.C.'), (849, 10, 'Hartlepool_United_F.C.'), (899, 11, 'Northampton_Town_F.C.'), (284, 7, 'Swindon_Town_F.C.'), (347, 8, 'Charlton_Athletic_F.C.'), (134, 7, 'Grimsby_Town_F.C.'), (172, 14, 'Crystal_Palace_F.C.'), (862, 9, 'Mansfield_Town_F.C.'), (806, 8, 'Carlisle_United_F.C.'), (502, 12, 'Bristol_City_F.C.'), (913, 7, 'Torquay_United_F.C.'), (306, 10, 'Birmingham_City_F.C.'), (157, 12, 'Huddersfield_Town_F.C.'), (695, 8, 'Brighton_&_Hove_Albion_F.C.'), (563, 5, 'Luton_Town_F.C.'), (224, 7, 'Ipswich_Town_F.C.'), (215, 6, 'Oldham_Athletic_A.F.C.'), (571, 9, 'Rotherham_United_F.C.'), (817, 4, 'Hull_City_A.F.C.'), (940, 7, 'Chester_City_F.C.'), (594, 7, 'Burnley_F.C.'), (772, 9, 'Doncaster_Rovers_F.C.'), (483, 9, 'Stockport_County_F.C.'), (517, 5, 'Crewe_Alexandra_F.C.'), (738, 7, 'Cardiff_City_F.C.'), (112, 8, 'Bradford_City_A.F.C.'), (329, 15, 'Manchester_City_F.C.'), (932, 5, 'Wigan_Athletic_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 8
persons_mentions_seen = ['Stephen Fry']
response in server.py code:
 [(27, 11, 'Stephen_Fry'), (12, 6, 'Sky_3D')]
given spans fix. original text:  north20carolina20in20aolmsnearthlinknetscapesympat
original word:  north20carolina20in20aolmsnearthlinknetscapesympat north20carolina20in20aolmsnearthlinknetscapesympat
new split:  north20carolina  and  20in20aolmsnearthlinknetscapesympat
[(0, 15), (15, 50)]
{0: 0, 15: 1}
{50: 1, 15: 0}
given span: aol  new span: 
given span: earthlink  new span: 20in20aolmsnearthlinknetscapesympat
given span: netscape  new span: 20in20aolmsnearthlinknetscapesympat
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 [(30, 4, 'United_States_Department_of_Agriculture'), (36, 5, 'Omaha,_Nebraska'), (154, 4, 'United_States_Department_of_Agriculture'), (0, 8, 'Nebraska')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = ['Reagan', 'Reagan', 'Carter', 'Carter']
response in server.py code:
 [(862, 13, 'United_States'), (303, 6, 'Ronald_Reagan'), (145, 6, 'Ronald_Reagan'), (362, 6, 'Jimmy_Carter'), (401, 6, 'Jimmy_Carter'), (244, 8, 'United_States_Department_of_the_Treasury'), (2, 8, 'United_States_Department_of_the_Treasury')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = ['A. Fraser', 'S. Rhodes', 'J. Benjamin', 'C. Lewis', 'J. Ratcliffe', 'G. Hamilton', 'J. Russell']
response in server.py code:
 [(46, 6, 'London'), (1032, 5, 'Essex_County_Cricket_Club'), (377, 9, 'Glamorgan_County_Cricket_Club'), (704, 12, 'Warwickshire_County_Cricket_Club'), (357, 6, 'Durham_County_Cricket_Club'), (10, 27, 'County_Championship'), (485, 14, 'Worcestershire_County_Cricket_Club'), (517, 14, 'Worcestershire_County_Cricket_Club'), (745, 12, 'Warwickshire_County_Cricket_Club'), (682, 6, 'London'), (420, 9, 'Glamorgan_County_Cricket_Club'), (651, 14, 'Worcestershire_County_Cricket_Club'), (400, 6, 'Durham_County_Cricket_Club'), (342, 9, 'Glamorgan_County_Cricket_Club'), (672, 8, 'The_Oval'), (1063, 6, 'Sussex_County_Cricket_Club'), (441, 6, 'Durham_County_Cricket_Club'), (692, 6, 'Surrey_County_Cricket_Club'), (182, 9, 'Hampshire_County_Cricket_Club'), (285, 9, 'Middlesex_County_Cricket_Club'), (914, 12, 'Warwickshire_County_Cricket_Club'), (469, 10, 'Derbyshire_County_Cricket_Club'), (1083, 10, 'Lancashire_County_Cricket_Club'), (629, 10, 'Derbyshire_County_Cricket_Club'), (569, 9, 'Scott_Rhodes'), (896, 6, 'Surrey_County_Cricket_Club'), (604, 10, 'Derbyshire_County_Cricket_Club'), (1129, 15, 'Nottinghamshire_County_Cricket_Club'), (954, 9, 'Yorkshire_County_Cricket_Club'), (167, 9, 'Middlesex_County_Cricket_Club'), (306, 9, 'Hampshire_County_Cricket_Club'), (1252, 15, 'Gloucestershire_County_Cricket_Club'), (101, 7, 'England'), (205, 9, 'Middlesex_County_Cricket_Club'), (808, 6, 'Surrey_County_Cricket_Club'), (1183, 4, 'Kent_County_Cricket_Club'), (228, 9, 'Hampshire_County_Cricket_Club'), (154, 10, 'Portsmouth'), (322, 17, 'Chester-le-Street'), (1297, 16, 'Northamptonshire_County_Cricket_Club'), (933, 10, 'Headingley_Stadium'), (945, 5, 'Leeds'), (1242, 7, 'Bristol'), (1056, 4, 'Hove'), (1281, 10, 'J._Russell_(Essex_cricketer)'), (1111, 15, 'Royal_Tunbridge_Wells'), (454, 12, 'Chesterfield'), (251, 9, 'Andy_Fraser'), (771, 11, 'J._J._Benjamin'), (999, 11, 'George_Hamilton_(politician)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 [(31, 2, 'Los_Angeles')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'San_Francisco–Oakland_Bay_Bridge')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = ['Boutros Boutros-Ghali', 'Kofi Annan', 'Ahmedou Ould Abdallah', 'Amara Essy', 'Hamid Algabid', 'Joseph Garba']
response in server.py code:
 [(984, 7, 'Nigeria'), (197, 21, 'Boutros_Boutros-Ghali'), (485, 11, 'Ivory_Coast'), (34, 4, 'United_Nations'), (709, 5, 'Ghana'), (434, 4, 'United_Nations'), (411, 10, 'Mauritania'), (328, 5, 'Ghana'), (155, 4, 'United_Nations'), (692, 4, 'United_Nations'), (720, 11, 'Ivory_Coast'), (339, 4, 'United_Nations'), (593, 5, 'Niger'), (629, 38, 'Organisation_of_Islamic_Cooperation'), (826, 5, 'Italy'), (1396, 13, 'United_States'), (314, 10, 'Kofi_Annan'), (527, 21, 'United_Nations_General_Assembly'), (467, 10, 'Amara_Essy'), (386, 21, 'Ahmedou_Ould-Abdallah'), (995, 21, 'United_Nations_General_Assembly'), (748, 5, 'Niger'), (733, 10, 'Mauritania'), (576, 13, 'Hamid_Algabid'), (60, 14, 'United_Nations'), (968, 12, 'Joseph_Nanven_Garba'), (1115, 13, 'Boutros_Boutros-Ghali'), (784, 16, 'United_Nations_Security_Council'), (457, 7, 'Burundi'), (1168, 8, 'Africa'), (1872, 13, 'Boutros_Boutros-Ghali'), (1471, 16, 'United_Nations_Security_Council'), (91, 7, 'Africa'), (1726, 16, 'United_Nations_Security_Council'), (1527, 7, 'Africa'), (5, 8, 'Africa'), (1831, 16, 'United_Nations_General_Assembly')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = ['Reynolds', 'Reynolds', 'Reynolds', 'Reynolds']
response in server.py code:
 [(84, 7, 'Detroit'), (61, 19, 'United_States_district_court'), (0, 21, 'Reynolds_and_Reynolds'), (586, 8, 'Advanced_Telecommunication_Modules_Ltd'), (658, 8, 'Advanced_Telecommunication_Modules_Ltd')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = ['Alex Zanardi', 'Michael Andretti', 'Bobby Rahal', 'Bryan Herta', 'Jimmy Vasser', 'Paul Tracy', 'Al Unser', 'Andre Ribeiro', 'Mauricio Gugelmin', 'Gil de Ferran']
response in server.py code:
 [(254, 12, 'Alex_Zanardi'), (268, 5, 'Italy'), (602, 4, 'United_States'), (347, 4, 'United_States'), (437, 11, 'Bryan_Herta'), (397, 4, 'United_States'), (504, 4, 'United_States'), (450, 4, 'United_States'), (536, 10, 'Paul_Tracy'), (548, 6, 'Canada'), (384, 11, 'Bobby_Rahal'), (656, 6, 'Brazil'), (490, 12, 'Jimmy_Vasser'), (706, 6, 'Brazil'), (764, 6, 'Brazil'), (749, 13, 'Gil_de_Ferran'), (329, 16, 'Michael_Andretti'), (589, 8, 'Al_Unser'), (641, 13, 'André_Ribeiro'), (687, 17, 'Maurício_Gugelmin'), (62, 9, 'Vancouver'), (48, 7, 'American_Championship_car_racing'), (120, 9, 'Vancouver'), (130, 7, 'IndyCar'), (38, 9, 'Vancouver')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'Seattle')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = ['Brad Pitt', 'Jennifer Aniston']
response in server.py code:
 [(85, 9, 'Brad_Pitt'), (100, 16, 'Jennifer_Aniston')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Spain'), (48, 6, 'Madrid'), (611, 5, 'Spain'), (229, 5, 'Spain'), (66, 7, 'Spain'), (322, 8, 'Pamplona'), (424, 3, 'ETA'), (362, 14, 'Batasuna'), (400, 6, 'Basque_Country_(autonomous_community)'), (206, 6, 'Basque_Country_(autonomous_community)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 [(113, 3, 'Ultimate_Fighting_Championship')]
given spans fix. original text:  National Guardian Corp said it has acquired a number of security services companies recently, with aggregate revenues of about 3,500,000 dlrs, for an aggregate cost of about 2,700,000 dlrs. It said it acquired guard service companies C.S.C. Security Gaurd Service of Paramus, N.J., from Cartel Security Consultants Inc, the Guard Services Division of Security Services of America of Wayne, N.J., Capital Investigations and Protective Agency of Hackensack, N.J., and Meyer Detective Agency Inc of National Park, N.J. The company said it bought alarm service operations Certified Security Services Inc of Key West, Fla., Custom Security Services of Myrtle Beach, S.C., A-T-E Security Group Inc of Houston and the Louisville, Kent and Nashville, Tenn, offices of Wells Fargo Alarm Services.
original word:  N.J. N.J.
new split:  N.J  and  .
[(0, 8), (9, 17), (18, 22), (23, 27), (28, 30), (31, 34), (35, 43), (44, 45), (46, 52), (53, 55), (56, 64), (65, 73), (74, 83), (84, 92), (92, 93), (94, 98), (99, 108), (109, 117), (118, 120), (121, 126), (127, 136), (137, 141), (141, 142), (143, 146), (147, 149), (150, 159), (160, 164), (165, 167), (168, 173), (174, 183), (184, 188), (188, 189), (190, 192), (193, 197), (198, 200), (201, 209), (210, 215), (216, 223), (224, 233), (234, 239), (239, 240), (241, 249), (250, 255), (256, 263), (264, 266), (267, 274), (274, 275), (276, 279), (279, 280)]
{0: 0, 256: 43, 193: 33, 264: 44, 9: 1, 267: 45, 141: 22, 143: 23, 18: 2, 147: 24, 276: 47, 46: 8, 150: 25, 23: 3, 28: 4, 31: 5, 160: 26, 35: 6, 165: 27, 168: 28, 274: 46, 44: 7, 174: 29, 53: 9, 137: 21, 184: 30, 188: 31, 190: 32, 279: 48, 65: 11, 198: 34, 201: 35, 74: 12, 56: 10, 210: 36, 84: 13, 216: 37, 92: 14, 94: 15, 224: 38, 99: 16, 234: 39, 109: 17, 239: 40, 241: 41, 118: 18, 121: 19, 250: 42, 127: 20}
{192: 32, 263: 43, 8: 0, 266: 44, 141: 21, 142: 22, 173: 28, 17: 1, 146: 23, 275: 46, 149: 24, 22: 2, 279: 47, 280: 48, 27: 3, 30: 4, 159: 25, 34: 5, 164: 26, 167: 27, 43: 6, 45: 7, 136: 20, 52: 8, 183: 29, 188: 30, 189: 31, 64: 10, 197: 33, 200: 34, 73: 11, 55: 9, 209: 35, 83: 12, 215: 36, 92: 13, 93: 14, 223: 37, 98: 15, 233: 38, 108: 16, 274: 45, 239: 39, 240: 40, 117: 17, 120: 18, 249: 41, 126: 19, 255: 42}
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 [(613, 4, 'Florida'), (456, 4, 'New_Jersey'), (276, 3, 'New_Jersey'), (390, 4, 'New_Jersey'), (695, 7, 'Houston'), (647, 12, 'Myrtle_Beach,_South_Carolina'), (743, 4, 'Tennessee'), (267, 7, 'Ridgewood,_New_Jersey'), (661, 4, 'South_Carolina'), (444, 10, 'Hackensack,_New_Jersey'), (603, 8, 'Key_West'), (711, 10, 'Louisville,_Kentucky'), (732, 9, 'Nashville,_Tennessee'), (723, 4, 'Kent')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = ['Aunger', 'Paul Peschisolido']
response in server.py code:
 [(242, 17, 'Paul_Peschisolido'), (56, 8, 'Edmonton'), (218, 6, 'Geoff_Aunger'), (88, 6, 'Panama_national_football_team'), (21, 6, 'Panama_national_football_team'), (290, 6, 'Panama_national_football_team'), (123, 8, 'CONCACAF'), (178, 9, 'FIFA_World_Cup'), (35, 9, 'FIFA_World_Cup'), (209, 6, "Canada_men's_national_soccer_team"), (9, 6, "Canada_men's_national_soccer_team"), (76, 6, "Canada_men's_national_soccer_team")]
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = []
response in server.py code:
 [(13, 8, 'New_York_City'), (36, 10, 'Blakehurst,_New_South_Wales')]
self.special_words_assertion_errors = 0
gm_idx_errors = 14
persons_mentions_seen = ['Mussolini', 'Alessandra Mussolini', 'Benito Mussolini', 'Gianfranco Fini', 'Giuseppe Tatarella', 'Sophia Loren']
response in server.py code:
 [(110, 5, 'Italy'), (135, 16, 'Benito_Mussolini'), (524, 9, 'Benito_Mussolini'), (51, 4, 'Rome'), (513, 3, 'RAI'), (954, 9, 'La_Stampa'), (0, 9, 'Benito_Mussolini'), (67, 20, 'Alessandra_Mussolini'), (913, 9, 'Benito_Mussolini'), (841, 12, 'Sophia_Loren'), (674, 9, 'Benito_Mussolini'), (337, 15, 'Gianfranco_Fini'), (564, 18, 'Giuseppe_Tatarella'), (199, 17, 'National_Alliance_(Italy)'), (1131, 13, 'World_War_II'), (491, 4, 'Gianfranco_Fini'), (603, 19, 'Chamber_of_Deputies_(Italy)'), (1074, 15, 'Italian_Social_Movement'), (218, 2, 'National_Alliance_(Italy)'), (327, 2, 'National_Alliance_(Italy)'), (940, 7, 'Chamber_of_Deputies_(Italy)'), (584, 2, 'National_Alliance_(Italy)'), (867, 2, 'National_Alliance_(Italy)'), (1000, 2, 'National_Alliance_(Italy)')]
given span: J.P. Stevens and Co Inc   new span: J.P. Stevens and Co Inc
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Asher Edelman', 'Edward Johnson']
response in server.py code:
 [(3213, 10, 'Cannon_Mills'), (2680, 7, 'Asher_Edelman'), (323, 13, 'Asher_Edelman'), (2802, 7, 'Edelman_(firm)'), (430, 7, 'Edelman_(firm)'), (526, 7, 'Asher_Edelman'), (3116, 12, 'WestPoint_Home'), (760, 7, 'Edelman_(firm)'), (255, 10, 'Burlington,_Vermont'), (479, 10, 'Burlington,_Vermont'), (931, 8, 'Dominion'), (1396, 10, 'Burlington,_Vermont'), (1888, 10, 'Burlington,_Vermont'), (588, 8, 'Dominion'), (1039, 14, 'Avondale_Mill'), (877, 8, 'Dominion'), (442, 8, 'Dominion'), (772, 8, 'Dominion'), (3104, 10, 'Burlington,_Vermont'), (1139, 8, 'Dominion'), (1007, 8, 'Dominion_Resources'), (805, 10, 'Burlington,_Vermont'), (2344, 10, 'Burlington,_Vermont'), (628, 10, 'Burlington,_Vermont'), (2378, 14, 'Edward_Johnson_(tenor)'), (1485, 10, 'Burlington,_Vermont'), (1277, 10, 'Burlington,_Vermont')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Joost van der Westhuizen', 'Andre Joubert', 'Walter Little', 'Justin Marshall', 'Andrew Mehrtens', 'Henry Honiball', 'Andrew Mehrtens', 'Van der Westhuizen', 'Sean Fitzpatrick', 'Van der Westhuizen', 'Venter', 'Walter Little', 'Justin Marshall', 'Andre Joubert', 'Japie Mulder', 'Joel Stransky', 'Henry Honiball', 'Joost van der Westhuizen', 'Gary Teichmann', 'Mark Andrews', 'Fritz van Heerden', 'Kobus Wiese', 'Marius Hurter', 'James Dalton', 'Garry Pagel', 'Christian Cullen', 'Alama Ieremia', 'Jeff Wilson', 'Walter Little', 'Frank Bunce', 'Andrew Mehrtens', 'Justin Marshall', 'Zinzan Brooke', 'Josh Kronfeld', 'Michael Jones', 'Glenn Taylor', 'Robin Brooke', 'Ian Jones', 'Olo Brown', 'Sean Fitzpatrick', 'Craig Dowd']
response in server.py code:
 [(1437, 15, 'Andrew_Mehrtens'), (1979, 7, 'André_Joubert'), (878, 13, 'André_Joubert'), (1277, 15, 'Andrew_Mehrtens'), (2420, 7, 'André_Joubert'), (2028, 16, 'Sean_Fitzpatrick'), (3379, 13, 'Zinzan_Brooke'), (1841, 7, 'André_Joubert'), (1956, 8, 'Henry_Honiball'), (2844, 12, 'Japie_Mulder'), (1734, 7, 'André_Joubert'), (2936, 14, 'Henry_Honiball'), (2011, 9, 'New_Zealand_national_rugby_union_team'), (2805, 13, 'André_Joubert'), (3503, 16, 'Sean_Fitzpatrick'), (1355, 14, 'Henry_Honiball'), (3217, 16, 'Christian_Cullen'), (14, 10, 'South_Africa_national_rugby_union_team'), (2161, 7, 'André_Joubert'), (3260, 11, 'Jeff_Wilson_(sportsman)'), (1109, 15, 'Justin_Marshall'), (2956, 24, 'Joost_van_der_Westhuizen'), (2987, 14, 'Gary_Teichmann'), (3336, 15, 'Andrew_Mehrtens'), (3298, 11, 'Frank_Bunce'), (668, 24, 'Joost_van_der_Westhuizen'), (39, 9, 'New_Zealand_national_rugby_union_team'), (3148, 12, 'James_Dalton_(rugby_player)'), (2673, 15, 'Justin_Marshall'), (1527, 8, 'Andrew_Mehrtens'), (3398, 13, 'Josh_Kronfeld'), (3488, 9, 'Olo_Brown'), (2617, 8, 'Andrew_Mehrtens'), (3455, 12, 'Robin_Brooke'), (599, 9, 'New_Zealand_national_rugby_union_team'), (2345, 9, 'New_Zealand_national_rugby_union_team'), (3278, 13, 'Walter_Little_(rugby_player)'), (1016, 10, 'New_Zealand_national_rugby_union_team'), (1660, 10, 'South_Africa_national_rugby_union_team'), (2858, 13, 'Joel_Stransky'), (245, 10, 'Ellis_Park_Stadium'), (1381, 10, 'South_Africa_national_rugby_union_team'), (1080, 13, 'Walter_Little_(rugby_player)'), (3357, 15, 'Justin_Marshall'), (2259, 10, 'South_Africa_national_rugby_union_team'), (2537, 10, 'New_Zealand_national_rugby_union_team'), (3070, 12, 'Mark_Andrews_(rugby_player)'), (3316, 12, 'Glen_Osborne'), (3417, 13, 'Michael_Jones_(rugby_union)'), (3112, 11, 'Kobus_Wiese'), (2457, 10, 'South_Africa_national_rugby_union_team'), (3535, 10, 'Craig_Dowd'), (3129, 13, 'Marius_Hurter'), (71, 12, 'Johannesburg'), (3084, 17, 'Fritz_van_Heerden'), (3235, 13, 'Alama_Ieremia'), (179, 10, 'New_Zealand_national_rugby_union_team'), (3473, 9, 'Ian_Jones_(rugby_union)'), (627, 13, 'South_Africa'), (3180, 11, 'Garry_Pagel'), (2591, 13, 'Walter_Little_(rugby_player)'), (647, 9, 'South_Africa_national_rugby_union_team'), (2785, 12, 'South_Africa_national_rugby_union_team'), (0, 11, 'Rugby_union'), (513, 11, 'New_Zealand_national_rugby_union_team'), (340, 11, 'New_Zealand_national_rugby_union_team'), (2385, 6, 'Brendan_Venter'), (3198, 11, 'New_Zealand_national_rugby_union_team'), (3432, 12, 'Glenn_Taylor'), (95, 12, 'South_Africa_national_rugby_union_team'), (2305, 18, 'Johann_van_der_Westhuizen'), (1899, 18, 'Johann_van_der_Westhuizen'), (1865, 5, 'Wales')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(10, 10, 'New_Jersey')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Saint Nicholas']
response in server.py code:
 [(52, 7, 'Germany'), (123, 6, 'Germany'), (0, 6, 'Germany'), (313, 6, 'Germany'), (289, 7, 'Hanover'), (43, 7, 'Hanover'), (7, 5, 'Santa_Claus'), (73, 11, 'Santa_Claus'), (371, 14, 'Saint_Nicholas')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'Led_Zeppelin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(19, 30, 'Athens_Regional_Medical_Center')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Joost van der Westhuizen', 'Andre Joubert', 'Henry Honiball', 'Sean Fitzpatrick', 'Walter Little', 'Justin Marshall', 'Andrew Mehrtens']
response in server.py code:
 [(371, 16, 'Sean_Fitzpatrick'), (294, 14, 'Henry_Honiball'), (435, 15, 'Andrew_Mehrtens'), (236, 24, 'Joost_van_der_Westhuizen'), (32, 10, 'New_Zealand_national_rugby_union_team'), (336, 7, 'André_Joubert'), (266, 13, 'André_Joubert'), (322, 8, 'Henry_Honiball'), (404, 15, 'Justin_Marshall'), (389, 13, 'Walter_Little_(rugby_player)'), (468, 8, 'Andrew_Mehrtens'), (50, 12, 'Johannesburg'), (179, 10, 'Ellis_Park_Stadium'), (92, 11, 'New_Zealand_national_rugby_union_team'), (349, 11, 'New_Zealand_national_rugby_union_team'), (478, 11, 'New_Zealand_national_rugby_union_team'), (0, 11, 'Rugby_union'), (14, 12, 'South_Africa_national_rugby_union_team'), (74, 12, 'South_Africa_national_rugby_union_team'), (213, 12, 'South_Africa_national_rugby_union_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Margaret Hamburg']
response in server.py code:
 [(76, 3, 'FDA_(trade_union)'), (93, 16, 'Margaret_Hamburg')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(259, 21, 'Africa_Cup_of_Nations'), (60, 10, 'Nouakchott'), (525, 5, 'Benin_national_football_team'), (82, 10, 'Mauritania'), (9, 10, 'Mauritania_national_football_team'), (289, 10, 'Mauritania_national_football_team'), (478, 14, 'North_Africa')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(245, 5, 'Salem,_Oregon'), (251, 3, 'Ore')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(6, 9, 'Cigarette'), (40, 8, 'Marlboro_(cigarette)'), (16, 8, 'Discounts_and_allowances')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(7, 10, 'Industry')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Hospital')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(150, 5, 'Italy'), (72, 7, 'Italy'), (0, 5, 'Italy'), (52, 4, 'Rome'), (328, 5, 'Milan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Stifel']
response in server.py code:
 [(454, 18, "Standard_&_Poor's"), (501, 6, 'Stifel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'Pennsylvania')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(30, 5, 'Benin_national_football_team'), (39, 19, 'Africa_Cup_of_Nations'), (196, 5, 'Benin_national_football_team'), (107, 5, 'Benin_national_football_team'), (9, 10, 'Mauritania_national_football_team'), (122, 19, 'Africa_Cup_of_Nations'), (60, 10, 'Nouakchott'), (82, 10, 'Mauritania_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(30, 30, 'West_Virginia_State_University')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(83, 6, 'Poland'), (542, 6, 'Poland'), (414, 6, 'Poland'), (4, 6, 'Poland'), (231, 6, 'Poland'), (931, 6, 'Poland'), (716, 6, 'Poland'), (617, 6, 'Poland'), (129, 6, 'Poland'), (465, 6, 'Poland'), (159, 19, 'European_Commission'), (40, 8, 'Brussels'), (535, 2, 'European_Union'), (64, 14, 'European_Union'), (0, 2, 'European_Union'), (407, 2, 'European_Union'), (1027, 6, 'Poland'), (199, 2, 'European_Union'), (378, 6, 'Europe'), (663, 10, 'European_Commission'), (1020, 2, 'European_Union')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Marvin Gaye']
response in server.py code:
 [(14, 11, 'Marvin_Gaye')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 21, 'FleetBoston_Financial'), (472, 15, 'FleetBoston_Financial'), (244, 10, 'Providence,_Rhode_Island')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(639, 7, 'FK_Sloboda_Tuzla'), (969, 7, 'FK_Sloboda_Tuzla'), (46, 8, 'Belgrade'), (680, 11, 'OFK_Beograd'), (164, 5, 'FK_Zemun'), (514, 5, 'FK_Zemun'), (740, 8, 'FK_Sutjeska_Nikšić'), (350, 8, 'Red_Star_Belgrade'), (702, 11, 'FK_Kikinda'), (915, 11, 'OFK_Beograd'), (182, 5, 'FK_Borac_Čačak'), (425, 9, 'FK_Vojvodina'), (844, 11, 'FK_Kikinda'), (172, 3, 'FK_Rad'), (607, 5, 'FK_Borac_Čačak'), (870, 8, 'FK_Sutjeska_Nikšić'), (240, 8, 'Red_Star_Belgrade'), (374, 8, 'FK_Partizan'), (251, 8, 'FK_Partizan'), (216, 9, 'FK_Vojvodina'), (77, 8, 'Yugoslavia'), (556, 9, 'FK_Budućnost_Podgorica'), (228, 9, 'FK_Budućnost_Podgorica'), (1067, 5, 'FK_Rudar_Pljevlja'), (694, 5, 'FK_Rudar_Pljevlja'), (469, 6, 'HNK_Hajduk_Split'), (140, 6, 'FK_Hajduk_Beograd'), (776, 7, 'FK_Spartak_Zlatibor_Voda'), (821, 6, 'FK_Obilić'), (716, 6, 'FK_Obilić'), (9, 8, 'Yugoslavia'), (751, 7, 'Loznica'), (991, 7, 'FK_Spartak_Zlatibor_Voda'), (893, 7, 'Loznica'), (449, 5, 'Bečej')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Gabor Vona']
response in server.py code:
 [(76, 6, 'Jobbik'), (93, 10, 'Gábor_Vona')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Suraj Bhan']
response in server.py code:
 [(110, 5, 'India'), (714, 6, 'India'), (19, 5, 'India'), (1184, 5, 'India'), (825, 6, 'India'), (890, 6, 'Mumbai'), (863, 6, 'Islam'), (48, 9, 'New_Delhi'), (554, 3, 'Bharatiya_Janata_Party'), (329, 3, 'Bharatiya_Janata_Party'), (305, 22, 'Bharatiya_Janata_Party'), (615, 10, 'Suraj_Bhan'), (1144, 3, 'Bharatiya_Janata_Party'), (981, 3, 'Bharatiya_Janata_Party'), (253, 5, 'Hindu'), (729, 7, 'Ayodhya'), (287, 5, 'Hindu'), (1114, 4, 'Rama'), (1068, 6, 'Hindu'), (0, 5, 'Hindu'), (69, 5, 'Hindu'), (1002, 5, 'Hindu')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(32, 34, 'U.S._Securities_and_Exchange_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(10, 6, 'Laptop')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Chat_room')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['GASCOIGNE', 'Paul Gascoigne', 'Paul Ince', 'Glenn Hoddle']
response in server.py code:
 [(115, 14, 'Paul_Gascoigne'), (195, 9, 'Paul_Ince'), (417, 9, 'Paul_Gascoigne'), (25, 9, 'Paul_Gascoigne'), (333, 12, 'Glenn_Hoddle'), (591, 6, 'Glenn_Hoddle'), (517, 11, 'Inter_Milan'), (9, 4, 'Paul_Ince'), (260, 4, 'Paul_Ince'), (321, 8, 'Chișinău'), (51, 8, 'Chișinău'), (251, 7, 'Moldova'), (687, 7, 'Moldova_national_football_team'), (61, 7, 'Moldova'), (348, 7, 'England_national_football_team'), (674, 7, 'England_national_football_team'), (299, 10, 'Republican_Party_(United_States)'), (700, 9, 'FIFA_World_Cup'), (80, 7, 'England_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 15, 'Gander_Mountain')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(70, 5, 'India'), (49, 9, 'New_Delhi'), (0, 6, 'India')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(17, 6, 'Eragon_(film)'), (0, 11, 'Video_clip')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Salt_Lake_County,_Utah'), (10, 7, 'Surgery')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Onno Ruding']
response in server.py code:
 [(496, 11, 'Onno_Ruding'), (925, 16, 'Amsterdam_Stock_Exchange')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(175, 5, 'Italy'), (193, 6, 'Russia'), (48, 8, 'Belgrade'), (241, 7, 'Germany'), (263, 10, 'Yugoslavia'), (253, 8, 'Red_Star_Belgrade'), (165, 8, 'Treviso_Basket'), (235, 4, 'Alba,_Piedmont'), (185, 6, 'FC_Dinamo_București')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Kevin Youkilis']
response in server.py code:
 [(32, 14, 'Kevin_Youkilis'), (0, 17, 'Chicago_White_Sox')]
given spans fix. original text:  LUXEMBOURG CHRISTMAS MARKET GOES ON WORLD WIDE WEB. BRUSSELS 1996-12-06 Luxembourg's traditional Christmas market, which starts on Saturday and runs to December 24, has taken to the world wide web as a way of publicising its activities. The web site (http://www.pt.lu/infoweb/kreschtmaart) gives details of the market's concert programme as well as its various retailers.-- Brussels Newsroom+32 2 287 6810, Fax+32 2 230 7710
original word:  Newsroom+32 Newsroom+32
new split:  Newsroom  and  +32
[(0, 10), (11, 20), (21, 27), (28, 32), (33, 35), (36, 41), (42, 46), (47, 50), (50, 51), (52, 60), (61, 71), (72, 82), (82, 84), (85, 96), (97, 106), (107, 113), (113, 114), (115, 120), (121, 127), (128, 130), (131, 139), (140, 143), (144, 148), (149, 151), (152, 160), (161, 163), (163, 164), (165, 168), (169, 174), (175, 177), (178, 181), (182, 187), (188, 192), (193, 196), (197, 199), (200, 201), (202, 205), (206, 208), (209, 220), (221, 224), (225, 235), (235, 236), (237, 240), (241, 244), (245, 249), (250, 251), (251, 255), (255, 256), (256, 288), (288, 289), (290, 295), (296, 303), (304, 306), (307, 310), (311, 317), (317, 319), (320, 327), (328, 337), (338, 340), (341, 345), (346, 348), (349, 352), (353, 360), (361, 371), (371, 373), (374, 382), (383, 391), (391, 394)]
{0: 0, 128: 19, 131: 20, 328: 57, 391: 67, 353: 62, 11: 1, 140: 21, 256: 48, 144: 22, 107: 15, 149: 23, 152: 24, 47: 7, 28: 3, 341: 59, 288: 49, 33: 4, 290: 50, 163: 26, 36: 5, 165: 27, 241: 43, 296: 51, 169: 28, 42: 6, 338: 58, 50: 8, 175: 29, 304: 52, 200: 35, 178: 30, 307: 53, 52: 9, 317: 55, 182: 31, 311: 54, 371: 64, 188: 32, 61: 10, 320: 56, 193: 33, 197: 34, 383: 66, 225: 40, 72: 11, 202: 36, 206: 37, 209: 38, 82: 12, 85: 13, 346: 60, 221: 39, 97: 14, 374: 65, 161: 25, 235: 41, 237: 42, 255: 47, 113: 16, 115: 17, 245: 44, 349: 61, 361: 63, 121: 18, 250: 45, 251: 46, 21: 2}
{256: 47, 130: 19, 391: 66, 10: 0, 139: 20, 143: 21, 20: 1, 46: 6, 352: 61, 151: 23, 27: 2, 160: 24, 289: 49, 163: 25, 164: 26, 295: 50, 168: 27, 41: 5, 199: 34, 306: 52, 174: 28, 303: 51, 177: 29, 50: 7, 51: 8, 181: 30, 310: 53, 224: 39, 187: 31, 60: 9, 317: 54, 394: 67, 319: 55, 192: 32, 32: 3, 196: 33, 360: 62, 71: 10, 201: 35, 205: 36, 288: 48, 208: 37, 337: 57, 82: 11, 35: 4, 84: 12, 249: 44, 348: 60, 345: 59, 220: 38, 96: 13, 327: 56, 340: 58, 106: 14, 235: 40, 236: 41, 255: 46, 240: 42, 113: 15, 114: 16, 371: 63, 244: 43, 373: 64, 120: 17, 148: 22, 251: 45, 382: 65, 127: 18}
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(52, 8, 'Brussels'), (72, 10, 'Luxembourg'), (0, 10, 'Luxembourg')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(35, 13, 'Manufacturing')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(181, 5, 'Italy'), (199, 6, 'Russia'), (247, 7, 'Germany'), (54, 8, 'Belgrade'), (269, 10, 'Yugoslavia'), (259, 8, 'Red_Star_Belgrade'), (171, 8, 'Treviso_Basket'), (241, 4, 'Alba,_Piedmont')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(28, 6, 'London'), (86, 9, 'Hay_Point,_Queensland'), (363, 9, 'Kaohsiung'), (111, 9, 'Kaohsiung'), (0, 6, 'London'), (193, 11, 'China_Steel'), (353, 7, 'Dampier,_Western_Australia'), (421, 11, 'China_Steel'), (241, 9, 'Maracaibo'), (99, 9, 'Newcastle,_New_South_Wales'), (206, 13, 'Royal_Clipper'), (53, 11, 'Lantau_Peak')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(7, 4, 'Heat')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Soulja Boy']
response in server.py code:
 [(0, 10, 'Soulja_Boy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Viorel Moldovan', 'Dan Petrescu', 'Constantin Galca']
response in server.py code:
 [(253, 16, 'Constantin_Gâlcă'), (232, 12, 'Dan_Petrescu'), (56, 9, 'Bucharest'), (201, 15, 'Viorel_Moldovan'), (22, 9, 'Lithuania_national_football_team'), (9, 7, 'Romania_national_football_team'), (141, 8, 'Europe'), (90, 9, 'Lithuania_national_football_team'), (35, 9, 'FIFA_World_Cup'), (124, 9, 'FIFA_World_Cup'), (77, 7, 'Romania'), (191, 7, 'Romania')]
response in server.py code:
 []
given spans fix. original text:  UK bookmakers lengthen Conservative victory odds. LONDON 1996-12-06 UK bookmakers William Hill said on Friday they have lengthened the odds of a Conservative victory in the next general election from 9-4 to 5-2. William Hill said the odds were the longest they had been for six months. The Labour opposition are now 1-4 favourites, it said. The election must be held by May.-- London Newsroom+44 171 542-7768
original word:  Newsroom+44 Newsroom+44
new split:  Newsroom  and  +44
[(0, 2), (3, 13), (14, 22), (23, 35), (36, 43), (44, 48), (48, 49), (50, 56), (57, 67), (68, 70), (71, 81), (82, 89), (90, 94), (95, 99), (100, 102), (103, 109), (110, 114), (115, 119), (120, 130), (131, 134), (135, 139), (140, 142), (143, 144), (145, 157), (158, 165), (166, 168), (169, 172), (173, 177), (178, 185), (186, 194), (195, 199), (200, 203), (204, 206), (207, 210), (210, 211), (212, 219), (220, 224), (225, 229), (230, 233), (234, 238), (239, 243), (244, 247), (248, 255), (256, 260), (261, 264), (265, 269), (270, 273), (274, 277), (278, 284), (284, 285), (286, 289), (290, 296), (297, 307), (308, 311), (312, 315), (316, 319), (320, 330), (330, 331), (332, 334), (335, 339), (339, 340), (341, 344), (345, 353), (354, 358), (359, 361), (362, 366), (367, 369), (370, 374), (374, 376), (377, 383), (384, 392), (392, 395)]
{0: 0, 256: 43, 3: 1, 261: 44, 135: 20, 392: 71, 265: 45, 140: 21, 14: 2, 143: 22, 145: 23, 274: 47, 131: 19, 278: 48, 23: 3, 367: 66, 284: 49, 158: 24, 290: 51, 36: 4, 166: 25, 169: 26, 44: 5, 173: 27, 48: 6, 178: 28, 308: 53, 286: 50, 312: 54, 57: 8, 186: 29, 316: 55, 320: 56, 195: 30, 68: 9, 71: 10, 200: 31, 332: 58, 330: 57, 204: 32, 207: 33, 120: 18, 82: 11, 339: 60, 212: 35, 270: 46, 345: 62, 90: 12, 335: 59, 220: 36, 95: 13, 225: 37, 354: 63, 50: 7, 100: 14, 230: 38, 103: 15, 384: 70, 234: 39, 359: 64, 210: 34, 110: 16, 239: 40, 370: 67, 115: 17, 244: 41, 374: 68, 297: 52, 248: 42, 377: 69, 362: 65, 341: 61}
{2: 0, 260: 43, 358: 63, 134: 19, 264: 44, 139: 20, 369: 66, 13: 1, 142: 21, 144: 22, 273: 46, 277: 47, 22: 2, 392: 70, 284: 48, 157: 23, 289: 50, 35: 3, 165: 24, 49: 6, 168: 25, 43: 4, 172: 26, 285: 49, 48: 5, 177: 27, 307: 52, 311: 53, 56: 7, 185: 28, 315: 54, 319: 55, 339: 59, 194: 29, 67: 8, 70: 9, 199: 30, 330: 56, 203: 31, 395: 71, 206: 32, 269: 45, 81: 10, 210: 33, 211: 34, 340: 60, 334: 58, 344: 61, 89: 11, 331: 57, 219: 35, 361: 64, 94: 12, 130: 18, 224: 36, 353: 62, 99: 13, 229: 37, 102: 14, 233: 38, 109: 15, 238: 39, 296: 51, 114: 16, 243: 40, 366: 65, 374: 67, 119: 17, 376: 68, 383: 69, 247: 41, 255: 42}
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(50, 6, 'London'), (212, 12, 'William_Hill_(bookmaker)'), (82, 12, 'William_Hill_(bookmaker)'), (0, 2, 'United_Kingdom'), (68, 2, 'United_Kingdom'), (290, 6, 'Labour_Party_(UK)'), (145, 12, 'Conservative_Party_(UK)'), (23, 12, 'Conservative_Party_(UK)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(18, 5, 'Remix')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 11, 'Poolesville,_Maryland'), (12, 13, 'Middle_school')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Joaquin Phoenix', 'Andy Kaufman']
response in server.py code:
 [(3, 15, 'Joaquin_Phoenix'), (34, 12, 'Andy_Kaufman')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(63, 7, 'Yerevan'), (21, 8, 'Portugal_national_football_team'), (9, 7, 'Armenia_national_football_team'), (134, 8, 'Europe'), (42, 9, 'FIFA_World_Cup'), (82, 7, 'Armenia_national_football_team'), (94, 8, 'Portugal_national_football_team'), (117, 9, 'FIFA_World_Cup')]
given spans fix. original text:  Italy tops week of meagre bond returns - Salomon. LONDON 1996-12-06 High-flying Italy topped the league in a week of meagre returns on government bonds, Salomon Brothers said on Friday. In local currency terms, Italian BTPs offered returns of 0.85 percent in the week ended on Thursday, with fellow high-yielder Sweden close behind on 0.80 percent. The weekly government bond index rose 0.07 percent in local currency terms. France managed third place with 0.68 percent in the 16-nation world government bond index. Canada's were the worst performing bonds. They lost 2.21 percent, depressed by a wave of new Canadian supply. Returns on Treasuries were also in negative territory at minus 0.24 percent, the poorest result after Canada and British gilts which lost 0.28 percent. Australia was the only dollar-bloc country in the table to eke out a positive return, albeit a paltry 0.02 percent. German Bunds were not much better, offering returns of 0.05 percent, while Japanese government bonds managed a 0.38 percent gain. Spanish bonds, which had been top performers in Salomon Brothers ' league table for November as a whole, turned in a more subdued weekly performance with a return of only 0.27 percent. In U.S. dollar terms, Japan was the only country to give positive returns at 1.35 percent. France lost 0.37 percent, followed by Italy on minus 0.59 percent. The biggest losers in dollar terms were British gilts, which shed 3.41 percent, Canada with minus 3.03 percent and Australia at minus 1.54 percent. Salomon's bond index is calculated using all government bonds with over one year to maturity, weighted for market capitalisation. Only bonds freely available to institutional investors and with a certain minimum amount outstanding are included. Returns take account of price moves and accrued interest.-- Stephen Nisbet, International Bonds+44 171 6320
original word:  Bonds+44 Bonds+44
new split:  Bonds  and  +44
[(0, 5), (6, 10), (11, 15), (16, 18), (19, 25), (26, 30), (31, 38), (39, 40), (41, 48), (48, 49), (50, 56), (57, 67), (68, 79), (80, 85), (86, 92), (93, 96), (97, 103), (104, 106), (107, 108), (109, 113), (114, 116), (117, 123), (124, 131), (132, 134), (135, 145), (146, 151), (151, 152), (153, 160), (161, 169), (170, 174), (175, 177), (178, 184), (184, 185), (186, 188), (189, 194), (195, 203), (204, 209), (209, 210), (211, 218), (219, 223), (224, 231), (232, 239), (240, 242), (243, 247), (248, 255), (256, 258), (259, 262), (263, 267), (268, 273), (274, 276), (277, 285), (285, 286), (287, 291), (292, 298), (299, 311), (312, 318), (319, 324), (325, 331), (332, 334), (335, 339), (340, 347), (347, 348), (349, 352), (353, 359), (360, 370), (371, 375), (376, 381), (382, 386), (387, 391), (392, 399), (400, 402), (403, 408), (409, 417), (418, 423), (423, 424), (425, 431), (432, 439), (440, 445), (446, 451), (452, 456), (457, 461), (462, 469), (470, 472), (473, 476), (477, 486), (487, 492), (493, 503), (504, 508), (509, 514), (514, 515), (516, 522), (522, 524), (525, 529), (530, 533), (534, 539), (540, 550), (551, 556), (556, 557), (558, 562), (563, 567), (568, 572), (573, 580), (580, 581), (582, 591), (592, 594), (595, 596), (597, 601), (602, 604), (605, 608), (609, 617), (618, 624), (624, 625), (626, 633), (634, 636), (637, 647), (648, 652), (653, 657), (658, 660), (661, 669), (670, 679), (680, 682), (683, 688), (689, 693), (694, 701), (701, 702), (703, 706), (707, 714), (715, 721), (722, 727), (728, 734), (735, 738), (739, 746), (747, 752), (753, 758), (759, 763), (764, 768), (769, 776), (776, 777), (778, 787), (788, 791), (792, 795), (796, 800), (801, 812), (813, 820), (821, 823), (824, 827), (828, 833), (834, 836), (837, 840), (841, 844), (845, 846), (847, 855), (856, 862), (862, 863), (864, 870), (871, 872), (873, 879), (880, 884), (885, 892), (892, 893), (894, 900), (901, 906), (907, 911), (912, 915), (916, 920), (921, 927), (927, 928), (929, 937), (938, 945), (946, 948), (949, 953), (954, 961), (961, 962), (963, 968), (969, 977), (978, 988), (989, 994), (995, 1002), (1003, 1004), (1005, 1009), (1010, 1017), (1018, 1022), (1022, 1023), (1024, 1031), (1032, 1037), (1037, 1038), (1039, 1044), (1045, 1048), (1049, 1053), (1054, 1057), (1058, 1068), (1069, 1071), (1072, 1079), (1080, 1088), (1089, 1090), (1091, 1097), (1098, 1103), (1104, 1107), (1108, 1116), (1117, 1119), (1120, 1121), (1122, 1127), (1127, 1128), (1129, 1135), (1136, 1138), (1139, 1140), (1141, 1145), (1146, 1153), (1154, 1160), (1161, 1172), (1173, 1177), (1178, 1179), (1180, 1186), (1187, 1189), (1190, 1194), (1195, 1199), (1200, 1207), (1207, 1208), (1209, 1211), (1212, 1216), (1217, 1223), (1224, 1229), (1229, 1230), (1231, 1236), (1237, 1240), (1241, 1244), (1245, 1249), (1250, 1257), (1258, 1260), (1261, 1265), (1266, 1274), (1275, 1282), (1283, 1285), (1286, 1290), (1291, 1298), (1298, 1299), (1300, 1306), (1307, 1311), (1312, 1316), (1317, 1324), (1324, 1325), (1326, 1334), (1335, 1337), (1338, 1343), (1344, 1346), (1347, 1352), (1353, 1357), (1358, 1365), (1365, 1366), (1367, 1370), (1371, 1378), (1379, 1385), (1386, 1388), (1389, 1395), (1396, 1401), (1402, 1406), (1407, 1414), (1415, 1420), (1420, 1421), (1422, 1427), (1428, 1432), (1433, 1437), (1438, 1445), (1445, 1446), (1447, 1453), (1454, 1458), (1459, 1464), (1465, 1469), (1470, 1477), (1478, 1481), (1482, 1491), (1492, 1494), (1495, 1500), (1501, 1505), (1506, 1513), (1513, 1514), (1515, 1522), (1522, 1524), (1525, 1529), (1530, 1535), (1536, 1538), (1539, 1549), (1550, 1555), (1556, 1559), (1560, 1570), (1571, 1576), (1577, 1581), (1582, 1586), (1587, 1590), (1591, 1595), (1596, 1598), (1599, 1607), (1607, 1608), (1609, 1617), (1618, 1621), (1622, 1628), (1629, 1643), (1643, 1644), (1645, 1649), (1650, 1655), (1656, 1662), (1663, 1672), (1673, 1675), (1676, 1689), (1690, 1699), (1700, 1703), (1704, 1708), (1709, 1710), (1711, 1718), (1719, 1726), (1727, 1733), (1734, 1745), (1746, 1749), (1750, 1758), (1758, 1759), (1760, 1767), (1768, 1772), (1773, 1780), (1781, 1783), (1784, 1789), (1790, 1795), (1796, 1799), (1800, 1807), (1808, 1817), (1817, 1819), (1820, 1827), (1828, 1834), (1834, 1835), (1836, 1849), (1850, 1855), (1855, 1858)]
{0: 0, 1024: 183, 514: 89, 1195: 215, 516: 90, 1622: 295, 6: 1, 1032: 184, 522: 91, 11: 2, 525: 92, 1550: 282, 1039: 186, 16: 3, 1773: 317, 530: 93, 19: 4, 1556: 283, 1045: 187, 534: 94, 1560: 284, 1049: 188, 26: 5, 1711: 308, 540: 95, 1054: 189, 31: 6, 1433: 261, 1828: 326, 1058: 190, 1371: 250, 39: 7, 41: 8, 556: 97, 1069: 191, 558: 98, 605: 108, 48: 9, 1800: 322, 50: 10, 563: 99, 1536: 280, 1591: 289, 568: 100, 57: 11, 1746: 312, 1596: 290, 573: 101, 1599: 291, 1089: 194, 1091: 195, 68: 12, 582: 103, 609: 109, 1673: 302, 1609: 293, 1098: 196, 1146: 207, 1037: 185, 80: 13, 921: 165, 1618: 294, 595: 105, 1108: 198, 597: 106, 86: 14, 602: 107, 1245: 226, 93: 15, 1120: 200, 97: 16, 1122: 201, 1719: 309, 1127: 202, 104: 17, 1129: 203, 618: 110, 107: 18, 109: 19, 189: 34, 624: 111, 114: 20, 1139: 205, 117: 21, 1470: 268, 1656: 300, 1300: 236, 634: 113, 1727: 310, 124: 22, 637: 114, 1663: 301, 1709: 307, 1154: 208, 1643: 297, 132: 23, 135: 24, 648: 115, 1161: 209, 1676: 303, 653: 116, 1389: 253, 1539: 281, 1522: 277, 658: 117, 707: 126, 661: 118, 151: 26, 153: 27, 1178: 211, 1180: 212, 670: 119, 161: 28, 1187: 213, 1700: 305, 1190: 214, 680: 120, 551: 96, 170: 29, 683: 121, 626: 112, 175: 30, 1200: 216, 689: 122, 178: 31, 694: 123, 969: 174, 184: 32, 1209: 218, 186: 33, 1212: 219, 701: 124, 703: 125, 1217: 220, 195: 35, 1734: 311, 1224: 221, 715: 127, 204: 36, 1229: 222, 1231: 223, 209: 37, 722: 128, 211: 38, 1237: 224, 1750: 313, 728: 129, 1241: 225, 219: 39, 1136: 204, 1758: 314, 735: 130, 224: 40, 1690: 304, 1250: 227, 739: 131, 232: 41, 1258: 228, 747: 132, 1261: 229, 1396: 254, 240: 42, 753: 133, 400: 70, 243: 43, 894: 160, 759: 134, 248: 44, 1275: 231, 764: 135, 1790: 320, 1645: 298, 256: 45, 769: 136, 259: 46, 1796: 321, 1577: 286, 1286: 233, 263: 47, 776: 137, 1836: 328, 778: 138, 1291: 234, 268: 48, 1117: 199, 1808: 323, 274: 49, 1407: 256, 788: 139, 277: 50, 792: 140, 1817: 324, 1307: 237, 796: 141, 285: 51, 1629: 296, 287: 52, 1312: 238, 801: 142, 292: 53, 1317: 239, 1834: 327, 299: 54, 1324: 240, 813: 143, 1326: 241, 989: 176, 1587: 288, 821: 144, 1335: 242, 312: 55, 1850: 329, 1338: 243, 828: 146, 319: 56, 1344: 244, 1760: 315, 834: 147, 1347: 245, 325: 57, 841: 149, 332: 58, 845: 150, 1358: 247, 335: 59, 824: 145, 1283: 232, 340: 60, 1365: 248, 1367: 249, 856: 152, 347: 61, 349: 62, 862: 153, 864: 154, 353: 63, 1379: 251, 871: 155, 360: 64, 873: 156, 1386: 252, 146: 25, 880: 157, 1768: 316, 371: 65, 1298: 235, 885: 158, 376: 66, 1428: 260, 1402: 255, 1855: 330, 892: 159, 382: 67, 1173: 210, 1530: 279, 387: 68, 901: 161, 1820: 325, 1415: 257, 392: 69, 907: 162, 1420: 258, 1422: 259, 1005: 179, 912: 163, 403: 71, 916: 164, 1080: 193, 409: 72, 1650: 299, 580: 102, 1582: 287, 1207: 217, 1438: 262, 837: 148, 1104: 197, 929: 167, 418: 73, 1445: 263, 423: 74, 425: 75, 938: 168, 1607: 292, 1266: 230, 1454: 265, 432: 76, 946: 169, 1459: 266, 949: 170, 1353: 246, 440: 77, 1465: 267, 954: 171, 927: 166, 446: 78, 1515: 276, 961: 172, 963: 173, 452: 79, 1447: 264, 1478: 269, 1072: 192, 457: 80, 1482: 270, 1781: 318, 462: 81, 1784: 319, 978: 175, 1492: 271, 470: 82, 1495: 272, 473: 83, 847: 151, 477: 84, 1141: 206, 592: 104, 1506: 274, 995: 177, 1501: 273, 487: 85, 1513: 275, 1003: 178, 493: 86, 1704: 306, 1010: 180, 1571: 285, 1525: 278, 504: 87, 1018: 181, 509: 88, 1022: 182}
{514: 88, 515: 89, 5: 0, 1031: 183, 10: 1, 524: 91, 1037: 184, 1038: 185, 15: 2, 1524: 277, 529: 92, 18: 3, 1555: 282, 1044: 186, 533: 93, 1535: 279, 1048: 187, 25: 4, 539: 94, 1053: 188, 30: 5, 1057: 189, 1570: 284, 38: 6, 1514: 275, 40: 7, 604: 107, 556: 96, 557: 97, 1621: 294, 1071: 191, 48: 8, 49: 9, 562: 98, 1590: 288, 567: 99, 56: 10, 1595: 289, 572: 100, 522: 90, 1598: 290, 1858: 330, 1088: 193, 608: 108, 1090: 194, 67: 11, 580: 101, 581: 102, 1607: 291, 1608: 292, 1097: 195, 79: 12, 1208: 217, 594: 104, 1107: 197, 596: 105, 85: 13, 1145: 206, 601: 106, 1807: 322, 92: 14, 1759: 314, 1119: 199, 96: 15, 1121: 200, 1282: 231, 103: 16, 1128: 202, 617: 109, 106: 17, 1127: 201, 108: 18, 1135: 203, 624: 110, 625: 111, 1138: 204, 1299: 235, 116: 20, 1726: 309, 1655: 299, 633: 112, 123: 21, 636: 113, 1662: 300, 1153: 207, 131: 22, 1576: 285, 134: 23, 647: 114, 1160: 208, 1644: 297, 1559: 283, 652: 115, 194: 34, 657: 116, 660: 117, 151: 25, 152: 26, 1079: 192, 1179: 211, 669: 118, 1710: 307, 160: 27, 1186: 212, 1699: 304, 1189: 213, 113: 19, 169: 28, 682: 120, 1223: 220, 1708: 306, 174: 29, 1199: 215, 688: 121, 177: 30, 1116: 198, 693: 122, 1718: 308, 1207: 216, 184: 31, 185: 32, 1745: 311, 1211: 218, 188: 33, 701: 123, 702: 124, 1216: 219, 706: 125, 1643: 296, 1733: 310, 1140: 205, 714: 126, 203: 35, 1229: 221, 1230: 222, 1795: 320, 721: 127, 210: 37, 1827: 325, 1236: 223, 1749: 312, 823: 144, 727: 128, 1240: 224, 218: 38, 1244: 225, 734: 129, 223: 39, 1249: 226, 738: 130, 1437: 261, 911: 162, 550: 95, 209: 36, 1257: 227, 746: 131, 1260: 228, 1849: 328, 893: 159, 752: 132, 1265: 229, 242: 42, 1780: 317, 758: 133, 247: 43, 1274: 230, 763: 134, 1789: 319, 469: 81, 768: 135, 258: 45, 1703: 305, 1285: 232, 262: 46, 1799: 321, 776: 136, 777: 137, 1290: 233, 267: 47, 1581: 286, 273: 48, 1298: 234, 787: 138, 276: 49, 791: 139, 1538: 280, 1817: 323, 1306: 236, 795: 140, 285: 50, 286: 51, 1311: 237, 800: 141, 1649: 298, 1352: 245, 291: 52, 1316: 238, 145: 24, 298: 53, 1834: 326, 812: 142, 1325: 240, 1783: 318, 1672: 301, 1432: 260, 1819: 324, 820: 143, 1758: 313, 1334: 241, 311: 54, 1628: 295, 1337: 242, 827: 145, 318: 55, 1343: 243, 833: 146, 1346: 244, 1675: 302, 324: 56, 840: 148, 1835: 327, 331: 57, 844: 149, 1357: 246, 846: 150, 1068: 190, 339: 59, 1365: 247, 1366: 248, 855: 151, 1370: 249, 347: 60, 348: 61, 862: 152, 863: 153, 352: 62, 1378: 250, 870: 154, 359: 63, 872: 155, 1385: 251, 1103: 196, 231: 40, 1388: 252, 879: 156, 370: 64, 1395: 253, 884: 157, 375: 65, 1172: 209, 1855: 329, 892: 158, 381: 66, 1406: 255, 1586: 287, 386: 67, 900: 160, 1414: 256, 391: 68, 1004: 178, 906: 161, 1420: 257, 1421: 258, 399: 69, 408: 71, 402: 70, 915: 163, 968: 173, 1177: 210, 920: 164, 836: 147, 239: 41, 988: 175, 927: 165, 928: 166, 417: 72, 1445: 262, 1446: 263, 423: 73, 424: 74, 937: 167, 1453: 264, 431: 75, 945: 168, 1458: 265, 1324: 239, 948: 169, 439: 76, 1464: 266, 953: 170, 1549: 281, 445: 77, 1469: 267, 961: 171, 962: 172, 451: 78, 1477: 268, 456: 79, 1481: 269, 1767: 315, 461: 80, 977: 174, 1491: 270, 334: 58, 1494: 271, 1529: 278, 472: 82, 591: 103, 476: 83, 1401: 254, 1505: 273, 994: 176, 1772: 316, 486: 84, 1617: 293, 1513: 274, 1002: 177, 679: 119, 492: 85, 1500: 272, 1009: 179, 1522: 276, 1689: 303, 1427: 259, 503: 86, 1017: 180, 255: 44, 508: 87, 1194: 214, 1022: 181, 1023: 182}
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(1212, 4, 'United_States'), (50, 6, 'London'), (0, 5, 'Italy'), (609, 8, 'Canada'), (516, 6, 'Canada'), (211, 7, 'Italy'), (1338, 5, 'Italy'), (728, 6, 'Canada'), (80, 5, 'Italy'), (1231, 5, 'Japan'), (1447, 6, 'Canada'), (739, 7, 'United_Kingdom'), (1407, 7, 'United_Kingdom'), (1300, 6, 'France'), (969, 8, 'Japan'), (637, 10, 'United_States_Treasury_security'), (1482, 9, 'Australia'), (425, 6, 'France'), (894, 6, 'Germany'), (312, 6, 'Sweden'), (153, 16, 'Salomon_Brothers'), (778, 9, 'Australia'), (1072, 16, 'Salomon_Brothers'), (1024, 7, 'Spain'), (1515, 7, 'Salomon_Brothers'), (41, 7, 'Salomon_Brothers')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 11, 'Mississippi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Vidadi Rzayev']
response in server.py code:
 [(210, 13, 'Vidadi_Rzayev'), (61, 4, 'Baku'), (93, 11, 'Switzerland_national_football_team'), (25, 11, 'Switzerland_national_football_team'), (9, 10, 'Azerbaijan_national_football_team'), (150, 8, 'Europe'), (77, 10, 'Azerbaijan_national_football_team'), (40, 9, 'FIFA_World_Cup'), (133, 9, 'FIFA_World_Cup')]
response in server.py code:
 []
response in server.py code:
 []
given spans fix. original text:  OPEC basket price $ 24.20 on Thursday. LONDON 1996-12-06 The price of the OPEC basket of seven crudes stood at $ 24.20 a barrel on Thursday, against $ 23.47 on Wednesday, the OPECNA news agency said, quoting the OPEC secretariat. The basket comprises Algeria's Saharan Blend, Indonesia's Minas, Nigeria's Bonny Light, Saudi Arabia's Arabian Light, Dubai of the UAE, Venezuela's Tia Juana and Mexico's Isthmus.-- London Newsroom+44 171 542 7630
original word:  Isthmus. Isthmus.
new split:  Isthmus  and  .
[(0, 4), (5, 11), (12, 17), (18, 19), (20, 25), (26, 28), (29, 37), (37, 38), (39, 45), (46, 56), (57, 60), (61, 66), (67, 69), (70, 73), (74, 78), (79, 85), (86, 88), (89, 94), (95, 101), (102, 107), (108, 110), (111, 112), (113, 118), (119, 120), (121, 127), (128, 130), (131, 139), (139, 140), (141, 148), (149, 150), (151, 156), (157, 159), (160, 169), (169, 170), (171, 174), (175, 181), (182, 186), (187, 193), (194, 198), (198, 199), (200, 207), (208, 211), (212, 216), (217, 228), (228, 229), (230, 233), (234, 240), (241, 250), (251, 258), (258, 260), (261, 268), (269, 274), (274, 275), (276, 285), (285, 287), (288, 293), (293, 294), (295, 302), (302, 304), (305, 310), (311, 316), (316, 317), (318, 323), (324, 330), (330, 332), (333, 340), (341, 346), (346, 347), (348, 353), (354, 356), (357, 360), (361, 364), (364, 365), (366, 375), (375, 377), (378, 381), (382, 387), (388, 391), (392, 398), (398, 400), (401, 408), (408, 409)]
{0: 0, 128: 25, 258: 49, 131: 26, 388: 77, 5: 1, 392: 78, 364: 72, 139: 27, 12: 2, 141: 28, 398: 79, 375: 74, 401: 80, 18: 3, 20: 4, 149: 29, 333: 65, 151: 30, 408: 81, 26: 5, 29: 6, 261: 50, 160: 32, 198: 39, 39: 8, 169: 33, 171: 34, 330: 64, 46: 9, 175: 35, 293: 56, 182: 36, 311: 60, 57: 10, 187: 37, 316: 61, 61: 11, 318: 62, 288: 55, 194: 38, 67: 12, 324: 63, 70: 13, 200: 40, 74: 14, 241: 47, 305: 59, 79: 15, 208: 41, 378: 75, 212: 42, 341: 66, 86: 16, 89: 17, 346: 67, 348: 68, 37: 7, 95: 18, 354: 69, 269: 51, 228: 44, 230: 45, 102: 19, 357: 70, 361: 71, 234: 46, 295: 57, 108: 20, 274: 52, 366: 73, 111: 21, 157: 31, 113: 22, 302: 58, 285: 54, 119: 23, 121: 24, 217: 43, 251: 48, 382: 76, 276: 53}
{409: 81, 130: 25, 294: 56, 4: 0, 260: 49, 391: 77, 139: 26, 140: 27, 258: 48, 398: 78, 400: 79, 17: 2, 274: 51, 19: 3, 148: 28, 302: 57, 150: 29, 316: 60, 408: 80, 25: 4, 28: 5, 285: 53, 159: 31, 240: 46, 37: 6, 38: 7, 156: 30, 170: 33, 45: 8, 174: 34, 304: 58, 181: 35, 310: 59, 56: 9, 186: 36, 287: 54, 60: 10, 268: 50, 193: 37, 66: 11, 11: 1, 69: 12, 198: 38, 199: 39, 387: 76, 73: 13, 330: 63, 375: 73, 332: 64, 78: 14, 207: 40, 211: 41, 340: 65, 85: 15, 88: 16, 356: 69, 346: 66, 347: 67, 216: 42, 94: 17, 229: 44, 353: 68, 293: 55, 228: 43, 101: 18, 360: 70, 233: 45, 323: 62, 107: 19, 364: 71, 365: 72, 110: 20, 317: 61, 112: 21, 275: 52, 118: 22, 169: 32, 120: 23, 377: 74, 250: 47, 381: 75, 127: 24}
given spans fix. original text:  OPEC basket price $ 24.20 on Thursday. LONDON 1996-12-06 The price of the OPEC basket of seven crudes stood at $ 24.20 a barrel on Thursday, against $ 23.47 on Wednesday, the OPECNA news agency said, quoting the OPEC secretariat. The basket comprises Algeria's Saharan Blend, Indonesia's Minas, Nigeria's Bonny Light, Saudi Arabia's Arabian Light, Dubai of the UAE, Venezuela's Tia Juana and Mexico's Isthmus.-- London Newsroom+44 171 542 7630
original word:  Newsroom+44 Newsroom+44
new split:  Newsroom  and  +44
[(0, 4), (5, 11), (12, 17), (18, 19), (20, 25), (26, 28), (29, 37), (37, 38), (39, 45), (46, 56), (57, 60), (61, 66), (67, 69), (70, 73), (74, 78), (79, 85), (86, 88), (89, 94), (95, 101), (102, 107), (108, 110), (111, 112), (113, 118), (119, 120), (121, 127), (128, 130), (131, 139), (139, 140), (141, 148), (149, 150), (151, 156), (157, 159), (160, 169), (169, 170), (171, 174), (175, 181), (182, 186), (187, 193), (194, 198), (198, 199), (200, 207), (208, 211), (212, 216), (217, 228), (228, 229), (230, 233), (234, 240), (241, 250), (251, 258), (258, 260), (261, 268), (269, 274), (274, 275), (276, 285), (285, 287), (288, 293), (293, 294), (295, 302), (302, 304), (305, 310), (311, 316), (316, 317), (318, 323), (324, 330), (330, 332), (333, 340), (341, 346), (346, 347), (348, 353), (354, 356), (357, 360), (361, 364), (364, 365), (366, 375), (375, 377), (378, 381), (382, 387), (388, 391), (392, 398), (398, 400), (401, 408), (408, 409), (409, 411), (412, 418), (419, 427), (427, 430)]
{0: 0, 258: 49, 427: 85, 5: 1, 12: 2, 269: 51, 18: 3, 20: 4, 302: 58, 26: 5, 29: 6, 261: 50, 288: 55, 293: 56, 39: 8, 46: 9, 305: 59, 311: 60, 57: 10, 316: 61, 61: 11, 318: 62, 67: 12, 324: 63, 70: 13, 330: 64, 333: 65, 79: 15, 341: 66, 86: 16, 89: 17, 346: 67, 348: 68, 95: 18, 354: 69, 357: 70, 102: 19, 361: 71, 364: 72, 274: 52, 366: 73, 111: 21, 113: 22, 285: 54, 375: 74, 121: 24, 378: 75, 382: 76, 128: 25, 131: 26, 388: 77, 392: 78, 108: 20, 139: 27, 141: 28, 398: 79, 401: 80, 149: 29, 151: 30, 408: 81, 409: 82, 412: 83, 157: 31, 160: 32, 419: 84, 169: 33, 171: 34, 175: 35, 182: 36, 187: 37, 74: 14, 194: 38, 198: 39, 200: 40, 119: 23, 208: 41, 212: 42, 217: 43, 37: 7, 228: 44, 230: 45, 234: 46, 295: 57, 241: 47, 251: 48, 276: 53}
{258: 48, 4: 0, 11: 1, 268: 50, 17: 2, 274: 51, 19: 3, 430: 85, 260: 49, 28: 5, 285: 53, 287: 54, 37: 6, 294: 56, 45: 8, 302: 57, 304: 58, 310: 59, 56: 9, 316: 60, 317: 61, 66: 11, 323: 62, 69: 12, 73: 13, 330: 63, 332: 64, 78: 14, 340: 65, 85: 15, 88: 16, 346: 66, 347: 67, 94: 17, 229: 44, 353: 68, 356: 69, 101: 18, 360: 70, 60: 10, 107: 19, 364: 71, 365: 72, 110: 20, 112: 21, 275: 52, 118: 22, 375: 73, 120: 23, 377: 74, 381: 75, 127: 24, 130: 25, 387: 76, 391: 77, 139: 26, 140: 27, 398: 78, 400: 79, 148: 28, 150: 29, 25: 4, 408: 80, 409: 81, 411: 82, 156: 30, 159: 31, 418: 83, 169: 32, 170: 33, 427: 84, 174: 34, 181: 35, 186: 36, 193: 37, 198: 38, 199: 39, 207: 40, 211: 41, 216: 42, 293: 55, 228: 43, 38: 7, 233: 45, 240: 46, 250: 47}
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 4, 'OPEC'), (74, 4, 'OPEC'), (212, 4, 'OPEC'), (39, 6, 'London'), (392, 6, 'Mexico'), (318, 12, 'Saudi_Arabia'), (378, 9, 'Tijuana'), (361, 3, 'United_Arab_Emirates'), (366, 9, 'Venezuela'), (295, 7, 'Nigeria'), (348, 5, 'Dubai'), (276, 9, 'Indonesia'), (305, 11, 'Bonny_Light_oil'), (251, 7, 'Algeria')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(255, 21, 'Maryland_State_Police')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(9, 7, 'Counsel'), (17, 11, 'Voluntary_association'), (0, 8, 'Minority_group')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(41, 8, 'Belgrade'), (73, 5, 'Italy'), (94, 6, 'Russia'), (61, 8, 'Treviso_Basket'), (13, 8, 'Benetton_Formula'), (84, 6, 'FC_Dinamo_București'), (27, 6, 'FC_Dinamo_București')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(10, 11, "Landry's,_Inc.")]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Clarke', 'Kenneth Clarke', 'John Major']
response in server.py code:
 [(50, 6, 'London'), (148, 10, 'John_Major'), (349, 5, 'John_Major'), (238, 5, 'John_Major'), (576, 5, 'John_Major'), (565, 6, 'Kenneth_Clarke'), (669, 5, 'John_Major'), (114, 14, 'Kenneth_Clarke'), (679, 6, 'Kenneth_Clarke'), (205, 8, 'Europe'), (26, 5, 'Major'), (18, 6, 'Kenneth_Clarke')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Joakim Persson', 'Daniel Andersson']
response in server.py code:
 [(190, 14, 'Joakim_Persson'), (60, 4, 'Riga'), (218, 16, 'Daniel_Andersson_(footballer_born_1977)'), (119, 8, 'Europe'), (31, 8, 'Europe'), (9, 6, 'Sweden_national_football_team'), (76, 6, 'Sweden_national_football_team'), (88, 6, 'Latvia_national_football_team'), (21, 6, 'Latvia_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(67, 10, 'Washington,_D.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['David Snow', 'Shannon']
response in server.py code:
 [(518, 3, 'Greenwich_Mean_Time'), (786, 3, 'Greenwich_Mean_Time'), (615, 8, 'Canada'), (162, 8, 'Michigan'), (222, 12, 'Newfoundland_and_Labrador'), (898, 8, 'Michigan'), (40, 12, 'Newfoundland_and_Labrador'), (208, 12, 'Stephenville,_Newfoundland_and_Labrador'), (54, 12, 'Stephenville,_Newfoundland_and_Labrador'), (68, 12, 'Newfoundland_and_Labrador'), (884, 12, 'Grand_Rapids,_Michigan'), (931, 12, 'Stephenville,_Newfoundland_and_Labrador'), (1067, 12, 'Stephenville,_Newfoundland_and_Labrador'), (342, 10, 'Learjet_35'), (149, 7, 'Republic_of_Ireland'), (983, 7, 'Republic_of_Ireland'), (974, 7, 'Shannon_Airport'), (834, 4, 'David_Snow'), (370, 10, 'David_Snow'), (412, 4, 'David_Snow')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(19, 10, 'Specialist_(rank)'), (0, 18, 'Employee_retention')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(66, 8, 'Berkeley,_California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Vladimir Makovsky']
response in server.py code:
 [(54, 5, 'Minsk'), (9, 7, 'Belarus_national_football_team'), (71, 7, 'Belarus_national_football_team'), (22, 7, 'Estonia_national_football_team'), (84, 7, 'Estonia_national_football_team'), (133, 8, 'Europe'), (33, 9, 'FIFA_World_Cup'), (116, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Gregoire']
response in server.py code:
 [(0, 8, 'Christine_Gregoire')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Bruce Dyer', 'Darren Eadie']
response in server.py code:
 [(197, 10, 'Bruce_Dyer'), (53, 8, 'Chișinău'), (118, 8, 'Europe'), (223, 12, 'Darren_Eadie'), (86, 7, 'Moldova_national_football_team'), (73, 7, 'England_national_football_team'), (22, 7, 'Moldova_national_football_team'), (9, 7, 'England_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(54, 12, 'Fall_Out_Boy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Arafat', 'Netanyahu', 'Yasser Arafat', 'Benjamin Netanyahu', 'Hosni Mubarak', 'Osama el-Baz', 'Abdel-Rahman']
response in server.py code:
 [(160, 18, 'Benjamin_Netanyahu'), (509, 7, 'Reuters'), (122, 13, 'Yasser_Arafat'), (623, 6, 'Yasser_Arafat'), (1428, 6, 'Israel'), (740, 6, 'Yasser_Arafat'), (570, 6, 'Yasser_Arafat'), (336, 6, 'Yasser_Arafat'), (202, 13, 'Hosni_Mubarak'), (1010, 6, 'Yasser_Arafat'), (1373, 3, 'Palestine_Liberation_Organization'), (451, 7, 'Hosni_Mubarak'), (305, 3, 'Palestine_Liberation_Organization'), (1076, 6, 'Yasser_Arafat'), (1323, 9, 'Jerusalem'), (1338, 33, 'Palestine_Liberation_Organization'), (662, 9, 'Benjamin_Netanyahu'), (1261, 6, 'Israel'), (9, 6, 'Yasser_Arafat'), (1498, 3, 'Palestine_Liberation_Organization'), (370, 5, 'Cairo'), (465, 3, 'Palestine_Liberation_Organization'), (1818, 5, 'Cairo'), (0, 3, 'Palestine_Liberation_Organization'), (69, 3, 'Palestine_Liberation_Organization'), (347, 9, 'Benjamin_Netanyahu'), (1675, 7, 'Israel'), (1575, 7, 'Hosni_Mubarak'), (1062, 7, 'Hosni_Mubarak'), (17, 9, 'Benjamin_Netanyahu'), (48, 9, 'Jerusalem'), (270, 6, 'Israel'), (137, 7, 'Israel'), (518, 7, 'Israel'), (1223, 8, 'Israel'), (1087, 9, 'Benjamin_Netanyahu'), (1948, 6, 'Jews'), (1972, 6, 'Jews'), (1029, 5, 'Cairo'), (1708, 21, 'Palestinian_National_Authority'), (1488, 6, 'Hebron'), (899, 6, 'Hebron'), (1593, 12, 'Osama_El-Baz'), (100, 11, 'State_of_Palestine'), (1687, 11, 'State_of_Palestine'), (291, 6, 'Hebron'), (1852, 12, 'Omar_Abdel-Rahman'), (1150, 10, 'Washington,_D.C.'), (1307, 6, 'Islam'), (1203, 12, 'State_of_Palestine'), (183, 8, 'Egypt')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['George Tenet']
response in server.py code:
 [(45, 12, 'George_Tenet'), (32, 3, 'Central_Intelligence_Agency')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(9, 5, 'Trade'), (0, 8, 'Building')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['JANSHER', 'Anthony Hill', 'Jansher Khan', 'Rodney Eyles', 'Peter Nicol']
response in server.py code:
 [(1851, 11, 'Peter_Nicol'), (1898, 5, 'Rodney_Eyles'), (1782, 5, 'Rodney_Eyles'), (1671, 7, 'Jansher_Khan'), (2113, 5, 'Rodney_Eyles'), (1271, 7, 'Jansher_Khan'), (803, 7, 'Jansher_Khan'), (36, 7, 'Jansher_Khan'), (1918, 7, 'Jansher_Khan'), (904, 7, 'Jansher_Khan'), (2057, 7, 'Jansher_Khan'), (1755, 12, 'Rodney_Eyles'), (2148, 7, 'Jansher_Khan'), (380, 7, 'Jansher_Khan'), (119, 12, 'Jansher_Khan'), (1509, 31, 'Professional_Squash_Association'), (53, 9, 'Hong_Kong'), (468, 9, 'Pakistan'), (88, 10, 'Australia'), (1866, 8, 'Scotland'), (1744, 10, 'Australia'), (883, 10, 'Australia'), (1951, 15, 'Portuguese_Open'), (1702, 14, 'Hong_Kong_Open_(badminton)'), (580, 4, 'Anthony_Hill_(artist)'), (201, 14, 'Hong_Kong_Open_(tennis)'), (447, 4, 'Anthony_Hill_(American_football)'), (267, 4, 'Anthony_Hill_(American_football)'), (747, 4, 'Anthony_Hill_(American_football)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(1078, 6, 'Turkey'), (1147, 6, 'Turkey'), (998, 6, 'Turkey'), (626, 23, "Kurdistan_Workers'_Party"), (144, 5, 'Syria'), (0, 6, 'Turkey'), (515, 7, 'Reuters'), (1194, 4, 'Iraq'), (69, 6, 'Turkey'), (1029, 3, "Kurdistan_Workers'_Party"), (1010, 5, 'Syria'), (651, 3, "Kurdistan_Workers'_Party"), (1125, 3, "Kurdistan_Workers'_Party"), (36, 6, 'Syria'), (51, 6, 'Ankara'), (1086, 8, 'Damascus'), (1047, 7, 'Kurdistan'), (97, 7, 'Kurdistan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(43, 9, 'Patient_Protection_and_Affordable_Care_Act'), (7, 19, 'Patient_Protection_and_Affordable_Care_Act')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(23, 7, 'Watch'), (0, 7, 'Replica')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Miley Cyrus', 'Paris Hilton', 'Miley Cyrus']
response in server.py code:
 [(53, 12, 'Paris_Hilton'), (72, 11, 'Miley_Cyrus'), (6, 11, 'Miley_Cyrus')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Jansher Khan', 'Anthony Hill', 'Rodney Eyles', 'Peter Nicol']
response in server.py code:
 [(268, 11, 'Peter_Nicol'), (234, 12, 'Rodney_Eyles'), (197, 9, 'Australia'), (248, 9, 'Australia'), (43, 9, 'Hong_Kong'), (154, 12, 'Jansher_Khan'), (281, 8, 'Scotland'), (168, 8, 'Pakistan'), (9, 14, 'Hong_Kong_Open_(tennis)'), (89, 14, 'Hong_Kong_Open_(badminton)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(61, 6, 'Turkey'), (41, 6, 'Turkey'), (582, 23, "Kurdistan_Workers'_Party"), (216, 7, 'Turkey'), (49, 10, 'Diyarbakır'), (607, 3, "Kurdistan_Workers'_Party"), (969, 3, "Kurdistan_Workers'_Party"), (937, 7, 'Turkey'), (14, 4, 'Kurdish_people'), (549, 7, 'Kurdistan'), (399, 7, 'Kurdistan'), (987, 7, 'Kurdistan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['IRENE HIRANO INOUYE']
response in server.py code:
 [(0, 19, 'Irene_Hirano')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(12, 7, 'Cartoon'), (0, 5, 'Humour'), (20, 8, 'B_movie')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['PARNEVIK', 'Jesper Parnevik', 'Loren Roberts', 'Greg Kraft', 'Nolan Henke', 'Tiger Woods', 'Bob Estes', 'Steve Stricker', 'Stuart Appleby', 'Duffy Waldorf']
response in server.py code:
 [(2220, 9, 'Bob_Estes'), (876, 5, 'Tiger_Woods'), (402, 13, 'Loren_Roberts'), (725, 11, 'Tiger_Woods'), (501, 11, 'Nolan_Henke'), (7, 8, 'Jesper_Parnevik'), (2288, 14, 'Steve_Stricker'), (114, 6, 'Sweden'), (489, 10, 'Greg_Kraft'), (2365, 14, 'Stuart_Appleby'), (95, 15, 'Jesper_Parnevik'), (1547, 8, 'Jesper_Parnevik'), (362, 8, 'Jesper_Parnevik'), (267, 8, 'Jesper_Parnevik'), (302, 8, 'PGA_Tour'), (1219, 8, 'Jesper_Parnevik'), (2427, 13, 'Duffy_Waldorf'), (664, 8, 'PGA_Tour'), (2562, 5, 'Greg_Kraft'), (1348, 8, 'Jesper_Parnevik'), (74, 9, 'Wisconsin'), (243, 22, 'U.S._Bank_Championship_in_Milwaukee'), (1787, 5, 'Nolan_Henke'), (2339, 20, 'World_Series_of_Golf'), (63, 9, 'Milwaukee'), (1985, 5, 'Nolan_Henke'), (2474, 20, 'World_Series_of_Golf'), (2589, 8, 'PGA_Tour'), (39, 22, 'U.S._Bank_Championship_in_Milwaukee'), (431, 27, 'Brown_Deer_Park_Golf_Course'), (963, 25, 'United_States_Amateur_Championship_(golf)'), (1305, 5, 'Sweden')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Education Secretary Arne Duncan']
response in server.py code:
 [(0, 31, 'Arne_Duncan'), (40, 4, 'Michelle_Rhee')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(11, 5, 'Tire')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(36, 4, 'United_States_Department_of_Agriculture'), (0, 5, 'Texas'), (204, 4, 'United_States_Department_of_Agriculture'), (42, 8, 'Amarillo,_Texas'), (10, 4, 'Oklahoma'), (85, 9, 'Texas_Panhandle')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Richard Finn', 'Billie Jean King', 'Monica Seles', 'Mary Joe Fernandez', 'Mary Joe Fernandez', 'Arantxa Sanchez Vicario', 'Conchita Martinez']
response in server.py code:
 [(1352, 6, 'Monica_Seles'), (1391, 4, 'Billie_Jean_King'), (1583, 9, 'Mary_Joe_Fernández'), (1967, 17, 'Conchita_Martínez'), (1467, 18, 'Mary_Joe_Fernández'), (1276, 4, 'Billie_Jean_King'), (1498, 4, 'Billie_Jean_King'), (1802, 18, 'Mary_Joe_Fernández'), (909, 16, 'Billie_Jean_King'), (1863, 4, 'Billie_Jean_King'), (1725, 4, 'Billie_Jean_King'), (2075, 4, 'Billie_Jean_King'), (1169, 12, 'Monica_Seles'), (319, 7, 'Belgium'), (1208, 4, 'United_States'), (1402, 5, 'Monica_Seles'), (1939, 23, 'Arantxa_Sánchez_Vicario'), (338, 4, 'United_States'), (156, 13, 'United_States'), (1625, 9, 'US_Open_(tennis)'), (302, 5, 'Spain'), (1230, 5, 'Monica_Seles'), (9, 5, 'Spain'), (1754, 5, 'Monica_Seles'), (896, 4, 'United_States'), (142, 5, 'Spain'), (454, 7, 'Germany'), (361, 11, 'Netherlands'), (1152, 7, 'Fed_Cup'), (1451, 7, 'Fed_Cup'), (1913, 5, 'Spain'), (291, 9, 'US_Open_(tennis)'), (71, 8, 'New_York_City'), (502, 6, 'France'), (973, 13, 'United_States'), (748, 13, 'Atlantic_City,_New_Jersey'), (1065, 5, 'Japan'), (103, 7, 'Fed_Cup'), (993, 7, 'Austria'), (44, 12, '1997_Fed_Cup'), (631, 9, 'United_States'), (720, 5, 'Spain'), (1078, 6, 'Nagoya'), (474, 14, 'Czech_Republic'), (517, 5, 'Japan'), (1135, 5, 'Japan'), (1004, 8, 'Salzburg'), (1788, 9, 'Lindsay_Davenport'), (1762, 7, 'Summer_Olympic_Games')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(161, 7, 'Ir_Amim')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(13, 19, 'Schaumburg,_Illinois')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(32, 4, 'United_States_Department_of_Agriculture'), (0, 6, 'Kansas'), (156, 4, 'United_States_Department_of_Agriculture'), (38, 10, 'Dodge_City,_Kansas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(46, 3, 'TMZ'), (22, 4, 'Adam')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(50, 6, 'Lyrics'), (0, 22, 'Love_Gets_Me_Every_Time'), (44, 4, 'Mind')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Steffi Graf', 'Natasha Zvereva', 'Martina Hingis', 'Naoko Kijimuta', 'Judith Wiesner', 'Petra Langrova', 'Thomas Enqvist', 'Pablo Campana']
response in server.py code:
 [(225, 11, 'Steffi_Graf'), (356, 14, 'Judith_Wiesner'), (252, 15, 'Natasha_Zvereva'), (291, 14, 'Martina_Hingis'), (238, 7, 'Germany'), (386, 14, 'Petra_Langrová'), (489, 13, 'Pablo_Campana'), (325, 14, 'Naoko_Kijimuta'), (476, 6, 'Sweden'), (372, 7, 'Austria'), (460, 14, 'Thomas_Enqvist'), (307, 11, 'Switzerland'), (85, 30, 'US_Open_(tennis)'), (37, 9, 'US_Open_(tennis)'), (341, 5, 'Japan'), (504, 7, 'Ecuador'), (402, 14, 'Czech_Republic'), (269, 7, 'Belarus'), (48, 8, 'New_York_City'), (123, 22, 'National_Tennis_Centre_(United_Kingdom)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Francois Legault']
response in server.py code:
 [(31, 16, 'François_Legault'), (0, 23, 'Coalition_Avenir_Québec')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Barbara Boxer']
response in server.py code:
 [(51, 13, 'Barbara_Boxer')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(300, 7, 'Belgium'), (488, 12, 'South_Africa'), (220, 13, 'United_States'), (157, 9, 'US_Open_(tennis)'), (56, 8, 'New_York_City'), (400, 7, 'Austria'), (18, 12, '1997_Fed_Cup'), (97, 12, '1997_Fed_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Bill Lee']
response in server.py code:
 [(13, 8, 'Bill_Lee_(left-handed_pitcher)'), (0, 5, 'Apple_Inc.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(340, 5, 'New_York_Mercantile_Exchange'), (681, 5, 'New_York_Mercantile_Exchange'), (51, 11, 'Los_Angeles'), (74, 4, 'United_States'), (1005, 11, 'Los_Angeles')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['jobs']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Joe-Max Moore', 'Eric Wynalda']
response in server.py code:
 [(177, 13, 'Joe-Max_Moore'), (227, 12, 'Eric_Wynalda'), (36, 11, 'Los_Angeles'), (170, 4, 'United_States'), (63, 13, 'United_States'), (247, 11, 'El_Salvador_national_football_team'), (82, 11, 'El_Salvador_national_football_team'), (19, 11, 'El_Salvador')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['John Smoltz']
response in server.py code:
 [(86, 3, 'Major_League_Baseball'), (98, 11, 'John_Smoltz')]
given spans fix. original text:  aids /man made disease
original word:  /man /man
new split:  /  and  man
[(0, 4), (5, 6), (6, 9)]
{0: 0, 5: 1, 6: 2}
{9: 2, 4: 0, 6: 1}
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 4, 'HIV/AIDS')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(56, 4, 'Doha')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Nicholas Burns', 'Rashid', 'Clinton', 'Rashid', 'Rashid', 'Rashid', 'Abu Ibrahim', 'Rashid', 'Rashid']
response in server.py code:
 [(789, 6, 'Greece'), (632, 6, 'Greece'), (734, 5, 'R._Nicholas_Burns'), (986, 5, 'R._Nicholas_Burns'), (480, 14, 'R._Nicholas_Burns'), (1672, 6, 'Greece'), (2131, 4, 'United_States'), (67, 13, 'United_States'), (1154, 5, 'Cairo'), (0, 4, 'United_States'), (1684, 13, 'United_States'), (1308, 5, 'Greece'), (1834, 11, 'Richard_Reid'), (1079, 6, 'Athens'), (41, 10, 'Washington,_D.C.'), (968, 5, 'Greece'), (1207, 33, 'Palestine_Liberation_Organization'), (888, 7, 'Bill_Clinton'), (1853, 3, 'Federal_Bureau_of_Investigation'), (2028, 6, 'Brazil'), (2073, 3, 'Trans_World_Airlines'), (453, 16, 'United_States_Department_of_State'), (1186, 5, 'Tunis'), (1031, 10, 'Korydallos'), (2098, 6, 'Athens'), (117, 5, 'Greece'), (1919, 10, 'Korydallos'), (1128, 15, 'Olympic_Airlines'), (1401, 12, 'Pan_American_World_Airways'), (2006, 12, 'Pan_American_World_Airways'), (1812, 11, 'State_of_Palestine'), (1740, 11, 'State_of_Palestine')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'European_Commission')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(67, 4, 'New_Mexico'), (328, 11, 'Albuquerque,_New_Mexico'), (54, 11, 'Albuquerque,_New_Mexico'), (689, 4, 'Cito_Gaston'), (85, 10, 'New_Mexico'), (589, 4, 'Cito_Gaston'), (303, 21, 'St._Pius_X_High_School_(Ottawa)'), (540, 33, 'New_Mexico_Activities_Association')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(870, 7, 'Miami_Marlins'), (380, 9, 'Cleveland_Indians'), (1291, 7, 'Miami_Marlins'), (720, 9, 'Cleveland_Indians'), (552, 7, 'Oakland_Athletics'), (1224, 7, 'Atlanta_Braves'), (1243, 7, 'Houston_Astros'), (514, 5, 'Texas_Rangers_(baseball)'), (968, 7, 'Houston_Astros'), (1101, 9, 'San_Diego_Padres'), (1302, 10, 'Cincinnati_Reds'), (697, 9, 'Minnesota_Twins'), (1341, 9, 'San_Diego_Padres'), (1363, 8, 'Colorado_Rockies'), (363, 16, 'National_League_Central'), (824, 7, 'Atlanta_Braves'), (422, 9, 'Minnesota_Twins'), (1254, 10, 'Pittsburgh_Pirates'), (497, 16, 'National_League_West'), (921, 12, 'Philadelphia_Phillies'), (657, 9, 'Baltimore_Orioles'), (338, 7, 'Detroit_Tigers'), (1147, 8, 'Colorado_Rockies'), (290, 6, 'Boston_Red_Sox'), (1328, 12, 'Philadelphia_Phillies'), (1265, 13, 'San_Francisco_Giants'), (1168, 13, 'San_Francisco_Giants'), (749, 7, 'Oakland_Athletics'), (739, 6, 'Boston_Red_Sox'), (780, 32, 'National_League_East'), (1037, 10, 'Cincinnati_Reds'), (268, 9, 'Baltimore_Orioles'), (951, 16, 'National_League_Central'), (733, 5, 'Texas_Rangers_(baseball)'), (1084, 16, 'National_League_West'), (203, 32, 'American_League_East'), (1060, 10, 'Pittsburgh_Pirates'), (649, 7, 'Detroit_Tigers'), (76, 21, 'Major_League_Baseball'), (11, 12, 'Major_League_Baseball'), (988, 8, 'St._Louis_Cardinals'), (449, 9, 'Milwaukee_Brewers'), (56, 8, 'New_York_City'), (313, 7, 'Toronto_Blue_Jays'), (670, 7, 'Seattle_Mariners'), (532, 7, 'Seattle_Mariners'), (710, 9, 'Milwaukee_Brewers'), (689, 7, 'Toronto_Blue_Jays'), (472, 11, 'Kansas_City_Royals'), (634, 11, 'Kansas_City_Royals'), (895, 8, 'New_York_Yankees'), (1354, 8, 'Montreal_Expos'), (1123, 11, 'Los_Angeles_Angels_of_Anaheim'), (844, 8, 'Montreal_Expos'), (1375, 8, 'St._Louis'), (1313, 11, 'Los_Angeles_Angels_of_Anaheim'), (757, 8, 'New_York_Yankees'), (247, 8, 'New_York_Yankees'), (1282, 8, 'New_York_Yankees')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Maintenance,_repair,_and_operations'), (7, 6, 'Manual_transmission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(75, 5, 'Chris_Gayle'), (60, 6, 'Indies')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['James Love']
response in server.py code:
 [(3918, 10, 'United_States'), (2869, 8, 'Internet'), (2501, 6, 'Russia'), (3312, 8, 'Internet'), (2427, 8, 'Internet'), (2791, 8, 'Internet'), (3097, 4, 'United_States'), (60, 6, 'Geneva'), (90, 6, 'Geneva'), (3488, 8, 'Internet'), (3213, 8, 'Internet'), (2213, 8, 'Internet'), (2822, 8, 'Europe'), (2334, 10, 'Ulan_Bator'), (3876, 8, 'Internet'), (3929, 30, 'MCI_Communications'), (1085, 8, 'Internet'), (1922, 16, 'Berne_Convention'), (2439, 8, 'Mongolia'), (144, 8, 'Internet'), (2223, 8, 'Mongolia'), (3027, 45, 'Information_Technology_Association_of_America'), (3659, 7, 'Network_(film)'), (2533, 6, 'Moscow')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(488, 10, 'Pittsburgh_Pirates'), (404, 10, 'Cincinnati_Reds'), (275, 7, 'Oakland_Athletics'), (454, 12, 'Philadelphia_Phillies'), (154, 7, 'Detroit_Tigers'), (394, 7, 'Miami_Marlins'), (294, 9, 'Baltimore_Orioles'), (231, 5, 'Texas_Rangers_(baseball)'), (40, 8, 'New_York_City'), (285, 6, 'Boston_Red_Sox'), (11, 12, 'Major_League_Baseball'), (71, 12, 'Major_League_Baseball'), (138, 15, 'American_League'), (363, 7, 'Atlanta_Braves'), (342, 7, 'Atlanta_Braves'), (417, 9, 'San_Diego_Padres'), (316, 15, 'National_League'), (211, 9, 'Minnesota_Twins'), (239, 9, 'Cleveland_Indians'), (539, 8, 'Colorado_Rockies'), (251, 8, 'New_York_Yankees'), (199, 9, 'Milwaukee_Brewers'), (528, 8, 'St._Louis_Cardinals'), (306, 7, 'Seattle_Mariners'), (477, 7, 'Houston_Astros'), (501, 13, 'San_Francisco_Giants'), (189, 7, 'Toronto_Blue_Jays'), (517, 8, 'New_York_Yankees'), (429, 8, 'Montreal_Expos'), (440, 11, 'Los_Angeles_Dodgers'), (164, 11, 'Kansas_City_Royals')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Andrew Strauss']
response in server.py code:
 [(269, 14, 'Andrew_Strauss'), (20, 7, 'England')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Italy'), (447, 7, 'Italy'), (48, 4, 'Rome'), (64, 5, 'Italy'), (105, 14, 'Catholic_Church'), (747, 6, 'Zambia'), (381, 7, 'Uganda'), (728, 5, 'Spain'), (274, 9, 'Europe'), (710, 7, 'Belgium'), (227, 5, 'Tutsi'), (41, 5, 'Democratic_Republic_of_the_Congo'), (397, 7, 'Kampala'), (142, 5, 'Democratic_Republic_of_the_Congo'), (334, 7, 'Garamba_National_Park'), (294, 8, 'Africa'), (656, 8, 'Italy'), (368, 5, 'Democratic_Republic_of_the_Congo'), (245, 16, 'Foreign_minister')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(16, 7, 'Florida'), (9, 6, 'Condominium')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['KEVIN BROWN', 'Kevin Brown', 'Devon White', 'Todd Stottlemyre', 'John Boles', 'Ray Knight', 'Nolan Ryan', 'Delino DeShields', 'Jeff Parrett', 'Chad Curtis', 'Darren Dreifort', 'Todd Worrell', 'Billy Ashley', 'Ryne Sandberg', 'Kevin Foster', 'Tom Glavine', 'Chipper Jones', 'Andruw Jones', 'Jose Hernandez', 'Mike Mordecai', 'Scott Sanders', 'Wally Joyner', 'David Segui', 'Mike Oquist', 'Marvin Benard', 'Shawn Estes', 'Pete Harnisch', 'Rod Beck', 'Alvaro Espinoza', 'Brent Mayne', 'Bobby Valentine', 'Tom Pagnozzi', 'Alan Benes', 'Ray Lankford', 'Eric Anthony', 'Sean Berry', 'Donne Wall']
response in server.py code:
 [(3230, 11, 'Shawn_Estes'), (3512, 5, 'Shawn_Estes'), (1161, 10, 'Nolan_Ryan'), (4614, 4, 'Donne_Wall'), (4216, 12, 'Ray_Lankford'), (516, 5, 'Kevin_Brown_(right-handed_pitcher)'), (2673, 12, 'Wally_Joyner'), (2218, 13, 'Chipper_Jones'), (1663, 12, 'Todd_Worrell'), (4447, 10, 'Donne_Wall'), (2467, 13, 'Mike_Mordecai'), (1425, 11, 'Chad_Curtis'), (3865, 15, 'Bobby_Valentine'), (4329, 12, 'Eric_Anthony'), (706, 5, 'Kevin_Brown_(right-handed_pitcher)'), (3296, 20, 'San_Francisco_Giants'), (2287, 12, 'Andruw_Jones'), (283, 5, 'Kevin_Brown_(right-handed_pitcher)'), (3546, 8, 'Rod_Beck'), (4019, 16, 'Colorado_Rockies'), (3336, 6, 'Marvin_Benard'), (3606, 4, 'Rod_Beck'), (3423, 13, 'Pete_Harnisch'), (102, 11, 'Kevin_Brown_(right-handed_pitcher)'), (1498, 8, 'Philadelphia_Phillies'), (3639, 15, 'Álvaro_Espinoza'), (2610, 8, 'Montreal'), (2049, 11, 'Tom_Glavine'), (3941, 10, 'Alan_Benes'), (3709, 11, 'Brent_Mayne'), (224, 15, 'Cincinnati_Reds'), (1081, 10, 'Ray_Knight'), (1940, 13, 'Ryne_Sandberg'), (2185, 6, 'Atlanta_Braves'), (1452, 19, 'Los_Angeles_Dodgers'), (1734, 8, 'Philadelphia_Phillies'), (3326, 4, 'New_York_Mets'), (3885, 8, 'St._Louis'), (302, 16, 'Todd_Stottlemyre'), (4041, 5, 'Alan_Benes'), (1561, 15, 'Darren_Dreifort'), (2734, 16, 'San_Diego_Padres'), (3895, 12, 'Tom_Pagnozzi'), (37, 7, 'Miami_Marlins'), (2395, 4, 'Chicago_Cubs'), (3757, 4, 'New_York_Mets'), (3380, 4, 'New_York_Mets'), (11, 11, 'Kevin_Brown_(right-handed_pitcher)'), (199, 15, 'Miami_Marlins'), (2101, 6, 'Kevin_Foster_(baseball)'), (1894, 4, 'Chicago_Cubs'), (1870, 7, 'Chicago'), (1883, 6, 'Atlanta_Braves'), (91, 3, 'Earned_run_average'), (2907, 11, 'David_Segui'), (3497, 6, 'San_Francisco_Giants'), (1332, 12, 'Philadelphia'), (30, 3, 'Earned_run_average'), (4273, 9, 'St._Louis_Cardinals'), (3072, 11, 'Mike_Oquist'), (2010, 12, 'Kevin_Foster_(baseball)'), (56, 10, 'Cincinnati'), (4376, 7, 'Colorado_Rockies'), (2803, 7, 'Scott_Sanders_(baseball)'), (3182, 13, 'Marvin_Benard'), (2410, 14, 'José_Hernández_(baseball)'), (4000, 9, 'St._Louis_Cardinals'), (1399, 12, 'Jeff_Parrett'), (344, 15, 'National_League'), (140, 11, 'Devon_White_(baseball)'), (4521, 14, 'Houston_Astros'), (4547, 7, 'Pittsburgh_Pirates'), (2514, 7, 'Atlanta_Braves'), (640, 10, 'John_Boles_(baseball)'), (2763, 5, 'Montreal_Expos'), (4400, 10, 'Sean_Berry'), (326, 9, 'St._Louis_Cardinals'), (1068, 4, 'Cincinnati_Reds'), (50, 4, 'Cincinnati_Reds'), (4388, 10, 'Pittsburgh'), (2620, 13, 'Scott_Sanders_(baseball)'), (1812, 12, 'Billy_Ashley'), (1346, 16, 'Delino_DeShields'), (597, 4, 'Cincinnati_Reds'), (4139, 8, 'Colorado_Rockies'), (3689, 3, 'Run_batted_in'), (4597, 3, 'Run_batted_in'), (4583, 5, 'Sean_Berry'), (3172, 8, 'New_York_City'), (2039, 7, 'Atlanta_Braves'), (4439, 3, 'Run_batted_in'), (624, 7, 'Miami_Marlins'), (3933, 3, 'Run_batted_in'), (3096, 8, 'Montreal_Expos'), (3123, 8, 'Montreal_Expos'), (1854, 11, 'Los_Angeles'), (154, 3, 'Run_batted_in'), (4121, 8, 'St._Louis_Cardinals'), (1508, 11, 'Los_Angeles_Dodgers'), (2444, 7, 'Chicago')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(15, 7, 'Fashion'), (4, 6, 'Beauty'), (0, 3, 'MSN')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(47, 5, 'Paris'), (511, 8, 'Morocco'), (64, 8, 'Morocco'), (220, 8, 'Morocco'), (29, 8, 'Morocco'), (136, 5, 'Paris'), (669, 8, 'Algeria'), (344, 8, 'Canada'), (6, 5, 'Paris'), (678, 6, 'Islam'), (374, 13, 'New_Caledonia')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(13, 3, 'MTV_Video_Music_Award')]
response in server.py code:
 []
given spans fix. original text:  cartoondirtyjokes
original word:  cartoondirtyjokes cartoondirtyjokes
new split:  cartoon  and  dirtyjokes
[(0, 7), (7, 17)]
{0: 0, 7: 1}
{17: 1, 7: 0}
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Cartoon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['EDBERG', 'Richard Finn', 'Stefan Edberg', 'Bernd Karbacher', 'Ivan Lendl', 'Richard Krajicek', 'Paul Haarhuis']
response in server.py code:
 [(1030, 6, 'Stefan_Edberg'), (1796, 6, 'Stefan_Edberg'), (1516, 6, 'Stefan_Edberg'), (1913, 6, 'Stefan_Edberg'), (987, 6, 'Stefan_Edberg'), (109, 13, 'Stefan_Edberg'), (1715, 6, 'Stefan_Edberg'), (9, 6, 'Stefan_Edberg'), (558, 6, 'Stefan_Edberg'), (1562, 6, 'Stefan_Edberg'), (678, 9, 'Bernd_Karbacher'), (883, 6, 'Stefan_Edberg'), (1332, 6, 'Stefan_Edberg'), (708, 10, 'Ivan_Lendl'), (2166, 6, 'Stefan_Edberg'), (911, 9, 'Bernd_Karbacher'), (1153, 9, 'Bernd_Karbacher'), (376, 9, 'Bernd_Karbacher'), (291, 6, 'Stefan_Edberg'), (177, 15, 'Bernd_Karbacher'), (611, 10, 'Grand_Slam_(tennis)'), (721, 10, 'Grand_Slam_(tennis)'), (2017, 13, 'Paul_Haarhuis'), (162, 9, 'US_Open_(tennis)'), (1386, 16, 'Richard_Krajicek'), (1989, 8, 'Richard_Krajicek'), (2000, 5, 'Netherlands'), (395, 6, 'Germany'), (1350, 9, 'The_Championships,_Wimbledon'), (52, 8, 'New_York_City'), (502, 22, 'National_Tennis_Centre_(United_Kingdom)'), (1084, 5, 'Sweden')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Oscar Luigi Scalfaro', 'Umberto Bossi']
response in server.py code:
 [(58, 5, 'Italy'), (293, 7, 'Italy'), (75, 7, 'Italy'), (0, 7, 'Italy'), (607, 5, 'Italy'), (380, 8, 'Oscar_Luigi_Scalfaro'), (563, 8, 'Oscar_Luigi_Scalfaro'), (93, 20, 'Oscar_Luigi_Scalfaro'), (805, 6, 'Mantua'), (789, 8, 'Oscar_Luigi_Scalfaro'), (1233, 6, 'Italy'), (1368, 13, 'Umberto_Bossi'), (918, 8, 'Italy'), (1144, 8, 'Italy'), (871, 8, 'Austria'), (1519, 6, 'Venice'), (1464, 2, 'Po_(river)'), (163, 15, 'Lega_Nord'), (540, 3, 'Let_Kunovice')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(99, 7, 'Twitter'), (71, 8, 'Facebook')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(203, 10, 'California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Backup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Naseem Hamed', 'Manuel Medina']
response in server.py code:
 [(84, 12, 'Naseem_Hamed'), (74, 7, 'United_Kingdom'), (160, 13, 'Manuel_Medina_(boxer)'), (110, 3, 'World_Boxing_Organization'), (56, 6, 'Dublin'), (151, 6, 'Mexico'), (16, 6, 'Naseem_Hamed')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(42, 10, 'Copenhagen'), (564, 10, 'Copenhagen'), (0, 7, 'Denmark'), (66, 6, 'Paul_Reuter')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Tim Cook']
response in server.py code:
 [(127, 8, 'Tim_Cook'), (115, 5, 'Apple_Inc.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Recycling')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Stephan Marasek', 'Markus Schopp', 'Duncan Ferguson', 'Michael Konsel', 'Gary McAllister', 'Andreas Heraf', 'Craig Brown', 'Dietmar Kuehbauer', 'Herbert Prohaska', 'Michael Konsel', 'Markus Schopp', 'Peter Schoettel', 'Anton Pfeffer', 'Wolfgang Feiersinger', 'Stephan Marasek', 'Dieter Ramusch', 'Andreas Ogris', 'Dietmar Kuehbauer', 'Anton Polster', 'Herfried Sabitzer', 'Andreas Herzog', 'Andreas Heraf', 'Andrew Goram', 'Craig Burley', 'Thomas Boyd', 'Colin Calderwood', 'Colin Hendry', 'Duncan Ferguson', 'Stuart McCall', 'Alistair McCoist', 'Gordon Durie', 'Gary McAllister', 'John Collins']
response in server.py code:
 [(1804, 13, 'Toni_Polster'), (1845, 14, 'Andreas_Herzog'), (1861, 13, 'Andreas_Heraf'), (1731, 15, 'Stephan_Marasek'), (1748, 14, 'Dieter_Ramusch'), (1901, 12, 'Craig_Burley'), (960, 13, 'Andreas_Heraf'), (926, 15, 'Gary_McAllister'), (978, 8, 'Duncan_Ferguson'), (1994, 13, 'Stuart_McCall'), (745, 15, 'Duncan_Ferguson'), (72, 6, 'Vienna'), (1977, 15, 'Duncan_Ferguson'), (2047, 15, 'Gary_McAllister'), (1709, 20, 'Wolfgang_Feiersinger'), (1533, 16, 'Herbert_Prohaska'), (1646, 14, 'Michael_Konsel'), (1677, 15, 'Peter_Schöttel'), (1928, 16, 'Colin_Calderwood'), (1946, 12, 'Colin_Hendry'), (1887, 12, 'Andy_Goram'), (839, 14, 'Michael_Konsel'), (459, 15, 'Stephan_Marasek'), (1662, 13, 'Markus_Schopp'), (528, 8, 'Scotland'), (1518, 8, 'Austria'), (1694, 13, 'Anton_Pfeffer'), (1764, 13, 'Andreas_Ogris'), (2027, 12, 'Gordon_Durie'), (478, 11, 'SC_Freiburg'), (2009, 16, 'Ally_McCoist'), (1170, 8, 'Austria'), (695, 13, 'Markus_Schopp'), (1785, 17, 'Dietmar_Kühbauer'), (9, 7, 'Austria_national_football_team'), (1820, 17, 'Herfried_Sabitzer'), (26, 8, 'Scotland_national_football_team'), (1915, 11, 'Tom_Boyd_(footballer)'), (735, 7, 'Everton_F.C.'), (1074, 11, 'Craig_Brown_(footballer_born_1940)'), (1220, 17, 'Dietmar_Kühbauer'), (1636, 7, 'Austria'), (819, 8, 'Austria'), (320, 7, 'Belarus_national_football_team'), (2064, 12, 'John_Collins_(footballer_born_1968)'), (1059, 8, 'Scotland'), (297, 8, 'Scotland_national_football_team'), (776, 8, 'Scotland_national_football_team'), (876, 8, 'Scotland_national_football_team'), (153, 8, 'Scotland_national_football_team'), (90, 7, 'Austria'), (408, 7, 'Austria_national_football_team'), (38, 9, 'FIFA_World_Cup'), (1876, 8, 'Scotland_national_football_team'), (114, 9, 'FIFA_World_Cup')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(51, 5, 'Paris'), (0, 6, 'Islam'), (31, 9, 'Algeria'), (157, 8, 'Algeria'), (68, 6, 'Islam'), (237, 8, 'Algeria'), (148, 7, 'Algiers'), (124, 5, 'Blida')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(7, 7, 'Jet_Ski'), (0, 6, 'Personal_water_craft')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['JOHNSON', 'Tom Johnson', 'Ramon Guzman']
response in server.py code:
 [(67, 8, 'United_States'), (49, 6, 'Dublin'), (114, 3, 'International_Boxing_Federation'), (186, 9, 'Venezuela'), (198, 12, 'Ramon_Guzman'), (9, 7, 'Lyndon_B._Johnson')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(448, 7, 'Belgium'), (701, 7, 'Belgium'), (337, 7, 'Belgium'), (892, 7, 'Belgium'), (0, 7, 'Belgium'), (219, 7, 'Belgium'), (997, 7, 'Belgium'), (412, 7, 'Antwerp'), (53, 8, 'Brussels'), (765, 7, 'Antwerp'), (818, 7, 'Germany'), (807, 6, 'France'), (755, 6, 'Turkey'), (800, 5, 'Spain'), (159, 5, 'Spain'), (923, 8, 'Europe'), (722, 7, 'Turkey'), (594, 7, 'Turkey'), (526, 9, 'Barcelona')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(16, 7, 'Ireland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(183, 26, 'U.S._Chemical_Safety_and_Hazard_Investigation_Board')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(10, 12, 'Pennsylvania')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(39, 11, 'Chapel_Hill,_North_Carolina')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = ['Nicolas Ouedec', 'Youri Djorkaeff', 'Aime Jacquet', 'Franck Leboeuf', 'Ricardo Pelaez', 'Zinedine Zidane', 'Joaquin del Olmo', 'Bernard Lama', 'Lilian Thuram', 'Sabri Lamouchi', 'Laurent Blanc', 'Marcel Desailly', 'Franck Leboeuf', 'Bixente Lizarazu', 'Christian Karembeu', 'Didier Deschamps', 'Youri Djorkaeff', 'Reynald Pedros', 'Robert Pires', 'Nicolas Ouedec', 'Florian Maurice', 'Patrice Loko', 'Zinedine Zidane', 'Pavel Pardo', 'Claudio Suarez', 'Duilio Davino', 'German Villa', 'Joaquin del Olmo', 'Cuauhtemoc Blanco', 'Alberto Garcia Aspe', 'Ramon Ramirez', 'Jesus Arellano', 'Enrique Alfaro', 'Francisco Palencia', 'Luis Garcia', 'Ricardo Pelaez']
response in server.py code:
 [(1659, 15, 'Marcel_Desailly'), (1640, 13, 'Laurent_Blanc'), (1819, 12, 'Robert_Pirès'), (468, 7, 'Frank_Leboeuf'), (1893, 12, 'Patrice_Loko'), (1575, 12, 'Bernard_Lama'), (1681, 14, 'Frank_Leboeuf'), (1865, 15, 'Florian_Maurice'), (452, 14, 'Frank_Leboeuf'), (1594, 13, 'Lilian_Thuram'), (1777, 15, 'Youri_Djorkaeff'), (1995, 11, 'Pável_Pardo'), (61, 5, 'Paris'), (1798, 14, 'Reynald_Pedros'), (1395, 7, 'Aimé_Jacquet'), (1754, 16, 'Didier_Deschamps'), (304, 12, 'Aimé_Jacquet'), (2105, 16, 'Joaquín_del_Olmo'), (1912, 15, 'Zinedine_Zidane'), (1730, 18, 'Christian_Karembeu'), (1279, 20, 'Inter_Milan'), (2012, 14, 'Claudio_Suárez'), (2253, 14, 'Enrique_Alfaro'), (1844, 14, 'Nicolas_Ouédec'), (2274, 18, 'Francisco_Palencia'), (324, 7, 'UEFA_Euro_1996'), (114, 15, 'Youri_Djorkaeff'), (937, 9, 'Youri_Djorkaeff'), (1241, 9, 'Youri_Djorkaeff'), (907, 15, 'Zinedine_Zidane'), (657, 7, 'Chelsea_F.C.'), (78, 7, 'UEFA_Euro_1996'), (2151, 17, 'Cuauhtémoc_Blanco'), (1614, 14, 'Sabri_Lamouchi'), (2180, 19, 'Alberto_García_Aspe'), (896, 8, 'Juventus_F.C.'), (1707, 16, 'Bixente_Lizarazu'), (2032, 13, 'Duilio_Davino'), (1201, 6, 'Nicolas_Ouédec'), (95, 14, 'Nicolas_Ouédec'), (551, 7, 'Mexico'), (427, 7, 'Chelsea_F.C.'), (2225, 14, 'Jesús_Arellano'), (183, 6, 'Mexico_national_football_team'), (1163, 16, 'Joaquín_del_Olmo'), (2205, 13, 'Ramón_Ramírez_(Dominican_pitcher)'), (1934, 6, 'Mexico_national_football_team'), (2323, 14, 'Ricardo_Peláez'), (171, 6, 'France_national_football_team'), (1079, 8, 'Europe'), (1027, 8, 'RCD_Espanyol'), (2305, 11, 'Luis_García_Sanz'), (2067, 12, 'Germán_Villa'), (28, 9, 'FIFA_World_Cup'), (1039, 9, 'FC_Barcelona'), (1004, 6, 'Nicolas_Ouédec'), (570, 14, 'Ricardo_Peláez'), (832, 6, 'France'), (734, 6, 'France'), (1562, 6, 'France_national_football_team'), (1440, 6, 'France_national_football_team'), (155, 9, 'FIFA_World_Cup'), (270, 6, 'France_national_football_team'), (9, 6, 'France_national_football_team'), (1054, 6, 'FC_Nantes'), (1464, 9, 'FIFA_World_Cup'), (2047, 8, 'Becerril'), (2086, 5, 'Herculez_Gomez'), (759, 8, 'Mexico')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(42, 6, 'Greece'), (58, 5, 'Greece')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(9, 12, 'Cook_Islands')]
self.special_words_assertion_errors = 0
gm_idx_errors = 15
persons_mentions_seen = []
response in server.py code:
 [(30, 7, 'Serie_A'), (109, 6, 'Lega_Serie_A')]
given spans fix. original text:  fileserver\distrib
original word:  fileserver\distrib fileserver\distrib
new split:  fileserver  and  \distrib
[(0, 10), (10, 18)]
{0: 0, 10: 1}
{10: 0, 18: 1}
given span: distrib  new span: \distrib
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Nicolas Ouedec', 'Youri Djorkaeff']
response in server.py code:
 [(45, 5, 'Paris'), (158, 14, 'Nicolas_Ouédec'), (188, 15, 'Youri_Djorkaeff'), (74, 6, 'Mexico_national_football_team'), (9, 6, 'France_national_football_team'), (21, 6, 'Mexico_national_football_team'), (62, 6, 'France_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(43, 7, 'Hamburg'), (0, 6, 'Germany'), (62, 6, 'Germany'), (364, 8, 'Colombia'), (427, 11, 'El_Salvador'), (597, 7, 'Hamburg'), (111, 2, 'European_Union'), (537, 6, 'Brazil'), (458, 9, 'Indonesia'), (514, 5, 'Kenya'), (485, 8, 'Ethiopia'), (214, 3, 'Public_transport_in_Debrecen')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
given spans fix. original text:  delaware/ pet shops
original word:  delaware/ delaware/
new split:  delaware  and  /
[(0, 8), (8, 9)]
{0: 0, 8: 1}
{8: 0, 9: 1}
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Delaware')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Justin Bieber']
response in server.py code:
 [(42, 13, 'Justin_Bieber')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(14, 5, 'Death')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Sergen Yalcin', 'Filip De Wilde', 'David Elleray', 'Marc Degryse', 'Dirk Medved', 'Luis Oliveira', 'Rustu Recber', 'Ogun Temizkanoglu', 'Arif Erdem', 'Orhan Cikirikci', 'Filip De Wilde', 'Bertrand Crasson', 'Dirk Medved', 'Pascal Renier', 'Geoffrey Claeys', 'Gunther Schepens', 'Nico Van Kerckhoven', 'Enzo Scifo', 'Gert Verheyen', 'Frederic Peiremans', 'Marc Degryse', 'Luc Nilis', 'Luis Oliveira', 'Gilles De Bilde', 'Rustu Recber', 'Hakan Unsal', 'Sergen Yalcin', 'Recep Cetin', 'Ogun Temizkanoglu', 'Alpay Ozalan', 'Abdullah Ercan', 'Tolunay Kafkas', 'Oguz Cetin', 'Arif Erdem', 'Tayfun Korkut', 'Hakan Sukur', 'Saffet Sancakli', 'Orhan Cikirikci', 'Wilfried Van Moer', 'Paul Van Himst']
response in server.py code:
 [(2826, 14, 'Paul_Van_Himst'), (855, 12, 'Marc_Degryse'), (2200, 10, 'Enzo_Scifo'), (2897, 8, 'Wilfried_Van_Moer'), (2393, 13, 'Sergen_Yalçın'), (2577, 11, 'Hakan_Şükür'), (2802, 8, 'Wilfried_Van_Moer'), (2285, 9, 'Luc_Nilis'), (621, 14, 'Filip_De_Wilde'), (2496, 14, 'Tolunay_Kafkas'), (641, 6, 'Sergen_Yalçın'), (602, 7, 'Belgium'), (2267, 12, 'Marc_Degryse'), (2044, 14, 'Filip_De_Wilde'), (2064, 16, 'Bertrand_Crasson'), (1497, 8, 'Filip_De_Wilde'), (506, 13, 'Sergen_Yalçın'), (2534, 10, 'Arif_Erdem'), (1310, 8, 'Filip_De_Wilde'), (2123, 15, 'Geoffrey_Claeys'), (2517, 10, 'Oğuz_Çetin'), (2639, 7, 'Belgium'), (1951, 7, 'Marc_Degryse'), (72, 8, 'Brussels'), (2653, 17, 'Wilfried_Van_Moer'), (2459, 12, 'Alpay_Özalan'), (2144, 16, 'Gunther_Schepens'), (1793, 8, 'Filip_De_Wilde'), (2615, 15, 'Orhan_Çıkırıkçı'), (1416, 7, 'UEFA_Euro_1996'), (2436, 17, 'Ogün_Temizkanoğlu'), (2320, 15, 'Gilles_De_Bilde'), (2216, 13, 'Gert_Verheyen'), (2375, 11, 'Hakan_Ünsal'), (2476, 14, 'Abdullah_Ercan'), (2236, 18, 'Frédéric_Peiremans'), (2167, 19, 'Nico_Van_Kerckhoven'), (2558, 13, 'Tayfun_Korkut'), (840, 13, 'David_Elleray'), (1123, 12, 'Rüştü_Reçber'), (1638, 6, 'France'), (2594, 15, 'Saffet_Sancaklı'), (117, 14, '1998_FIFA_World_Cup'), (2357, 12, 'Rüştü_Reçber'), (2007, 6, 'Rüştü_Reçber'), (1817, 10, 'Arif_Erdem'), (2955, 5, 'Italy'), (2103, 13, 'Pascal_Renier'), (2086, 11, 'Dirk_Medved'), (92, 7, 'Belgium'), (1286, 17, 'Ogün_Temizkanoğlu'), (2696, 6, 'Turkey'), (999, 11, 'Dirk_Medved'), (1646, 7, 'Belgium'), (2300, 13, 'Luís_Oliveira'), (2867, 7, 'Belgium'), (1837, 15, 'Orhan_Çıkırıkçı'), (218, 7, 'Turkey'), (265, 7, 'Turkey'), (2767, 7, 'Turkey'), (2344, 6, 'Turkey_national_football_team'), (1061, 13, 'Luís_Oliveira'), (1887, 7, 'Belgium'), (534, 7, 'Turkey'), (1213, 6, 'Turkey_national_football_team'), (895, 7, 'Belgium'), (2419, 11, 'Recep_Çetin'), (2030, 7, 'Belgium_national_football_team'), (29, 6, 'Turkey'), (2944, 6, 'Russia'), (824, 7, 'England'), (9, 7, 'Belgium_national_football_team'), (184, 6, 'Turkey')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(39, 7, 'Germany'), (31, 6, 'Munich'), (247, 9, 'Munich_Re'), (582, 9, 'Munich_Re'), (470, 9, 'Munich_Re'), (635, 3, 'DAX'), (0, 9, 'Munich_Re')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(41, 7, 'Hyper-V'), (62, 11, 'Windows_Server_2008'), (77, 14, 'Windows_Server_2008')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Roberto Carlos']
response in server.py code:
 [(48, 6, 'Madrid'), (185, 11, 'Real_Madrid_C.F.'), (96, 7, 'Spain'), (24, 7, 'Spain'), (200, 14, 'Roberto_Carlos_(footballer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 2, 'European_Union'), (64, 14, 'European_Union'), (233, 2, 'European_Union'), (44, 8, 'Brussels'), (216, 2, 'European_Union'), (454, 8, 'Europe')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(19, 8, 'Illinois')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(22, 6, 'Poetry'), (29, 4, 'Book')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['ralph davis']
response in server.py code:
 [(0, 11, 'Ralph_Henry_Carless_Davis')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(43, 6, 'Madrid'), (90, 7, 'Spain'), (146, 11, 'Real_Madrid_C.F.'), (19, 7, 'Spain')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(30, 5, 'Thirty_Seconds_to_Mars')]
response in server.py code:
 []
given spans fix. original text:  avantiwashingmachine
original word:  avantiwashingmachine avantiwashingmachine
new split:  avanti  and  washingmachine
[(0, 6), (6, 20)]
{0: 0, 6: 1}
{20: 1, 6: 0}
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(8, 5, 'Sales')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(35, 9, 'Frankfurt'), (96, 9, 'Frankfurt'), (162, 10, 'Deutsche_Bundesbank'), (0, 9, 'Frankfurt')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Marc Degryse', 'Luis Oliveira', 'Sergen Yalcin']
response in server.py code:
 [(194, 12, 'Marc_Degryse'), (57, 8, 'Brussels'), (245, 13, 'Sergen_Yalçın'), (184, 7, 'Belgium_national_football_team'), (215, 13, 'Luís_Oliveira'), (22, 6, 'Turkey_national_football_team'), (9, 7, 'Belgium_national_football_team'), (77, 7, 'Belgium_national_football_team'), (90, 6, 'Turkey_national_football_team'), (236, 6, 'Turkey'), (36, 9, 'FIFA_World_Cup'), (121, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 17, 'Time_Warner'), (75, 7, 'Netflix')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(64, 6, 'Vienna'), (9, 7, 'Austria_national_football_team'), (31, 8, 'Scotland_national_football_team'), (82, 7, 'Austria_national_football_team'), (134, 8, 'Europe'), (94, 8, 'Scotland_national_football_team'), (43, 9, 'FIFA_World_Cup'), (117, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(17, 9, 'Super_Bowl'), (27, 7, 'Baseball'), (0, 16, 'Football')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Texas'), (23, 10, 'Physician'), (6, 16, 'United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['John Lewis']
response in server.py code:
 [(44, 6, 'London'), (312, 8, 'Waitrose'), (98, 2, 'United_Kingdom'), (66, 10, 'John_Lewis_(department_store)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(22, 10, 'Shreveport,_Louisiana'), (112, 12, 'Lake_Charles,_Louisiana'), (38, 12, 'Lake_Charles,_Louisiana')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Nate Miller', 'James Heath']
response in server.py code:
 [(527, 6, 'Nate_Miller'), (616, 6, 'Nate_Miller'), (144, 11, 'Nate_Miller'), (270, 6, 'Nate_Miller'), (198, 8, 'United_States'), (228, 3, 'World_Boxing_Association'), (52, 6, 'Dublin'), (485, 5, 'James_Heath_(golfer)'), (207, 11, 'James_Heath_(golfer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(23, 11, 'Beach_house')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(39, 6, 'London'), (19, 6, 'London'), (140, 3, 'Greenwich_Mean_Time'), (108, 6, 'London'), (34, 3, 'Greenwich_Mean_Time'), (304, 7, 'Jakarta')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Larry Fitzgerald']
response in server.py code:
 [(62, 16, 'Larry_Fitzgerald')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Ronald de Boer', 'Van Gastel', 'Giovanni']
response in server.py code:
 [(63, 9, 'Amsterdam'), (195, 14, 'Ronald_de_Boer'), (181, 11, 'Netherlands_national_football_team'), (225, 10, 'Jean-Paul_van_Gastel'), (84, 15, 'Netherlands_national_football_team'), (114, 6, 'Brazil_national_football_team'), (248, 6, 'Brazil_national_football_team'), (257, 8, 'Giovanni_Silva_de_Oliveira'), (29, 6, 'Brazil'), (9, 5, 'Netherlands_national_football_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(25, 6, 'Russia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Clarke', 'Kenneth Clarke', 'Tony Marlow', 'Kenneth Clarke', 'John Major', 'Michael Heseltine', 'Edwina Currie']
response in server.py code:
 [(1091, 10, 'John_Major'), (1103, 5, 'John_Major'), (50, 6, 'London'), (167, 14, 'Kenneth_Clarke'), (772, 6, 'Kenneth_Clarke'), (952, 6, 'Kenneth_Clarke'), (142, 7, 'United_Kingdom'), (627, 14, 'Kenneth_Clarke'), (0, 7, 'United_Kingdom'), (570, 9, 'Newsnight'), (1258, 6, 'Kenneth_Clarke'), (1395, 6, 'Kenneth_Clarke'), (1360, 13, 'Edwina_Currie'), (553, 3, 'BBC'), (9, 12, 'Euroscepticism'), (1383, 3, 'BBC'), (1289, 17, 'Michael_Heseltine'), (71, 12, 'Euroscepticism'), (299, 11, 'Antony_Marlow'), (541, 6, 'Antony_Marlow'), (259, 8, 'Europe'), (1331, 12, 'Pro-Europeanism'), (717, 6, 'Antony_Marlow'), (106, 12, 'Conservative_Party_(UK)'), (1276, 12, 'Pro-Europeanism'), (511, 7, 'Cabinet_(government)'), (1344, 12, 'Conservative_Party_(UK)'), (28, 6, 'Kenneth_Clarke')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Darrell Brock']
response in server.py code:
 [(264, 8, 'Kentucky'), (212, 13, 'Darrell_Brock_Jr.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Nate Miller', 'James Heath']
response in server.py code:
 [(24, 3, 'World_Boxing_Association'), (67, 8, 'United_States'), (114, 3, 'World_Boxing_Association'), (49, 6, 'Dublin'), (76, 11, 'Nate_Miller'), (169, 11, 'James_Heath_(golfer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Charles Elachi']
response in server.py code:
 [(158, 4, 'NASA'), (129, 14, 'Charles_Elachi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Chris Hunt', 'Laurie Brereton', 'Alexander Downer', "Pamela O'Neil"]
response in server.py code:
 [(1108, 16, 'Alexander_Downer'), (668, 15, 'Laurie_Brereton'), (75, 10, 'Australia'), (169, 10, 'Australia'), (21, 10, 'Australia'), (51, 8, 'Canberra'), (1305, 10, 'Australia'), (1522, 10, 'Australia'), (1195, 13, "Pam_O'Neil"), (1377, 9, 'Cambodia'), (889, 26, 'Department_of_Foreign_Affairs_and_Trade_(Australia)'), (1083, 15, 'Foreign_Affairs'), (307, 10, 'Chris_Hunt')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['lisa lynne']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['David Harrison', 'Richard Hannon']
response in server.py code:
 [(51, 6, 'Dublin'), (455, 14, 'Richard_Hannon'), (444, 7, 'United_Kingdom'), (177, 11, 'Curragh'), (250, 14, 'David_Harrison_(cricketer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Felix Hernandez']
response in server.py code:
 [(3, 7, 'Seattle'), (26, 15, 'Félix_Hernández')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(39, 6, 'Sydney'), (60, 10, 'Australia'), (0, 10, 'Australia'), (493, 6, 'Sydney'), (353, 29, 'Supreme_Court_of_New_South_Wales'), (635, 6, 'Andrew_Crofts_(footballer)'), (259, 4, 'Tony_Award')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(5, 4, 'Song')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['KLINSMANN', 'Juergen Klinsmann', 'Berti Vogts']
response in server.py code:
 [(9, 9, 'Jürgen_Klinsmann'), (96, 17, 'Jürgen_Klinsmann'), (709, 11, 'Berti_Vogts'), (51, 4, 'Bonn'), (362, 9, 'Jürgen_Klinsmann'), (67, 6, 'Germany'), (328, 20, 'Süddeutsche_Zeitung'), (166, 6, 'France'), (833, 7, 'UEFA_Euro_1996'), (410, 6, 'France'), (489, 7, 'England'), (35, 14, '1998_FIFA_World_Cup'), (464, 8, 'Europe'), (389, 7, 'Germany'), (796, 6, 'Poland_national_football_team'), (805, 7, 'Germany'), (153, 9, 'FIFA_World_Cup')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(18, 4, 'NASA')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bolger', 'Jim Bolger']
response in server.py code:
 [(262, 6, 'Jim_Bolger'), (99, 10, 'Jim_Bolger'), (50, 10, 'Wellington'), (5, 6, 'Jim_Bolger'), (72, 11, 'New_Zealand'), (225, 8, 'New_Zealand_First'), (162, 17, 'New_Zealand_First'), (30, 2, 'New_Zealand'), (0, 2, 'New_Zealand'), (212, 8, 'New_Zealand_National_Party'), (17, 4, 'NATS_Holdings')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(19, 16, 'Clyde_Auditorium')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(42, 14, "Winter's_Bone")]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(42, 4, 'Bonn'), (166, 8, 'FC_St._Pauli'), (127, 13, 'F.C._Hansa_Rostock'), (9, 10, 'DFB-Pokal'), (69, 10, 'DFB-Pokal'), (177, 8, 'MSV_Duisburg'), (115, 9, 'Karlsruher_SC'), (143, 20, 'Borussia_Neunkirchen')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(24, 13, 'East_St._Louis,_Illinois'), (11, 11, 'High_school')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Daryl Johnson']
response in server.py code:
 [(27, 17, 'Homeland_security'), (53, 13, 'Daryl_Johnson')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Peters', 'Winston Peters', 'Helen Clark']
response in server.py code:
 [(350, 7, 'Reuters'), (97, 14, 'Winston_Peters'), (432, 6, 'Winston_Peters'), (50, 10, 'Wellington'), (219, 6, 'Winston_Peters'), (329, 11, 'Helen_Clark'), (22, 3, 'Labour_Party_(UK)'), (249, 8, 'New_Zealand_First'), (404, 10, 'Wellington'), (72, 17, 'New_Zealand_First'), (315, 6, 'Labour_Party_(UK)'), (459, 6, 'Labour_Party_(UK)'), (165, 6, 'Labour_Party_(UK)'), (17, 3, 'National_Party_of_Australia'), (0, 2, 'New_Zealand'), (470, 8, 'New_Zealand_National_Party'), (152, 8, 'New_Zealand_National_Party'), (262, 8, 'New_Zealand_National_Party')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'Unemployment'), (38, 10, 'Employment'), (11, 8, 'Disability')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Michael Kraus']
response in server.py code:
 [(18, 10, 'California'), (68, 13, 'Michael_Kraus_(minister)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Cosmin Contra', 'Mihai Tararache']
response in server.py code:
 [(51, 9, 'Bucharest'), (185, 13, 'Cosmin_Contra'), (123, 8, 'Europe'), (207, 15, 'Mihai_Tararache'), (22, 9, 'Lithuania_national_football_team'), (9, 7, 'Romania_national_football_team'), (175, 7, 'Romania_national_football_team'), (104, 9, 'Lithuania_national_football_team'), (230, 9, 'Lithuania'), (72, 7, 'Romania_national_football_team')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['John Langmore', 'John Langmore', 'Bob Halverson', 'John Vance Langmore', 'Inge Kaul', 'Paul Keating']
response in server.py code:
 [(1192, 12, 'Paul_Keating'), (7, 10, 'Australia'), (241, 9, 'Bob_Halverson'), (574, 8, 'John_Langmore'), (931, 8, 'John_Langmore'), (1295, 16, 'Papua_New_Guinea'), (100, 13, 'John_Langmore'), (830, 10, 'Copenhagen'), (73, 10, 'Australia'), (495, 9, 'Bob_Halverson'), (719, 14, 'United_Nations'), (210, 13, 'Bob_Halverson'), (296, 19, 'John_Langmore'), (21, 13, 'John_Langmore'), (792, 4, 'United_Nations'), (885, 4, 'United_Nations'), (53, 8, 'Canberra'), (920, 9, 'Inge_Kaul'), (678, 9, 'Australia'), (750, 8, 'New_York_City'), (432, 28, 'Australian_Capital_Territory'), (1333, 8, 'Canberra'), (0, 4, 'Radio_Televizija_Republike_Srpske'), (418, 6, 'Malcolm_Fraser'), (1028, 6, 'Malcolm_Fraser'), (177, 24, 'House_of_Representatives'), (363, 24, 'Australian_House_of_Representatives')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(5, 4, 'Book')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(77, 4, 'Cebu')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Thatcher', 'Margaret Thatcher', 'Bernard Ingram', 'Bernard Ingham', 'Iron Lady', 'Ronald Reagan']
response in server.py code:
 [(51, 6, 'London'), (94, 17, 'Margaret_Thatcher'), (337, 8, 'Margaret_Thatcher'), (1228, 4, 'United_States'), (506, 8, 'Margaret_Thatcher'), (71, 7, 'United_Kingdom'), (257, 20, 'The_Sunday_Telegraph'), (11, 8, 'Margaret_Thatcher'), (533, 14, 'Bernard_Ingham'), (1032, 8, 'Margaret_Thatcher'), (1050, 8, 'Margaret_Thatcher'), (626, 14, 'Bernard_Ingham'), (885, 6, 'Bernard_Ingham'), (1243, 13, 'Ronald_Reagan'), (1072, 9, 'Margaret_Thatcher'), (397, 5, 'Republic_of_Ireland'), (349, 6, 'Twelve_Colonies'), (132, 3, 'Provisional_Irish_Republican_Army'), (1298, 7, 'My_Turn_(memoir)'), (1265, 5, 'Nancy_Reagan'), (443, 18, 'Conservative_Party_(UK)')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(839, 7, 'Reuters'), (44, 7, 'Yangon'), (186, 7, 'Yangon'), (215, 20, 'University_of_Yangon'), (774, 7, 'Yangon'), (897, 39, 'State_Peace_and_Development_Council'), (940, 5, 'State_Peace_and_Development_Council'), (753, 10, 'Shwedagon_Pagoda'), (436, 3, 'YIT'), (120, 30, 'Yangon_Technological_University'), (0, 7, 'Burma'), (74, 7, 'Burma'), (152, 3, 'YIT')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(68, 2, 'United_Kingdom'), (32, 19, 'Pretty_Little_Liars_(TV_series)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(14, 12, 'Clifton_Park,_New_York'), (0, 13, 'Modular_building')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Elizabeth I', 'Henry VIII', 'Anne Boleyn', 'Charles VI', 'Kutuzov', 'Napoleon', 'Napoleon', 'Pedro I', 'Henry Campbell-Bannerman', 'Giuseppe Garibaldi', 'Elia Kazan', 'Anthony Quayle', 'Wolsey', 'James Alfred Van Allen', 'Baudouin I', 'Leopold III', 'Hermann Goering', 'Jackie Stewart', 'Desmond Tutu']
response in server.py code:
 [(492, 6, 'France'), (43, 6, 'London'), (384, 6, 'France'), (561, 5, 'Italy'), (3219, 6, 'Russia'), (652, 6, 'France'), (1698, 4, 'United_States'), (733, 6, 'France'), (2635, 12, 'Desmond_Tutu'), (2150, 7, 'Belgium'), (3323, 7, 'Russia'), (2735, 12, 'South_Africa'), (2038, 4, 'United_States'), (3236, 10, 'Kazakhstan'), (3248, 10, 'Uzbekistan'), (1392, 7, 'Italy'), (3433, 4, 'United_States'), (995, 8, 'Portugal'), (0, 7, 'Reuters'), (2679, 9, 'Cape_Town'), (3110, 6, 'Europe'), (3272, 10, 'Tajikistan'), (3487, 8, 'United_States'), (1822, 7, 'United_Kingdom'), (1040, 6, 'Brazil'), (344, 6, 'Europe'), (2455, 14, 'Jackie_Stewart'), (2270, 13, 'World_War_II'), (2690, 12, 'South_Africa'), (2772, 13, 'United_States'), (2947, 7, 'United_Kingdom'), (789, 7, 'Russia'), (2800, 7, 'Kuwait'), (2364, 6, 'London'), (3227, 7, 'Belarus'), (3201, 6, 'Soviet_Union'), (3088, 6, 'Europe'), (3459, 6, 'Berlin'), (637, 10, 'Charles_VI_of_France'), (2163, 10, 'Baudouin_of_Belgium'), (906, 6, 'Moscow'), (2790, 5, 'Saudi_Arabia'), (914, 8, 'Napoleon'), (1327, 18, 'Giuseppe_Garibaldi'), (157, 11, 'Elizabeth_I_of_England'), (248, 7, 'England'), (2288, 6, 'Germany'), (854, 8, 'Napoleon'), (667, 25, 'War_of_the_Spanish_Succession'), (218, 11, 'Anne_Boleyn'), (1451, 5, 'China'), (1008, 7, 'Pedro_I_of_Brazil'), (1378, 6, 'Naples'), (1096, 24, 'Henry_Campbell-Bannerman'), (187, 10, 'Henry_VIII_of_England'), (1659, 10, 'Elia_Kazan'), (959, 6, 'Brazil'), (2247, 11, 'Leopold_III_of_Belgium'), (931, 6, 'Moscow'), (1907, 16, 'Ice_Cold_in_Alex'), (2310, 15, 'Hermann_Göring'), (430, 5, 'Turin'), (1927, 18, 'Lawrence_of_Arabia_(film)'), (2852, 4, 'Iraq'), (3260, 7, 'Armenia'), (2426, 8, 'Scotland'), (1560, 15, 'Boxer_Protocol'), (1801, 14, 'Anthony_Quayle'), (719, 10, 'Strasbourg'), (3375, 17, 'Flag_of_the_United_States'), (753, 8, 'Breisach'), (2009, 22, 'James_Van_Allen'), (1224, 14, 'House_of_Lords'), (1770, 17, 'On_the_Waterfront'), (1462, 12, 'Boxer_Rebellion'), (694, 7, 'Charles_VI_of_France'), (816, 7, 'Mikhail_Kutuzov'), (457, 9, 'Austria'), (1430, 9, 'Austria'), (323, 7, 'England'), (1752, 11, 'Viva_Zapata!'), (2750, 9, 'Anglicanism'), (708, 6, 'Alsace'), (880, 8, 'Battle_of_Borodino'), (2337, 5, 'The_Blitz'), (412, 7, 'Orléans'), (1976, 23, 'Anne_of_the_Thousand_Days'), (1072, 8, 'Scotland'), (763, 4, 'Kehl'), (2846, 4, 'Persian_Gulf'), (1251, 19, 'Trade_Disputes_and_Trade_Unions_Act_1927'), (480, 6, 'Eugene,_Oregon'), (579, 15, 'Treaty_of_Baden'), (623, 5, 'Ancient_Rome'), (2478, 18, 'Italian_Grand_Prix'), (1964, 6, 'Thomas_Wolsey'), (1638, 5, 'Boxing'), (1197, 9, 'South_African_Republic')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(13, 5, 'Inlet')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(26, 8, 'Slovenia'), (0, 7, 'Playboy'), (37, 7, 'Playboy')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(301, 9, 'Indonesia'), (515, 8, 'Malaysia'), (478, 9, 'Indonesia'), (616, 7, 'Bangkok'), (339, 5, 'Japan'), (51, 7, 'Bangkok'), (373, 5, 'Japan'), (548, 5, 'Japan'), (441, 9, 'Singapore'), (0, 4, 'Thailand'), (266, 11, 'Philippines'), (122, 4, 'Thailand'), (74, 4, 'Thailand'), (579, 7, 'Vietnam'), (227, 4, 'Iran'), (608, 5, 'Burma'), (404, 6, 'Africa'), (79, 17, "Ministry_of_Commerce_of_the_People's_Republic_of_China")]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(39, 6, 'London'), (817, 7, 'United_Kingdom'), (683, 6, 'London'), (849, 7, 'Belgium'), (69, 7, 'United_Kingdom'), (8, 7, 'United_Kingdom'), (357, 7, 'England'), (337, 8, 'Worthing'), (691, 7, 'Holland'), (418, 7, 'Holland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(94, 7, 'Chicago'), (104, 2, 'Illinois')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(5, 8, 'Makeover'), (14, 4, 'Mother')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(47, 8, 'Shanghai'), (100, 5, 'China'), (114, 7, 'Tianjin'), (0, 7, 'China'), (250, 11, 'Wen_Hui_Bao')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(42, 8, 'Sky_News')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Tony Blair', 'John Major']
response in server.py code:
 [(811, 10, 'John_Major'), (278, 5, 'Tony_Blair'), (107, 10, 'Tony_Blair'), (59, 8, 'Scotland'), (309, 8, 'Scotland'), (1071, 8, 'Scotland'), (857, 8, 'Scotland'), (268, 8, 'Scotland'), (168, 8, 'Scotland'), (995, 8, 'Scotland'), (537, 5, 'Scotland'), (336, 6, 'Labour_Party_(UK)'), (1123, 23, 'Scottish_National_Party'), (870, 7, 'England'), (1087, 6, 'Labour_Party_(UK)'), (79, 20, 'Labour_Party_(UK)'), (49, 8, 'Stirling'), (0, 21, 'Scottish_Labour_Party'), (918, 18, 'Conservative_Party_(UK)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Shane Davis']
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(94, 4, 'United_States'), (52, 5, 'Seoul'), (0, 12, 'South_Korea'), (322, 13, 'Hyundai_Heavy_Industries')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(111, 9, 'The_Limelight')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['mich']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['John Major']
response in server.py code:
 [(51, 6, 'London'), (617, 10, 'John_Major'), (386, 5, 'Iraq'), (728, 7, 'United_Kingdom'), (711, 4, 'United_States'), (594, 7, 'United_Kingdom'), (252, 5, 'Iraq'), (69, 7, 'United_Kingdom'), (219, 5, 'Iraq'), (0, 7, 'United_Kingdom'), (153, 5, 'Erbil'), (37, 5, 'Erbil'), (17, 4, 'Iraq'), (491, 5, 'Erbil'), (99, 5, 'Iraq'), (670, 5, 'Iraq'), (324, 4, 'United_Nations'), (298, 14, 'Foreign_and_Commonwealth_Office'), (564, 8, 'Gulf_War'), (798, 14, 'Foreign_and_Commonwealth_Office'), (717, 6, 'France'), (639, 11, 'Iraqi_Kurdistan'), (351, 7, 'Kurdistan'), (137, 7, 'Kurdistan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Baylor_University'), (7, 6, 'Alumnus')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(610, 6, 'London'), (659, 7, 'United_Kingdom'), (34, 6, 'London'), (149, 7, 'United_Kingdom'), (789, 7, 'United_Kingdom'), (483, 8, 'Khartoum'), (503, 5, 'Amman'), (162, 8, 'Sudan'), (493, 5, 'Sudan'), (510, 6, 'Jordan'), (58, 5, 'Iraq'), (704, 4, 'Iraq'), (6, 6, 'Iraq'), (583, 8, 'London_Stansted_Airport'), (856, 7, 'England')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(39, 8, 'Aeroflot')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(559, 5, 'China'), (26, 5, 'China'), (447, 6, 'Xinhua_News_Agency'), (693, 5, 'China'), (50, 7, 'Beijing'), (181, 6, 'Xinhua_News_Agency'), (69, 5, 'China'), (93, 6, 'Guilin'), (537, 7, 'Guangxi'), (126, 7, 'Guangxi'), (251, 13, "State_Council_of_the_People's_Republic_of_China"), (42, 6, 'Guilin'), (328, 33, 'General_Administration_of_Customs'), (623, 6, 'Guilin'), (284, 38, 'Civil_Aviation_Administration_of_China')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['St. Joseph']
response in server.py code:
 [(28, 10, 'St._Joseph,_Missouri')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bill Clinton']
response in server.py code:
 [(642, 7, 'Reuters'), (482, 4, 'Iraq'), (52, 6, 'London'), (233, 4, 'Iraq'), (46, 4, 'Iraq'), (73, 5, 'Iraq'), (502, 4, 'Iraq'), (1238, 4, 'Iraq'), (300, 5, 'Iraq'), (342, 5, 'Iraq'), (1106, 4, 'Iraq'), (1087, 4, 'Iraq'), (151, 5, 'Iraq'), (582, 5, 'Erbil'), (937, 4, 'United_States'), (22, 6, 'Iraq'), (523, 5, 'Iraq'), (1053, 5, 'Iraq'), (788, 5, 'Erbil'), (215, 5, 'Erbil'), (398, 5, 'Erbil'), (1119, 4, 'Iran'), (518, 3, 'Greenwich_Mean_Time'), (241, 12, 'London'), (902, 12, 'Bill_Clinton'), (1290, 13, 'Iraqi_Kurdistan'), (271, 23, 'Iraqi_National_Congress'), (1186, 6, 'Tehran'), (994, 10, 'Washington,_D.C.'), (438, 7, 'Kurdistan'), (852, 7, 'Kurdish_people'), (199, 7, 'Kurdistan')]
given spans fix. original text:  ozzfest 05`
original word:  05` 05`
new split:  05  and  `
[(0, 7), (8, 10), (10, 11)]
{0: 0, 8: 1, 10: 2}
{10: 1, 11: 2, 7: 0}
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(52, 5, 'Tokyo'), (69, 5, 'Japan'), (77, 24, 'Ministry_of_Economy,_Trade_and_Industry'), (0, 3, 'United_States_Environmental_Protection_Agency'), (245, 3, 'United_States_Environmental_Protection_Agency')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(19, 10, 'Translation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(87, 15, 'Sour_Patch_Kids')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Larry Lucchino']
response in server.py code:
 [(78, 14, 'Larry_Lucchino'), (61, 6, 'Boston')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(45, 6, 'London'), (226, 32, 'BBC'), (260, 3, 'BBC'), (11, 7, 'Algeria'), (438, 7, 'Algeria'), (160, 8, 'Algeria'), (136, 7, 'Algiers'), (521, 7, 'Islam')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(34, 5, 'Tokyo')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(14, 9, 'Villa_Rica,_Georgia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Steve Owen']
response in server.py code:
 [(178, 10, 'Steve_Owen_(American_football)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(12, 15, 'Promissory_note'), (7, 4, 'Loan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Busang', 'Busang', 'Busang', 'Busang', 'Busang', 'Umar', 'Busang', 'Umar', 'Busang', 'Suharto', 'Busang', 'Suharto']
response in server.py code:
 [(411, 7, 'Reuters'), (1171, 5, 'Bre-X'), (1656, 5, 'Bre-X'), (333, 7, 'Toronto'), (76, 6, 'Canada'), (1126, 5, 'Bre-X'), (512, 7, 'Toronto'), (2098, 5, 'Bre-X'), (613, 5, 'Bre-X'), (348, 7, 'Jakarta'), (1576, 5, 'Bre-X'), (1330, 5, 'Bre-X'), (2811, 7, 'Suharto'), (2723, 5, 'Bre-X'), (240, 9, 'Indonesia'), (0, 5, 'Bre-X'), (108, 17, 'Barrick_Gold'), (1964, 5, 'Bre-X'), (623, 7, 'Barrick_Gold'), (827, 5, 'Bre-X'), (478, 5, 'Bre-X'), (3035, 7, 'Suharto'), (488, 7, 'Barrick_Gold'), (85, 18, 'Bre-X'), (2135, 7, 'Barrick_Gold'), (1383, 10, 'Indonesia'), (7, 7, 'Barrick_Gold'), (1974, 7, 'Barrick_Gold'), (2297, 5, 'Bre-X'), (1586, 7, 'Barrick_Gold'), (2963, 7, 'Barrick_Gold'), (2397, 6, 'Busang_Rasefako'), (783, 15, 'East_Kalimantan'), (958, 6, 'Busang_Rasefako'), (3094, 7, 'Barrick_Gold'), (220, 6, 'Busang_Rasefako'), (2307, 7, 'Barrick_Gold'), (2939, 6, 'Busang_Rasefako'), (1438, 6, 'Busang_Rasefako'), (2710, 6, 'Busang_Rasefako'), (32, 6, 'Busang_Rasefako'), (768, 6, 'Busang_Rasefako'), (2473, 4, 'Umar'), (2265, 4, 'Umar')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(46, 9, "McDonald's")]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(20, 9, 'South_Korea'), (78, 12, 'South_Korea'), (50, 5, 'Seoul'), (350, 6, 'Hanwha_Eagles'), (128, 2, 'Odense_Boldklub'), (445, 2, 'LG_Corp'), (393, 7, 'Samsung'), (463, 2, 'Odense_Boldklub'), (301, 6, 'Haitai'), (133, 7, 'Samsung'), (371, 7, 'Hyundai'), (420, 5, 'Lotte_(conglomerate)'), (159, 7, 'Hyundai')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Hillary Clinton', 'Obama']
response in server.py code:
 [(171, 5, 'Barack_Obama'), (150, 15, 'Hillary_Rodham_Clinton')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['regis']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(31, 5, 'Tokyo'), (201, 5, 'Honda'), (220, 4, 'Honda_S-MX'), (134, 4, 'Honda_S-MX')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(30, 7, 'Seattle')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Constand Viljoen', 'Nelson Mandela']
response in server.py code:
 [(605, 12, 'South_Africa'), (1146, 12, 'South_Africa'), (48, 9, 'Cape_Town'), (69, 13, 'South_Africa'), (272, 16, 'Constand_Viljoen'), (351, 8, 'Pretoria'), (11, 10, 'Afrikaner'), (383, 10, 'Afrikaner'), (1116, 7, 'Constand_Viljoen'), (1332, 7, 'Constand_Viljoen'), (547, 9, 'Afrikaner'), (691, 7, 'Constand_Viljoen'), (905, 14, 'Nelson_Mandela'), (304, 13, 'Freedom_Front_Plus'), (931, 25, 'African_National_Congress'), (1284, 6, 'France'), (1273, 6, 'Germany'), (1266, 5, 'Netherlands'), (1225, 10, 'Afrikaner'), (1515, 9, 'Afrikaans'), (206, 13, 'Northern_Cape'), (1422, 13, 'Northern_Cape')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bill McDonough', 'Milton']
response in server.py code:
 [(24, 6, 'Milton,_Massachusetts'), (0, 14, 'William_McDonough')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Kengo wa Dondo']
response in server.py code:
 [(711, 7, 'Rwanda'), (1317, 7, 'Rwanda'), (1213, 7, 'Rwanda'), (71, 7, 'Rwanda'), (1175, 6, 'Rwanda'), (0, 7, 'Rwanda'), (1044, 6, 'Rwanda'), (782, 6, 'Rwanda'), (1608, 7, 'Rwanda'), (1523, 7, 'Democratic_Republic_of_the_Congo'), (955, 7, 'Democratic_Republic_of_the_Congo'), (1107, 7, 'Democratic_Republic_of_the_Congo'), (1201, 7, 'Democratic_Republic_of_the_Congo'), (1661, 8, 'Tanzania'), (1741, 6, 'Rwanda'), (1130, 14, 'Léon_Kengo'), (790, 4, 'United_Nations'), (298, 4, 'United_Nations'), (1616, 4, 'Hutu'), (50, 7, 'Nairobi'), (978, 4, 'Goma'), (1337, 5, 'Democratic_Republic_of_the_Congo'), (1777, 5, 'Hutu'), (1633, 5, 'Democratic_Republic_of_the_Congo'), (155, 5, 'Democratic_Republic_of_the_Congo'), (1465, 3, 'Republican_Rally_for_Democracy_in_Rwanda'), (283, 3, 'Rally_of_the_Republicans'), (434, 3, 'Rally_of_the_Republicans')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Mickey Kantor']
response in server.py code:
 [(128, 24, 'World_Trade_Organization'), (2701, 9, 'Singapore'), (1903, 9, 'Singapore'), (2645, 9, 'Singapore'), (3047, 9, 'Singapore'), (154, 3, 'World_Trade_Organization'), (2980, 9, 'Singapore'), (363, 9, 'Singapore'), (2426, 9, 'Singapore'), (1892, 3, 'World_Trade_Organization'), (417, 3, 'World_Trade_Organization'), (1872, 4, 'General_Agreement_on_Tariffs_and_Trade'), (1735, 3, 'World_Trade_Organization'), (1832, 38, 'General_Agreement_on_Tariffs_and_Trade'), (45, 3, 'World_Trade_Organization'), (3272, 9, 'Singapore'), (2000, 9, 'Singapore'), (482, 9, 'Singapore'), (2807, 11, 'Singapore'), (968, 13, 'Mickey_Kantor'), (1030, 3, 'World_Trade_Organization'), (1438, 9, 'Singapore'), (1134, 3, 'World_Trade_Organization'), (66, 9, 'Singapore'), (1226, 9, 'Singapore'), (1099, 9, 'Singapore'), (2088, 9, 'Singapore'), (904, 8, 'United_States'), (688, 4, 'United_States'), (879, 9, 'Singapore'), (10, 9, 'Singapore'), (87, 9, 'Singapore'), (1087, 6, 'Geneva'), (1629, 32, 'National_University_of_Singapore'), (3087, 3, 'World_Trade_Organization'), (1950, 14, 'European_Union'), (1184, 27, 'Institute_of_Policy_Studies_(Singapore)'), (1769, 7, 'Uruguay'), (2373, 6, 'Wine_tasting_descriptors'), (2058, 6, 'Wine_tasting_descriptors'), (472, 7, 'Individuals_with_Disabilities_Education_Act')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(17, 12, 'Print_server')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(21, 15, 'Livestock')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Marriner']
response in server.py code:
 [(977, 4, 'NATO'), (488, 4, 'NATO'), (1023, 7, 'Reuters'), (459, 8, 'Sarajevo'), (0, 4, 'NATO'), (75, 4, 'NATO'), (1157, 4, 'NATO'), (404, 4, 'NATO'), (706, 7, 'Islam'), (822, 7, 'Islam'), (1101, 4, 'NATO'), (1117, 4, 'United_Nations'), (353, 6, 'Islam'), (180, 6, 'Bosnia_and_Herzegovina'), (57, 6, 'Bosnia_and_Herzegovina'), (937, 7, 'Islam'), (136, 6, 'Islam'), (14, 6, 'Islam'), (655, 6, 'Islam'), (544, 5, 'Tuzla'), (189, 4, 'Serbia'), (764, 7, 'Bosnia_and_Herzegovina'), (949, 4, 'Serbia'), (395, 6, 'Mahala'), (643, 6, 'Mahala'), (554, 6, 'Mahala'), (673, 12, 'Republika_Srpska'), (469, 8, 'Andre_Marriner'), (170, 6, 'Mahala'), (49, 6, 'Mahala'), (260, 5, 'Serbia'), (1052, 6, 'Mahala')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Kid Cudi']
response in server.py code:
 [(85, 2, 'New_York'), (0, 8, 'Kid_Cudi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Horinouchi', 'Horinouchi']
response in server.py code:
 [(406, 7, 'Reuters'), (536, 3, 'Nippon_Telegraph_and_Telephone'), (263, 3, 'Nippon_Telegraph_and_Telephone'), (689, 3, 'Nippon_Telegraph_and_Telephone'), (51, 5, 'Tokyo'), (6, 3, 'Nippon_Telegraph_and_Telephone'), (105, 3, 'Nippon_Telegraph_and_Telephone'), (1005, 5, 'Japan'), (977, 5, 'Japan'), (1105, 3, 'Nippon_Telegraph_and_Telephone'), (0, 5, 'Japan')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['alan keyes']
response in server.py code:
 [(8, 10, 'Alan_Keyes')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Dzhokhar Dudayev', 'Alexander Lebed', 'Dudayeva', 'Doku Zavgayev']
response in server.py code:
 [(81, 6, 'Russia'), (988, 7, 'Russia'), (456, 6, 'Grozny'), (848, 7, 'Russia'), (1011, 8, 'Chechnya'), (868, 15, 'Alexander_Lebed'), (2539, 8, 'Chechnya'), (1157, 14, 'North_Caucasus'), (735, 7, 'Russia'), (600, 7, 'Chechnya'), (615, 16, 'Dzhokhar_Dudayev'), (1761, 13, 'Doku_Zavgayev'), (1727, 8, 'Chechnya'), (2489, 13, 'Takbir'), (1893, 7, 'Russia'), (2505, 3, 'God'), (2349, 3, 'God'), (2472, 7, 'Chechnya'), (68, 11, 'Urus-Martan'), (1670, 11, 'Urus-Martan'), (1657, 11, 'Urus-Martan'), (2657, 7, 'Islam'), (372, 11, 'Urus-Martan'), (2838, 7, 'Islam'), (126, 8, 'Chechnya'), (1622, 8, 'Alla_Dudayeva'), (0, 8, 'Chechnya'), (2387, 4, 'Lisa_Simpson')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(275, 7, 'Malaysia'), (406, 5, 'Ahold'), (466, 4, 'Asia'), (506, 5, 'Ahold'), (234, 8, 'Malaysia'), (613, 5, 'Ahold'), (694, 5, 'Ahold'), (669, 4, 'Asia'), (43, 7, 'Zaandam'), (817, 5, 'Ahold'), (0, 5, 'Ahold'), (293, 12, 'Kuala_Lumpur'), (52, 11, 'Netherlands'), (725, 6, 'Europe'), (809, 6, 'Brazil'), (740, 4, 'United_States'), (75, 5, 'Netherlands'), (675, 5, 'Netherlands'), (917, 9, 'Amsterdam'), (861, 3, 'United_States_dollar'), (339, 11, 'Johor_Bahru'), (171, 5, 'Asia'), (15, 5, 'Asia'), (439, 4, 'Tops_Friendly_Markets'), (567, 4, 'Tops_Friendly_Markets')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(13, 6, 'Ho_Chi_Minh_City')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 19, 'University_of_Texas_at_Austin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Henry Kennedy']
response in server.py code:
 []
given spans fix. original text:  Polish group to bid for Ruch newsstand chain - paper. WARSAW 1996-08-31 A Polish consortium including the Bank Rozwoju Exportu SA (BRE) plans to rival France's Hachette in bidding for Polish state-owned press distribution chain Ruch SA, Zycie Warszawy daily said on Saturday. Zycie Warszawy said its own publisher, mineral water firm Multico, and a group headed by Polish businessman Zygmunt Solorz were forming a consortium which would offer about $ 120 million, with finance provided by BRE. The consortium wanted 40 percent of Ruch's shares, the state would get 20 percent of Ruch and 40 percent would be offered on the Warsaw stock exchange. "This division would guarantee a dispersal of capital, preventing anyone from taking total control over Ruch and dictating market conditions," the paper quoted one of the initiators of the move as saying, without giving a name. A consortium of press distributor Hachette and Polish publishers group UWP are seeking more than than 50 percent of Ruch and French President Jacques Chirac is likely to support its case when he visits Poland in September, the daily said. News-stand chain Ruch, which controls about 65 percent of Poland's press distribution market, had a net profit of 16.2 million zlotys on sales of 2.7 billion zlotys in 1995. It has about 17,000 news-stands and was the country's sole press distributor before the 1989 fall of communism. Zycie Warszawy said the new, open consortium, which also included several listed Polish firms, would on Monday inform Privatisation Minister Wieslaw Kaczmarek of its plans. It aims to invest $ 200 million in Ruch over five years-- more than the sum Ruch says it needs to upgrade its outlets. Initially Poland offered up to 75 percent of Ruch but in March Kaczmarek cancelled the tender and offered a minority stake with an option to increase the equity. Two consortia-- UWP-Hachette and a consortium of a Polish SPC group and Swiss firms-- placed initial bids. But after the change of tender conditions Swiss investors pulled out and SPC decided to bid jointly with UWP-Hachette. Kaczmarek said in May he was unhappy that only one investor ended up bidding for Ruch, in which the government was initially offering up to 35 percent of shares with an option to extend the holding after investment promises are fulfilled.-- Anthony Barker+48 22 653 9700
original word:  Barker+48 Barker+48
new split:  Barker  and  +48
[(0, 6), (7, 12), (13, 15), (16, 19), (20, 23), (24, 28), (29, 38), (39, 44), (45, 46), (47, 52), (52, 53), (54, 60), (61, 71), (72, 73), (74, 80), (81, 91), (92, 101), (102, 105), (106, 110), (111, 118), (119, 126), (127, 129), (130, 131), (131, 134), (134, 135), (136, 141), (142, 144), (145, 150), (151, 157), (157, 159), (160, 168), (169, 171), (172, 179), (180, 183), (184, 190), (191, 202), (203, 208), (209, 221), (222, 227), (228, 232), (233, 235), (235, 236), (237, 242), (243, 251), (252, 257), (258, 262), (263, 265), (266, 274), (274, 275), (276, 281), (282, 290), (291, 295), (296, 299), (300, 303), (304, 313), (313, 314), (315, 322), (323, 328), (329, 333), (334, 341), (341, 342), (343, 346), (347, 348), (349, 354), (355, 361), (362, 364), (365, 371), (372, 383), (384, 391), (392, 398), (399, 403), (404, 411), (412, 413), (414, 424), (425, 430), (431, 436), (437, 442), (443, 448), (449, 450), (451, 454), (455, 462), (462, 463), (464, 468), (469, 476), (477, 485), (486, 488), (489, 492), (492, 493), (494, 497), (498, 508), (509, 515), (516, 518), (519, 526), (527, 529), (530, 534), (534, 536), (537, 543), (543, 544), (545, 548), (549, 554), (555, 560), (561, 564), (565, 567), (568, 575), (576, 578), (579, 583), (584, 587), (588, 590), (591, 598), (599, 604), (605, 607), (608, 615), (616, 618), (619, 622), (623, 629), (630, 635), (636, 644), (644, 645), (646, 647), (647, 651), (652, 660), (661, 666), (667, 676), (677, 678), (679, 688), (689, 691), (692, 699), (699, 700), (701, 711), (712, 718), (719, 723), (724, 730), (731, 736), (737, 744), (745, 749), (750, 754), (755, 758), (759, 768), (769, 775), (776, 786), (786, 787), (787, 788), (789, 792), (793, 798), (799, 805), (806, 809), (810, 812), (813, 816), (817, 827), (828, 830), (831, 834), (835, 839), (840, 842), (843, 849), (849, 850), (851, 858), (859, 865), (866, 867), (868, 872), (872, 873), (874, 875), (876, 886), (887, 889), (890, 895), (896, 907), (908, 916), (917, 920), (921, 927), (928, 938), (939, 944), (945, 948), (949, 952), (953, 960), (961, 965), (966, 970), (971, 975), (976, 978), (979, 986), (987, 989), (990, 994), (995, 998), (999, 1005), (1006, 1015), (1016, 1023), (1024, 1030), (1031, 1033), (1034, 1040), (1041, 1043), (1044, 1051), (1052, 1055), (1056, 1060), (1061, 1065), (1066, 1068), (1069, 1075), (1076, 1082), (1083, 1085), (1086, 1095), (1095, 1096), (1097, 1100), (1101, 1106), (1107, 1111), (1111, 1112), (1113, 1123), (1124, 1129), (1130, 1134), (1134, 1135), (1136, 1141), (1142, 1150), (1151, 1156), (1157, 1159), (1160, 1167), (1168, 1170), (1171, 1177), (1177, 1179), (1180, 1185), (1186, 1198), (1199, 1205), (1205, 1206), (1207, 1210), (1211, 1212), (1213, 1216), (1217, 1223), (1224, 1226), (1227, 1231), (1232, 1239), (1240, 1246), (1247, 1249), (1250, 1255), (1256, 1258), (1259, 1262), (1263, 1270), (1271, 1277), (1278, 1280), (1281, 1285), (1285, 1286), (1287, 1289), (1290, 1293), (1294, 1299), (1300, 1306), (1307, 1318), (1319, 1322), (1323, 1326), (1327, 1330), (1331, 1338), (1338, 1340), (1341, 1345), (1346, 1351), (1352, 1363), (1364, 1370), (1371, 1374), (1375, 1379), (1380, 1384), (1385, 1387), (1388, 1397), (1397, 1398), (1399, 1404), (1405, 1413), (1414, 1418), (1419, 1422), (1423, 1426), (1426, 1427), (1428, 1432), (1433, 1443), (1443, 1444), (1445, 1450), (1451, 1455), (1456, 1464), (1465, 1472), (1473, 1479), (1480, 1486), (1487, 1492), (1492, 1493), (1494, 1499), (1500, 1502), (1503, 1509), (1510, 1516), (1517, 1530), (1531, 1539), (1540, 1547), (1548, 1557), (1558, 1560), (1561, 1564), (1565, 1570), (1570, 1571), (1572, 1574), (1575, 1579), (1580, 1582), (1583, 1589), (1590, 1591), (1592, 1595), (1596, 1603), (1604, 1606), (1607, 1611), (1612, 1616), (1617, 1621), (1622, 1627), (1627, 1629), (1630, 1634), (1635, 1639), (1640, 1643), (1644, 1647), (1648, 1652), (1653, 1657), (1658, 1660), (1661, 1666), (1667, 1669), (1670, 1677), (1678, 1681), (1682, 1689), (1689, 1690), (1691, 1700), (1701, 1707), (1708, 1715), (1716, 1718), (1719, 1721), (1722, 1724), (1725, 1732), (1733, 1735), (1736, 1740), (1741, 1744), (1745, 1747), (1748, 1753), (1754, 1763), (1764, 1773), (1774, 1777), (1778, 1784), (1785, 1788), (1789, 1796), (1797, 1798), (1799, 1807), (1808, 1813), (1814, 1818), (1819, 1821), (1822, 1828), (1829, 1831), (1832, 1840), (1841, 1844), (1845, 1851), (1851, 1852), (1853, 1856), (1857, 1866), (1866, 1868), (1869, 1881), (1882, 1885), (1886, 1887), (1888, 1898), (1899, 1901), (1902, 1903), (1904, 1910), (1911, 1914), (1915, 1920), (1921, 1924), (1925, 1930), (1931, 1936), (1936, 1938), (1939, 1945), (1946, 1953), (1954, 1958), (1958, 1959), (1960, 1963), (1964, 1969), (1970, 1973), (1974, 1980), (1981, 1983), (1984, 1990), (1991, 2001), (2002, 2007), (2008, 2017), (2018, 2024), (2025, 2028), (2029, 2032), (2033, 2036), (2037, 2044), (2045, 2047), (2048, 2051), (2052, 2059), (2060, 2064), (2065, 2077), (2077, 2078), (2079, 2088), (2089, 2093), (2094, 2096), (2097, 2100), (2101, 2103), (2104, 2107), (2108, 2115), (2116, 2120), (2121, 2125), (2126, 2129), (2130, 2138), (2139, 2144), (2145, 2147), (2148, 2155), (2156, 2159), (2160, 2164), (2164, 2165), (2166, 2168), (2169, 2174), (2175, 2178), (2179, 2189), (2190, 2193), (2194, 2203), (2204, 2212), (2213, 2215), (2216, 2218), (2219, 2221), (2222, 2229), (2230, 2232), (2233, 2239), (2240, 2244), (2245, 2247), (2248, 2254), (2255, 2257), (2258, 2264), (2265, 2268), (2269, 2276), (2277, 2282), (2283, 2293), (2294, 2302), (2303, 2306), (2307, 2317), (2317, 2319), (2320, 2327), (2328, 2334), (2334, 2337)]
{0: 0, 1024: 184, 2052: 375, 7: 1, 1034: 186, 2060: 376, 13: 2, 16: 3, 1041: 187, 20: 4, 24: 5, 1540: 278, 1052: 189, 29: 6, 2079: 379, 1056: 190, 347: 62, 1061: 191, 39: 7, 2089: 380, 1066: 192, 1031: 185, 45: 8, 2094: 381, 47: 9, 399: 70, 2097: 382, 1911: 349, 52: 10, 2101: 383, 54: 11, 2104: 384, 1716: 313, 1083: 195, 2108: 385, 61: 12, 1086: 196, 2116: 386, 2048: 374, 1095: 197, 72: 13, 1097: 198, 74: 14, 1101: 199, 2126: 388, 81: 15, 2130: 389, 1107: 200, 1111: 201, 1113: 202, 2139: 390, 92: 16, 2145: 391, 1124: 203, 102: 17, 2065: 377, 106: 18, 2156: 393, 1134: 205, 111: 19, 1136: 206, 2164: 395, 1142: 207, 119: 20, 1044: 188, 127: 21, 130: 22, 131: 23, 1157: 209, 134: 24, 1160: 210, 142: 26, 1168: 211, 145: 27, 2194: 401, 1171: 212, 151: 28, 1177: 213, 1180: 214, 157: 29, 160: 30, 1186: 215, 2213: 403, 2216: 404, 169: 31, 2219: 405, 172: 32, 2222: 406, 1199: 216, 1736: 318, 449: 78, 180: 33, 1205: 217, 2230: 407, 1207: 218, 184: 34, 2233: 408, 1211: 219, 1213: 220, 191: 35, 2240: 409, 1217: 221, 203: 36, 2245: 410, 1224: 222, 1227: 223, 2255: 412, 1232: 224, 209: 37, 2258: 413, 1240: 225, 2265: 414, 2269: 415, 222: 38, 1247: 226, 1250: 227, 228: 39, 2277: 416, 1256: 228, 233: 40, 235: 41, 237: 42, 1263: 230, 243: 43, 2294: 418, 1271: 231, 1748: 321, 252: 44, 1278: 232, 2303: 419, 1281: 233, 258: 45, 2307: 420, 1285: 234, 1287: 235, 266: 47, 2317: 421, 1294: 237, 1069: 193, 2320: 422, 274: 48, 276: 49, 2328: 423, 282: 50, 1307: 239, 2334: 424, 291: 51, 1319: 240, 296: 52, 1323: 241, 300: 53, 1327: 242, 304: 54, 1331: 243, 313: 55, 1338: 244, 315: 56, 1341: 245, 1346: 246, 323: 57, 1352: 247, 329: 58, 334: 59, 1592: 289, 1364: 248, 341: 60, 343: 61, 1371: 249, 349: 63, 1375: 250, 355: 64, 1380: 251, 1385: 252, 362: 65, 1388: 253, 365: 66, 372: 67, 1397: 254, 1399: 255, 404: 71, 1405: 256, 384: 68, 1259: 229, 1414: 257, 392: 69, 1419: 258, 1423: 259, 1426: 260, 1428: 261, 1774: 324, 1433: 262, 412: 72, 414: 73, 1443: 263, 1445: 264, 425: 74, 1451: 265, 431: 75, 1456: 266, 437: 76, 2121: 387, 1465: 267, 443: 77, 1473: 268, 451: 79, 455: 80, 1480: 269, 1612: 293, 462: 81, 1487: 270, 464: 82, 1492: 271, 469: 83, 1494: 272, 1500: 273, 477: 84, 1503: 274, 1510: 275, 489: 86, 492: 87, 1517: 276, 494: 88, 498: 89, 1531: 277, 509: 90, 516: 91, 519: 92, 1548: 279, 527: 93, 530: 94, 534: 95, 537: 96, 1565: 282, 543: 97, 545: 98, 1570: 283, 1572: 284, 549: 99, 1575: 285, 555: 100, 1580: 286, 1583: 287, 561: 101, 565: 102, 1590: 288, 568: 103, 1596: 290, 1290: 236, 1076: 194, 576: 104, 701: 128, 579: 105, 1604: 291, 1607: 292, 584: 106, 588: 107, 591: 108, 1617: 294, 1622: 295, 599: 109, 2148: 392, 1627: 296, 605: 110, 1630: 297, 2077: 378, 608: 111, 1635: 298, 616: 112, 619: 113, 1644: 300, 623: 114, 1648: 301, 1640: 299, 1653: 302, 630: 115, 1300: 238, 1658: 303, 636: 116, 1130: 204, 1667: 305, 644: 117, 646: 118, 647: 119, 652: 120, 1678: 307, 1682: 308, 2166: 396, 661: 121, 1689: 309, 667: 122, 2160: 394, 677: 123, 679: 124, 1708: 312, 689: 125, 692: 126, 1719: 314, 1722: 315, 699: 127, 1725: 316, 1733: 317, 712: 129, 1558: 280, 1741: 319, 719: 130, 1745: 320, 724: 131, 2169: 397, 1754: 322, 731: 132, 1829: 334, 263: 46, 737: 133, 1764: 323, 745: 134, 750: 135, 1661: 304, 1778: 325, 755: 136, 759: 137, 1785: 326, 1151: 208, 1789: 327, 769: 138, 1797: 328, 1799: 329, 776: 139, 1808: 330, 786: 140, 787: 141, 789: 142, 1814: 331, 793: 143, 1819: 332, 1822: 333, 799: 144, 1561: 281, 1670: 306, 806: 145, 817: 148, 1832: 335, 810: 146, 2175: 398, 813: 147, 136: 25, 1845: 337, 1851: 338, 828: 149, 1853: 339, 831: 150, 1857: 340, 835: 151, 840: 152, 1866: 341, 843: 153, 1869: 342, 849: 154, 851: 155, 2190: 400, 1882: 343, 859: 156, 1886: 344, 1888: 345, 866: 157, 868: 158, 486: 85, 872: 159, 874: 160, 1899: 346, 876: 161, 1902: 347, 1904: 348, 887: 162, 890: 163, 1915: 350, 896: 164, 1921: 351, 1925: 352, 1931: 353, 908: 165, 1936: 354, 1939: 355, 917: 166, 921: 167, 1946: 356, 928: 168, 1954: 357, 1691: 310, 2179: 399, 1958: 358, 1960: 359, 2204: 402, 939: 169, 1964: 360, 945: 170, 1970: 361, 949: 171, 1974: 362, 953: 172, 2248: 411, 1981: 363, 1984: 364, 961: 173, 966: 174, 1991: 365, 971: 175, 976: 176, 2002: 366, 979: 177, 2283: 417, 2008: 367, 987: 178, 990: 179, 1701: 311, 2018: 368, 995: 180, 999: 181, 2025: 369, 2029: 370, 1006: 182, 2045: 373, 2033: 371, 2037: 372, 1016: 183, 1841: 336}
{2051: 374, 6: 0, 1033: 185, 2059: 375, 12: 1, 15: 2, 1040: 186, 19: 3, 23: 4, 1051: 188, 28: 5, 346: 61, 2078: 378, 1055: 189, 1060: 190, 1030: 184, 38: 6, 2088: 379, 1065: 191, 44: 7, 2093: 380, 46: 8, 1885: 343, 2096: 381, 691: 125, 52: 9, 53: 10, 2103: 383, 1082: 194, 1887: 344, 60: 11, 1085: 195, 2229: 406, 2115: 385, 1718: 313, 71: 12, 1096: 197, 73: 13, 1100: 198, 2125: 387, 80: 14, 2129: 388, 1106: 199, 867: 157, 1111: 200, 1112: 201, 2138: 389, 91: 15, 2144: 390, 2064: 376, 1123: 202, 101: 16, 1129: 203, 2155: 392, 110: 18, 1135: 205, 1043: 187, 2164: 394, 1141: 206, 118: 19, 2168: 396, 126: 20, 129: 21, 2178: 398, 131: 22, 1156: 208, 134: 23, 135: 24, 141: 25, 1167: 210, 144: 26, 1560: 280, 1170: 211, 150: 27, 1177: 212, 1179: 213, 157: 28, 159: 29, 1185: 214, 2212: 402, 2215: 403, 168: 30, 2218: 404, 171: 31, 2221: 405, 1198: 215, 2077: 377, 179: 32, 1205: 216, 1206: 217, 183: 33, 2232: 407, 1210: 218, 1212: 219, 202: 35, 190: 34, 2239: 408, 1216: 220, 2244: 409, 1910: 348, 1223: 221, 1226: 222, 2254: 411, 1231: 223, 208: 36, 2257: 412, 1239: 224, 2264: 413, 2268: 414, 221: 37, 1246: 225, 1249: 226, 227: 38, 2276: 415, 1255: 227, 232: 39, 1258: 228, 235: 40, 236: 41, 1262: 229, 242: 42, 1747: 320, 2293: 417, 1270: 230, 251: 43, 1277: 231, 2302: 418, 1280: 232, 257: 44, 2306: 419, 1285: 233, 1286: 234, 265: 46, 1293: 236, 2319: 421, 274: 47, 1299: 237, 2327: 422, 281: 49, 1306: 238, 2334: 423, 2337: 424, 290: 50, 1318: 239, 295: 51, 1322: 240, 299: 52, 1326: 241, 303: 53, 1330: 242, 1075: 193, 313: 54, 314: 55, 1340: 244, 1345: 245, 322: 56, 1351: 246, 328: 57, 1591: 288, 333: 58, 1068: 192, 1363: 247, 341: 59, 342: 60, 1370: 248, 348: 62, 1374: 249, 354: 63, 1379: 250, 1384: 251, 361: 64, 1387: 252, 364: 65, 371: 66, 1397: 253, 1398: 254, 1404: 255, 2282: 416, 383: 67, 1413: 256, 391: 68, 1418: 257, 1422: 258, 1773: 323, 1426: 259, 403: 70, 1432: 261, 411: 71, 413: 72, 1443: 262, 1444: 263, 424: 73, 1450: 264, 1095: 196, 430: 74, 1455: 265, 2120: 386, 436: 75, 1464: 266, 442: 76, 1472: 267, 450: 78, 1611: 292, 454: 79, 1479: 268, 1486: 269, 463: 81, 1492: 270, 1493: 271, 1499: 272, 476: 83, 1502: 273, 1509: 274, 488: 85, 1516: 275, 493: 87, 497: 88, 1530: 276, 508: 89, 515: 90, 518: 91, 1547: 278, 526: 92, 529: 93, 1557: 279, 534: 94, 536: 95, 1564: 281, 543: 96, 544: 97, 1570: 282, 1571: 283, 548: 98, 262: 45, 1574: 284, 554: 99, 1579: 285, 1582: 286, 560: 100, 564: 101, 1589: 287, 567: 102, 1595: 289, 575: 103, 578: 104, 1603: 290, 1606: 291, 583: 105, 587: 106, 590: 107, 2317: 420, 1616: 293, 2147: 391, 1621: 294, 598: 108, 1627: 295, 604: 109, 1629: 296, 607: 110, 1634: 297, 1852: 338, 615: 111, 618: 112, 1639: 298, 622: 113, 1647: 300, 275: 48, 1652: 301, 629: 114, 105: 17, 1657: 302, 635: 115, 1660: 303, 448: 77, 1666: 304, 1643: 299, 644: 116, 645: 117, 647: 118, 651: 119, 1677: 306, 1681: 307, 660: 120, 1134: 204, 1689: 308, 666: 121, 2159: 393, 676: 122, 678: 123, 1707: 311, 688: 124, 1715: 312, 398: 69, 1721: 314, 699: 126, 700: 127, 2165: 395, 1732: 316, 711: 128, 1740: 318, 718: 129, 1744: 319, 1539: 277, 723: 130, 462: 80, 1753: 321, 730: 131, 736: 132, 1763: 322, 744: 133, 749: 134, 1777: 324, 754: 135, 1150: 207, 758: 136, 1784: 325, 468: 82, 1788: 326, 768: 137, 1796: 327, 1798: 328, 775: 138, 2174: 397, 1807: 329, 786: 139, 787: 140, 788: 141, 1813: 330, 792: 142, 1818: 331, 1821: 332, 798: 143, 1669: 305, 816: 147, 1828: 333, 805: 144, 1831: 334, 809: 145, 1159: 209, 812: 146, 1840: 335, 2107: 384, 1844: 336, 1851: 337, 1289: 235, 830: 149, 1856: 339, 834: 150, 839: 151, 842: 152, 1868: 341, 2189: 399, 1724: 315, 850: 154, 1881: 342, 858: 155, 1338: 243, 485: 84, 865: 156, 827: 148, 2193: 400, 872: 158, 873: 159, 1898: 345, 875: 160, 1427: 260, 1901: 346, 1903: 347, 886: 161, 889: 162, 1914: 349, 895: 163, 1920: 350, 1924: 351, 492: 86, 1930: 352, 907: 164, 1735: 317, 1936: 353, 1938: 354, 916: 165, 920: 166, 1945: 355, 1690: 309, 2247: 410, 927: 167, 1953: 356, 2203: 401, 1958: 357, 1959: 358, 938: 168, 1963: 359, 944: 169, 1969: 360, 948: 170, 1973: 361, 952: 171, 1980: 362, 1866: 340, 1983: 363, 960: 172, 965: 173, 1990: 364, 970: 174, 975: 175, 2001: 365, 978: 176, 2007: 366, 1700: 310, 986: 177, 989: 178, 2100: 382, 2017: 367, 994: 179, 998: 180, 849: 153, 2024: 368, 2028: 369, 1005: 181, 2032: 370, 2036: 371, 1015: 182, 2047: 373, 2044: 372, 1023: 183}
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Zygmunt Solorz', 'Jacques Chirac', 'Kaczmarek', 'Kaczmarek', 'Anthony Barker']
response in server.py code:
 [(1171, 6, 'Poland'), (1076, 6, 'Poland'), (1701, 6, 'Poland'), (54, 6, 'Warsaw'), (1904, 6, 'Poland'), (2002, 5, 'Switzerland'), (921, 6, 'Poland'), (1925, 5, 'Switzerland'), (184, 6, 'Poland'), (276, 14, 'Życie_Warszawy'), (623, 6, 'Warsaw'), (74, 6, 'Poland'), (365, 6, 'Poland'), (1480, 6, 'Poland'), (0, 6, 'Poland'), (1399, 14, 'Życie_Warszawy'), (999, 6, 'France'), (237, 14, 'Życie_Warszawy'), (384, 14, 'Zygmunt_Solorz-Żak'), (151, 6, 'France'), (908, 8, 'Hachette_(publisher)'), (1130, 4, 'Ruch,_Gironde'), (160, 8, 'Hachette_(publisher)'), (1016, 14, 'Jacques_Chirac'), (579, 4, 'Ruch,_Gironde'), (530, 4, 'Ruch,_Gironde'), (750, 4, 'Ruch,_Gironde'), (990, 4, 'Ruch,_Gironde'), (1736, 4, 'Ruch,_Gironde'), (1648, 4, 'Ruch,_Gironde'), (1607, 4, 'Ruch,_Gironde'), (1754, 9, 'Wojciech_Kaczmarek'), (24, 4, 'Ruch,_Oregon'), (945, 3, "Polish_United_Workers'_Party"), (2320, 14, 'Anthony_Raine_Barker'), (2160, 4, 'Ruch,_Oregon'), (2079, 9, 'Wojciech_Kaczmarek'), (489, 3, 'Bremen_Airport'), (131, 3, 'Bremen_Airport')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Svetlana Gladishiva']
response in server.py code:
 [(62, 8, 'Colorado'), (158, 19, 'Svetlana_Gladishiva'), (253, 10, 'Svetlana_Gladishiva'), (306, 11, 'Lillehammer'), (56, 4, 'Vail,_Colorado'), (196, 6, 'Russia'), (318, 15, 'Winter_Olympic_Games'), (212, 9, 'FIFA_World_Cup'), (22, 9, 'FIFA_World_Cup'), (377, 19, 'IAAF_World_Championships_in_Athletics'), (126, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(12, 4, 'Diet_(nutrition)'), (7, 4, 'Skin')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Tom Wilkinson']
response in server.py code:
 [(165, 13, 'Tom_Wilkinson'), (152, 2, 'General_Motors')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(509, 6, 'Russia'), (45, 6, 'Moscow'), (69, 7, 'Russia'), (6, 7, 'Russia'), (293, 14, 'Sergiyev_Posad'), (202, 8, 'Interfax'), (194, 6, 'Moscow'), (391, 11, 'AK-47')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Svetlana Gladishiva', 'Carole Montillet', 'Hilde Gerg', 'Isolde Kostner', 'Warwara Zelenskaja', 'Florence Masnada', 'Katja Seizinger', 'Martina Ertl', 'Stefanie Schuster', 'Bibiana Perez', 'Barbara Merlin', 'Katharina Gutensohn', 'Renate Goetschl', 'Heidi Zurbriggen', 'Regine Cavagnoud', 'Anita Wachter', 'Megan Gerety', 'Hilary Lindh', 'Michaela Dorfmeister', 'Alexandra Meissnitzer', 'Ingeborg Helen Marken']
response in server.py code:
 [(634, 5, 'Italy'), (995, 13, 'Anita_Wachter'), (787, 7, 'Austria'), (670, 7, 'Germany'), (1160, 7, 'Austria'), (599, 5, 'Italy'), (712, 7, 'Germany'), (488, 7, 'Germany'), (1204, 7, 'Austria'), (563, 7, 'Austria'), (324, 5, 'Italy'), (288, 7, 'Germany'), (342, 18, 'Varvara_Zelenskaya'), (1010, 7, 'Austria'), (523, 7, 'Germany'), (1113, 11, 'Switzerland'), (471, 15, 'Katja_Seizinger'), (1181, 21, 'Alexandra_Meissnitzer'), (863, 11, 'Switzerland'), (825, 6, 'France'), (957, 16, 'Régine_Cavagnoud'), (750, 6, 'France'), (434, 16, 'Florence_Masnada'), (975, 6, 'France'), (902, 8, 'Slovenia'), (691, 19, 'Katharina_Gutensohn'), (1285, 11, 'Switzerland'), (168, 6, 'Russia'), (618, 14, 'Barbara_Merlin'), (410, 11, 'Switzerland'), (544, 17, 'Stefanie_Schuster'), (452, 6, 'France'), (1248, 6, 'Norway'), (362, 6, 'Russia'), (220, 6, 'Sweden'), (257, 6, 'France'), (509, 12, 'Martina_Ertl-Renz'), (584, 13, 'Bibiana_Perez'), (1138, 20, 'Michaela_Dorfmeister'), (1077, 4, 'United_States'), (939, 4, 'United_States'), (845, 16, 'Heidi_Zurbriggen'), (1045, 4, 'United_States'), (147, 19, 'Svetlana_Gladishiva'), (239, 16, 'Carole_Montillet'), (276, 10, 'Hilde_Gerg'), (55, 8, 'Colorado'), (770, 15, 'Renate_Götschl'), (1063, 12, 'Hilary_Lindh'), (1225, 21, 'Ingeborg_Helen_Marken'), (308, 14, 'Isolde_Kostner'), (1031, 12, 'Megan_Gerety'), (49, 4, 'Vail,_Colorado'), (22, 9, 'FIFA_World_Cup')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Casey']
response in server.py code:
 [(0, 8, 'Guerrero')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Puig', 'Fidel Castro', 'Puig', 'Fulgencio Batista', 'Puig', 'Puig']
response in server.py code:
 [(68, 4, 'Cuba'), (43, 6, 'Havana'), (486, 17, 'Fulgencio_Batista'), (303, 12, 'Fidel_Castro'), (268, 5, 'Cuba'), (0, 5, 'Cuba'), (413, 16, 'Santiago_de_Cuba'), (840, 7, 'United_States'), (1098, 13, 'Prensa_Latina'), (162, 6, 'Granma_(newspaper)'), (705, 8, 'The_Knot'), (431, 4, 'Mathieu_Puig'), (760, 6, 'Granma_(yacht)'), (191, 4, 'Mathieu_Puig'), (791, 4, 'Puig_(company)'), (750, 7, 'A_Woman'), (717, 10, 'Soul_Alone')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(18, 4, 'Florida_Comprehensive_Assessment_Test'), (13, 4, 'Mathematics_education')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Madeleine Albright', 'Jose Miguel Insulza']
response in server.py code:
 [(556, 5, 'Chile'), (654, 5, 'Chile'), (36, 5, 'Chile'), (137, 5, 'Chile'), (205, 7, 'Chile'), (401, 5, 'Chile'), (871, 9, 'Guatemala'), (269, 8, 'Madeleine_Albright'), (612, 7, 'Uruguay'), (585, 8, 'Madeleine_Albright'), (436, 4, 'United_States'), (858, 8, 'Honduras'), (106, 18, 'Madeleine_Albright'), (67, 4, 'United_States'), (248, 14, 'Latin_America'), (43, 8, 'Santiago'), (774, 14, 'Latin_America'), (538, 13, 'United_States'), (90, 14, 'United_Nations'), (754, 7, 'Bolivia'), (819, 10, 'Cochabamba'), (305, 19, 'José_Miguel_Insulza'), (16, 8, 'Madeleine_Albright'), (176, 16, 'United_Nations_Security_Council')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Svetlana Gladishiva', 'Pernilla Wiberg', 'Carole Montillet']
response in server.py code:
 [(176, 6, 'Sweden'), (98, 6, 'Russia'), (55, 8, 'Colorado'), (157, 15, 'Pernilla_Wiberg'), (75, 19, 'Svetlana_Gladishiva'), (203, 16, 'Carole_Montillet'), (223, 6, 'France'), (49, 4, 'Vail,_Colorado'), (30, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(19, 4, 'University_of_California,_San_Francisco')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(32, 6, 'France'), (39, 10, 'Missionary')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(15, 17, 'Elementary_school'), (33, 7, 'Teacher'), (42, 9, 'San_Diego')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Montoya']
response in server.py code:
 [(0, 7, 'Mexico'), (162, 9, 'Michoacán'), (297, 9, 'Michoacán'), (25, 9, 'Michoacán'), (145, 7, 'Mexico'), (51, 11, 'Mexico_City'), (501, 6, 'AK-47'), (352, 7, 'Morelia'), (814, 26, 'Popular_Revolutionary_Army'), (894, 7, 'Mexico')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Pat Hurst', 'Scott McCarron', 'Donna Andrews', 'Mike Hulbert', 'Kelli Kuehne', 'Tiger Woods', 'Beth Daniel', 'Davis Love']
response in server.py code:
 [(736, 11, 'Beth_Daniel'), (477, 14, 'Scott_McCarron'), (550, 12, 'Mike_Hulbert'), (463, 9, 'Pat_Hurst'), (664, 11, 'Tiger_Woods'), (752, 10, 'Davis_Love_III'), (67, 7, 'Florida'), (51, 14, 'Tarpon_Springs,_Florida'), (647, 12, 'Kelli_Kuehne'), (385, 4, 'LPGA'), (532, 13, 'Donna_Andrews_(golfer)'), (22, 16, 'JCPenney_Classic'), (158, 16, 'JCPenney_Classic'), (377, 3, "Professional_Golfers'_Association_of_America")]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['diane webber']
response in server.py code:
 [(0, 12, 'Diane_Webber')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Xiao Qiang', 'Deng Xiaoping']
response in server.py code:
 [(1505, 8, 'Hangzhou'), (996, 5, 'China'), (1491, 5, 'China'), (1302, 5, 'China'), (326, 14, 'New_York_City'), (124, 5, 'China'), (944, 21, 'Amnesty_International'), (768, 5, 'China'), (713, 13, 'Deng_Xiaoping'), (0, 5, 'China'), (51, 6, 'Manila'), (347, 21, 'Human_Rights_in_China_(organization)'), (924, 6, 'Manila'), (915, 4, 'Xiao_Qiang'), (740, 4, 'Xiao_Qiang'), (1218, 4, 'Xiao_Qiang'), (288, 10, 'Xiao_Qiang'), (1992, 4, 'Xiao_Qiang'), (1762, 4, 'Xiao_Qiang'), (664, 15, 'Communist_party')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(21, 3, 'Influenza')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['John Truscott']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Renate Goetschl']
response in server.py code:
 [(53, 8, 'Colorado'), (239, 6, 'Norway'), (272, 7, 'Austria'), (150, 15, 'Renate_Götschl'), (263, 7, 'Flachau'), (47, 4, 'Vail,_Colorado'), (184, 7, 'Austria'), (227, 11, 'Lillehammer'), (354, 10, 'European_Cup_(athletics)'), (386, 8, 'Renate_Götschl'), (324, 14, "Women's_Lacrosse_World_Cup"), (117, 9, 'FIS_Alpine_Ski_World_Cup'), (439, 9, 'FIS_Alpine_Ski_World_Cup')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 11, 'Blood_donation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Fidel Ramos', 'Suharto', 'Suharto']
response in server.py code:
 [(13, 9, 'Indonesia'), (163, 34, 'Organisation_of_Islamic_Cooperation'), (52, 6, 'Manila'), (147, 7, 'Suharto'), (408, 7, 'Suharto'), (397, 5, 'Fidel_V._Ramos'), (126, 10, 'Indonesia'), (199, 3, 'Organisation_of_Islamic_Cooperation'), (24, 3, 'Organisation_of_Islamic_Cooperation'), (687, 6, 'Manila'), (496, 7, 'Jakarta'), (91, 11, 'Fidel_V._Ramos'), (695, 5, 'Fidel_V._Ramos'), (795, 10, 'Philippines'), (0, 6, 'Manila'), (270, 6, 'Islam'), (70, 10, 'Philippines'), (872, 8, 'Mindanao')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Stem_cell'), (10, 8, 'Research')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Katja Seizinger', 'Renate Goetschl', 'Carole Montillet', 'Pernilla Wiberg', 'Heidi Zurbriggen', 'Alexandra Meissnitzer', 'Isolde Kostner', 'Megan Gerety', 'Warwara Zelenskaja', 'Masnada', 'Picabo Street', 'Stefanie Schuster', 'Miriam Vogt', 'Bibiana Perez', 'Hilde Gerg', 'Barbara Merlin', 'Kate Pace Lindsay', 'Svetlana Gladishiva', 'Regine Cavagnoud', 'Katja Seizinger', 'Pernilla Wiberg', 'Anita Wachter', 'Isolde Kostner', 'Heidi Zurbriggen', 'Warwara Zelenskaja', 'Renate Goetschl', 'Carole Montillet', 'Svetlana Gladishiva', 'Masnada', 'Deborah Compagnoni', 'Martina Ertl', 'Alexandra Meissnitzer', 'Claudia Riegler', 'Sabina Panzanini', 'Barbara Merlin', 'Stefanie Schuster', 'Miriam Vogt', 'Pernilla Wiberg', 'Hilde Gerg', 'Warwara Zelenskaja', 'Florence Masnada', 'Katja Seizinger', 'Isolde Kostner', 'Carole Montillet', 'Martina Ertl', 'Anita Wachter', 'Heidi Zurbriggen', 'Barbara Merlin', 'Katharina Gutensohn', 'Stefanie Schuster', 'Bibiana Perez', 'Miriam Vogt', 'Alexandra Meissnitzer']
response in server.py code:
 [(1493, 5, 'Italy'), (2174, 5, 'Italy'), (1832, 5, 'Italy'), (1320, 5, 'Italy'), (2041, 5, 'Italy'), (1524, 5, 'Italy'), (1907, 13, 'Anita_Wachter'), (1028, 13, 'Anita_Wachter'), (663, 5, 'Italy'), (1557, 7, 'Austria'), (1801, 7, 'Germany'), (1349, 7, 'Germany'), (1043, 7, 'Austria'), (1127, 18, 'Varvara_Zelenskaya'), (721, 7, 'Germany'), (2111, 7, 'Austria'), (1891, 7, 'Germany'), (946, 7, 'Germany'), (603, 7, 'Austria'), (1075, 5, 'Italy'), (1922, 7, 'Austria'), (488, 18, 'Varvara_Zelenskaya'), (689, 7, 'Germany'), (632, 7, 'Germany'), (2076, 7, 'Germany'), (2201, 7, 'Germany'), (1665, 7, 'Germany'), (1586, 7, 'Germany'), (1784, 15, 'Katja_Seizinger'), (1179, 7, 'Austria'), (1012, 7, 'Germany'), (355, 21, 'Alexandra_Meissnitzer'), (1366, 21, 'Alexandra_Meissnitzer'), (340, 7, 'Germany'), (152, 15, 'Katja_Seizinger'), (2272, 7, 'Austria'), (1300, 18, 'Deborah_Compagnoni'), (929, 15, 'Katja_Seizinger'), (1275, 7, 'Florence_Masnada'), (409, 5, 'Italy'), (2249, 21, 'Alexandra_Meissnitzer'), (532, 7, 'Florence_Masnada'), (378, 7, 'Austria'), (807, 16, 'Régine_Cavagnoud'), (1717, 18, 'Varvara_Zelenskaya'), (792, 6, 'Russia'), (1147, 6, 'Russia'), (2144, 6, 'France'), (1335, 12, 'Martina_Ertl-Renz'), (169, 7, 'Germany'), (1863, 6, 'France'), (209, 7, 'Austria'), (1752, 16, 'Florence_Masnada'), (1508, 14, 'Barbara_Merlin'), (257, 15, 'Pernilla_Wiberg'), (771, 19, 'Svetlana_Gladishiva'), (1229, 19, 'Svetlana_Gladishiva'), (1538, 17, 'Stefanie_Schuster'), (825, 6, 'France'), (1419, 8, 'Slovenia'), (2234, 6, 'France'), (2055, 19, 'Katharina_Gutensohn'), (2336, 7, 'Germany'), (1956, 11, 'Switzerland'), (969, 15, 'Pernilla_Wiberg'), (2372, 5, 'Italy'), (1877, 12, 'Martina_Ertl-Renz'), (2025, 14, 'Barbara_Merlin'), (648, 13, 'Bibiana_Perez'), (2005, 11, 'Switzerland'), (1621, 15, 'Pernilla_Wiberg'), (705, 14, 'Barbara_Merlin'), (306, 11, 'Switzerland'), (1737, 6, 'Russia'), (2312, 7, 'Austria'), (508, 6, 'Russia'), (1195, 16, 'Carole_Montillet'), (1638, 6, 'Sweden'), (2092, 17, 'Stefanie_Schuster'), (1250, 6, 'Russia'), (584, 17, 'Stefanie_Schuster'), (225, 16, 'Carole_Montillet'), (1437, 15, 'Claudia_Riegler'), (986, 6, 'Sweden'), (1107, 11, 'Switzerland'), (1213, 6, 'France'), (2159, 13, 'Bibiana_Perez'), (1770, 6, 'France'), (446, 6, 'Norway'), (1845, 16, 'Carole_Montillet'), (1702, 6, 'Russia'), (756, 6, 'Canada'), (541, 6, 'France'), (619, 11, 'Miriam_Vogt'), (677, 10, 'Hilde_Gerg'), (1573, 11, 'Miriam_Vogt'), (737, 17, 'Kate_Pace'), (2353, 11, 'Switzerland'), (1284, 6, 'France'), (1089, 16, 'Heidi_Zurbriggen'), (2385, 6, 'France'), (288, 16, 'Heidi_Zurbriggen'), (274, 6, 'Sweden'), (2188, 11, 'Miriam_Vogt'), (1266, 8, 'Florence'), (1653, 10, 'Hilde_Gerg'), (1938, 16, 'Heidi_Zurbriggen'), (2399, 6, 'Norway'), (571, 4, 'United_States'), (556, 13, 'Picabo_Street'), (243, 6, 'France'), (2427, 8, 'Slovenia'), (2413, 6, 'Sweden'), (475, 4, 'United_States'), (2458, 13, 'United_States'), (192, 15, 'Renate_Götschl'), (1162, 15, 'Renate_Götschl'), (1454, 11, 'New_Zealand'), (461, 12, 'Megan_Gerety'), (1598, 7, 'Super-G'), (49, 8, 'Colorado'), (393, 14, 'Isolde_Kostner'), (523, 8, 'Florence'), (1059, 14, 'Isolde_Kostner'), (2443, 6, 'Russia'), (1475, 16, 'Sabina_Panzanini'), (1816, 14, 'Isolde_Kostner'), (43, 4, 'Vail,_Colorado'), (77, 9, 'FIS_Alpine_Ski_World_Cup'), (852, 9, 'FIS_Alpine_Ski_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Suu Kyi', 'Aung San Suu Kyi']
response in server.py code:
 [(464, 7, 'Aung_San_Suu_Kyi'), (508, 7, 'Aung_San_Suu_Kyi'), (760, 7, 'Aung_San_Suu_Kyi'), (1549, 7, 'Aung_San_Suu_Kyi'), (1259, 7, 'Aung_San_Suu_Kyi'), (3094, 7, 'Aung_San_Suu_Kyi'), (108, 16, 'Aung_San_Suu_Kyi'), (3174, 7, 'Aung_San_Suu_Kyi'), (8, 7, 'Aung_San_Suu_Kyi'), (2888, 7, 'Aung_San_Suu_Kyi'), (1032, 7, 'Aung_San_Suu_Kyi'), (2586, 13, 'Insein_Prison'), (770, 29, 'National_League_for_Democracy'), (64, 7, 'Yangon'), (2246, 7, 'Aung_San_Suu_Kyi'), (1846, 39, 'State_Peace_and_Development_Council'), (1887, 5, 'State_Peace_and_Development_Council'), (494, 7, 'Yangon'), (83, 5, 'Burma'), (2576, 7, 'Yangon'), (0, 5, 'Burma'), (3106, 6, 'Denmark'), (3403, 5, 'Burma'), (1327, 3, 'National_League_for_Democracy'), (801, 3, 'National_League_for_Democracy'), (1601, 5, 'Burma'), (2993, 6, 'Insein_Railway_Station'), (1751, 3, 'National_League_for_Democracy'), (3522, 5, 'Burma'), (2952, 3, 'National_League_for_Democracy'), (1785, 3, 'National_League_for_Democracy'), (3166, 6, 'Insein_Township'), (3348, 3, 'National_League_for_Democracy'), (893, 7, 'Burma')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(74, 11, 'Action_News')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Renate Goetschl', 'Katja Seizinger', 'Isolde Kostner', 'Alexandra Meissnitzer', 'Megan Gerety', 'Miriam Vogt', 'Stefanie Schuster', 'Ingeborg Helen Marken', 'Florence Masnada', 'Heidi Zurbriggen', 'Warwara Zelenskaja', 'Barbara Merlin', 'Hilde Gerg', 'Martina Ertl', 'Pernilla Wiberg', 'Svetlana Gladishiva', 'Anita Wachter', 'Regine Cavagnoud', 'Kate Pace Lindsay', 'Bibiana Perez', 'Hilary Lindh', 'Carole Montillet', 'Brigitte Obermoser']
response in server.py code:
 [(964, 5, 'Italy'), (635, 5, 'Italy'), (666, 7, 'Germany'), (1234, 5, 'Italy'), (579, 18, 'Varvara_Zelenskaya'), (400, 7, 'Austria'), (515, 7, 'Germany'), (800, 13, 'Anita_Wachter'), (815, 7, 'Austria'), (701, 7, 'Germany'), (166, 7, 'Austria'), (256, 5, 'Italy'), (220, 7, 'Germany'), (1125, 7, 'Austria'), (297, 7, 'Austria'), (361, 7, 'Germany'), (203, 15, 'Katja_Seizinger'), (1272, 5, 'Italy'), (462, 16, 'Florence_Masnada'), (274, 21, 'Alexandra_Meissnitzer'), (722, 15, 'Pernilla_Wiberg'), (739, 6, 'Sweden'), (890, 6, 'France'), (850, 8, 'Slovenia'), (1042, 11, 'Switzerland'), (780, 6, 'Russia'), (1105, 18, 'Brigitte_Obermoser'), (1197, 6, 'Norway'), (1085, 6, 'France'), (872, 16, 'Régine_Cavagnoud'), (929, 6, 'Canada'), (687, 12, 'Martina_Ertl-Renz'), (554, 11, 'Switzerland'), (599, 6, 'Russia'), (619, 14, 'Barbara_Merlin'), (381, 17, 'Stefanie_Schuster'), (443, 6, 'Norway'), (759, 19, 'Svetlana_Gladishiva'), (480, 6, 'France'), (997, 13, 'United_States'), (654, 10, 'Hilde_Gerg'), (56, 8, 'Colorado'), (536, 16, 'Heidi_Zurbriggen'), (949, 13, 'Bibiana_Perez'), (348, 11, 'Miriam_Vogt'), (331, 4, 'United_States'), (1067, 16, 'Carole_Montillet'), (420, 21, 'Ingeborg_Helen_Marken'), (910, 17, 'Kate_Pace'), (983, 12, 'Hilary_Lindh'), (149, 15, 'Renate_Götschl'), (240, 14, 'Isolde_Kostner'), (317, 12, 'Megan_Gerety'), (50, 4, 'Vail,_Colorado'), (120, 9, 'FIS_Alpine_Ski_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Wedding')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(545, 7, 'Tianjin'), (154, 7, 'Tianjin'), (16, 5, 'China'), (667, 5, 'China'), (40, 7, 'Beijing'), (179, 5, 'China'), (604, 5, 'Mobil'), (652, 7, 'Tianjin'), (340, 7, 'Tianjin'), (86, 13, 'United_States'), (0, 12, 'Dow_Chemical_Company'), (611, 5, 'Royal_Dutch_Shell'), (190, 11, 'China_Daily'), (621, 6, 'Caltex')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(52, 20, 'Hendrick_Motorsports')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'Bartlesville,_Oklahoma'), (23, 8, 'National_Association_of_Realtors')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Vadim Sashurin', 'Frode Andresen', 'Ole Einar Bjorndalen', 'Sven Fischer', 'Ricco Gross', 'Pavel Muslimov', 'Olga Melnik', 'Svetlana Paramygina', 'Gunn Margit Andreassen', 'Simone Greiner-Petter-Memm', 'Petra Behle']
response in server.py code:
 [(209, 14, 'Frode_Andresen'), (517, 19, 'Svetlana_Paramygina'), (54, 6, 'Sweden'), (42, 10, 'Östersund'), (225, 6, 'Norway'), (562, 22, 'Gunn_Margit_Andreassen'), (248, 20, 'Ole_Einar_Bjørndalen'), (331, 11, 'Ricco_Groß'), (674, 7, 'Germany'), (270, 6, 'Norway'), (637, 7, 'Germany'), (307, 7, 'Germany'), (344, 7, 'Germany'), (661, 11, 'Petra_Behle'), (435, 6, 'Russia'), (397, 7, 'Germany'), (586, 6, 'Norway'), (494, 6, 'Russia'), (609, 26, 'Simone_Greiner-Petter-Memm'), (730, 10, 'Svetlana_Paramygina'), (293, 12, 'Sven_Fischer'), (388, 7, 'Sven_Fischer'), (538, 7, 'Belarus'), (449, 8, 'Vadim_Sashurin'), (137, 14, 'Vadim_Sashurin'), (153, 7, 'Belarus'), (481, 11, 'Olga_Melnik'), (419, 14, 'Pavel_Muslimov'), (747, 19, 'Simone_Greiner-Petter-Memm'), (718, 5, 'Petra_Behle'), (695, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(7, 5, 'Toner'), (13, 9, 'Recycling')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Kang Young-hoon']
response in server.py code:
 [(557, 12, 'South_Korea'), (15, 8, 'South_Korea'), (47, 5, 'Seoul'), (102, 11, 'South_Korea'), (858, 12, 'South_Korea'), (1082, 11, 'South_Korea'), (193, 5, 'Seoul'), (285, 11, 'North_Korea'), (0, 8, 'North_Korea'), (64, 11, 'North_Korea'), (944, 5, 'Seoul'), (427, 15, 'Kang_Young-hoon'), (830, 6, 'Yonhap'), (756, 23, 'International_Committee_of_the_Red_Cross'), (647, 6, 'Korea'), (1018, 6, 'Korea'), (164, 5, 'South_Korea'), (929, 5, 'North_Korea'), (592, 3, 'Kim_(Korean_surname)'), (452, 3, 'Kim_(Korean_surname)'), (1173, 5, 'South_Korea')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(34, 5, 'Maine'), (16, 4, 'Dish_Network')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Renate Goetschl', 'Katja Seizinger']
response in server.py code:
 [(187, 15, 'Katja_Seizinger'), (53, 8, 'Colorado'), (92, 7, 'Austria'), (206, 7, 'Germany'), (252, 5, 'Italy'), (47, 4, 'Vail,_Colorado'), (73, 15, 'Renate_Götschl')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Maruti_Suzuki')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Tiananmen Square']
response in server.py code:
 [(203, 8, 'Hangzhou'), (39, 7, 'Beijing'), (712, 8, 'Hangzhou'), (852, 5, 'China'), (123, 14, 'New_York_City'), (879, 19, 'Cultural_Revolution'), (248, 8, 'Zhejiang'), (0, 7, 'China'), (58, 7, 'China'), (1384, 7, 'Beijing'), (959, 14, 'Democracy_Wall'), (1394, 16, 'Tiananmen_Square_protests_of_1989'), (153, 21, 'Human_rights_in_China'), (1669, 7, 'Western_world'), (1453, 7, 'China'), (547, 4, 'Wang_Laboratories'), (917, 4, 'Wang_Laboratories')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(39, 18, 'Quincy_High_School_(Massachusetts)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Brian Shimer', 'Randy Jones', 'Guenther Huber', 'Antonio Tartaglia', 'Pierre Lueders', 'Dave MacEachern', 'Garrett Hines']
response in server.py code:
 [(49, 4, 'Innsbruck'), (429, 5, 'Italy'), (55, 7, 'Austria'), (404, 17, 'Antonio_Tartaglia'), (562, 15, 'David_MacEachern'), (749, 7, 'Germany'), (74, 12, 'Brian_Shimer'), (534, 14, 'Pierre_Lueders'), (209, 6, 'Brian_Shimer'), (738, 9, 'Altenberg,_Saxony'), (376, 14, 'Günther_Huber'), (773, 6, 'France'), (498, 9, 'United_States'), (690, 9, 'Canada'), (676, 8, 'Italy'), (899, 13, 'Garrett_Hines'), (762, 9, 'La_Plagne'), (229, 11, 'Randy_Jones_(bobsleigh)'), (599, 9, 'FIFA_World_Cup'), (292, 7, 'Summer_Olympic_Games'), (130, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Baltimore')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Tiananmen Square']
response in server.py code:
 [(390, 5, 'China'), (0, 5, 'China'), (45, 7, 'Beijing'), (121, 14, 'New_York_City'), (64, 7, 'China'), (968, 7, 'Beijing'), (534, 14, 'Democracy_Wall'), (151, 21, 'Human_Rights_in_China_(organization)'), (978, 16, 'Tiananmen_Square_protests_of_1989')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Xu Nannan', 'Sebastien Foucras', 'Blanc', 'Jeff Bean', 'Veronica Brenner', 'Evelyne Leu']
response in server.py code:
 [(944, 6, 'Canada'), (62, 6, 'France'), (178, 6, 'France'), (774, 9, 'Jeff_Bean'), (765, 6, 'Canada'), (1045, 6, 'France'), (54, 6, 'Tignes'), (924, 16, 'Veronica_Brenner'), (423, 6, 'Canada'), (1123, 5, 'Switzerland'), (412, 6, 'France'), (678, 7, 'Sébastien_Foucras'), (493, 6, 'France'), (565, 5, 'Laurent_Blanc'), (375, 9, 'Xu_Nannan'), (470, 17, 'Sébastien_Foucras'), (994, 6, 'Tignes'), (1238, 11, 'Evelyne_Leu'), (195, 6, 'Tignes'), (80, 5, 'China'), (225, 7, 'China'), (600, 9, 'FIFA_World_Cup'), (699, 9, 'FIFA_World_Cup'), (831, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Michael Irvin']
response in server.py code:
 [(120, 13, 'Michael_Irvin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(4, 7, 'Pontiac')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Western_Maryland'), (17, 7, 'Tourism')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(123, 9, 'Hong_Kong'), (0, 9, 'Hong_Kong'), (45, 9, 'Hong_Kong'), (583, 6, 'Taiwan'), (574, 5, 'China'), (368, 18, 'The_Standard_(Hong_Kong)'), (522, 7, 'China'), (325, 10, 'High_Court_of_Justice')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Brian Shimer', 'Randy Jones', 'Guenther Huber', 'Antonio Tartaglia', 'Pierre Lueders', 'Dave MacEachern', 'Sepp Dostthaler', 'Reto Goetschi', 'Guido Acklin', 'Dirk Wiese', 'Jiri Dzmura', 'Pavel Polomsky', 'Hubert Schoesser', 'Sean Olsson', 'Dean Ward', 'Garrett Hines']
response in server.py code:
 [(37, 4, 'Innsbruck'), (43, 7, 'Austria'), (593, 14, 'Pavel_Polomský'), (313, 15, 'David_MacEachern'), (241, 17, 'Antonio_Tartaglia'), (455, 12, 'Guido_Acklin'), (647, 16, 'Hubert_Schösser'), (367, 15, 'Sepp_Dostthaler'), (509, 10, 'Dirk_Wiese'), (297, 14, 'Pierre_Lueders'), (225, 14, 'Günther_Huber'), (580, 11, 'Jiří_Džmura'), (145, 12, 'Brian_Shimer'), (440, 13, 'Reto_Götschi'), (806, 13, 'Garrett_Hines'), (159, 11, 'Randy_Jones_(bobsleigh)'), (717, 11, 'Sean_Olsson'), (730, 9, 'Dean_Ward')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bafetimbi Gomis']
response in server.py code:
 [(11, 15, 'Bafétimbi_Gomis'), (31, 6, 'France')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(16, 7, 'Infant')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(229, 5, 'Wuhan'), (51, 7, 'Beijing'), (677, 9, 'Guangzhou'), (0, 5, 'China'), (566, 5, 'Wuhan'), (724, 9, 'Guangdong'), (271, 5, 'Hubei'), (804, 9, 'Guangzhou'), (74, 7, 'China'), (184, 11, 'China_Daily')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bob Woolmer', 'Tony Greig', 'Clarence Woolmer']
response in server.py code:
 [(182, 11, 'Bob_Woolmer'), (477, 7, 'Bob_Woolmer'), (533, 7, 'Bob_Woolmer'), (653, 10, 'Tony_Greig'), (10, 7, 'Bob_Woolmer'), (248, 7, 'Bob_Woolmer'), (871, 7, 'Bob_Woolmer'), (919, 7, 'Bob_Woolmer'), (908, 9, 'Cape_Town'), (434, 5, 'India'), (159, 7, 'England_cricket_team'), (1103, 8, 'Kolkata'), (289, 6, 'Kanpur'), (702, 16, 'Clarence_Woolmer'), (1316, 7, 'Bob_Woolmer'), (566, 7, 'England_cricket_team'), (666, 7, 'England'), (494, 13, 'South_Africa'), (54, 6, 'Kanpur'), (46, 6, 'Kanpur'), (62, 5, 'India'), (786, 12, 'Ranji_Trophy'), (136, 5, 'India_national_cricket_team'), (102, 6, 'Kanpur'), (941, 6, 'Kanpur'), (628, 5, 'India'), (778, 5, 'India'), (79, 12, 'South_Africa'), (731, 15, 'United_Provinces_(1937–50)'), (760, 13, 'Uttar_Pradesh')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(67, 15, 'Foreign_Affairs')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Sebastien Foucras', 'Jeff Bean', 'Eric Bergoust', 'Ales Valenta', 'Dmitri Dashinski', 'Veronica Brenner', 'Evelyne Leu', 'Jacqui Cooper', 'Marie Lindgren', 'Xu Nannan', 'Hilde Synnove Lid']
response in server.py code:
 [(646, 6, 'Canada'), (537, 6, 'Canada'), (242, 6, 'Canada'), (421, 6, 'Canada'), (679, 9, 'Australia'), (52, 6, 'France'), (716, 6, 'Sweden'), (169, 6, 'France'), (231, 9, 'Jeff_Bean'), (605, 11, 'Switzerland'), (847, 6, 'Norway'), (569, 11, 'Switzerland'), (778, 9, 'Australia'), (213, 6, 'France'), (309, 7, 'Austria'), (458, 4, 'United_States'), (349, 6, 'Russia'), (275, 3, 'United_States'), (519, 16, 'Veronica_Brenner'), (664, 13, 'Jacqui_Cooper'), (44, 6, 'Tignes'), (475, 16, 'Dmitri_Dashinski'), (381, 14, 'Czech_Republic'), (743, 5, 'China'), (810, 5, 'China'), (492, 7, 'Belarus'), (700, 14, 'Marie_Lindgren'), (592, 11, 'Evelyne_Leu'), (367, 12, 'Aleš_Valenta'), (194, 17, 'Sébastien_Foucras'), (828, 17, 'Hilde_Synnøve_Lid'), (260, 13, 'Eric_Bergoust'), (799, 9, 'Xu_Nannan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bill Clinton']
response in server.py code:
 [(226, 7, 'Reuters'), (432, 7, 'Reuters'), (422, 3, 'Kurdistan_Democratic_Party'), (1254, 3, 'Kurdistan_Democratic_Party'), (43, 4, 'Iraq'), (132, 4, 'Iraq'), (547, 4, 'Iraq'), (1298, 4, 'Iraq'), (813, 3, 'Kurdistan_Democratic_Party'), (1096, 3, 'Kurdistan_Democratic_Party'), (562, 3, 'Kurdistan_Democratic_Party'), (960, 4, 'United_States'), (828, 5, 'Iraq'), (1024, 4, 'United_States'), (1403, 6, 'Turkey'), (912, 5, 'Iraq'), (49, 8, 'Istanbul'), (1077, 5, 'Iraq'), (926, 5, 'Erbil'), (1238, 3, 'Patriotic_Union_of_Kurdistan'), (1175, 5, 'Erbil'), (1371, 8, 'Multi-National_Force_–_Iraq'), (1123, 28, 'Patriotic_Union_of_Kurdistan'), (394, 26, 'Kurdistan_Democratic_Party'), (1280, 7, 'Baghdad'), (796, 7, 'Baghdad'), (1449, 7, 'Baghdad'), (1228, 4, 'Iran'), (16, 7, 'Iran'), (1318, 13, 'Iraqi_Kurdistan'), (69, 7, 'Iran'), (779, 4, 'United_Nations'), (173, 7, 'Baghdad'), (1361, 8, 'Gulf_War'), (201, 13, 'Iraqi_Kurdistan'), (975, 12, 'Bill_Clinton'), (626, 7, 'Iran'), (458, 6, 'Ankara'), (521, 7, 'Iran'), (0, 11, 'Iraqi_Kurdistan'), (1438, 5, 'Kurdish_people'), (1046, 4, 'Persian_Gulf'), (365, 6, 'Humanzee')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 15, 'Science_project')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(22, 7, 'Raleigh,_North_Carolina')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Felix Hernandez']
response in server.py code:
 [(0, 15, 'Félix_Hernández'), (28, 16, 'Seattle_Mariners')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Takanobu Okabe', 'Kazuyoshi Funaki', 'Andreas Goldberger', 'Dieter Thoma', 'Ari-Pekka Nikkola', 'Reinhard Schwarzenberger', 'Noriaki Kasai', 'Jani Soininen', 'Kristian Brenden', 'Saitoh', 'Espen Bredesen', 'Primoz Peterka']
response in server.py code:
 [(642, 16, 'Kristian_Brenden'), (60, 7, 'Finland'), (410, 7, 'Finland'), (293, 18, 'Andreas_Goldberger'), (609, 7, 'Finland'), (915, 8, 'Slovakia'), (660, 6, 'Norway'), (51, 7, 'Kuusamo'), (853, 6, 'Norway'), (345, 12, 'Dieter_Thoma'), (261, 5, 'Japan'), (899, 14, 'Primož_Peterka'), (391, 17, 'Ari-Pekka_Nikkola'), (562, 5, 'Japan'), (468, 7, 'Austria'), (313, 7, 'Austria'), (594, 13, 'Jani_Soininen'), (517, 5, 'Japan'), (243, 16, 'Kazuyoshi_Funaki'), (442, 24, 'Reinhard_Schwarzenberger'), (183, 5, 'Japan'), (502, 13, 'Noriaki_Kasai'), (359, 7, 'Germany'), (763, 7, 'Kristian_Brenden'), (883, 8, 'Jani_Soininen'), (167, 14, 'Takanobu_Okabe'), (809, 6, 'Kazuyoshi_Funaki'), (778, 10, 'Andreas_Goldberger'), (868, 7, 'Ari-Pekka_Nikkola'), (743, 5, 'Dieter_Thoma'), (837, 14, 'Espen_Bredesen'), (796, 5, 'Takanobu_Okabe'), (697, 9, 'FIFA_World_Cup'), (100, 9, 'FIFA_World_Cup')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(555, 6, 'Israel'), (36, 7, 'Lebanon'), (172, 7, 'Lebanon'), (121, 6, 'Israel'), (334, 6, 'Israel'), (342, 7, 'Lebanon'), (866, 6, 'Israel'), (1241, 12, 'Hezbollah'), (1297, 6, 'Israel'), (1050, 7, 'Lebanon'), (592, 8, 'Lebanon'), (351, 5, 'Syria'), (1072, 7, 'Israel'), (1120, 7, 'Lebanon'), (685, 7, 'Israel'), (253, 7, 'Israel'), (204, 7, 'Israel'), (416, 3, 'Greenwich_Mean_Time'), (995, 7, 'Israel'), (45, 9, 'Jerusalem'), (373, 13, 'United_States'), (627, 9, 'Hezbollah'), (132, 9, 'Hezbollah'), (1230, 9, 'Hezbollah'), (358, 6, 'France'), (496, 6, 'United_Nations_Interim_Force_in_Lebanon'), (465, 29, 'United_Nations_Interim_Force_in_Lebanon'), (1154, 6, 'Jews'), (424, 7, 'Naqoura'), (234, 7, 'Islam')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Churkin']
response in server.py code:
 [(93, 4, 'United_States'), (70, 7, 'Vitaly_Churkin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Fung Permadi', 'Sun Jun', 'Allan Budi Kusuma', 'Susi Susanti', 'Camilla Martin', 'Ye Zhaoying', 'Gong Zhichao']
response in server.py code:
 [(245, 17, 'Alan_Budikusuma'), (302, 12, 'Susi_Susanti'), (367, 11, 'Ye_Zhaoying'), (316, 9, 'Indonesia'), (264, 9, 'Indonesia'), (203, 9, 'Indonesia'), (65, 4, 'Bali'), (332, 14, 'Camilla_Martin'), (392, 12, 'Gong_Zhichao'), (348, 7, 'Denmark'), (233, 5, 'China'), (224, 7, 'Sun_Jun_(badminton)'), (380, 5, 'China'), (406, 5, 'China'), (176, 6, 'Taiwan'), (162, 12, 'Fung_Permadi'), (12, 16, 'FIVB_World_Grand_Prix'), (110, 16, 'FIVB_World_Grand_Prix')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(26, 3, 'Health_club'), (0, 7, 'Physical_fitness')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Massoud Barzani', 'Saladdin']
response in server.py code:
 [(488, 7, 'Reuters'), (102, 15, 'Masoud_Barzani'), (391, 3, 'Kurdistan_Democratic_Party'), (94, 3, 'Kurdistan_Democratic_Party'), (406, 3, 'Kurdistan_Democratic_Party'), (13, 5, 'Iraq'), (66, 26, 'Kurdistan_Democratic_Party'), (47, 7, 'Baghdad'), (229, 5, 'Erbil'), (151, 5, 'Iraq'), (308, 5, 'Iraq'), (354, 5, 'Erbil'), (245, 4, 'United_Nations'), (262, 7, 'Baghdad'), (0, 3, 'Communist_Party_of_Germany'), (426, 8, 'Saladin'), (207, 5, 'Kurdish_people')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Sergey Klevchenya', 'Casey Fitzrandolph', 'Sylvain Bouchard', 'Kim Yoon-man', 'Franziska Schenk', 'Marianne Timmer', 'Chris Witty', 'Sylvain Bouchard', 'Sergey Klevchenya', 'Jan Bos', 'Lee Kyou-hyuk', 'Gerard Van Velde', 'Kim Yoon-man', 'Jeremy Wotherspoon', 'Franziska Schenk', 'Marianne Timmer', 'Chris Witty']
response in server.py code:
 [(551, 5, 'Japan'), (407, 5, 'Japan'), (1336, 5, 'Japan'), (333, 5, 'Japan'), (723, 5, 'Japan'), (215, 5, 'Japan'), (1443, 5, 'Japan'), (1585, 5, 'Japan'), (650, 6, 'Russia'), (758, 5, 'Japan'), (1181, 5, 'Japan'), (1461, 15, 'Marianne_Timmer'), (1299, 6, 'Canada'), (860, 6, 'Russia'), (1654, 5, 'Japan'), (776, 15, 'Marianne_Timmer'), (1071, 11, 'Netherlands'), (990, 6, 'Canada'), (370, 6, 'Russia'), (1514, 7, 'Germany'), (920, 7, 'Germany'), (259, 11, 'South_Korea'), (1043, 6, 'Russia'), (478, 6, 'Canada'), (687, 7, 'Germany'), (1127, 13, 'Lee_Kyou-hyuk'), (511, 11, 'South_Korea'), (1217, 11, 'Netherlands'), (1478, 11, 'Netherlands'), (1620, 6, 'Russia'), (1407, 7, 'Germany'), (1142, 11, 'South_Korea'), (497, 12, 'Kim_Yoon-man'), (793, 11, 'Netherlands'), (1108, 6, 'Norway'), (879, 11, 'Chris_Witty'), (1255, 11, 'South_Korea'), (1241, 12, 'Kim_Yoon-man'), (296, 6, 'Norway'), (1279, 18, 'Jeremy_Wotherspoon'), (1062, 7, 'Jan_Bos'), (1672, 11, 'Chris_Witty'), (1551, 4, 'United_States'), (64, 11, 'South_Korea'), (1685, 4, 'United_States'), (425, 18, 'Casey_FitzRandolph'), (614, 5, 'China'), (351, 17, 'Sergey_Klevchenya'), (826, 5, 'China'), (460, 16, 'Sylvain_Bouchard'), (1199, 16, 'Gerard_van_Velde'), (892, 2, 'United_States'), (1716, 5, 'China'), (1024, 17, 'Sergey_Klevchenya'), (972, 16, 'Sylvain_Bouchard'), (56, 6, 'Jeonju'), (445, 2, 'United_States'), (1389, 16, 'Franziska_Schenk'), (669, 16, 'Franziska_Schenk'), (817, 7, 'Jinhua')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(8, 4, 'Student_loans_in_the_United_States')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Alejandro Mayorkas']
response in server.py code:
 [(11, 18, 'Alejandro_Mayorkas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(46, 6, 'Manama'), (128, 8, 'Bahrain'), (28, 8, 'Bahrain'), (305, 6, 'Manama')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 14, 'Rio_de_Janeiro')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(750, 8, 'Canada'), (59, 8, 'Whistler,_British_Columbia'), (69, 16, 'British_Columbia'), (366, 17, 'Whistler_Blackcomb'), (40, 9, 'FIFA_World_Cup'), (503, 9, 'FIS_Alpine_Ski_World_Cup'), (97, 9, 'FIS_Alpine_Ski_World_Cup')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Tareq Aziz', 'Massoud Barzani', 'Massoud Barzani', 'Jalal Talabani', 'Saddam Hussein']
response in server.py code:
 [(308, 15, 'Masoud_Barzani'), (200, 15, 'Masoud_Barzani'), (433, 14, 'Jalal_Talabani'), (71, 4, 'Iraq'), (714, 14, 'Saddam_Hussein'), (534, 4, 'Iraq'), (100, 10, 'Tariq_Aziz'), (0, 4, 'Iraq'), (167, 4, 'Iraq'), (128, 5, 'Iraq'), (524, 4, 'Tariq_Aziz'), (841, 6, 'Saddam_Hussein'), (450, 4, 'Tariq_Aziz'), (693, 7, 'Masoud_Barzani'), (815, 7, 'Masoud_Barzani'), (32, 3, 'Kurdistan_Democratic_Party'), (970, 5, 'Iraq'), (1258, 3, 'Kurdistan_Democratic_Party'), (598, 4, 'United_States'), (1059, 8, 'Jalal_Talabani'), (797, 8, 'Jalal_Talabani'), (52, 7, 'Baghdad'), (397, 28, 'Patriotic_Union_of_Kurdistan'), (1191, 5, 'Iraq'), (1095, 4, 'United_Nations'), (1170, 5, 'Erbil'), (788, 4, 'Iran'), (633, 11, 'Iraqi_Kurdistan'), (653, 7, 'Baghdad'), (17, 7, 'Baghdad'), (499, 17, 'National_Iraqi_News_Agency'), (179, 7, 'Kurdistan'), (518, 3, 'Indonesia')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(15, 3, 'Spa')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Billy Dodds', 'Pierre Van Hooydonk', 'Paul Gascoigne', 'Paul Wright', 'Ally McCoist', 'Andreas Thom', 'Dean Windass', 'Brian Laudrup', 'Darren Jackson', 'Peter van Vossen', 'Gerry Britton', 'Colin Cameron', 'Robert Winters', 'Paolo Di Canio']
response in server.py code:
 [(427, 13, 'Gerry_Britton'), (456, 13, 'Colin_Cameron_(footballer)'), (180, 19, 'Pierre_van_Hooijdonk'), (368, 14, 'Darren_Jackson'), (213, 14, 'Paul_Gascoigne'), (156, 11, 'Billy_Dodds'), (384, 9, 'Hibernian_F.C.'), (471, 6, 'Heart_of_Midlothian_F.C.'), (399, 16, 'Peter_van_Vossen'), (295, 12, 'Andreas_Thom'), (268, 12, 'Ally_McCoist'), (98, 16, 'Scottish_Premier_League'), (343, 13, 'Brian_Laudrup'), (512, 14, 'Paolo_Di_Canio'), (496, 13, 'Dundee_United_F.C.'), (480, 14, 'Robbie_Winters'), (417, 7, 'Rangers_F.C.'), (169, 8, 'Aberdeen_F.C.'), (358, 7, 'Rangers_F.C.'), (332, 8, 'Aberdeen_F.C.'), (282, 7, 'Rangers_F.C.'), (201, 6, 'Celtic_F.C.'), (52, 7, 'Glasgow'), (229, 7, 'Rangers_F.C.'), (309, 6, 'Celtic_F.C.'), (528, 6, 'Celtic_F.C.'), (318, 12, 'Dean_Windass'), (242, 11, 'Paul_Wright_(footballer)'), (17, 25, 'Scottish_Premier_League'), (255, 10, 'Kilmarnock_F.C.'), (442, 11, 'Dunfermline_Athletic_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(479, 7, 'Reuters'), (154, 4, 'Iraq'), (23, 5, 'Iraq'), (0, 4, 'United_Nations'), (262, 3, 'Kurdistan_Democratic_Party'), (225, 5, 'Iraq'), (403, 5, 'Iraq'), (453, 4, 'United_Nations'), (267, 26, 'Kurdistan_Democratic_Party'), (52, 7, 'Baghdad'), (45, 5, 'Erbil'), (136, 5, 'Erbil'), (71, 14, 'United_Nations'), (177, 7, 'Kurdistan')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Ian Wright', 'Fabrizio Ravanelli', 'Alan Shearer', 'Matthew Le Tissier', 'Dwight Yorke', 'Les Ferdinand', 'Efan Ekoku', 'Gianluca Vialli', 'Robbie Earle', 'Les Ferdinand', 'Marcus Gayle', 'Gary Speed', 'Chris Sutton', 'Robbie Fowler', 'Steve McManaman', 'Peter Beardsley']
response in server.py code:
 [(199, 12, 'Alan_Shearer'), (475, 12, 'Chris_Sutton'), (504, 13, 'Robbie_Fowler'), (563, 15, 'Peter_Beardsley'), (531, 15, 'Steve_McManaman'), (38, 6, 'London'), (228, 18, 'Matthew_Le_Tissier'), (371, 12, 'Robbie_Earle'), (427, 12, 'Marcus_Gayle'), (317, 10, 'Efan_Ekoku'), (262, 12, 'Dwight_Yorke'), (290, 13, 'Les_Ferdinand'), (397, 13, 'Les_Ferdinand'), (453, 10, 'Gary_Speed'), (138, 10, 'Ian_Wright'), (276, 11, 'Aston_Villa_F.C.'), (163, 18, 'Fabrizio_Ravanelli'), (341, 15, 'Gianluca_Vialli'), (358, 7, 'Chelsea_F.C.'), (465, 7, 'Everton_F.C.'), (150, 7, 'Arsenal_F.C.'), (83, 7, 'England'), (183, 13, 'Middlesbrough_F.C.'), (489, 9, 'Blackburn_Rovers_F.C.'), (248, 11, 'Southampton_F.C.'), (548, 9, 'Liverpool_F.C.'), (213, 9, 'Newcastle_United_F.C.'), (519, 9, 'Liverpool_F.C.'), (305, 9, 'Newcastle_United_F.C.'), (329, 9, 'Wimbledon_F.C.'), (412, 9, 'Newcastle_United_F.C.'), (385, 9, 'Wimbledon_F.C.'), (441, 9, 'Wimbledon_F.C.'), (580, 9, 'Newcastle_United_F.C.'), (17, 7, 'England')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Jim Donnan']
response in server.py code:
 [(53, 10, 'Jim_Donnan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(354, 8, 'Linfield_F.C.'), (149, 4, 'Ards_F.C.'), (206, 8, 'Linfield_F.C.'), (195, 8, 'Glenavon_F.C.'), (183, 9, 'Portadown_F.C.'), (408, 8, 'Glenavon_F.C.'), (490, 4, 'Ards_F.C.'), (64, 6, 'London'), (513, 12, 'Cliftonville_F.C.'), (463, 9, 'Portadown_F.C.'), (435, 9, 'Glentoran_F.C.'), (217, 9, 'Glentoran_F.C.'), (168, 12, 'Cliftonville_F.C.'), (326, 9, 'Coleraine_F.C.'), (229, 9, 'Coleraine_F.C.'), (93, 16, 'Northern_Ireland'), (156, 9, 'Crusaders_F.C.'), (381, 9, 'Crusaders_F.C.'), (9, 16, 'Northern_Ireland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Habib Boulares', 'Zine al-Abidine Ben Ali']
response in server.py code:
 [(554, 23, 'Zine_El_Abidine_Ben_Ali'), (247, 8, 'Tunisia'), (330, 7, 'Tunisia'), (211, 7, 'Tunisia'), (87, 8, 'Tunisia'), (434, 7, 'Tunisia'), (308, 8, 'Tunisia'), (15, 7, 'Tunisia'), (115, 7, 'Reuters'), (33, 5, 'Tunis'), (229, 6, 'France'), (585, 6, 'Libya'), (278, 6, 'France'), (523, 7, 'Tripoli'), (403, 8, 'Le_Temps'), (497, 14, 'Habib_Boularès'), (450, 21, 'Palestinian_National_Authority'), (193, 9, 'La_Presse_(Canadian_newspaper)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(11, 6, 'Expert'), (0, 6, 'Online_and_offline')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Stephen Colbert']
response in server.py code:
 [(33, 15, 'Stephen_Colbert')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(31, 6, 'London'), (0, 11, 'Rugby_union'), (60, 7, 'United_Kingdom'), (207, 12, 'London_Irish'), (252, 5, 'London_Wasps'), (102, 14, 'Anglo-Welsh_Cup'), (179, 10, 'Harlequin_F.C.'), (150, 7, 'England'), (193, 10, 'Gloucester_Rugby'), (233, 15, 'West_Hartlepool_R.F.C.'), (130, 7, 'Reading_F.C.'), (363, 10, 'Pontypridd_RFC'), (377, 8, 'Bridgend_Ravens'), (171, 4, 'Bath_Rugby'), (272, 5, 'Wales'), (223, 6, 'Orrell_R.U.F.C.'), (316, 8, 'Llanelli_RFC'), (141, 6, 'Widnes_Vikings'), (433, 8, 'Scotland'), (399, 5, 'Neath_RFC'), (408, 8, 'Treorchy_RFC'), (305, 7, 'Cardiff'), (291, 10, 'Caerphilly_RFC'), (470, 10, 'Watsonians_RFC'), (261, 7, 'Bristol_Rugby'), (388, 7, 'Swansea_RFC'), (341, 7, 'Newport_RFC'), (420, 9, 'Ebbw_Vale_RLFC'), (455, 11, 'Boroughmuir_RFC'), (328, 9, 'Newbridge_RFC'), (352, 7, 'Dunvant_RFC')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Dewey']
response in server.py code:
 [(907, 10, 'California'), (49, 7, 'Detroit'), (12, 4, 'United_States'), (879, 7, 'Midwestern_United_States'), (838, 10, 'East_Coast_of_the_United_States'), (850, 14, 'Interstate_80'), (1699, 46, 'National_Highway_Traffic_Safety_Administration'), (788, 9, 'Labor_Day'), (891, 12, 'Interstate_5'), (817, 13, 'Interstate_95'), (869, 2, 'Interstate_90')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['les paul']
response in server.py code:
 [(10, 8, 'Les_Paul'), (0, 6, 'Bigsby_vibrato_tailpiece')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Alejandro Mayorkas']
response in server.py code:
 [(0, 18, 'Alejandro_Mayorkas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Rowson', 'McCoist', 'Laudrup', 'McGinlay']
response in server.py code:
 [(451, 9, 'Hibernian_F.C.'), (251, 6, 'Heart_of_Midlothian_F.C.'), (289, 13, 'Dundee_United_F.C.'), (171, 8, 'Aberdeen_F.C.'), (260, 5, 'Raith_Rovers_F.C.'), (369, 6, 'Celtic_F.C.'), (46, 7, 'Glasgow'), (335, 10, 'Motherwell_F.C.'), (78, 8, 'Scotland'), (194, 6, 'David_Rowson'), (400, 7, 'Rangers_F.C.'), (424, 7, 'Ally_McCoist'), (9, 8, 'Scotland'), (487, 8, 'John_McGinlay'), (276, 10, 'Kilmarnock_F.C.'), (133, 11, 'Dunfermline_Athletic_F.C.'), (439, 7, 'Michael_Laudrup'), (411, 8, 'Alex_Ferguson'), (379, 3, 'David_Hay'), (148, 6, 'Jimmy_Millar'), (183, 6, 'Kenny_Miller')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(62, 4, 'New_Hampshire'), (51, 9, 'Rochester,_New_York'), (127, 9, 'Rochester,_New_York'), (417, 6, 'Boston'), (11, 13, 'New_Hampshire')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(151, 23, 'George_Mason_University')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['CAMPESE', 'David Campese', 'Francois Pienaar', 'Michael Lynagh', 'Philippe Sella', 'Nick Farr-Jones', 'David Campese']
response in server.py code:
 [(50, 6, 'London'), (418, 14, 'Michael_Lynagh'), (68, 13, 'David_Campese'), (563, 7, 'David_Campese'), (883, 13, 'David_Campese'), (773, 7, 'David_Campese'), (23, 7, 'David_Campese'), (400, 16, 'Francois_Pienaar'), (748, 15, 'Nick_Farr-Jones'), (0, 11, 'Rugby_union'), (732, 7, 'Australia_national_rugby_union_team'), (273, 7, 'Australia_national_rugby_union_team'), (437, 14, 'Philippe_Sella'), (363, 8, 'Saracens_F.C.'), (803, 7, 'England'), (351, 6, 'London'), (125, 7, 'England'), (212, 9, 'Australia'), (681, 15, 'New_South_Wales_rugby_league_team'), (848, 7, 'England')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(47, 6, 'Dallas'), (91, 6, 'Dallas'), (30, 5, 'Texas'), (734, 6, 'Dallas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(38, 21, 'New_York_City_Department_of_Sanitation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Vieira', 'Sturridge', 'Powell', 'Zola', 'Vialli', 'Kanchelskis', 'Melville', 'Ekoku']
response in server.py code:
 [(43, 6, 'London'), (551, 11, 'Aston_Villa_F.C.'), (632, 5, 'Efan_Ekoku'), (221, 7, 'Chelsea_F.C.'), (592, 10, 'Sunderland_A.F.C.'), (120, 7, 'Arsenal_F.C.'), (505, 13, 'Middlesbrough_F.C.'), (252, 7, 'Everton_F.C.'), (537, 11, 'Southampton_F.C.'), (274, 11, 'Andrei_Kanchelskis'), (161, 9, 'Daniel_Sturridge'), (241, 6, 'Gianluca_Vialli'), (441, 9, 'Liverpool_F.C.'), (326, 9, 'Tottenham_Hotspur_F.C.'), (404, 9, 'Blackburn_Rovers_F.C.'), (141, 6, 'Patrick_Vieira'), (354, 6, 'Andy_Sinton'), (619, 9, 'Wimbledon_F.C.'), (9, 7, 'England'), (74, 7, 'England'), (645, 10, 'Dean_Holdsworth'), (232, 4, 'Gianfranco_Zola'), (521, 5, 'Leeds_United_A.F.C.'), (453, 19, 'Sheffield_Wednesday_F.C.'), (152, 5, 'Derby_County_F.C.'), (378, 9, 'Leicester_City_F.C.'), (339, 10, 'Teddy_Sheringham'), (476, 11, 'Peter_Whittingham'), (303, 8, 'Coventry_City_F.C.'), (566, 8, 'Andy_Townsend'), (175, 6, 'Chris_Powell'), (315, 6, 'Glenn_Whelan'), (131, 5, 'Micky_Adams'), (417, 6, 'Chris_Sutton')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Clinton', 'Jim Adams', 'Bill Clinton', 'Carl Vinson', 'Carl Vinson']
response in server.py code:
 [(1054, 7, 'Bill_Clinton'), (828, 7, 'Bill_Clinton'), (1377, 7, 'Bill_Clinton'), (2029, 13, 'United_States'), (552, 13, 'United_States'), (1247, 4, 'United_States'), (2263, 4, 'United_States'), (2321, 4, 'United_States'), (2011, 4, 'United_States'), (97, 4, 'United_States'), (261, 4, 'United_States'), (1346, 4, 'Iraq'), (0, 4, 'United_States'), (2177, 4, 'United_States'), (1658, 4, 'United_States'), (202, 4, 'United_States'), (1718, 4, 'United_States'), (868, 4, 'United_States'), (1616, 4, 'Iraq'), (1596, 4, 'Iraq'), (1000, 4, 'Iraq'), (2545, 4, 'United_States'), (1631, 4, 'United_States'), (1390, 5, 'Iraq'), (448, 13, 'Mediterranean_Sea'), (1947, 4, 'General_Dynamics_F-16_Fighting_Falcon'), (1678, 5, 'Iraq'), (170, 12, 'Bill_Clinton'), (1938, 4, 'McDonnell_Douglas_F-15_Eagle'), (61, 10, 'Washington,_D.C.'), (2298, 12, 'Saudi_Arabia'), (36, 7, 'Bill_Clinton'), (2248, 7, 'United_States_Marine_Corps'), (255, 4, 'Iraq'), (744, 8, 'The_Pentagon'), (952, 5, 'Iraq'), (1432, 5, 'Erbil'), (615, 21, 'United_States_Department_of_Defense'), (1519, 4, 'Iran'), (1892, 9, 'United_States_Air_Force'), (1865, 6, 'USS_Carl_Vinson_(CVN-70)'), (1561, 4, 'Iran'), (2106, 9, 'United_States_Air_Force'), (2381, 7, 'United_States_Marine_Corps'), (1492, 7, 'Baghdad'), (221, 5, 'Iraq'), (1095, 9, 'Tennessee'), (1810, 4, 'Grumman_F-14_Tomcat'), (25, 4, 'Persian_Gulf'), (2454, 11, 'USS_Carl_Vinson_(CVN-70)'), (390, 4, 'Persian_Gulf'), (2213, 4, 'Persian_Gulf'), (357, 11, 'USS_Carl_Vinson_(CVN-70)'), (2563, 4, 'Persian_Gulf'), (887, 4, 'Persian_Gulf'), (1089, 4, 'Troy,_New_York'), (1473, 7, 'Kurdistan'), (969, 7, 'Kurdistan'), (51, 9, 'Jim_Adams_(lacrosse)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(10, 13, 'Child_support'), (0, 9, 'Tennessee'), (24, 8, 'Payment')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'Control_Yuan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(654, 15, 'Greenock_Morton_F.C.'), (626, 9, 'St._Mirren_F.C.'), (487, 12, 'St._Johnstone_F.C.'), (865, 5, 'Clyde_F.C.'), (302, 9, 'Hibernian_F.C.'), (277, 6, 'Heart_of_Midlothian_F.C.'), (922, 13, 'Stenhousemuir_F.C.'), (36, 7, 'Glasgow'), (544, 13, 'Airdrieonians_F.C.'), (745, 9, 'East_Fife_F.C.'), (250, 8, 'Aberdeen_F.C.'), (1140, 11, 'Ross_County_F.C.'), (421, 5, 'Raith_Rovers_F.C.'), (1305, 8, 'Arbroath_F.C.'), (1332, 13, 'East_Stirlingshire_F.C.'), (1194, 11, 'Cowdenbeath_F.C.'), (1170, 5, 'Alloa_Athletic_F.C.'), (225, 6, 'Celtic_F.C.'), (600, 7, 'Partick_Thistle_F.C.'), (954, 9, 'Stranraer_F.C.'), (55, 8, 'Scotland'), (9, 8, 'Scotland'), (1077, 8, 'Montrose_F.C.'), (330, 13, 'Dundee_United_F.C.'), (1274, 12, "Queen's_Park_F.C."), (362, 10, 'Motherwell_F.C.'), (1249, 6, 'Forfar_Athletic_F.C.'), (688, 9, 'Clydebank_F.C.'), (982, 9, 'Dumbarton_F.C.'), (198, 7, 'Rangers_F.C.'), (576, 6, 'Dundee_F.C.'), (808, 10, 'Livingston_F.C.'), (445, 10, 'Kilmarnock_F.C.'), (518, 7, 'Falkirk_F.C.'), (1010, 7, 'Brechin_City_F.C.'), (1104, 17, 'Inverness_Thistle_F.C.'), (391, 11, 'Dunfermline_Athletic_F.C.'), (1036, 7, 'Berwick_Rangers_F.C.'), (785, 3, 'Ayr_United_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Severine', 'Marc Dutroux']
response in server.py code:
 [(70, 7, 'Belgium'), (12, 7, 'Belgium'), (46, 8, 'Brussels'), (731, 7, 'Belgium'), (257, 5, 'Liège'), (548, 5, 'Liège'), (643, 12, 'Marc_Dutroux'), (178, 6, 'Rachel'), (189, 8, 'Séverine_(singer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(5, 11, 'Family_tree')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Jim Cain']
response in server.py code:
 [(0, 2, 'General_Motors')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(12, 8, 'Tasmania'), (0, 11, 'Hiking')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(35, 6, 'London'), (2717, 13, 'Leyton_Orient_F.C.'), (66, 7, 'England'), (574, 10, 'Sunderland_A.F.C.'), (406, 7, 'Everton_F.C.'), (344, 17, 'Manchester_United_F.C.'), (188, 14, 'Premier_League'), (1168, 19, 'Queens_Park_Rangers_F.C.'), (748, 17, 'Nottingham_Forest_F.C.'), (9, 7, 'England'), (380, 7, 'Chelsea_F.C.'), (630, 13, 'Middlesbrough_F.C.'), (1058, 5, 'Stoke_City_F.C.'), (1506, 9, 'Brentford_F.C.'), (1563, 4, 'Bury_F.C.'), (1206, 9, 'Port_Vale_F.C.'), (1639, 12, 'Chesterfield_F.C.'), (1808, 14, 'Bristol_Rovers_F.C.'), (690, 11, 'Southampton_F.C.'), (2199, 6, 'Fulham_F.C.'), (1700, 7, 'Watford_F.C.'), (286, 11, 'Aston_Villa_F.C.'), (470, 9, 'Tottenham_Hotspur_F.C.'), (203, 7, 'Arsenal_F.C.'), (603, 8, 'West_Ham_United_F.C.'), (258, 9, 'Liverpool_F.C.'), (1439, 8, 'Bradford_Bulls'), (796, 6, 'Bolton_Wanderers_F.C.'), (1535, 8, 'Millwall_F.C.'), (1949, 10, 'Gillingham_F.C.'), (1326, 7, 'Reading_F.C.'), (951, 8, 'Tranmere_Rovers_F.C.'), (2607, 8, 'Rochdale_A.F.C.'), (1296, 10, 'Portsmouth_F.C.'), (1726, 7, 'Wrexham_F.C.'), (2360, 6, 'Barnet_F.C.'), (1353, 13, 'West_Bromwich_Albion_F.C.'), (662, 9, 'Blackburn_Rovers_F.C.'), (316, 9, 'Newcastle_United_F.C.'), (2474, 11, 'Scarborough_F.C.'), (1137, 12, 'Huddersfield_Giants'), (1467, 6, 'Oldham_Roughyeds'), (822, 16, 'Sheffield_United_F.C.'), (1612, 7, 'Burnley_F.C.'), (2254, 5, 'Wigan_Warriors'), (1922, 7, 'Walsall_F.C.'), (858, 8, 'Barnsley_F.C.'), (978, 7, 'Norwich_City_F.C.'), (1893, 9, 'Blackpool_F.C.'), (1777, 12, 'Bristol_City_F.C.'), (1385, 8, 'Southend_United_F.C.'), (2556, 4, 'Hull_F.C.'), (230, 9, 'Wimbledon_F.C.'), (2096, 12, 'Notts_County_F.C.'), (2128, 7, 'Wycombe_Wanderers_F.C.'), (886, 14, 'Crystal_Palace_F.C.'), (1412, 7, 'Grimsby_Town_F.C.'), (2415, 10, 'Scunthorpe_United_F.C.'), (2006, 11, 'A.F.C._Bournemouth'), (1841, 10, 'Shrewsbury_Town_F.C.'), (2634, 6, 'Exeter_City_F.C.'), (1261, 15, 'Manchester_City_F.C.'), (919, 13, 'Wolverhampton_Wanderers_F.C.'), (1004, 10, 'Birmingham_City_F.C.'), (2749, 8, 'Hereford_United_F.C.'), (1587, 5, 'Luton_Town_F.C.'), (1033, 6, 'Oxford_United_F.C.'), (1235, 7, 'Ipswich_Town_F.C.'), (522, 9, 'Leicester_City_F.C.'), (1671, 9, 'Stockport_County_F.C.'), (2334, 7, 'Swansea_City_A.F.C.'), (432, 19, 'Sheffield_Wednesday_F.C.'), (1979, 7, 'Preston_North_End_F.C.'), (2064, 12, 'Peterborough_United_F.C.'), (721, 8, 'Coventry_City_F.C.'), (1082, 7, 'Swindon_Town_F.C.'), (2580, 7, 'Torquay_United_F.C.'), (2777, 10, 'Darlington_F.C.'), (2444, 11, 'Northampton_Town_F.C.'), (2530, 7, 'Chester_City_F.C.'), (2660, 9, 'Doncaster_RLFC'), (550, 5, 'Leeds_Rhinos'), (1752, 5, 'Crewe_Alexandra_F.C.'), (498, 5, 'Derby_County_F.C.'), (1109, 8, 'Charlton_Athletic_F.C.'), (2307, 7, 'Cardiff_City_F.C.'), (2385, 10, 'Colchester_United_F.C.'), (2807, 10, 'Hartlepool_United_F.C.'), (2037, 8, 'Plymouth_Argyle_F.C.'), (2837, 8, 'Brighton_&_Hove_Albion_F.C.'), (2279, 8, 'Carlisle_United_F.C.'), (2155, 9, 'Rotherham_United_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Algeria'), (353, 8, 'Staouéli'), (49, 5, 'Paris'), (1092, 7, 'Algeria'), (186, 8, 'Algeria'), (149, 8, 'Algeria'), (107, 7, 'Algiers'), (1119, 6, 'Islam'), (808, 8, 'Algeria'), (1011, 6, 'Islam'), (744, 7, 'Algiers'), (1243, 9, 'Islamism'), (367, 8, 'Le_Matin_(France)'), (456, 7, 'Liberté')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Boomer Esiason']
response in server.py code:
 [(16, 14, 'Boomer_Esiason'), (0, 7, 'NFL_on_CBS')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['VIEIRA', 'Patrick Vieira', 'Dean Sturridge', 'Darryl Powell', 'Tony Adams', 'Guy Whittingham', 'Efan Ekoku', 'Dean Holdsworth']
response in server.py code:
 [(58, 6, 'London'), (419, 10, 'Tony_Adams_(footballer)'), (809, 15, 'Dean_Holdsworth'), (185, 7, 'Arsenal_F.C.'), (86, 14, 'Patrick_Vieira'), (368, 7, 'Arsenal_F.C.'), (22, 7, 'Arsenal_F.C.'), (541, 15, 'Guy_Whittingham'), (308, 13, 'Darryl_Powell'), (9, 6, 'Patrick_Vieira'), (877, 7, 'Arsenal_F.C.'), (457, 9, 'Liverpool_F.C.'), (744, 10, 'Efan_Ekoku'), (661, 10, 'Sunderland_A.F.C.'), (615, 9, 'Liverpool_F.C.'), (289, 14, 'Dean_Sturridge'), (154, 7, 'England'), (566, 19, 'Sheffield_Wednesday_F.C.'), (587, 9, 'Wimbledon_F.C.'), (76, 9, 'France'), (845, 9, 'Wimbledon_F.C.'), (204, 5, 'Derby_County_F.C.'), (227, 6, 'London')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Abolhassan Banisadr']
response in server.py code:
 [(1745, 7, 'Germany'), (1485, 7, 'Germany'), (1542, 6, 'Berlin'), (1197, 6, 'Berlin'), (1674, 11, 'Der_Spiegel'), (319, 11, 'Der_Spiegel'), (51, 4, 'Bonn'), (809, 4, 'Bonn'), (2004, 6, 'Germany'), (675, 6, 'Germany'), (1830, 6, 'Germany'), (1470, 4, 'Iran'), (116, 6, 'Germany'), (1443, 6, 'Berlin'), (1238, 19, 'Abolhassan_Banisadr'), (1633, 6, 'France'), (1506, 8, 'Abolhassan_Banisadr'), (0, 4, 'Iran'), (929, 4, 'Iran'), (1259, 8, 'Abolhassan_Banisadr'), (201, 4, 'Bonn'), (20, 6, 'Germany'), (45, 4, 'Bonn'), (1590, 8, 'Abolhassan_Banisadr'), (2036, 8, 'Abolhassan_Banisadr'), (343, 7, 'Iran'), (1220, 7, 'Iran'), (419, 7, 'Iran'), (1870, 4, 'Iran'), (753, 7, 'Iran'), (1962, 4, 'Iran'), (1349, 7, 'Iran'), (67, 7, 'Iran'), (143, 6, 'Tehran'), (730, 6, 'Tehran'), (1295, 6, 'Tehran'), (1422, 7, 'Kurdistan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['gomes']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Husted']
response in server.py code:
 [(47, 10, 'Cincinnati'), (69, 6, 'Jon_A._Husted')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(701, 5, 'Clyde_F.C.'), (376, 9, 'East_Fife_F.C.'), (307, 12, 'St._Johnstone_F.C.'), (289, 15, 'Greenock_Morton_F.C.'), (408, 9, 'St._Mirren_F.C.'), (510, 11, 'Ross_County_F.C.'), (556, 5, 'Alloa_Athletic_F.C.'), (334, 13, 'Airdrieonians_F.C.'), (42, 7, 'Glasgow'), (621, 5, 'Alloa_Athletic_F.C.'), (457, 13, 'Stenhousemuir_F.C.'), (167, 6, 'Heart_of_Midlothian_F.C.'), (176, 5, 'Raith_Rovers_F.C.'), (245, 9, 'Hibernian_F.C.'), (213, 10, 'Motherwell_F.C.'), (197, 13, 'Dundee_United_F.C.'), (156, 8, 'Aberdeen_F.C.'), (547, 6, 'Forfar_Athletic_F.C.'), (72, 8, 'Scotland'), (684, 6, 'Forfar_Athletic_F.C.'), (596, 12, 'Scottish_Cup'), (444, 10, 'Livingston_F.C.'), (388, 7, 'Partick_Thistle_F.C.'), (583, 12, "Queen's_Park_F.C."), (235, 7, 'Rangers_F.C.'), (473, 9, 'Stranraer_F.C.'), (524, 8, 'Montrose_F.C.'), (226, 6, 'Celtic_F.C.'), (350, 9, 'Clydebank_F.C.'), (279, 7, 'Falkirk_F.C.'), (270, 6, 'Dundee_F.C.'), (638, 10, 'Elgin_City_F.C.'), (9, 8, 'Scotland'), (485, 7, 'Brechin_City_F.C.'), (184, 10, 'Kilmarnock_F.C.'), (142, 11, 'Dunfermline_Athletic_F.C.'), (563, 17, 'Inverness_Thistle_F.C.'), (651, 9, 'Whitehill_Welfare_F.C.'), (692, 6, 'Huntly_F.C.')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(24, 13, 'Killeen,_Texas')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Dini', 'Nyerere', 'Lamberto Dini', 'Julius Nyerere', 'Howard Wolpe', 'Pierre Buyoya']
response in server.py code:
 [(63, 7, 'Italy'), (0, 5, 'Italy'), (380, 7, 'Italy'), (488, 4, 'Lamberto_Dini'), (47, 4, 'Rome'), (88, 13, 'Lamberto_Dini'), (145, 14, 'Julius_Nyerere'), (241, 4, 'Rome'), (1016, 6, 'Pierre_Buyoya'), (1106, 6, 'Pierre_Buyoya'), (222, 7, 'Julius_Nyerere'), (321, 7, 'Burundi'), (934, 13, 'Pierre_Buyoya'), (125, 9, 'Tanzania'), (38, 7, 'Julius_Nyerere'), (1347, 4, 'Hutu'), (461, 7, 'Julius_Nyerere'), (299, 4, 'United_States'), (701, 7, 'Julius_Nyerere'), (19, 7, 'Burundi'), (442, 7, 'Burundi'), (576, 7, 'Burundi'), (922, 5, 'Tutsi'), (194, 7, 'Burundi'), (840, 4, 'Rome'), (1213, 4, 'Hutu'), (8, 4, 'Lamberto_Dini'), (860, 21, 'United_Nations_Security_Council'), (1280, 7, 'Burundi'), (388, 14, 'Catholic_Church'), (1173, 7, 'Burundi'), (330, 12, 'Howard_Wolpe'), (528, 11, 'Great_Lakes')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Malibu,_California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(41, 6, 'London'), (898, 13, 'Leyton_Orient_F.C.'), (758, 16, 'Cambridge_United_F.C.'), (829, 12, 'Chesterfield_F.C.'), (934, 12, 'Boreham_Wood_F.C.'), (1063, 7, 'Watford_F.C.'), (914, 9, 'Stevenage_F.C.'), (655, 18, 'FA_Cup'), (583, 10, 'Portsmouth_F.C.'), (301, 10, 'Sunderland_A.F.C.'), (1121, 10, 'Gillingham_F.C.'), (552, 9, 'Port_Vale_F.C.'), (520, 19, 'Queens_Park_Rangers_F.C.'), (287, 11, 'Aston_Villa_F.C.'), (1031, 9, 'Brentford_F.C.'), (632, 13, 'West_Bromwich_Albion_F.C.'), (596, 5, 'Stoke_City_F.C.'), (273, 11, 'Southampton_F.C.'), (988, 8, 'Rochdale_A.F.C.'), (542, 7, 'Reading_F.C.'), (158, 7, 'Everton_F.C.'), (604, 8, 'Tranmere_Rovers_F.C.'), (249, 13, 'Middlesbrough_F.C.'), (687, 6, 'Barnet_F.C.'), (844, 11, 'Scarborough_F.C.'), (797, 10, 'Darlington_F.C.'), (130, 7, 'Arsenal_F.C.'), (350, 8, 'Southend_United_F.C.'), (446, 7, 'Norwich_City_F.C.'), (148, 7, 'Chelsea_F.C.'), (115, 14, 'Premier_League'), (1043, 7, 'Walsall_F.C.'), (706, 9, 'Blackpool_F.C.'), (718, 10, 'Hednesford_Town_F.C.'), (868, 12, 'Peterborough_United_F.C.'), (696, 7, 'Wycombe_Wanderers_F.C.'), (1098, 10, 'Scunthorpe_United_F.C.'), (203, 9, 'Blackburn_Rovers_F.C.'), (422, 6, 'Oxford_United_F.C.'), (973, 12, 'Notts_County_F.C.'), (70, 7, 'England'), (1088, 7, 'Wrexham_F.C.'), (456, 7, 'Ipswich_Town_F.C.'), (999, 7, 'Preston_North_End_F.C.'), (374, 7, 'Grimsby_Town_F.C.'), (648, 6, 'Bolton_Wanderers_F.C.'), (179, 9, 'Tottenham_Hotspur_F.C.'), (384, 8, 'Charlton_Athletic_F.C.'), (395, 7, 'Swindon_Town_F.C.'), (339, 8, 'Barnsley_F.C.'), (564, 16, 'Sheffield_United_F.C.'), (466, 13, 'Wolverhampton_Wanderers_F.C.'), (810, 7, 'Chester_City_F.C.'), (361, 10, 'Birmingham_City_F.C.'), (431, 12, 'Huddersfield_Town_F.C.'), (511, 6, 'Oldham_Athletic_A.F.C.'), (405, 14, 'Crystal_Palace_F.C.'), (168, 8, 'Coventry_City_F.C.'), (949, 9, 'Mansfield_Town_F.C.'), (314, 9, 'Wimbledon_F.C.'), (926, 5, 'Luton_Town_F.C.'), (961, 9, 'Stockport_County_F.C.'), (731, 12, 'Bristol_City_F.C.'), (215, 9, 'Liverpool_F.C.'), (786, 8, 'Carlisle_United_F.C.'), (9, 7, 'England'), (1111, 7, 'Cardiff_City_F.C.'), (1053, 7, 'Burnley_F.C.'), (191, 9, 'Leicester_City_F.C.'), (890, 5, 'Crewe_Alexandra_F.C.'), (777, 6, 'Woking_F.C.'), (1016, 12, 'Sudbury_Town_F.C.'), (1073, 12, 'Ashford_Town_F.C.'), (265, 5, 'Leeds_United_A.F.C.'), (883, 4, 'Hull_City_A.F.C.'), (227, 19, 'Sheffield_Wednesday_F.C.'), (500, 8, 'Bradford_City_A.F.C.'), (140, 5, 'Derby_County_F.C.'), (858, 7, 'Enfield_1893_F.C.'), (482, 15, 'Manchester_City_F.C.'), (746, 9, 'St_Albans_City_F.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(123, 9, 'Fuji_Rock_Festival'), (143, 10, 'Chthonic_(band)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(219, 7, 'Reuters'), (37, 4, 'Iraq'), (424, 4, 'Iraq'), (188, 4, 'Iraq'), (322, 5, 'Iraq'), (367, 3, 'Kurdistan_Democratic_Party'), (43, 8, 'Brussels'), (67, 34, 'NATO'), (200, 4, 'NATO'), (406, 5, 'Erbil'), (339, 26, 'Kurdistan_Democratic_Party'), (294, 10, 'Iraqi_Kurdistan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 7, 'Plastic'), (16, 4, 'Human_nose'), (8, 7, 'Optics')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['CAMPESE', 'David Campese', 'Matthew Burke']
response in server.py code:
 [(14, 7, 'David_Campese'), (752, 13, 'Matt_Burke'), (103, 13, 'David_Campese'), (58, 6, 'London'), (44, 7, 'Australia_national_rugby_union_team'), (283, 7, 'David_Campese'), (250, 9, 'Australia_national_rugby_union_team'), (410, 7, 'Australia_national_rugby_union_team'), (595, 7, 'Australia_national_rugby_union_team'), (0, 11, 'Rugby_union'), (160, 10, 'Barbarian_F.C.'), (470, 10, 'Barbarian_F.C.'), (222, 10, 'Twickenham_Stadium'), (205, 8, 'Europe'), (76, 9, 'Australia_national_rugby_union_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Mitt Romney']
response in server.py code:
 [(62, 3, 'Republican_Party_(United_States)'), (89, 11, 'Mitt_Romney')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(220, 7, 'Belgium'), (250, 7, 'Reuters'), (158, 7, 'Belgium'), (478, 7, 'Belgium'), (33, 7, 'Belgium'), (42, 8, 'Brussels'), (104, 11, 'AK-47'), (497, 11, 'AK-47'), (510, 3, 'Uzi'), (518, 3, 'River_Fal')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 4, 'Food')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Matthew Burke', 'Joe Roff', 'David Campese', 'Tim Horan', 'Scott Quinnell', 'Rob Andrew']
response in server.py code:
 [(203, 13, 'Matt_Burke'), (295, 5, 'Matt_Burke'), (270, 5, 'Matt_Burke'), (47, 6, 'London'), (370, 10, 'Rob_Andrew'), (232, 13, 'David_Campese'), (341, 14, 'Scott_Quinnell'), (222, 8, 'Joe_Roff'), (247, 9, 'Tim_Horan'), (29, 10, 'Barbarian_F.C.'), (306, 10, 'Barbarian_F.C.'), (84, 10, 'Barbarian_F.C.'), (0, 11, 'Rugby_union'), (145, 8, 'Europe'), (183, 9, 'Australia_national_cricket_team'), (14, 9, 'Australia_national_cricket_team'), (65, 9, 'Australia_national_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Brian Smith']
response in server.py code:
 [(81, 11, 'Brian_Smith_(rugby_league)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['paris hilton']
response in server.py code:
 [(0, 8, 'Canada'), (22, 12, 'Paris_Hilton'), (9, 7, 'Website')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Marc Dutroux']
response in server.py code:
 [(283, 7, 'Reuters'), (66, 7, 'Belgium'), (37, 7, 'Belgium'), (46, 8, 'Brussels'), (444, 5, 'Liège'), (832, 7, 'Belgium'), (744, 12, 'Marc_Dutroux'), (256, 5, 'Liège'), (308, 5, 'Liège'), (637, 7, 'Nandrin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(8, 5, 'Maine')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Mark McNulty', 'Des Terblanche', 'Nick Price', 'Clinton Whitelaw', 'Justin Hobday', 'Steve van Vuuren', 'Brett Liddle', 'Hugh Baiocchi', 'Greg Reid', 'Trevor Dodds', 'Schalk van der Merwe', 'Sean Farrell', 'Bradford Vaughan', 'Andrew Park', 'Desvonde Botes']
response in server.py code:
 [(220, 10, 'Nick_Price'), (468, 12, 'Trevor_Dodds'), (155, 12, 'Mark_McNulty'), (295, 8, 'Zimbabwe'), (120, 13, 'South_Africa'), (315, 13, 'Justin_Hobday'), (482, 7, 'Namibia'), (232, 8, 'Zimbabwe'), (41, 6, 'Harare'), (398, 13, 'Hugh_Baiocchi'), (342, 16, 'Steve_van_Vuuren'), (501, 20, 'Schalk_van_der_Merwe'), (169, 8, 'Zimbabwe'), (192, 14, 'Des_Terblanche'), (255, 16, 'Clinton_Whitelaw'), (786, 14, 'Desvonde_Botes'), (612, 8, 'Zimbabwe'), (737, 16, 'Bradford_Vaughan'), (579, 4, 'United_States'), (523, 7, 'Namibia'), (645, 8, 'Zimbabwe'), (372, 12, 'Brett_Liddle'), (598, 12, 'Sean_Farrell'), (7, 13, 'Zimbabwe_Open'), (422, 9, 'Greg_Reid'), (93, 13, 'Zimbabwe_Open')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'Monkey_patch')]
given spans fix. original text:  Controversial IRA film screened at Venice festival. Vera Haller VENICE, Italy 1996-08-31 Dublin-born director Neil Jordan says he never lost more sleep over a film than over "Michael Collins", his controversial epic about the IRA which has its premiere on Saturday at the Venice Film Festival. The film, starring Liam Neeson and Julia Roberts, recounts the life of Michael Collins, the Irish Republican Army's Director of Intelligence who fought for Irish independence from 1919 to 1921. Although not due for release in Britain until early next year, some politicians have already said they feared it would fan sectarian tensions in British-ruled Northern Ireland. Jordan defends his decision to make the film, whose screenplay he wrote himself after years of research, saying it was "more about history than any political statement". "The film spares neither the Irish nor the British in its depiction of the savagery of the time," Jordan said in a statement released by Warner Bros. "How often has independence been achieved without bloodshed? Very rarely." Jordan, whose 1992 film "The Crying Game" also came under fire for what was perceived as a sympathetic portrayal of the IRA, said Collins was more than just a revolutionary. "He developed techniques of guerilla warfare later copied by independence movements around the world, from Mao Tse-Tung in China to Yitzak Shamir in Israel," Jordan said. "Collins would never be a proponent of contemporary terrorism as practised today. He was a soldier and a statesman and, over time, a man of peace." Leeson, the Northern Ireland-born actor who was nominated for an Oscar for best actor for his performance in "Schindler's List", plays the lead role in Jordan's film. Aidan Quinn portrays Harry Boland, Collins ' best friend, and rival for the love of Kitty Kiernan, played by Roberts. Much of the film was shot on location in Dublin with Jordan using thousands of its citizens as unpaid extras. A set, however, was used for the fighting scenes. Noting that information about Collins was "as mysterious as the existence he maintained", Jordan said he made some historical assumptions in the film. "I have made choices about certain events based on my own extensive research into his letters and reported speeches," he said. "I wanted to make this a story as accurate as possible without killing it dramatically and I think I have. It is a very true film." One of the assumptions is his interpretation of the murky circumstances surrounding the shooting death of Collins, who had broken with his comrades when he sought a negotiated settlement with Britain, in an ambush in 1922. "I have never lost more sleep over the making of a film than I have over ' Michael Collins ', but I'll never make a more important one," Jordan said. "In the life of one person you can tell the events that formed the north and south of Ireland as they are today."
original word:  Bros. Bros.
new split:  Bros  and  .
[(0, 13), (14, 17), (18, 22), (23, 31), (32, 34), (35, 41), (42, 50), (50, 51), (52, 56), (57, 63), (64, 70), (70, 71), (72, 77), (78, 88), (89, 100), (101, 109), (110, 114), (115, 121), (122, 126), (127, 129), (130, 135), (136, 140), (141, 145), (146, 151), (152, 156), (157, 158), (159, 163), (164, 168), (169, 173), (174, 175), (175, 182), (183, 190), (190, 191), (191, 192), (193, 196), (197, 210), (211, 215), (216, 221), (222, 225), (226, 229), (230, 235), (236, 239), (240, 243), (244, 252), (253, 255), (256, 264), (265, 267), (268, 271), (272, 278), (279, 283), (284, 292), (292, 293), (294, 297), (298, 302), (302, 303), (304, 312), (313, 317), (318, 324), (325, 328), (329, 334), (335, 342), (342, 343), (344, 352), (353, 356), (357, 361), (362, 364), (365, 372), (373, 380), (380, 381), (382, 385), (386, 391), (392, 402), (403, 407), (407, 409), (410, 418), (419, 421), (422, 434), (435, 438), (439, 445), (446, 449), (450, 455), (456, 468), (469, 473), (474, 478), (479, 481), (482, 486), (486, 487), (488, 496), (497, 500), (501, 504), (505, 508), (509, 516), (517, 519), (520, 527), (528, 533), (534, 539), (540, 544), (545, 549), (549, 550), (551, 555), (556, 567), (568, 572), (573, 580), (581, 585), (586, 590), (591, 597), (598, 600), (601, 606), (607, 610), (611, 620), (621, 629), (630, 632), (633, 646), (647, 655), (656, 663), (663, 664), (665, 671), (672, 679), (680, 683), (684, 692), (693, 695), (696, 700), (701, 704), (705, 709), (709, 710), (711, 716), (717, 727), (728, 730), (731, 736), (737, 744), (745, 750), (751, 756), (757, 759), (760, 768), (768, 769), (770, 776), (777, 779), (780, 783), (784, 785), (785, 789), (790, 795), (796, 803), (804, 808), (809, 812), (813, 822), (823, 832), (832, 833), (833, 834), (835, 836), (836, 839), (840, 844), (845, 851), (852, 859), (860, 863), (864, 869), (870, 873), (874, 877), (878, 885), (886, 888), (889, 892), (893, 902), (903, 905), (906, 909), (910, 918), (919, 921), (922, 925), (926, 930), (930, 931), (931, 932), (933, 939), (940, 944), (945, 947), (948, 949), (950, 959), (960, 968), (969, 971), (972, 978), (979, 983), (983, 984)]
{0: 0, 768: 134, 216: 37, 517: 92, 520: 93, 14: 1, 528: 94, 18: 2, 534: 95, 601: 107, 540: 96, 32: 4, 545: 97, 35: 5, 549: 98, 551: 99, 42: 6, 556: 100, 50: 7, 52: 8, 777: 136, 568: 101, 57: 9, 573: 102, 64: 10, 581: 103, 70: 11, 72: 12, 780: 137, 586: 104, 78: 13, 591: 105, 598: 106, 89: 14, 607: 108, 784: 138, 611: 109, 101: 15, 621: 110, 110: 16, 115: 17, 630: 111, 633: 112, 122: 18, 874: 156, 127: 19, 130: 20, 647: 113, 136: 21, 23: 3, 141: 22, 656: 114, 146: 23, 663: 115, 152: 24, 665: 116, 157: 25, 159: 26, 672: 117, 164: 27, 680: 118, 796: 141, 193: 34, 684: 119, 174: 29, 175: 30, 693: 120, 183: 31, 696: 121, 701: 122, 190: 32, 191: 33, 705: 123, 197: 35, 711: 125, 717: 126, 211: 36, 728: 127, 804: 142, 731: 128, 222: 38, 737: 129, 226: 39, 230: 40, 745: 130, 236: 41, 751: 131, 240: 42, 979: 177, 244: 43, 757: 132, 760: 133, 253: 44, 256: 45, 770: 135, 265: 46, 268: 47, 272: 48, 785: 139, 790: 140, 279: 49, 284: 50, 292: 51, 294: 52, 809: 143, 298: 53, 813: 144, 302: 54, 304: 55, 709: 124, 823: 145, 313: 56, 318: 57, 832: 146, 833: 147, 835: 148, 836: 149, 325: 58, 840: 150, 329: 59, 845: 151, 335: 60, 852: 152, 342: 61, 344: 62, 860: 153, 864: 154, 353: 63, 357: 64, 870: 155, 362: 65, 365: 66, 878: 157, 373: 67, 886: 158, 889: 159, 380: 68, 893: 160, 382: 69, 386: 70, 903: 161, 392: 71, 906: 162, 919: 164, 910: 163, 403: 72, 407: 73, 410: 74, 922: 165, 926: 166, 930: 167, 931: 168, 933: 169, 422: 76, 940: 170, 945: 171, 435: 77, 948: 172, 950: 173, 439: 78, 446: 79, 960: 174, 450: 80, 456: 81, 969: 175, 972: 176, 419: 75, 469: 82, 983: 178, 474: 83, 479: 84, 482: 85, 486: 86, 488: 87, 497: 88, 501: 89, 169: 28, 505: 90, 509: 91}
{409: 73, 516: 91, 519: 92, 13: 0, 527: 93, 921: 164, 17: 1, 533: 94, 22: 2, 539: 95, 31: 3, 544: 96, 34: 4, 549: 97, 550: 98, 41: 5, 555: 99, 776: 135, 50: 6, 51: 7, 567: 100, 56: 8, 572: 101, 63: 9, 779: 136, 580: 102, 70: 10, 71: 11, 585: 103, 77: 12, 590: 104, 597: 105, 88: 13, 783: 137, 606: 107, 610: 108, 100: 14, 600: 106, 620: 109, 109: 15, 114: 16, 629: 110, 873: 155, 632: 111, 121: 17, 126: 18, 129: 19, 646: 112, 135: 20, 140: 21, 655: 113, 145: 22, 151: 23, 664: 115, 156: 24, 158: 25, 671: 116, 283: 49, 679: 117, 168: 27, 683: 118, 173: 28, 175: 29, 692: 119, 182: 30, 695: 120, 700: 121, 192: 33, 190: 31, 191: 32, 704: 122, 196: 34, 709: 123, 710: 124, 716: 125, 210: 35, 727: 126, 730: 127, 221: 37, 736: 128, 225: 38, 229: 39, 744: 129, 892: 159, 235: 40, 750: 130, 239: 41, 243: 42, 756: 131, 759: 132, 252: 43, 255: 44, 768: 133, 769: 134, 264: 45, 267: 46, 271: 47, 785: 138, 789: 139, 278: 48, 795: 140, 803: 141, 292: 50, 293: 51, 808: 142, 297: 52, 812: 143, 302: 53, 303: 54, 822: 144, 312: 55, 317: 56, 215: 36, 832: 145, 833: 146, 834: 147, 836: 148, 839: 149, 328: 58, 844: 150, 334: 59, 851: 151, 342: 60, 343: 61, 859: 152, 863: 153, 352: 62, 356: 63, 869: 154, 361: 64, 364: 65, 877: 156, 372: 66, 885: 157, 888: 158, 380: 67, 381: 68, 385: 69, 902: 160, 391: 70, 905: 161, 663: 114, 909: 162, 402: 71, 918: 163, 407: 72, 324: 57, 925: 165, 418: 74, 931: 167, 932: 168, 421: 75, 939: 169, 944: 170, 434: 76, 947: 171, 949: 172, 438: 77, 445: 78, 959: 173, 449: 79, 455: 80, 968: 174, 971: 175, 930: 166, 978: 176, 163: 26, 468: 81, 983: 177, 984: 178, 473: 82, 478: 83, 481: 84, 486: 85, 487: 86, 496: 87, 500: 88, 504: 89, 508: 90}
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Neil Jordan', 'Michael Collins', 'Liam Neeson', 'Julia Roberts', 'Michael Collins', 'Mao Tse-Tung', 'Yitzak Shamir', 'Aidan Quinn', 'Harry Boland', 'Kitty Kiernan', 'Michael Collins']
response in server.py code:
 [(72, 5, 'Italy'), (520, 7, 'United_Kingdom'), (329, 13, 'Julia_Roberts'), (313, 11, 'Liam_Neeson'), (1829, 7, 'Julia_Roberts'), (665, 6, 'Neil_Jordan'), (1383, 6, 'Israel'), (1720, 11, 'Aidan_Quinn'), (110, 11, 'Neil_Jordan'), (2600, 7, 'United_Kingdom'), (878, 7, 'United_Kingdom'), (35, 6, 'Venice'), (1663, 16, "Schindler's_List"), (1879, 6, 'Dublin'), (272, 20, 'Venice_Film_Festival'), (647, 16, 'Northern_Ireland'), (2088, 6, 'Neil_Jordan'), (1705, 6, 'Neil_Jordan'), (1618, 5, 'Academy_Awards'), (1891, 6, 'Neil_Jordan'), (972, 11, 'Warner_Bros.'), (450, 5, 'Republic_of_Ireland'), (1741, 12, 'Harry_Boland'), (1085, 15, 'The_Crying_Game'), (933, 6, 'Neil_Jordan'), (1366, 13, 'Yitzhak_Shamir'), (386, 21, 'Provisional_Irish_Republican_Army'), (1341, 12, 'Mao_Zedong'), (1060, 6, 'Neil_Jordan'), (864, 5, 'Republic_of_Ireland'), (1392, 6, 'Neil_Jordan'), (1357, 5, 'China'), (2768, 6, 'Neil_Jordan'), (1804, 13, 'Kitty_Kiernan'), (2028, 7, 'Michael_Collins_(film)'), (1190, 7, 'Michael_Collins_(film)'), (1755, 7, 'Michael_Collins_(film)'), (1406, 7, 'Michael_Collins_(film)'), (633, 13, 'Presidencies_and_provinces_of_British_India'), (2867, 7, 'Republic_of_Ireland'), (175, 15, 'Michael_Collins_(film)'), (365, 15, 'Michael_Collins_(Irish_leader)'), (226, 3, 'Provisional_Irish_Republican_Army'), (2514, 7, 'Michael_Collins_(Irish_leader)'), (14, 3, 'Provisional_Irish_Republican_Army'), (1180, 3, 'Provisional_Irish_Republican_Army'), (2706, 15, 'Michael_Collins_(film)'), (1553, 6, 'Nick_Leeson')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
given spans fix. original text:  letterforpastorappreciateion
original word:  letterforpastorappreciateion letterforpastorappreciateion
new split:  letterfor  and  pastorappreciateion
[(0, 9), (9, 28)]
{0: 0, 9: 1}
{9: 0, 28: 1}
given spans fix. original text:  letterforpastorappreciateion
original word:  letterforpastorappreciateion letterforpastorappreciateion
new split:  letterforpastor  and  appreciateion
[(0, 9), (9, 28), (0, 15), (15, 28)]
{0: 2, 9: 1, 15: 3}
{9: 0, 28: 3, 15: 2}
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(45, 5, 'Texas'), (0, 16, 'Speech-language_pathology'), (17, 13, 'Undergraduate_education')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Artur Lekbello', 'Blendi Nallbani', 'Rudi Vata', 'Arjan Xhumba', 'Ilir Shulku', 'Nevil Dede', 'Bledar Kola', 'Altin Haxhi', 'Ervin Fakaj', 'Altin Rraklli', 'Viktor Paco', 'Fatmir Vata', 'Erjon Bogdani']
response in server.py code:
 [(1091, 10, 'Nevil_Dede'), (1170, 11, 'Ervin_Fakaj'), (1052, 12, 'Arjan_Xhumba'), (1193, 13, 'Altin_Rraklli'), (59, 6, 'Tirana'), (986, 15, 'Blendi_Nallbani'), (683, 7, 'Belfast'), (196, 4, 'FIFA'), (448, 4, 'FIFA'), (464, 7, 'Albania'), (1221, 11, 'Fatmir_Vata'), (1208, 11, 'Viktor_Paço'), (48, 9, 'Northern_Ireland_national_football_team'), (1027, 9, 'Rudi_Vata'), (859, 14, 'Artur_Lekbello'), (1234, 13, 'Erjon_Bogdani'), (1143, 11, 'Altin_Haxhi'), (1066, 11, 'Ilir_Shulku'), (341, 7, 'Albania'), (77, 8, 'Albania'), (1130, 11, 'Bledar_Kola'), (949, 7, 'Belfast'), (372, 6, 'Balkans'), (541, 29, 'Albanian_Football_Association'), (698, 6, 'Hafizi'), (803, 16, 'Northern_Ireland_national_football_team'), (20, 7, 'Albania'), (282, 16, 'Northern_Ireland'), (908, 6, 'Hafizi')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(83, 20, 'Dhaka_Stock_Exchange'), (835, 3, 'Dhaka_Stock_Exchange'), (52, 5, 'Dhaka'), (105, 3, 'Dhaka_Stock_Exchange'), (280, 6, 'Islam'), (0, 5, 'Dhaka')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Dean Jones', 'David Boon', 'Shaun Young', 'Michael DiVenuto', 'Shane Warne', 'Laurie Harper', 'David Boon', 'Shaun Young', 'Ian Harvey']
response in server.py code:
 [(416, 5, 'Dean_Jones_(cricketer)'), (552, 5, 'Dean_Jones_(cricketer)'), (643, 11, 'Shane_Warne'), (910, 11, 'Shaun_Young'), (989, 10, 'Ian_Harvey'), (112, 10, 'Dean_Jones_(cricketer)'), (506, 10, 'David_Boon'), (534, 16, 'Michael_Di_Venuto'), (872, 10, 'David_Boon'), (518, 11, 'Shaun_Young'), (53, 6, 'Hobart'), (61, 9, 'Australia'), (181, 16, 'Sheffield_Shield'), (491, 9, 'Tasmania_cricket_team'), (400, 14, 'Bellerive_Oval'), (849, 9, 'Australia_national_cricket_team'), (709, 13, 'Laurie_Harper'), (89, 9, 'Australia_national_cricket_team'), (616, 9, 'Australia_national_cricket_team'), (724, 6, 'Laurie_Harper'), (391, 6, 'Hobart'), (212, 8, 'Tasmania_cricket_team'), (300, 8, 'Victoria_cricket_team'), (151, 8, 'Victoria_cricket_team'), (32, 8, 'Victoria_(Australia)'), (1025, 8, 'Victoria_cricket_team')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['lodge']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Geno Auriemma']
response in server.py code:
 [(51, 13, 'Geno_Auriemma'), (33, 11, 'Connecticut')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Michael DiVenuto', 'David Boon', 'Shaun Young', 'Dean Jones']
response in server.py code:
 [(265, 10, 'David_Boon'), (42, 9, 'Australia'), (34, 6, 'Hobart'), (324, 10, 'Dean_Jones_(cricketer)'), (281, 11, 'Shaun_Young'), (10, 16, 'Sheffield_Shield'), (117, 16, 'Sheffield_Shield'), (243, 16, 'Michael_Di_Venuto'), (210, 8, 'Tasmania_cricket_team'), (181, 14, 'Bellerive_Oval'), (156, 8, 'Tasmania_cricket_team'), (300, 8, 'Victoria_cricket_team'), (169, 8, 'Victoria_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Kim Do Hoon', 'Hwang Sun Hong', 'Ko Jeong Woon', 'Hendro Kartiko', 'Hendro Kartiko', 'Agung Setyabudi', 'Bima Sakti', 'Kim Byung Ji', 'Roh Sang Rae', 'Kim Do Hoon', 'Ko Jeong Woon', 'Ha Seok Ju', 'Hwang Sun Hong', 'Yoo Sang Chul', 'Kim Joo Sung']
response in server.py code:
 [(1486, 14, 'Hendro_Kartiko'), (1368, 14, 'Hendro_Kartiko'), (1851, 11, 'Kim_Do-Hoon'), (383, 11, 'Kim_Do-Hoon'), (1870, 13, 'Ko_Jeong-Woon'), (840, 13, 'Ko_Jeong-Woon'), (1891, 10, 'Ha_Seok-Ju'), (1755, 12, 'Kim_Byung-Ji'), (9, 11, 'South_Korea'), (1650, 10, 'Bima_Sakti'), (567, 14, 'Hwang_Sun-Hong'), (297, 9, 'AFC_Asian_Cup'), (1350, 10, 'Indonesia'), (1909, 14, 'Hwang_Sun-Hong'), (1737, 11, 'South_Korea'), (951, 11, 'Indonesia'), (56, 9, 'Abu_Dhabi'), (77, 11, 'South_Korea'), (418, 11, 'South_Korea'), (118, 9, 'AFC_Asian_Cup'), (1810, 12, 'Roh_Sang-Rae'), (1507, 15, 'Agung_Setyabudi'), (1973, 12, 'Kim_Joo-Sung'), (1952, 13, 'Yoo_Sang-Chul'), (1172, 9, 'Indonesia'), (1014, 9, 'Indonesia'), (1469, 9, 'Indonesia_national_football_team'), (906, 7, 'Koreans'), (273, 9, 'Indonesia_national_football_team'), (1299, 6, 'Korea'), (167, 9, 'Indonesia_national_football_team'), (1077, 6, 'South_Korea'), (1236, 6, 'Kuwait_national_football_team'), (654, 7, 'Koreans'), (253, 11, 'South_Korea_national_football_team'), (1430, 7, 'Koreans')]
given spans fix. original text:  perrysrestaraunts
original word:  perrysrestaraunts perrysrestaraunts
new split:  perrys  and  restaraunts
[(0, 6), (6, 17)]
{0: 0, 6: 1}
{17: 1, 6: 0}
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Aluminium'), (13, 6, 'Copper')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(44, 7, 'Kanawha_County,_West_Virginia')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(695, 11, 'Bnei_Yehuda_Tel_Aviv_F.C.'), (229, 11, 'Bnei_Yehuda_Tel_Aviv_F.C.'), (53, 9, 'Jerusalem'), (756, 13, 'Maccabi_Haifa_F.C.'), (657, 19, 'Maccabi_Petah_Tikva_F.C.'), (179, 13, 'Maccabi_Haifa_F.C.'), (398, 19, 'Maccabi_Petah_Tikva_F.C.'), (517, 15, 'Beitar_Jerusalem_F.C.'), (588, 16, "Hapoel_Be'er_Sheva_F.C."), (420, 12, 'Hapoel_Haifa_F.C.'), (1028, 15, 'Hapoel_Tel_Aviv_F.C.'), (896, 14, 'Hapoel_Tzafririm_Holon_F.C.'), (379, 16, "Hapoel_Be'er_Sheva_F.C."), (243, 15, 'Hapoel_Tel_Aviv_F.C.'), (725, 12, 'Hapoel_Haifa_F.C.'), (622, 16, 'Maccabi_Tel_Aviv_F.C.'), (261, 15, 'Beitar_Jerusalem_F.C.'), (339, 16, 'Maccabi_Herzliya_F.C.'), (928, 16, 'Maccabi_Herzliya_F.C.'), (823, 16, 'Hapoel_Jerusalem_F.C.'), (551, 18, 'Hapoel_Petah_Tikva_F.C.'), (298, 16, 'Maccabi_Tel_Aviv_F.C.'), (141, 14, 'Hapoel_Tzafririm_Holon_F.C.'), (279, 16, 'Hapoel_Jerusalem_F.C.'), (358, 18, "Hapoel_Beit_She'an_F.C."), (993, 18, "Hapoel_Beit_She'an_F.C."), (195, 12, 'Hapoel_Tayibe_F.C.'), (9, 7, 'Israel'), (158, 18, 'Hapoel_Petah_Tikva_F.C.')]
given spans fix. original text:  waterproof and containers
original word:  containers containers
new split:  container  and  s
[(0, 10), (11, 14), (15, 24), (24, 25)]
{0: 0, 24: 3, 11: 1, 15: 2}
{24: 2, 25: 3, 10: 0, 14: 1}
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'Waterproof,_Louisiana')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Adnan Al Talyani', 'Kim Do Hoon', 'Hwang Sun Hong']
response in server.py code:
 [(180, 16, 'Adnan_Al_Talyani'), (216, 6, 'Kuwait'), (28, 9, 'Abu_Dhabi'), (325, 11, 'Kim_Do-Hoon'), (340, 14, 'Hwang_Sun-Hong'), (9, 9, 'AFC_Asian_Cup'), (123, 6, 'Kuwait_national_football_team'), (60, 9, 'AFC_Asian_Cup'), (581, 6, 'Kuwait_national_football_team'), (157, 3, 'United_Arab_Emirates_national_football_team'), (100, 20, 'United_Arab_Emirates'), (283, 9, 'Indonesia_national_football_team'), (311, 11, 'South_Korea'), (563, 3, 'United_Arab_Emirates_national_football_team'), (382, 9, 'Indonesia'), (269, 11, 'South_Korea'), (602, 9, 'Indonesia_national_football_team'), (537, 11, 'South_Korea_national_football_team'), (163, 12, 'Hasan_Ahmed_(actor)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(20, 8, 'Nebraska'), (2, 8, 'Colorado')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(495, 7, 'Atlanta_Braves'), (1169, 7, 'Houston_Astros'), (1153, 12, 'Philadelphia_Phillies'), (647, 7, 'Houston_Astros'), (470, 9, 'Cleveland_Indians'), (1038, 7, 'Atlanta_Braves'), (447, 7, 'Detroit_Tigers'), (332, 12, 'Philadelphia_Phillies'), (1094, 7, 'Detroit_Tigers'), (684, 9, 'Minnesota_Twins'), (0, 3, 'National_Basketball_Association'), (382, 6, 'Boston_Red_Sox'), (400, 16, 'National_League_Central'), (82, 31, 'National_Basketball_Association'), (49, 8, 'New_York_City'), (851, 9, 'Los_Angeles_Lakers'), (1046, 11, 'Los_Angeles_Clippers'), (896, 11, 'Los_Angeles_Clippers'), (1070, 9, 'Milwaukee_Brewers'), (832, 7, 'Seattle_Mariners'), (576, 7, 'Toronto_Blue_Jays'), (514, 9, 'Milwaukee_Brewers'), (1027, 7, 'Toronto'), (1133, 9, 'Vancouver'), (1205, 7, 'Seattle_Mariners'), (919, 12, 'Golden_State_Warriors'), (269, 8, 'New_York_Yankees'), (1061, 8, 'New_York_City'), (750, 11, 'San_Antonio_Missions'), (778, 9, 'Vancouver'), (1125, 7, 'Chicago')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['sibelius']
response in server.py code:
 [(0, 11, 'Biography'), (15, 8, 'Jean_Sibelius')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Christopher Matthews']
response in server.py code:
 [(43, 3, 'Food_and_Agriculture_Organization'), (0, 20, 'Chris_Matthews')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 3, 'National_Basketball_Association'), (151, 6, 'Boston_Red_Sox'), (66, 31, 'National_Basketball_Association'), (342, 9, 'Los_Angeles_Lakers'), (167, 7, 'Detroit_Tigers'), (35, 8, 'New_York_City'), (326, 12, 'Golden_State_Warriors'), (178, 9, 'Cleveland_Indians'), (277, 9, 'Minnesota_Twins'), (253, 11, 'San_Antonio_Missions'), (191, 8, 'New_York_Yankees'), (225, 10, 'Sacramento_River_Cats'), (355, 7, 'Orlando,_Florida'), (290, 8, 'Portland_Sea_Dogs')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'China_National_Offshore_Oil_Corporation')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(1239, 8, 'Colorado_Rockies'), (1263, 9, 'Tampa_Bay_Rays'), (449, 7, 'Miami_Marlins'), (1228, 10, 'Pittsburgh_Pirates'), (364, 10, 'Pittsburgh_Pirates'), (1217, 7, 'Los_Angeles_Angels_of_Anaheim'), (616, 9, 'Tampa_Bay_Rays'), (473, 12, 'Philadelphia_Phillies'), (340, 6, 'Boston_Red_Sox'), (1121, 6, 'Boston_Red_Sox'), (1009, 7, 'Los_Angeles_Angels_of_Anaheim'), (587, 12, 'New_York_Islanders'), (875, 8, 'Colorado_Rockies'), (694, 7, 'Detroit_Tigers'), (0, 3, 'National_Hockey_League'), (49, 8, 'New_York_City'), (559, 10, 'New_York_Rangers'), (82, 22, 'National_Hockey_League'), (1186, 8, 'Montreal'), (1162, 12, 'New_York_Islanders'), (1195, 10, 'New_York_Rangers'), (742, 8, 'St._Louis_Cardinals'), (1209, 7, 'Toronto'), (1285, 6, 'Ottawa'), (793, 7, 'Toronto_Blue_Jays'), (954, 11, 'Los_Angeles_Angels_of_Anaheim'), (313, 8, 'Montreal_Expos'), (1295, 9, 'Vancouver'), (1251, 11, 'Los_Angeles_Angels_of_Anaheim'), (1110, 7, 'Calgary'), (983, 8, 'San_Jose_Giants'), (392, 6, 'Ottawa_Lynx'), (288, 7, 'Buffalo_Bisons'), (1128, 7, 'Buffalo_Bisons'), (928, 8, 'Edmonton')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Mary']
response in server.py code:
 [(42, 13, 'United_States'), (24, 4, 'Mary_(mother_of_Jesus)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(127, 10, 'New_York_Rangers'), (35, 8, 'New_York_City'), (0, 3, 'National_Hockey_League'), (66, 22, 'National_Hockey_League'), (257, 8, 'Colorado_Rockies'), (222, 12, 'Philadelphia_Phillies'), (175, 10, 'Pittsburgh_Pirates'), (160, 7, 'Los_Angeles_Angels_of_Anaheim'), (140, 7, 'Toronto_Blue_Jays'), (246, 8, 'St._Louis_Blues'), (268, 8, 'Edmonton'), (201, 8, 'Montreal_Expos'), (279, 6, 'Ottawa_Senators')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Jeff Bezos']
response in server.py code:
 [(46, 10, 'Jeff_Bezos'), (31, 6, 'Amazon.com')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Playhouse_Theatre'), (18, 7, 'Theatre')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Pavel Bure', 'Garry Galley', 'Brian Burke']
response in server.py code:
 [(77, 17, 'Vancouver_Canucks'), (517, 4, 'Pavel_Bure'), (17, 7, 'Vancouver_Canucks'), (111, 10, 'Pavel_Bure'), (272, 4, 'Pavel_Bure'), (245, 12, 'Garry_Galley'), (911, 4, 'Pavel_Bure'), (428, 6, 'Garry_Galley'), (219, 14, 'Buffalo_Sabres'), (749, 4, 'Pavel_Bure'), (156, 22, 'National_Hockey_League'), (0, 3, 'National_Hockey_League'), (636, 3, 'National_Hockey_League'), (57, 8, 'New_York_City'), (452, 6, 'Garry_Galley'), (899, 5, 'Brian_Burke_(ice_hockey)'), (568, 6, 'Garry_Galley'), (657, 11, 'Brian_Burke_(ice_hockey)'), (438, 7, 'Buffalo,_New_York'), (28, 4, 'Pavel_Bure'), (397, 9, 'Vancouver'), (1023, 6, 'Ottawa_Senators')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(23, 8, 'Kentucky')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Johnny Pesky']
response in server.py code:
 [(80, 12, 'Johnny_Pesky'), (68, 6, 'Boston')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['SCHULZ', 'RIBALTA', 'Axel Schulz']
response in server.py code:
 [(83, 11, 'Axel_Schulz'), (58, 6, 'Vienna'), (135, 31, 'International_Boxing_Federation'), (76, 6, 'Germany'), (35, 3, 'International_Boxing_Federation'), (106, 4, 'Cuba')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Pokémon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(56, 6, 'Lyrics')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(105, 15, 'Boingo_Wireless')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Davor Suker', 'Predrag Mijatovic']
response in server.py code:
 [(41, 6, 'Madrid'), (127, 11, 'Davor_Šuker'), (112, 11, 'Real_Madrid_C.F.'), (81, 7, 'Spain'), (9, 7, 'Spain'), (143, 17, 'Predrag_Mijatović'), (165, 9, 'FC_Barcelona')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(23, 17, 'Affiliate_marketing')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(10, 10, 'Car_rental')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Christopher Clark']
response in server.py code:
 [(143, 7, 'Cornell_University'), (111, 17, 'Chris_Clark_(historian)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Davor Suker', 'Predrag Mijatovic', 'Clarence Seedorf', 'Ronaldo']
response in server.py code:
 [(57, 6, 'Madrid'), (607, 16, 'Clarence_Seedorf'), (193, 5, 'Spain'), (747, 9, 'Brazil'), (112, 11, 'Davor_Šuker'), (502, 5, 'Davor_Šuker'), (75, 11, 'Real_Madrid_C.F.'), (566, 9, 'Predrag_Mijatović'), (765, 7, 'Ronaldo'), (180, 9, 'FC_Barcelona'), (646, 9, 'FC_Barcelona'), (128, 17, 'Predrag_Mijatović'), (479, 8, 'Croatia'), (294, 9, 'FC_Barcelona'), (89, 6, 'Balkans'), (457, 9, 'FC_Barcelona'), (546, 11, 'Montenegro'), (246, 4, 'Real_Madrid_C.F.')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(216, 7, 'Raleigh,_North_Carolina')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(15, 10, 'Apartment')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Marcelo', 'Zeljko Petrovic', 'Vampeta', 'Luc Nilis']
response in server.py code:
 [(172, 13, 'PSV_Eindhoven'), (35, 9, 'Amsterdam'), (306, 9, 'Luc_Nilis'), (552, 14, 'AFC_Ajax'), (657, 9, 'Feyenoord'), (341, 3, 'PSV_Eindhoven'), (476, 9, 'Feyenoord'), (607, 3, 'PSV_Eindhoven'), (627, 10, 'AZ_Alkmaar'), (9, 3, 'PSV_Eindhoven'), (761, 24, 'De_Graafschap'), (617, 4, 'AFC_Ajax'), (290, 7, 'Belgium'), (400, 8, 'FC_Volendam'), (211, 8, 'FC_Volendam'), (106, 15, 'Željko_Petrović'), (56, 9, 'Brazil'), (17, 8, 'FC_Volendam'), (278, 7, 'Vampeta'), (259, 9, 'Brazil'), (688, 8, 'UEFA_Europa_League'), (143, 5, 'Netherlands'), (791, 10, 'Doetinchem'), (86, 8, 'Yugoslavia'), (730, 8, 'CD_Tenerife'), (74, 7, 'Marcelo_Silva_Ramos')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 11, 'Los_Angeles'), (22, 6, 'Towing')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(52, 6, 'Madrid'), (127, 11, 'Real_Madrid_C.F.'), (493, 16, 'Racing_de_Santander'), (588, 10, 'Celta_de_Vigo'), (241, 11, 'Real_Madrid_C.F.'), (364, 15, 'Atlético_Madrid'), (96, 7, 'Spain'), (644, 8, 'RCD_Espanyol'), (398, 15, 'Athletic_Bilbao'), (528, 14, 'Rayo_Vallecano'), (696, 8, 'Sporting_Clube_de_Portugal'), (335, 10, 'Real_Betis'), (783, 7, 'Sevilla_FC'), (561, 8, 'Valencia_CF'), (432, 13, 'Real_Sociedad'), (9, 7, 'Spain'), (141, 9, 'FC_Barcelona'), (464, 10, 'Real_Valladolid'), (272, 9, 'FC_Barcelona'), (617, 8, 'CD_Tenerife'), (671, 6, 'Real_Oviedo'), (809, 10, 'SD_Compostela'), (865, 11, 'CF_Extremadura'), (756, 8, 'Real_Zaragoza')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 21, 'New_York_Public_Library'), (22, 6, 'Online_and_offline')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(15, 10, 'Greensburg,_Pennsylvania')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Jack Charlton', 'Peggy', 'Dick Spring']
response in server.py code:
 [(510, 19, 'Republic_of_Ireland'), (59, 6, 'Dublin'), (640, 7, 'Republic_of_Ireland'), (843, 8, 'Jack_Charlton'), (699, 8, 'Jack_Charlton'), (77, 13, 'Jack_Charlton'), (274, 7, 'Republic_of_Ireland'), (1199, 12, 'Leeds_United_A.F.C.'), (353, 11, 'Dick_Spring'), (310, 5, 'Republic_of_Ireland'), (49, 8, 'Ireland'), (220, 8, 'Jack_Charlton'), (1327, 14, '1966_FIFA_World_Cup'), (417, 8, 'Jack_Charlton'), (1062, 8, 'Europe'), (1094, 7, 'Germany'), (125, 7, 'Republic_of_Ireland'), (860, 7, 'Republic_of_Ireland'), (9, 10, 'English_people'), (167, 10, 'England'), (1113, 5, 'Republic_of_Ireland'), (1139, 7, 'England_national_football_team'), (1238, 7, 'England_national_football_team'), (1017, 9, 'FIFA_World_Cup'), (991, 7, 'Republic_of_Ireland'), (248, 5, "Margaret_O'Neill_Eaton"), (20, 8, 'Charlton_Athletic_F.C.'), (1381, 5, 'Bobby_(2006_film)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(51, 6, 'NASDAQ')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 9, 'Cue_sports')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(23, 18, 'Rochester,_New_York'), (0, 6, 'RE/MAX'), (7, 6, 'Real_property')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(134, 21, 'Delhi_Development_Authority'), (172, 6, 'Detroit_Tigers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 8, 'Broadway_theatre')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Eric Wedge']
response in server.py code:
 [(64, 10, 'Eric_Wedge'), (46, 9, 'Cleveland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(170, 10, 'Starr_Family_Home_State_Historic_Site')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'Pauls_Valley,_Oklahoma'), (13, 13, 'State_school')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(155, 6, 'La_Luz,_New_Mexico')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Julius Genachowski']
response in server.py code:
 [(13, 18, 'Julius_Genachowski'), (0, 3, 'Federal_Communications_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(72, 5, 'Maine'), (46, 12, 'Dish_Network')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Kelsey Grammer']
response in server.py code:
 [(114, 14, 'Kelsey_Grammer'), (94, 12, 'Golden_Globe_Award')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(121, 5, 'Chile')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(33, 4, 'YWCA')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(7, 14, 'Baptists')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Alan Grover']
response in server.py code:
 [(0, 11, 'Alan_Grover')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 5, 'Film')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(164, 14, 'Port_Authority_of_New_York_and_New_Jersey')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(18, 13, 'San_Francisco'), (7, 10, 'Apartment'), (32, 4, 'Area')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(144, 6, 'Canada')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Andrew Strauss']
response in server.py code:
 [(138, 14, 'Andrew_Strauss')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Hooker']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(116, 8, 'Carnival')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(40, 19, 'European_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Josh Beckett']
response in server.py code:
 [(106, 12, 'Josh_Beckett'), (91, 9, 'Baltimore_Orioles')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Summers']
response in server.py code:
 [(17, 7, 'Lawrence_Summers')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(30, 11, 'Archbishop')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 10, 'California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Maloney']
response in server.py code:
 [(62, 7, 'Shaun_Maloney')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bruce Bochy']
response in server.py code:
 [(55, 11, 'Bruce_Bochy'), (40, 6, 'San_Francisco_Giants')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Julius Genachowski']
response in server.py code:
 [(13, 18, 'Julius_Genachowski'), (0, 3, 'Federal_Communications_Commission')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(143, 6, 'Tucson,_Arizona')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Michael Irvin']
response in server.py code:
 [(99, 13, 'Michael_Irvin')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(39, 10, 'Federation')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(134, 21, 'Delhi_Development_Authority'), (172, 6, 'Detroit_Tigers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(29, 18, 'United_States_Department_of_Justice')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(90, 4, 'Aiea,_Hawaii'), (72, 9, 'ʻEwa_Beach,_Hawaii')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Jeff Crowe']
response in server.py code:
 [(46, 24, 'Norwest_Venture_Partners'), (15, 10, 'Jeff_Crowe')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Wu Ching-kuo']
response in server.py code:
 [(217, 4, 'International_Boxing_Association_(amateur)'), (232, 12, 'Wu_Ching-kuo')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(92, 6, 'UNESCO')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(30, 30, 'West_Virginia_State_University')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(43, 6, 'France')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(124, 3, 'Department_of_Motor_Vehicles')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(72, 7, 'Chicago'), (90, 12, 'Libertyville,_Illinois')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Arthur Caplan']
response in server.py code:
 [(0, 13, 'Arthur_Caplan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['George Washington']
response in server.py code:
 [(10, 17, 'George_Washington')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Chad Johnson']
response in server.py code:
 [(34, 12, 'Chad_Johnson_(American_football)'), (16, 8, 'Miami_Dolphins')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Angus Houston']
response in server.py code:
 [(141, 13, 'Angus_Houston'), (121, 13, 'Decepticon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Andy Hall']
response in server.py code:
 [(51, 4, 'ESPN'), (66, 9, 'Andy_Hall_(American_football)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Jon Klein']
response in server.py code:
 [(6, 3, 'CNN'), (16, 9, 'Jonathan_Klein_(CNN)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Alberto Contador']
response in server.py code:
 [(101, 16, 'Alberto_Contador'), (87, 6, 'France')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Luis Gutierrez']
response in server.py code:
 [(48, 8, 'Illinois'), (69, 14, 'Luis_Gutiérrez')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Gabriele']
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Giovanni Trapattoni']
response in server.py code:
 [(159, 19, 'Giovanni_Trapattoni'), (4, 31, 'Football_Association_of_Ireland')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(90, 11, 'Appalachian_Mountains')]
given spans fix. original text:  About a dozen members of the pro-Beijing Hong Kong Federation of Trade Unions waved Chinese flags and chanted slogans such as `` Down with Japanese militarism '' and `` Get out of our Diaoyu Islands '' , the Chinese name for what Japan calls Senkaku .
original word:  Japanese Japanese
new split:  Japan  and  ese
[(0, 5), (6, 7), (8, 13), (14, 21), (22, 24), (25, 28), (29, 40), (41, 45), (46, 50), (51, 61), (62, 64), (65, 70), (71, 77), (78, 83), (84, 91), (92, 97), (98, 101), (102, 109), (110, 117), (118, 122), (123, 125), (126, 128), (129, 133), (134, 138), (139, 144), (144, 147)]
{0: 0, 65: 11, 6: 1, 71: 12, 8: 2, 139: 24, 78: 13, 144: 25, 84: 14, 46: 8, 22: 4, 25: 5, 92: 15, 29: 6, 98: 16, 134: 23, 102: 17, 129: 22, 41: 7, 14: 3, 110: 18, 51: 9, 126: 21, 118: 19, 123: 20, 62: 10}
{64: 10, 128: 21, 5: 0, 70: 11, 7: 1, 138: 23, 13: 2, 77: 12, 45: 7, 144: 24, 83: 13, 21: 3, 24: 4, 91: 14, 28: 5, 133: 22, 97: 15, 101: 16, 40: 6, 109: 17, 61: 9, 50: 8, 147: 25, 117: 18, 122: 19, 125: 20}
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(139, 5, 'Japan'), (242, 7, 'Senkaku_Islands')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Victor Mendez']
response in server.py code:
 [(140, 30, 'Federal_Highway_Administration'), (177, 13, 'Victor_Mendez')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Larry Bradford']
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(33, 10, 'Washington,_D.C.')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Manuel Pastor']
response in server.py code:
 [(148, 13, 'Manuel_Torres_Pastor')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Mike Van Diest']
response in server.py code:
 [(0, 15, 'Carroll_University'), (27, 14, 'Mike_Van_Diest')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(243, 32, 'Financial_Supervisory_Commission_(Republic_of_China)'), (285, 2, 'Hu_Jintao')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(95, 18, 'Maine_State_Police')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Larry Fitzgerald']
response in server.py code:
 [(62, 16, 'Larry_Fitzgerald'), (90, 6, 'Uganda')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Doc Holliday']
response in server.py code:
 [(88, 12, 'Doc_Holliday')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(14, 8, 'Columbus,_Ohio')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(48, 25, 'Highland_Capital_Partners')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(188, 4, 'American_Civil_Liberties_Union')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Dave Nagle']
response in server.py code:
 [(20, 4, 'ESPN')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 14, 'Executive_Yuan'), (28, 2, 'Hu_Jintao')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Ken Whisenhunt']
response in server.py code:
 [(47, 14, 'Ken_Whisenhunt'), (31, 9, 'St._Louis_Cardinals')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(177, 21, 'Amnesty_International')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(43, 12, 'Joint_Chiefs_of_Staff')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(41, 12, 'Hanwha')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(58, 4, 'Cain_and_Abel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(37, 22, 'Michigan_Supreme_Court')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(171, 3, 'Federal_Bureau_of_Investigation')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bobby Valentine']
response in server.py code:
 [(23, 15, 'Bobby_Valentine'), (0, 14, 'Boston_Red_Sox')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Jesse Levine', 'Donald Young']
response in server.py code:
 [(210, 12, 'Jesse_Levine'), (228, 12, 'Donald_Young_(tennis)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Manny Acta']
response in server.py code:
 [(65, 10, 'Manny_Acta'), (49, 7, 'Cleveland_Indians')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Donna Williams']
response in server.py code:
 [(0, 14, 'Neopets')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Doc Holliday']
response in server.py code:
 [(39, 12, 'Doc_Holliday')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Fikile Mbalula', 'Semenya']
response in server.py code:
 [(32, 14, 'Fikile_Mbalula'), (55, 7, 'Caster_Semenya')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ["Peter O'Malley"]
response in server.py code:
 [(105, 14, "Peter_O'Malley"), (79, 19, 'Los_Angeles_Dodgers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Gary Edwards']
response in server.py code:
 [(192, 12, 'Gary_Edwards_(ice_hockey)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Andrew Strauss']
response in server.py code:
 [(87, 14, 'Andrew_Strauss'), (71, 7, 'England_cricket_team')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['John Hall']
response in server.py code:
 [(28, 12, 'Dish_Network')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Helen Gurley Brown']
response in server.py code:
 [(57, 18, 'Helen_Gurley_Brown'), (44, 5, 'Cosmopolitan_(magazine)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(43, 12, 'Joint_Chiefs_of_Staff')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(124, 31, 'National_Hydropower_Association')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(55, 3, 'Republican_Party_(United_States)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Mitt Romney']
response in server.py code:
 [(36, 11, 'Mitt_Romney'), (9, 3, 'Republican_Party_(United_States)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(49, 8, 'Honolulu')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Lars Boom']
response in server.py code:
 [(12, 9, 'Lars_Boom'), (30, 10, 'Eneco_Tour')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(115, 17, 'Medical_statistics')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Victor Mendez']
response in server.py code:
 [(184, 13, 'Victor_Mendez'), (147, 30, 'Federal_Highway_Administration')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(38, 14, 'Mooselookmeguntic_Lake')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(25, 8, 'San_Francisco_Bay_Area')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Abdul Matin']
response in server.py code:
 [(0, 11, 'Abdul_Matin_(language_activist)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(18, 16, 'Cherokee_Village,_Arkansas'), (50, 20, 'Highland_High_School_(Pocatello,_Idaho)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(156, 29, 'Geothermal_Energy_Association')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Andrew Strauss']
response in server.py code:
 [(52, 14, 'Andrew_Strauss'), (36, 7, 'England_cricket_team')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Jerry Rice']
response in server.py code:
 [(22, 10, 'Jerry_Rice')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Victor Conte']
response in server.py code:
 [(29, 12, 'Victor_Conte'), (15, 5, 'Bay_Area_Laboratory_Co-operative')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(80, 14, 'Oakland_County,_Michigan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Clinton', 'Craig Johnson']
response in server.py code:
 [(0, 7, 'Bill_Clinton'), (21, 13, 'Craig_M._Johnson')]
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(17, 8, 'November')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['David Eby']
response in server.py code:
 [(69, 9, 'David_Eby')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Pennsylvania_House_of_Representatives')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 17, 'Evercore_Partners')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['McKain']
response in server.py code:
 [(125, 12, 'Indianapolis')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(114, 8, 'Roseburg,_Oregon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Amina']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(77, 10, 'Daily_News_(New_York)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Cesare Prandelli']
response in server.py code:
 [(100, 5, 'Italy'), (112, 16, 'Cesare_Prandelli')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Michael Campbell']
response in server.py code:
 [(273, 16, 'Michael_Campbell'), (237, 25, 'Bureau_of_Land_Management')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Darrell Brock']
response in server.py code:
 [(244, 16, 'Republican_Party_(United_States)'), (212, 13, 'Darrell_Brock_Jr.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Angel Di Maria']
response in server.py code:
 [(193, 14, 'Ángel_di_María'), (177, 6, 'Madrid')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Les Miles']
response in server.py code:
 [(10, 9, 'Les_Miles'), (0, 3, 'Louisiana_State_University')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Adelson']
response in server.py code:
 [(32, 7, 'Sheldon_Adelson'), (50, 6, 'Miriam')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Tom Thibodeau']
response in server.py code:
 [(38, 13, 'Tom_Thibodeau'), (26, 5, 'Chicago_Bulls')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Liddell']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Boomer Esiason']
response in server.py code:
 [(42, 14, 'Boomer_Esiason'), (23, 10, 'CBS_Sports')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 6, 'Bustos,_Bulacan')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Benhabib']
response in server.py code:
 [(153, 8, 'Gatineau'), (129, 8, 'Seyla_Benhabib')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Romeo Crennel']
response in server.py code:
 [(132, 13, 'Romeo_Crennel'), (116, 9, 'Cleveland')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(53, 13, 'West_Virginia'), (22, 17, 'American_Electric_Power')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(37, 7, 'October')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Les Miles']
response in server.py code:
 [(111, 9, 'Les_Miles')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Cecile Richards']
response in server.py code:
 [(31, 29, 'Planned_Parenthood'), (0, 15, 'Cecile_Richards')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(135, 21, 'Mohr_Davidow_Ventures')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Dr. Moran']
response in server.py code:
 [(29, 24, 'New_York_Medical_College'), (0, 9, 'Patrick_Francis_Moran')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['McCarran', 'Chris Jones']
response in server.py code:
 [(214, 8, 'Pat_McCarran')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(167, 16, 'Ministry_of_Defense_(Israel)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(58, 9, 'Mogadishu'), (33, 10, 'Al_Shabab_FC_(Riyadh)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Mitt Romney']
response in server.py code:
 [(41, 11, 'Mitt_Romney'), (14, 3, 'Republican_Party_(United_States)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(24, 4, 'United_States_Army')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bo Xilai']
response in server.py code:
 [(164, 8, 'Bo_Xilai'), (141, 15, 'Communist_party')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(21, 11, 'Middle_East')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Chad Johnson']
response in server.py code:
 [(27, 12, 'Chad_Johnson_(American_football)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Madonna']
response in server.py code:
 [(78, 9, 'Deputy_Prime_Minister_of_Canada'), (94, 7, 'Madonna_(entertainer)')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(255, 9, 'BlueScope_Steel')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(89, 5, 'China'), (178, 6, 'Senkaku_Islands')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(166, 14, 'AC/DC')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(15, 8, 'Portland,_Oregon')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Chris Wood']
response in server.py code:
 [(72, 10, 'Chris_Wood_(golfer)')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Baffert']
response in server.py code:
 [(0, 7, 'Bob_Baffert')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(12, 4, 'KHOU')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(84, 16, 'Kelley_Blue_Book')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(35, 7, 'Gannett_Company')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Anand Kumar']
response in server.py code:
 [(34, 11, 'Anand_Kumar')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Brinker']
response in server.py code:
 [(0, 7, 'Nancy_Brinker')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Jeff Bezos']
response in server.py code:
 [(74, 10, 'Jeff_Bezos'), (59, 6, 'Amazon.com')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Don Mattingly']
response in server.py code:
 [(68, 13, 'Don_Mattingly'), (52, 7, 'Los_Angeles_Dodgers')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['President Ma Ying-jeou']
response in server.py code:
 [(61, 22, 'Ma_Ying-jeou')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(17, 6, 'London'), (0, 5, 'Italy')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Felix Hernandez']
response in server.py code:
 [(36, 15, 'Félix_Hernández'), (64, 16, 'Seattle_Mariners')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Todd Watson']
response in server.py code:
 [(12, 11, 'Todd_Watson')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bobby Valentine']
response in server.py code:
 [(124, 15, 'Bobby_Valentine'), (155, 5, 'Yahoo!')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(69, 4, 'CNET')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Donny Schatz']
response in server.py code:
 [(35, 12, 'Donny_Schatz'), (56, 19, 'Knoxville_Nationals')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Melanie Sloan']
response in server.py code:
 [(126, 13, 'Melanie_Sloan'), (164, 52, 'Citizens_for_Responsibility_and_Ethics_in_Washington')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Brady Smith']
response in server.py code:
 [(0, 24, 'Coconino_National_Forest')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Steven Stamkos']
response in server.py code:
 [(58, 14, 'Steven_Stamkos')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(123, 4, 'American_Civil_Liberties_Union')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(10, 5, 'Nokia'), (0, 4, 'Elbit_Systems')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(421, 13, 'Orange_County,_California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['John Haire']
response in server.py code:
 [(129, 22, 'Edwards_Air_Force_Base'), (100, 10, 'John_Haire,_Baron_Haire_of_Whiteabbey')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(68, 7, 'Detroit')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['John Terry']
response in server.py code:
 [(16, 10, 'John_Terry'), (0, 7, 'Chelsea_F.C.')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(94, 12, 'Joint_Chiefs_of_Staff')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Leslie Moonves']
response in server.py code:
 [(32, 14, 'Leslie_Moonves'), (22, 3, 'CBS')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Fiore']
response in server.py code:
 [(93, 9, 'Boulevard,_California')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Josh Beckett']
response in server.py code:
 [(138, 12, 'Josh_Beckett'), (123, 9, 'Baltimore_Orioles')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Darrell Brock']
response in server.py code:
 [(53, 8, 'Kentucky'), (71, 13, 'Darrell_Brock_Jr.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Kusama']
response in server.py code:
 [(27, 8, 'New_York_City'), (9, 6, 'Yayoi_Kusama')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 15, 'British_Airways')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Herm Edwards']
response in server.py code:
 [(28, 12, 'Herman_Edwards'), (3, 18, 'Kansas_City_Chiefs')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bobby Valentine']
response in server.py code:
 [(23, 15, 'Bobby_Valentine'), (0, 14, 'Boston_Red_Sox')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Eric Wedge']
response in server.py code:
 [(71, 10, 'Eric_Wedge'), (54, 8, 'Seattle_Mariners')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Rico Brogna']
response in server.py code:
 [(34, 11, 'Rico_Brogna')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(132, 21, 'Boise_National_Forest')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Becky']
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 12, 'The_Detroit_News')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(0, 16, 'Associated_Press')]
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Charles Elachi']
response in server.py code:
 [(77, 14, 'Charles_Elachi'), (110, 25, 'Jet_Propulsion_Laboratory')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Steve Jobs']
response in server.py code:
 [(45, 10, 'Steve_Jobs'), (31, 5, 'Apple_Inc.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Bernard Hinault']
response in server.py code:
 [(137, 15, 'Bernard_Hinault')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(222, 6, 'Denver')]
response in server.py code:
 []
response in server.py code:
 []
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(71, 4, 'Washington,_D.C.')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = ['Galipeau']
response in server.py code:
 [(57, 20, 'Lewiston_High_School'), (33, 8, 'Royal_Galipeau')]
self.special_words_assertion_errors = 0
gm_idx_errors = 16
persons_mentions_seen = []
response in server.py code:
 [(111, 13, 'West_Virginia'), (80, 17, 'American_Electric_Power')]
